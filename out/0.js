(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./node_modules/@babel/runtime/helpers/construct.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/construct.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ \"./node_modules/@babel/runtime/helpers/setPrototypeOf.js\");\n\nvar isNativeReflectConstruct = __webpack_require__(/*! ./isNativeReflectConstruct.js */ \"./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jb25zdHJ1Y3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jb25zdHJ1Y3QuanM/YjE3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKTtcblxudmFyIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IHJlcXVpcmUoXCIuL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qc1wiKTtcblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBzZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jb25zdHJ1Y3QsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/construct.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeFunction.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeFunction.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pc05hdGl2ZUZ1bmN0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXNOYXRpdmVGdW5jdGlvbi5qcz9jNWY3Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2lzTmF0aXZlRnVuY3Rpb24sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/isNativeFunction.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanM/NmY4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nmodule.exports = _taggedTemplateLiteral, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90YWdnZWRUZW1wbGF0ZUxpdGVyYWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90YWdnZWRUZW1wbGF0ZUxpdGVyYWwuanM/NTY0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toArray.js":
/*!********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toArray.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles.js */ \"./node_modules/@babel/runtime/helpers/arrayWithHoles.js\");\n\nvar iterableToArray = __webpack_require__(/*! ./iterableToArray.js */ \"./node_modules/@babel/runtime/helpers/iterableToArray.js\");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\n\nvar nonIterableRest = __webpack_require__(/*! ./nonIterableRest.js */ \"./node_modules/@babel/runtime/helpers/nonIterableRest.js\");\n\nfunction _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}\n\nmodule.exports = _toArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0FycmF5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9BcnJheS5qcz80ODBmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzLmpzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5LmpzXCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiKTtcblxuZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/toArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf.js */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\");\n\nvar setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ \"./node_modules/@babel/runtime/helpers/setPrototypeOf.js\");\n\nvar isNativeFunction = __webpack_require__(/*! ./isNativeFunction.js */ \"./node_modules/@babel/runtime/helpers/isNativeFunction.js\");\n\nvar construct = __webpack_require__(/*! ./construct.js */ \"./node_modules/@babel/runtime/helpers/construct.js\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy93cmFwTmF0aXZlU3VwZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy93cmFwTmF0aXZlU3VwZXIuanM/YTEyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9nZXRQcm90b3R5cGVPZi5qc1wiKTtcblxudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2YuanNcIik7XG5cbnZhciBpc05hdGl2ZUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vaXNOYXRpdmVGdW5jdGlvbi5qc1wiKTtcblxudmFyIGNvbnN0cnVjdCA9IHJlcXVpcmUoXCIuL2NvbnN0cnVjdC5qc1wiKTtcblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIWlzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIGdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfd3JhcE5hdGl2ZVN1cGVyLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/wrapNativeSuper.js\n");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcz8xZmI1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzPzkxNTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzP2UzZGIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/punycode/punycode.js":
/*!*******************************************!*\
  !*** ./node_modules/punycode/punycode.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports =  true && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule =  true && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttrue\n\t) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\t\treturn punycode;\n\t\t}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n\n}(this));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module), __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/punycode/punycode.js\n");

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZGVjb2RlLmpzPzkxZGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/querystring-es3/decode.js\n");

/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZW5jb2RlLmpzP2UwOTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5mdW5jdGlvbiBtYXAgKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHJldHVybiB4cy5tYXAoZik7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/querystring-es3/encode.js\n");

/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.decode = exports.parse = __webpack_require__(/*! ./decode */ \"./node_modules/querystring-es3/decode.js\");\nexports.encode = exports.stringify = __webpack_require__(/*! ./encode */ \"./node_modules/querystring-es3/encode.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcz9iMzgzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/querystring-es3/index.js\n");

/***/ }),

/***/ "./node_modules/svelte/compiler.mjs":
/*!******************************************!*\
  !*** ./node_modules/svelte/compiler.mjs ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, Buffer) {var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.VERSION=void 0;exports.compile=compile;exports.parse=parse$3;exports.preprocess=preprocess;exports.walk=walk;var _regenerator=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\"));var _asyncToGenerator2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));var _get2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ \"./node_modules/@babel/runtime/helpers/get.js\"));var _assertThisInitialized2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/assertThisInitialized.js\"));var _taggedTemplateLiteral2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/taggedTemplateLiteral */ \"./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\"));var _wrapNativeSuper2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ \"./node_modules/@babel/runtime/helpers/wrapNativeSuper.js\"));var _toArray2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toArray */ \"./node_modules/@babel/runtime/helpers/toArray.js\"));var _defineProperty2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));var _toConsumableArray2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));var _slicedToArray2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\"));var _inherits2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits.js\"));var _possibleConstructorReturn2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\"));var _getPrototypeOf2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\"));var _typeof2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));var _classCallCheck2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\"));var _createClass2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\"));var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject10,_templateObject11,_templateObject12,_templateObject13,_templateObject14,_templateObject15,_templateObject16,_templateObject17,_templateObject18,_templateObject19,_templateObject20,_templateObject21,_templateObject22,_templateObject23,_templateObject24,_templateObject25,_templateObject26,_templateObject27,_templateObject28,_templateObject29,_templateObject30,_templateObject31,_templateObject32,_templateObject33,_templateObject34,_templateObject35,_templateObject36,_templateObject37,_templateObject38,_templateObject39,_templateObject40,_templateObject41,_templateObject42,_templateObject43,_templateObject44,_templateObject45,_templateObject46,_templateObject47,_templateObject48,_templateObject49,_templateObject50,_templateObject51,_templateObject52,_templateObject53,_templateObject54,_templateObject55,_templateObject56,_templateObject57,_templateObject58,_templateObject59,_templateObject60,_templateObject61,_templateObject62,_templateObject63,_templateObject64,_templateObject65,_templateObject66,_templateObject67,_templateObject68,_templateObject69,_templateObject70,_templateObject71,_templateObject72,_templateObject73,_templateObject74,_templateObject75,_templateObject76,_templateObject77,_templateObject78,_templateObject79,_templateObject80,_templateObject81,_templateObject82,_templateObject83,_templateObject84,_templateObject85,_templateObject86,_templateObject87,_templateObject88,_templateObject89,_templateObject90,_templateObject91,_templateObject92,_templateObject93,_templateObject94,_templateObject95,_templateObject96,_templateObject97,_templateObject98,_templateObject99,_templateObject100,_templateObject101,_templateObject102,_templateObject103,_templateObject104,_templateObject105,_templateObject106,_templateObject107,_templateObject108,_templateObject109,_templateObject110,_templateObject111,_templateObject112,_templateObject113,_templateObject114,_templateObject115,_templateObject116,_templateObject117,_templateObject118,_templateObject119,_templateObject120,_templateObject121,_templateObject122,_templateObject123,_templateObject124,_templateObject125,_templateObject126,_templateObject127,_templateObject128,_templateObject129,_templateObject130,_templateObject131,_templateObject132,_templateObject133,_templateObject134,_templateObject135,_templateObject136,_templateObject137,_templateObject138,_templateObject139,_templateObject140,_templateObject141,_templateObject142,_templateObject143,_templateObject144,_templateObject145,_templateObject146,_templateObject147,_templateObject148,_templateObject149,_templateObject150,_templateObject151,_templateObject152,_templateObject153,_templateObject154,_templateObject155,_templateObject156,_templateObject157,_templateObject158,_templateObject159,_templateObject160,_templateObject161,_templateObject162,_templateObject163,_templateObject164,_templateObject165,_templateObject166,_templateObject167,_templateObject168,_templateObject169,_templateObject170,_templateObject171,_templateObject172,_templateObject173,_templateObject174,_templateObject175,_templateObject176,_templateObject177,_templateObject178,_templateObject179,_templateObject180,_templateObject181,_templateObject182,_templateObject183,_templateObject184,_templateObject185,_templateObject186,_templateObject187,_templateObject188,_templateObject189,_templateObject190,_templateObject191,_templateObject192,_templateObject193,_templateObject194,_templateObject195,_templateObject196,_templateObject197,_templateObject198,_templateObject199,_templateObject200,_templateObject201,_templateObject202,_templateObject203,_templateObject204,_templateObject205,_templateObject206,_templateObject207,_templateObject208,_templateObject209,_templateObject210,_templateObject211,_templateObject212,_templateObject213,_templateObject214,_templateObject215,_templateObject216,_templateObject217,_templateObject218,_templateObject219,_templateObject220,_templateObject221,_templateObject222,_templateObject223,_templateObject224,_templateObject225,_templateObject226,_templateObject227,_templateObject228,_templateObject229,_templateObject230,_templateObject231,_templateObject232,_templateObject233,_templateObject234,_templateObject235,_templateObject236,_templateObject237,_templateObject238,_templateObject239,_templateObject240,_templateObject241,_templateObject242,_templateObject243,_templateObject244,_templateObject245,_templateObject246,_templateObject247,_templateObject248,_templateObject249,_templateObject250,_templateObject251,_templateObject252,_templateObject253,_templateObject254,_templateObject255,_templateObject256,_templateObject257,_templateObject258,_templateObject259,_templateObject260,_templateObject261,_templateObject262,_templateObject263,_templateObject264,_templateObject265,_templateObject266,_templateObject267,_templateObject268,_templateObject269,_templateObject270,_templateObject271,_templateObject272,_templateObject273,_templateObject274,_templateObject275,_templateObject276,_templateObject277,_templateObject278,_templateObject279,_templateObject280,_templateObject281,_templateObject282,_templateObject283,_templateObject284,_templateObject285,_templateObject286,_templateObject287,_templateObject288,_templateObject289,_templateObject290,_templateObject291,_templateObject292,_templateObject293,_templateObject294,_templateObject295,_templateObject296,_templateObject297,_templateObject298,_templateObject299,_templateObject300,_templateObject301,_templateObject302,_templateObject303,_templateObject304,_templateObject305,_templateObject306,_templateObject307,_templateObject308,_templateObject309,_templateObject310,_templateObject311,_templateObject312,_templateObject313,_templateObject314,_templateObject315,_templateObject316,_templateObject317,_templateObject318,_templateObject319,_templateObject320,_templateObject321,_templateObject322,_templateObject323,_templateObject324,_templateObject325,_templateObject326,_templateObject327,_templateObject328,_templateObject329,_templateObject330,_templateObject331,_templateObject332,_templateObject333,_templateObject334,_templateObject335,_templateObject336,_templateObject337,_templateObject338,_templateObject339,_templateObject340,_templateObject341,_templateObject342,_templateObject343,_templateObject344,_templateObject345,_templateObject346,_templateObject347,_templateObject348,_templateObject349,_templateObject350,_templateObject351,_templateObject352,_templateObject353,_templateObject354,_templateObject355,_templateObject356,_templateObject357,_templateObject358,_templateObject359,_templateObject360,_templateObject361,_templateObject362,_templateObject363,_templateObject364,_templateObject365,_templateObject366,_templateObject367,_templateObject368,_templateObject369,_templateObject370,_templateObject371,_templateObject372,_templateObject373,_templateObject374,_templateObject375,_templateObject376,_templateObject377,_templateObject378,_templateObject379,_templateObject380,_templateObject381,_templateObject382,_templateObject383,_templateObject384,_templateObject385,_templateObject386,_templateObject387,_templateObject388,_templateObject389,_templateObject390,_templateObject391,_templateObject392,_templateObject393,_templateObject394,_templateObject395,_templateObject396,_templateObject397,_templateObject398,_templateObject399,_templateObject400,_templateObject401,_templateObject402,_templateObject403,_templateObject404,_templateObject405,_templateObject406,_templateObject407,_templateObject408,_templateObject409,_templateObject410,_templateObject411,_templateObject412,_templateObject413,_templateObject414,_templateObject415,_templateObject416,_templateObject417,_templateObject418,_templateObject419,_templateObject420,_templateObject421,_templateObject422,_templateObject423,_templateObject424,_templateObject425,_templateObject426,_templateObject427,_templateObject428,_templateObject429,_templateObject430,_templateObject431,_templateObject432,_templateObject433,_templateObject434,_templateObject435,_templateObject436,_templateObject437,_templateObject438,_templateObject439,_templateObject440,_templateObject441,_templateObject442,_templateObject443,_templateObject444,_templateObject445,_templateObject446,_templateObject447,_templateObject448,_templateObject449,_templateObject450,_templateObject451,_templateObject452,_templateObject453,_templateObject454,_templateObject455,_templateObject456,_templateObject457,_templateObject458,_templateObject459,_templateObject460,_templateObject461,_templateObject462,_templateObject463,_templateObject464,_templateObject465,_templateObject466,_templateObject467,_templateObject468,_templateObject469,_templateObject470,_templateObject471,_templateObject472,_templateObject473,_templateObject474,_templateObject475,_templateObject476,_templateObject477,_templateObject478,_templateObject479,_templateObject480,_templateObject481,_templateObject482,_templateObject483,_templateObject484,_templateObject485,_templateObject486,_templateObject487,_templateObject488,_templateObject489,_templateObject490,_templateObject491,_templateObject492,_templateObject493,_templateObject494,_templateObject495,_templateObject496,_templateObject497,_templateObject498,_templateObject499,_templateObject500,_templateObject501,_templateObject502,_templateObject503,_templateObject504,_templateObject505,_templateObject506,_templateObject507,_templateObject508,_templateObject509,_templateObject510,_templateObject511,_templateObject512,_templateObject513,_templateObject514,_templateObject515,_templateObject516,_templateObject517,_templateObject518,_templateObject519,_templateObject520,_templateObject521,_templateObject522,_templateObject523,_templateObject524,_templateObject525,_templateObject526,_templateObject527,_templateObject528,_templateObject529,_templateObject530,_templateObject531,_templateObject532,_templateObject533,_templateObject534,_templateObject535,_templateObject536,_templateObject537,_templateObject538,_templateObject539,_templateObject540,_templateObject541,_templateObject542,_templateObject543,_templateObject544,_templateObject545,_templateObject546,_templateObject547,_templateObject548,_templateObject549,_templateObject550,_templateObject551,_templateObject552,_templateObject553,_templateObject554,_templateObject555,_templateObject556,_templateObject557,_templateObject558,_templateObject559,_templateObject560,_templateObject561,_templateObject562,_templateObject563,_templateObject564,_templateObject565,_templateObject566,_templateObject567,_templateObject568,_templateObject569,_templateObject570,_templateObject571,_templateObject572,_templateObject573,_templateObject574,_templateObject575,_templateObject576,_templateObject577,_templateObject578,_templateObject579,_templateObject580,_templateObject581,_templateObject582,_templateObject583,_templateObject584,_templateObject585,_templateObject586,_templateObject587,_templateObject588,_templateObject589,_templateObject590,_templateObject591,_templateObject592,_templateObject593,_templateObject594,_templateObject595,_templateObject596,_templateObject597,_templateObject598,_templateObject599,_templateObject600,_templateObject601,_templateObject602,_templateObject603,_templateObject604,_templateObject605,_templateObject606,_templateObject607,_templateObject608,_templateObject609,_templateObject610,_templateObject611,_templateObject612,_templateObject613,_templateObject614,_templateObject615,_templateObject616,_templateObject617,_templateObject618,_templateObject619,_templateObject620,_templateObject621,_templateObject622,_templateObject623,_templateObject624,_templateObject625,_templateObject626,_templateObject627,_templateObject628,_templateObject629,_templateObject630,_templateObject631,_templateObject632,_templateObject633,_templateObject634,_templateObject635,_templateObject636,_templateObject637,_templateObject638,_templateObject639,_templateObject640,_templateObject641,_templateObject642,_templateObject643,_templateObject644,_templateObject645,_templateObject646,_templateObject647,_templateObject648,_templateObject649,_templateObject650,_templateObject651,_templateObject652,_templateObject653,_templateObject654,_templateObject655,_templateObject656,_templateObject657,_templateObject658,_templateObject659,_templateObject660,_templateObject661,_templateObject662,_templateObject663,_templateObject664,_templateObject665,_templateObject666,_templateObject667,_templateObject668,_templateObject669,_templateObject670,_templateObject671,_templateObject672,_templateObject673,_templateObject674,_templateObject675,_templateObject676,_templateObject677,_templateObject678,_templateObject679,_templateObject680,_templateObject681,_templateObject682,_templateObject683,_templateObject684,_templateObject685,_templateObject686,_templateObject687,_templateObject688,_templateObject689,_templateObject690,_templateObject691,_templateObject692,_templateObject693,_templateObject694,_templateObject695,_templateObject696,_templateObject697,_templateObject698,_templateObject699,_templateObject700,_templateObject701,_templateObject702,_templateObject703,_templateObject704,_templateObject705,_templateObject706,_templateObject707,_templateObject708,_templateObject709,_templateObject710,_templateObject711,_templateObject712,_templateObject713,_templateObject714,_templateObject715,_templateObject716,_templateObject717,_templateObject718,_templateObject719,_templateObject720,_templateObject721,_templateObject722,_templateObject723,_templateObject724,_templateObject725,_templateObject726,_templateObject727,_templateObject728,_templateObject729,_templateObject730,_templateObject731,_templateObject732,_templateObject733,_templateObject734,_templateObject735,_templateObject736,_templateObject737,_templateObject738,_templateObject739,_templateObject740,_templateObject741,_templateObject742,_templateObject743,_templateObject744,_templateObject745,_templateObject746,_templateObject747,_templateObject748,_templateObject749,_templateObject750,_templateObject751,_templateObject752,_templateObject753,_templateObject754,_templateObject755,_templateObject756,_templateObject757,_templateObject758,_templateObject759,_templateObject760,_templateObject761,_templateObject762,_templateObject763,_templateObject764,_templateObject765,_templateObject766,_templateObject767,_templateObject768,_templateObject769,_templateObject770,_templateObject771,_templateObject772,_templateObject773,_templateObject774,_templateObject775,_templateObject776,_templateObject777,_templateObject778,_templateObject779,_templateObject780,_templateObject781,_templateObject782,_templateObject783,_templateObject784,_templateObject785,_templateObject786,_templateObject787,_templateObject788,_templateObject789,_templateObject790,_templateObject791,_templateObject792,_templateObject793,_templateObject794,_templateObject795,_templateObject796,_templateObject797,_templateObject798;function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}var now=typeof process!=='undefined'&&process.hrtime?function(){var t=process.hrtime();return t[0]*1e3+t[1]/1e6;}:function(){return self.performance.now();};function collapse_timings(timings){var result={};timings.forEach(function(timing){result[timing.label]=Object.assign({total:timing.end-timing.start},timing.children&&collapse_timings(timing.children));});return result;}var Stats=/*#__PURE__*/function(){function Stats(){(0,_classCallCheck2.default)(this,Stats);this.start_time=now();this.stack=[];this.current_children=this.timings=[];}(0,_createClass2.default)(Stats,[{key:\"start\",value:function start(label){var timing={label:label,start:now(),end:null,children:[]};this.current_children.push(timing);this.stack.push(timing);this.current_timing=timing;this.current_children=timing.children;}},{key:\"stop\",value:function stop(label){if(label!==this.current_timing.label){throw new Error(\"Mismatched timing labels (expected \".concat(this.current_timing.label,\", got \").concat(label,\")\"));}this.current_timing.end=now();this.stack.pop();this.current_timing=this.stack[this.stack.length-1];this.current_children=this.current_timing?this.current_timing.children:this.timings;}},{key:\"render\",value:function render(){var timings=Object.assign({total:now()-this.start_time},collapse_timings(this.timings));return{timings:timings};}}]);return Stats;}();// Reserved word lists for various dialects of the language\nvar reservedWords={3:\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",5:\"class enum extends super const export import\",6:\"enum\",strict:\"implements interface let package private protected public static yield\",strictBind:\"eval arguments\"};// And the keywords\nvar ecma5AndLessKeywords=\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";var keywords={5:ecma5AndLessKeywords,\"5module\":ecma5AndLessKeywords+\" export import\",6:ecma5AndLessKeywords+\" const class extends export import super\"};var keywordRelationalOperator=/^in(stanceof)?$/;// ## Character categories\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar nonASCIIidentifierStartChars=\"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";var nonASCIIidentifierChars=\"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";var nonASCIIidentifierStart=new RegExp(\"[\"+nonASCIIidentifierStartChars+\"]\");var nonASCIIidentifier=new RegExp(\"[\"+nonASCIIidentifierStartChars+nonASCIIidentifierChars+\"]\");nonASCIIidentifierStartChars=nonASCIIidentifierChars=null;// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code,set){var pos=0x10000;for(var i=0;i<set.length;i+=2){pos+=set[i];if(pos>code){return false;}pos+=set[i+1];if(pos>=code){return true;}}}// Test whether a given character code starts an identifier.\nfunction isIdentifierStart(code,astral){if(code<65){return code===36;}if(code<91){return true;}if(code<97){return code===95;}if(code<123){return true;}if(code<=0xffff){return code>=0xaa&&nonASCIIidentifierStart.test(String.fromCharCode(code));}if(astral===false){return false;}return isInAstralSet(code,astralIdentifierStartCodes);}// Test whether a given character is part of an identifier.\nfunction isIdentifierChar(code,astral){if(code<48){return code===36;}if(code<58){return true;}if(code<65){return false;}if(code<91){return true;}if(code<97){return code===95;}if(code<123){return true;}if(code<=0xffff){return code>=0xaa&&nonASCIIidentifier.test(String.fromCharCode(code));}if(astral===false){return false;}return isInAstralSet(code,astralIdentifierStartCodes)||isInAstralSet(code,astralIdentifierCodes);}// ## Token types\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\nvar TokenType=function TokenType(label,conf){if(conf===void 0)conf={};this.label=label;this.keyword=conf.keyword;this.beforeExpr=!!conf.beforeExpr;this.startsExpr=!!conf.startsExpr;this.isLoop=!!conf.isLoop;this.isAssign=!!conf.isAssign;this.prefix=!!conf.prefix;this.postfix=!!conf.postfix;this.binop=conf.binop||null;this.updateContext=null;};function binop(name,prec){return new TokenType(name,{beforeExpr:true,binop:prec});}var beforeExpr={beforeExpr:true},startsExpr={startsExpr:true};// Map keyword names to token types.\nvar keywords$1={};// Succinct definitions of keyword token types\nfunction kw(name,options){if(options===void 0)options={};options.keyword=name;return keywords$1[name]=new TokenType(name,options);}var types={num:new TokenType(\"num\",startsExpr),regexp:new TokenType(\"regexp\",startsExpr),string:new TokenType(\"string\",startsExpr),name:new TokenType(\"name\",startsExpr),privateId:new TokenType(\"privateId\",startsExpr),eof:new TokenType(\"eof\"),// Punctuation token types.\nbracketL:new TokenType(\"[\",{beforeExpr:true,startsExpr:true}),bracketR:new TokenType(\"]\"),braceL:new TokenType(\"{\",{beforeExpr:true,startsExpr:true}),braceR:new TokenType(\"}\"),parenL:new TokenType(\"(\",{beforeExpr:true,startsExpr:true}),parenR:new TokenType(\")\"),comma:new TokenType(\",\",beforeExpr),semi:new TokenType(\";\",beforeExpr),colon:new TokenType(\":\",beforeExpr),dot:new TokenType(\".\"),question:new TokenType(\"?\",beforeExpr),questionDot:new TokenType(\"?.\"),arrow:new TokenType(\"=>\",beforeExpr),template:new TokenType(\"template\"),invalidTemplate:new TokenType(\"invalidTemplate\"),ellipsis:new TokenType(\"...\",beforeExpr),backQuote:new TokenType(\"`\",startsExpr),dollarBraceL:new TokenType(\"${\",{beforeExpr:true,startsExpr:true}),// Operators. These carry several kinds of properties to help the\n// parser use them properly (the presence of these properties is\n// what categorizes them as operators).\n//\n// `binop`, when present, specifies that this operator is a binary\n// operator, and will refer to its precedence.\n//\n// `prefix` and `postfix` mark the operator as a prefix or postfix\n// unary operator.\n//\n// `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n// binary operators with a very low precedence, that should result\n// in AssignmentExpression nodes.\neq:new TokenType(\"=\",{beforeExpr:true,isAssign:true}),assign:new TokenType(\"_=\",{beforeExpr:true,isAssign:true}),incDec:new TokenType(\"++/--\",{prefix:true,postfix:true,startsExpr:true}),prefix:new TokenType(\"!/~\",{beforeExpr:true,prefix:true,startsExpr:true}),logicalOR:binop(\"||\",1),logicalAND:binop(\"&&\",2),bitwiseOR:binop(\"|\",3),bitwiseXOR:binop(\"^\",4),bitwiseAND:binop(\"&\",5),equality:binop(\"==/!=/===/!==\",6),relational:binop(\"</>/<=/>=\",7),bitShift:binop(\"<</>>/>>>\",8),plusMin:new TokenType(\"+/-\",{beforeExpr:true,binop:9,prefix:true,startsExpr:true}),modulo:binop(\"%\",10),star:binop(\"*\",10),slash:binop(\"/\",10),starstar:new TokenType(\"**\",{beforeExpr:true}),coalesce:binop(\"??\",1),// Keyword token types.\n_break:kw(\"break\"),_case:kw(\"case\",beforeExpr),_catch:kw(\"catch\"),_continue:kw(\"continue\"),_debugger:kw(\"debugger\"),_default:kw(\"default\",beforeExpr),_do:kw(\"do\",{isLoop:true,beforeExpr:true}),_else:kw(\"else\",beforeExpr),_finally:kw(\"finally\"),_for:kw(\"for\",{isLoop:true}),_function:kw(\"function\",startsExpr),_if:kw(\"if\"),_return:kw(\"return\",beforeExpr),_switch:kw(\"switch\"),_throw:kw(\"throw\",beforeExpr),_try:kw(\"try\"),_var:kw(\"var\"),_const:kw(\"const\"),_while:kw(\"while\",{isLoop:true}),_with:kw(\"with\"),_new:kw(\"new\",{beforeExpr:true,startsExpr:true}),_this:kw(\"this\",startsExpr),_super:kw(\"super\",startsExpr),_class:kw(\"class\",startsExpr),_extends:kw(\"extends\",beforeExpr),_export:kw(\"export\"),_import:kw(\"import\",startsExpr),_null:kw(\"null\",startsExpr),_true:kw(\"true\",startsExpr),_false:kw(\"false\",startsExpr),_in:kw(\"in\",{beforeExpr:true,binop:7}),_instanceof:kw(\"instanceof\",{beforeExpr:true,binop:7}),_typeof:kw(\"typeof\",{beforeExpr:true,prefix:true,startsExpr:true}),_void:kw(\"void\",{beforeExpr:true,prefix:true,startsExpr:true}),_delete:kw(\"delete\",{beforeExpr:true,prefix:true,startsExpr:true})};// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nvar lineBreak=/\\r\\n?|\\n|\\u2028|\\u2029/;var lineBreakG=new RegExp(lineBreak.source,\"g\");function isNewLine(code,ecma2019String){return code===10||code===13||!ecma2019String&&(code===0x2028||code===0x2029);}var nonASCIIwhitespace=/[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;var skipWhiteSpace=/(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;var ref=Object.prototype;var hasOwnProperty=ref.hasOwnProperty;var toString=ref.toString;// Checks if an object has a property.\nfunction has(obj,propName){return hasOwnProperty.call(obj,propName);}var isArray=Array.isArray||function(obj){return toString.call(obj)===\"[object Array]\";};function wordsRegexp(words){return new RegExp(\"^(?:\"+words.replace(/ /g,\"|\")+\")$\");}// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\nvar Position=function Position(line,col){this.line=line;this.column=col;};Position.prototype.offset=function offset(n){return new Position(this.line,this.column+n);};var SourceLocation=function SourceLocation(p,start,end){this.start=start;this.end=end;if(p.sourceFile!==null){this.source=p.sourceFile;}};// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\nfunction getLineInfo(input,offset){for(var line=1,cur=0;;){lineBreakG.lastIndex=cur;var match=lineBreakG.exec(input);if(match&&match.index<offset){++line;cur=match.index+match[0].length;}else{return new Position(line,offset-cur);}}}// A second argument must be given to configure the parser process.\n// These options are recognized (only `ecmaVersion` is required):\nvar defaultOptions={// `ecmaVersion` indicates the ECMAScript version to parse. Must be\n// either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n// (2019), 11 (2020), 12 (2021), 13 (2022), or `\"latest\"` (the\n// latest version the library supports). This influences support\n// for strict mode, the set of reserved words, and support for\n// new syntax features.\necmaVersion:null,// `sourceType` indicates the mode the code should be parsed in.\n// Can be either `\"script\"` or `\"module\"`. This influences global\n// strict mode and parsing of `import` and `export` declarations.\nsourceType:\"script\",// `onInsertedSemicolon` can be a callback that will be called\n// when a semicolon is automatically inserted. It will be passed\n// the position of the comma as an offset, and if `locations` is\n// enabled, it is given the location as a `{line, column}` object\n// as second argument.\nonInsertedSemicolon:null,// `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n// trailing commas.\nonTrailingComma:null,// By default, reserved words are only enforced if ecmaVersion >= 5.\n// Set `allowReserved` to a boolean value to explicitly turn this on\n// an off. When this option has the value \"never\", reserved words\n// and keywords can also not be used as property names.\nallowReserved:null,// When enabled, a return at the top level is not considered an\n// error.\nallowReturnOutsideFunction:false,// When enabled, import/export statements are not constrained to\n// appearing at the top of the program, and an import.meta expression\n// in a script isn't considered an error.\nallowImportExportEverywhere:false,// By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n// When enabled, await identifiers are allowed to appear at the top-level scope,\n// but they are still not allowed in non-async functions.\nallowAwaitOutsideFunction:null,// When enabled, super identifiers are not constrained to\n// appearing in methods and do not raise an error when they appear elsewhere.\nallowSuperOutsideMethod:null,// When enabled, hashbang directive in the beginning of file\n// is allowed and treated as a line comment.\nallowHashBang:false,// When `locations` is on, `loc` properties holding objects with\n// `start` and `end` properties in `{line, column}` form (with\n// line being 1-based and column 0-based) will be attached to the\n// nodes.\nlocations:false,// A function can be passed as `onToken` option, which will\n// cause Acorn to call that function with object in the same\n// format as tokens returned from `tokenizer().getToken()`. Note\n// that you are not allowed to call the parser from the\n// callback—that will corrupt its internal state.\nonToken:null,// A function can be passed as `onComment` option, which will\n// cause Acorn to call that function with `(block, text, start,\n// end)` parameters whenever a comment is skipped. `block` is a\n// boolean indicating whether this is a block (`/* */`) comment,\n// `text` is the content of the comment, and `start` and `end` are\n// character offsets that denote the start and end of the comment.\n// When the `locations` option is on, two more parameters are\n// passed, the full `{line, column}` locations of the start and\n// end of the comments. Note that you are not allowed to call the\n// parser from the callback—that will corrupt its internal state.\nonComment:null,// Nodes have their start and end characters offsets recorded in\n// `start` and `end` properties (directly on the node, rather than\n// the `loc` object, which holds line/column data. To also add a\n// [semi-standardized][range] `range` property holding a `[start,\n// end]` array with the same numbers, set the `ranges` option to\n// `true`.\n//\n// [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\nranges:false,// It is possible to parse multiple files into a single AST by\n// passing the tree produced by parsing the first file as\n// `program` option in subsequent parses. This will add the\n// toplevel forms of the parsed file to the `Program` (top) node\n// of an existing parse tree.\nprogram:null,// When `locations` is on, you can pass this to record the source\n// file in every node's `loc` object.\nsourceFile:null,// This value, if given, is stored in every node, whether\n// `locations` is on or off.\ndirectSourceFile:null,// When enabled, parenthesized expressions are represented by\n// (non-standard) ParenthesizedExpression nodes\npreserveParens:false};// Interpret and default an options object\nvar warnedAboutEcmaVersion=false;function getOptions(opts){var options={};for(var opt in defaultOptions){options[opt]=opts&&has(opts,opt)?opts[opt]:defaultOptions[opt];}if(options.ecmaVersion===\"latest\"){options.ecmaVersion=1e8;}else if(options.ecmaVersion==null){if(!warnedAboutEcmaVersion&&(typeof console===\"undefined\"?\"undefined\":(0,_typeof2.default)(console))===\"object\"&&console.warn){warnedAboutEcmaVersion=true;console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");}options.ecmaVersion=11;}else if(options.ecmaVersion>=2015){options.ecmaVersion-=2009;}if(options.allowReserved==null){options.allowReserved=options.ecmaVersion<5;}if(isArray(options.onToken)){var tokens=options.onToken;options.onToken=function(token){return tokens.push(token);};}if(isArray(options.onComment)){options.onComment=pushComment(options,options.onComment);}return options;}function pushComment(options,array){return function(block,text,start,end,startLoc,endLoc){var comment={type:block?\"Block\":\"Line\",value:text,start:start,end:end};if(options.locations){comment.loc=new SourceLocation(this,startLoc,endLoc);}if(options.ranges){comment.range=[start,end];}array.push(comment);};}// Each scope gets a bitset that may contain these flags\nvar SCOPE_TOP=1,SCOPE_FUNCTION=2,SCOPE_VAR=SCOPE_TOP|SCOPE_FUNCTION,SCOPE_ASYNC=4,SCOPE_GENERATOR=8,SCOPE_ARROW=16,SCOPE_SIMPLE_CATCH=32,SCOPE_SUPER=64,SCOPE_DIRECT_SUPER=128;function functionFlags(async,generator){return SCOPE_FUNCTION|(async?SCOPE_ASYNC:0)|(generator?SCOPE_GENERATOR:0);}// Used in checkLVal* and declareName to determine the type of a binding\nvar BIND_NONE=0,// Not a binding\nBIND_VAR=1,// Var-style binding\nBIND_LEXICAL=2,// Let- or const-style binding\nBIND_FUNCTION=3,// Function declaration\nBIND_SIMPLE_CATCH=4,// Simple (identifier pattern) catch binding\nBIND_OUTSIDE=5;// Special case for function names as bound inside the function\nvar Parser=function Parser(options,input,startPos){this.options=options=getOptions(options);this.sourceFile=options.sourceFile;this.keywords=wordsRegexp(keywords[options.ecmaVersion>=6?6:options.sourceType===\"module\"?\"5module\":5]);var reserved=\"\";if(options.allowReserved!==true){reserved=reservedWords[options.ecmaVersion>=6?6:options.ecmaVersion===5?5:3];if(options.sourceType===\"module\"){reserved+=\" await\";}}this.reservedWords=wordsRegexp(reserved);var reservedStrict=(reserved?reserved+\" \":\"\")+reservedWords.strict;this.reservedWordsStrict=wordsRegexp(reservedStrict);this.reservedWordsStrictBind=wordsRegexp(reservedStrict+\" \"+reservedWords.strictBind);this.input=String(input);// Used to signal to callers of `readWord1` whether the word\n// contained any escape sequences. This is needed because words with\n// escape sequences must not be interpreted as keywords.\nthis.containsEsc=false;// Set up token state\n// The current position of the tokenizer in the input.\nif(startPos){this.pos=startPos;this.lineStart=this.input.lastIndexOf(\"\\n\",startPos-1)+1;this.curLine=this.input.slice(0,this.lineStart).split(lineBreak).length;}else{this.pos=this.lineStart=0;this.curLine=1;}// Properties of the current token:\n// Its type\nthis.type=types.eof;// For tokens that include more information than their type, the value\nthis.value=null;// Its start and end offset\nthis.start=this.end=this.pos;// And, if locations are used, the {line, column} object\n// corresponding to those offsets\nthis.startLoc=this.endLoc=this.curPosition();// Position information for the previous token\nthis.lastTokEndLoc=this.lastTokStartLoc=null;this.lastTokStart=this.lastTokEnd=this.pos;// The context stack is used to superficially track syntactic\n// context to predict whether a regular expression is allowed in a\n// given position.\nthis.context=this.initialContext();this.exprAllowed=true;// Figure out if it's a module code.\nthis.inModule=options.sourceType===\"module\";this.strict=this.inModule||this.strictDirective(this.pos);// Used to signify the start of a potential arrow function\nthis.potentialArrowAt=-1;this.potentialArrowInForAwait=false;// Positions to delayed-check that yield/await does not exist in default parameters.\nthis.yieldPos=this.awaitPos=this.awaitIdentPos=0;// Labels in scope.\nthis.labels=[];// Thus-far undefined exports.\nthis.undefinedExports=Object.create(null);// If enabled, skip leading hashbang line.\nif(this.pos===0&&options.allowHashBang&&this.input.slice(0,2)===\"#!\"){this.skipLineComment(2);}// Scope tracking for duplicate variable names (see scope.js)\nthis.scopeStack=[];this.enterScope(SCOPE_TOP);// For RegExp validation\nthis.regexpState=null;// The stack of private names.\n// Each element has two properties: 'declared' and 'used'.\n// When it exited from the outermost class definition, all used private names must be declared.\nthis.privateNameStack=[];};var prototypeAccessors={inFunction:{configurable:true},inGenerator:{configurable:true},inAsync:{configurable:true},canAwait:{configurable:true},allowSuper:{configurable:true},allowDirectSuper:{configurable:true},treatFunctionsAsVar:{configurable:true},inNonArrowFunction:{configurable:true}};Parser.prototype.parse=function parse(){var node=this.options.program||this.startNode();this.nextToken();return this.parseTopLevel(node);};prototypeAccessors.inFunction.get=function(){return(this.currentVarScope().flags&SCOPE_FUNCTION)>0;};prototypeAccessors.inGenerator.get=function(){return(this.currentVarScope().flags&SCOPE_GENERATOR)>0&&!this.currentVarScope().inClassFieldInit;};prototypeAccessors.inAsync.get=function(){return(this.currentVarScope().flags&SCOPE_ASYNC)>0&&!this.currentVarScope().inClassFieldInit;};prototypeAccessors.canAwait.get=function(){for(var i=this.scopeStack.length-1;i>=0;i--){var scope=this.scopeStack[i];if(scope.inClassFieldInit){return false;}if(scope.flags&SCOPE_FUNCTION){return(scope.flags&SCOPE_ASYNC)>0;}}return this.inModule&&this.options.ecmaVersion>=13||this.options.allowAwaitOutsideFunction;};prototypeAccessors.allowSuper.get=function(){var ref=this.currentThisScope();var flags=ref.flags;var inClassFieldInit=ref.inClassFieldInit;return(flags&SCOPE_SUPER)>0||inClassFieldInit||this.options.allowSuperOutsideMethod;};prototypeAccessors.allowDirectSuper.get=function(){return(this.currentThisScope().flags&SCOPE_DIRECT_SUPER)>0;};prototypeAccessors.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope());};prototypeAccessors.inNonArrowFunction.get=function(){var ref=this.currentThisScope();var flags=ref.flags;var inClassFieldInit=ref.inClassFieldInit;return(flags&SCOPE_FUNCTION)>0||inClassFieldInit;};Parser.extend=function extend(){var plugins=[],len=arguments.length;while(len--){plugins[len]=arguments[len];}var cls=this;for(var i=0;i<plugins.length;i++){cls=plugins[i](cls);}return cls;};Parser.parse=function parse(input,options){return new this(options,input).parse();};Parser.parseExpressionAt=function parseExpressionAt(input,pos,options){var parser=new this(options,input,pos);parser.nextToken();return parser.parseExpression();};Parser.tokenizer=function tokenizer(input,options){return new this(options,input);};Object.defineProperties(Parser.prototype,prototypeAccessors);var pp=Parser.prototype;// ## Parser utilities\nvar literal=/^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;pp.strictDirective=function(start){for(;;){// Try to find string literal.\nskipWhiteSpace.lastIndex=start;start+=skipWhiteSpace.exec(this.input)[0].length;var match=literal.exec(this.input.slice(start));if(!match){return false;}if((match[1]||match[2])===\"use strict\"){skipWhiteSpace.lastIndex=start+match[0].length;var spaceAfter=skipWhiteSpace.exec(this.input),end=spaceAfter.index+spaceAfter[0].length;var next=this.input.charAt(end);return next===\";\"||next===\"}\"||lineBreak.test(spaceAfter[0])&&!(/[(`.[+\\-/*%<>=,?^&]/.test(next)||next===\"!\"&&this.input.charAt(end+1)===\"=\");}start+=match[0].length;// Skip semicolon, if any.\nskipWhiteSpace.lastIndex=start;start+=skipWhiteSpace.exec(this.input)[0].length;if(this.input[start]===\";\"){start++;}}};// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\npp.eat=function(type){if(this.type===type){this.next();return true;}else{return false;}};// Tests whether parsed token is a contextual keyword.\npp.isContextual=function(name){return this.type===types.name&&this.value===name&&!this.containsEsc;};// Consumes contextual keyword if possible.\npp.eatContextual=function(name){if(!this.isContextual(name)){return false;}this.next();return true;};// Asserts that following token is given contextual keyword.\npp.expectContextual=function(name){if(!this.eatContextual(name)){this.unexpected();}};// Test whether a semicolon can be inserted at the current position.\npp.canInsertSemicolon=function(){return this.type===types.eof||this.type===types.braceR||lineBreak.test(this.input.slice(this.lastTokEnd,this.start));};pp.insertSemicolon=function(){if(this.canInsertSemicolon()){if(this.options.onInsertedSemicolon){this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc);}return true;}};// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\npp.semicolon=function(){if(!this.eat(types.semi)&&!this.insertSemicolon()){this.unexpected();}};pp.afterTrailingComma=function(tokType,notNext){if(this.type===tokType){if(this.options.onTrailingComma){this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc);}if(!notNext){this.next();}return true;}};// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\npp.expect=function(type){this.eat(type)||this.unexpected();};// Raise an unexpected token error.\npp.unexpected=function(pos){this.raise(pos!=null?pos:this.start,\"Unexpected token\");};function DestructuringErrors(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1;}pp.checkPatternErrors=function(refDestructuringErrors,isAssign){if(!refDestructuringErrors){return;}if(refDestructuringErrors.trailingComma>-1){this.raiseRecoverable(refDestructuringErrors.trailingComma,\"Comma is not permitted after the rest element\");}var parens=isAssign?refDestructuringErrors.parenthesizedAssign:refDestructuringErrors.parenthesizedBind;if(parens>-1){this.raiseRecoverable(parens,\"Parenthesized pattern\");}};pp.checkExpressionErrors=function(refDestructuringErrors,andThrow){if(!refDestructuringErrors){return false;}var shorthandAssign=refDestructuringErrors.shorthandAssign;var doubleProto=refDestructuringErrors.doubleProto;if(!andThrow){return shorthandAssign>=0||doubleProto>=0;}if(shorthandAssign>=0){this.raise(shorthandAssign,\"Shorthand property assignments are valid only in destructuring patterns\");}if(doubleProto>=0){this.raiseRecoverable(doubleProto,\"Redefinition of __proto__ property\");}};pp.checkYieldAwaitInDefaultParams=function(){if(this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)){this.raise(this.yieldPos,\"Yield expression cannot be a default value\");}if(this.awaitPos){this.raise(this.awaitPos,\"Await expression cannot be a default value\");}};pp.isSimpleAssignTarget=function(expr){if(expr.type===\"ParenthesizedExpression\"){return this.isSimpleAssignTarget(expr.expression);}return expr.type===\"Identifier\"||expr.type===\"MemberExpression\";};var pp$1=Parser.prototype;// ### Statement parsing\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\npp$1.parseTopLevel=function(node){var exports=Object.create(null);if(!node.body){node.body=[];}while(this.type!==types.eof){var stmt=this.parseStatement(null,true,exports);node.body.push(stmt);}if(this.inModule){for(var i=0,list=Object.keys(this.undefinedExports);i<list.length;i+=1){var name=list[i];this.raiseRecoverable(this.undefinedExports[name].start,\"Export '\"+name+\"' is not defined\");}}this.adaptDirectivePrologue(node.body);this.next();node.sourceType=this.options.sourceType;return this.finishNode(node,\"Program\");};var loopLabel={kind:\"loop\"},switchLabel={kind:\"switch\"};pp$1.isLet=function(context){if(this.options.ecmaVersion<6||!this.isContextual(\"let\")){return false;}skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length,nextCh=this.input.charCodeAt(next);// For ambiguous cases, determine if a LexicalDeclaration (or only a\n// Statement) is allowed here. If context is not empty then only a Statement\n// is allowed. However, `let [` is an explicit negative lookahead for\n// ExpressionStatement, so special-case it first.\nif(nextCh===91||nextCh===92||nextCh>0xd7ff&&nextCh<0xdc00){return true;}// '[', '/', astral\nif(context){return false;}if(nextCh===123){return true;}// '{'\nif(isIdentifierStart(nextCh,true)){var pos=next+1;while(isIdentifierChar(nextCh=this.input.charCodeAt(pos),true)){++pos;}if(nextCh===92||nextCh>0xd7ff&&nextCh<0xdc00){return true;}var ident=this.input.slice(next,pos);if(!keywordRelationalOperator.test(ident)){return true;}}return false;};// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual(\"async\")){return false;}skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length,after;return!lineBreak.test(this.input.slice(this.pos,next))&&this.input.slice(next,next+8)===\"function\"&&(next+8===this.input.length||!(isIdentifierChar(after=this.input.charCodeAt(next+8))||after>0xd7ff&&after<0xdc00));};// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\npp$1.parseStatement=function(context,topLevel,exports){var starttype=this.type,node=this.startNode(),kind;if(this.isLet(context)){starttype=types._var;kind=\"let\";}// Most types of statements are recognized by the keyword they\n// start with. Many are trivial to parse, some require a bit of\n// complexity.\nswitch(starttype){case types._break:case types._continue:return this.parseBreakContinueStatement(node,starttype.keyword);case types._debugger:return this.parseDebuggerStatement(node);case types._do:return this.parseDoStatement(node);case types._for:return this.parseForStatement(node);case types._function:// Function as sole body of either an if statement or a labeled statement\n// works, but not when it is part of a labeled statement that is the sole\n// body of an if statement.\nif(context&&(this.strict||context!==\"if\"&&context!==\"label\")&&this.options.ecmaVersion>=6){this.unexpected();}return this.parseFunctionStatement(node,false,!context);case types._class:if(context){this.unexpected();}return this.parseClass(node,true);case types._if:return this.parseIfStatement(node);case types._return:return this.parseReturnStatement(node);case types._switch:return this.parseSwitchStatement(node);case types._throw:return this.parseThrowStatement(node);case types._try:return this.parseTryStatement(node);case types._const:case types._var:kind=kind||this.value;if(context&&kind!==\"var\"){this.unexpected();}return this.parseVarStatement(node,kind);case types._while:return this.parseWhileStatement(node);case types._with:return this.parseWithStatement(node);case types.braceL:return this.parseBlock(true,node);case types.semi:return this.parseEmptyStatement(node);case types._export:case types._import:if(this.options.ecmaVersion>10&&starttype===types._import){skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length,nextCh=this.input.charCodeAt(next);if(nextCh===40||nextCh===46)// '(' or '.'\n{return this.parseExpressionStatement(node,this.parseExpression());}}if(!this.options.allowImportExportEverywhere){if(!topLevel){this.raise(this.start,\"'import' and 'export' may only appear at the top level\");}if(!this.inModule){this.raise(this.start,\"'import' and 'export' may appear only with 'sourceType: module'\");}}return starttype===types._import?this.parseImport(node):this.parseExport(node,exports);// If the statement does not start with a statement keyword or a\n// brace, it's an ExpressionStatement or LabeledStatement. We\n// simply start parsing an expression, and afterwards, if the\n// next token is a colon and the expression was a simple\n// Identifier node, we switch to interpreting it as a label.\ndefault:if(this.isAsyncFunction()){if(context){this.unexpected();}this.next();return this.parseFunctionStatement(node,true,!context);}var maybeName=this.value,expr=this.parseExpression();if(starttype===types.name&&expr.type===\"Identifier\"&&this.eat(types.colon)){return this.parseLabeledStatement(node,maybeName,expr,context);}else{return this.parseExpressionStatement(node,expr);}}};pp$1.parseBreakContinueStatement=function(node,keyword){var isBreak=keyword===\"break\";this.next();if(this.eat(types.semi)||this.insertSemicolon()){node.label=null;}else if(this.type!==types.name){this.unexpected();}else{node.label=this.parseIdent();this.semicolon();}// Verify that there is an actual destination to break or\n// continue to.\nvar i=0;for(;i<this.labels.length;++i){var lab=this.labels[i];if(node.label==null||lab.name===node.label.name){if(lab.kind!=null&&(isBreak||lab.kind===\"loop\")){break;}if(node.label&&isBreak){break;}}}if(i===this.labels.length){this.raise(node.start,\"Unsyntactic \"+keyword);}return this.finishNode(node,isBreak?\"BreakStatement\":\"ContinueStatement\");};pp$1.parseDebuggerStatement=function(node){this.next();this.semicolon();return this.finishNode(node,\"DebuggerStatement\");};pp$1.parseDoStatement=function(node){this.next();this.labels.push(loopLabel);node.body=this.parseStatement(\"do\");this.labels.pop();this.expect(types._while);node.test=this.parseParenExpression();if(this.options.ecmaVersion>=6){this.eat(types.semi);}else{this.semicolon();}return this.finishNode(node,\"DoWhileStatement\");};// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\npp$1.parseForStatement=function(node){this.next();var awaitAt=this.options.ecmaVersion>=9&&this.canAwait&&this.eatContextual(\"await\")?this.lastTokStart:-1;this.labels.push(loopLabel);this.enterScope(0);this.expect(types.parenL);if(this.type===types.semi){if(awaitAt>-1){this.unexpected(awaitAt);}return this.parseFor(node,null);}var isLet=this.isLet();if(this.type===types._var||this.type===types._const||isLet){var init$1=this.startNode(),kind=isLet?\"let\":this.value;this.next();this.parseVar(init$1,true,kind);this.finishNode(init$1,\"VariableDeclaration\");if((this.type===types._in||this.options.ecmaVersion>=6&&this.isContextual(\"of\"))&&init$1.declarations.length===1){if(this.options.ecmaVersion>=9){if(this.type===types._in){if(awaitAt>-1){this.unexpected(awaitAt);}}else{node.await=awaitAt>-1;}}return this.parseForIn(node,init$1);}if(awaitAt>-1){this.unexpected(awaitAt);}return this.parseFor(node,init$1);}var refDestructuringErrors=new DestructuringErrors();var init=this.parseExpression(awaitAt>-1?\"await\":true,refDestructuringErrors);if(this.type===types._in||this.options.ecmaVersion>=6&&this.isContextual(\"of\")){if(this.options.ecmaVersion>=9){if(this.type===types._in){if(awaitAt>-1){this.unexpected(awaitAt);}}else{node.await=awaitAt>-1;}}this.toAssignable(init,false,refDestructuringErrors);this.checkLValPattern(init);return this.parseForIn(node,init);}else{this.checkExpressionErrors(refDestructuringErrors,true);}if(awaitAt>-1){this.unexpected(awaitAt);}return this.parseFor(node,init);};pp$1.parseFunctionStatement=function(node,isAsync,declarationPosition){this.next();return this.parseFunction(node,FUNC_STATEMENT|(declarationPosition?0:FUNC_HANGING_STATEMENT),false,isAsync);};pp$1.parseIfStatement=function(node){this.next();node.test=this.parseParenExpression();// allow function declarations in branches, but only in non-strict mode\nnode.consequent=this.parseStatement(\"if\");node.alternate=this.eat(types._else)?this.parseStatement(\"if\"):null;return this.finishNode(node,\"IfStatement\");};pp$1.parseReturnStatement=function(node){if(!this.inFunction&&!this.options.allowReturnOutsideFunction){this.raise(this.start,\"'return' outside of function\");}this.next();// In `return` (and `break`/`continue`), the keywords with\n// optional arguments, we eagerly look for a semicolon or the\n// possibility to insert one.\nif(this.eat(types.semi)||this.insertSemicolon()){node.argument=null;}else{node.argument=this.parseExpression();this.semicolon();}return this.finishNode(node,\"ReturnStatement\");};pp$1.parseSwitchStatement=function(node){this.next();node.discriminant=this.parseParenExpression();node.cases=[];this.expect(types.braceL);this.labels.push(switchLabel);this.enterScope(0);// Statements under must be grouped (by label) in SwitchCase\n// nodes. `cur` is used to keep the node that we are currently\n// adding statements to.\nvar cur;for(var sawDefault=false;this.type!==types.braceR;){if(this.type===types._case||this.type===types._default){var isCase=this.type===types._case;if(cur){this.finishNode(cur,\"SwitchCase\");}node.cases.push(cur=this.startNode());cur.consequent=[];this.next();if(isCase){cur.test=this.parseExpression();}else{if(sawDefault){this.raiseRecoverable(this.lastTokStart,\"Multiple default clauses\");}sawDefault=true;cur.test=null;}this.expect(types.colon);}else{if(!cur){this.unexpected();}cur.consequent.push(this.parseStatement(null));}}this.exitScope();if(cur){this.finishNode(cur,\"SwitchCase\");}this.next();// Closing brace\nthis.labels.pop();return this.finishNode(node,\"SwitchStatement\");};pp$1.parseThrowStatement=function(node){this.next();if(lineBreak.test(this.input.slice(this.lastTokEnd,this.start))){this.raise(this.lastTokEnd,\"Illegal newline after throw\");}node.argument=this.parseExpression();this.semicolon();return this.finishNode(node,\"ThrowStatement\");};// Reused empty array added for node fields that are always empty.\nvar empty=[];pp$1.parseTryStatement=function(node){this.next();node.block=this.parseBlock();node.handler=null;if(this.type===types._catch){var clause=this.startNode();this.next();if(this.eat(types.parenL)){clause.param=this.parseBindingAtom();var simple=clause.param.type===\"Identifier\";this.enterScope(simple?SCOPE_SIMPLE_CATCH:0);this.checkLValPattern(clause.param,simple?BIND_SIMPLE_CATCH:BIND_LEXICAL);this.expect(types.parenR);}else{if(this.options.ecmaVersion<10){this.unexpected();}clause.param=null;this.enterScope(0);}clause.body=this.parseBlock(false);this.exitScope();node.handler=this.finishNode(clause,\"CatchClause\");}node.finalizer=this.eat(types._finally)?this.parseBlock():null;if(!node.handler&&!node.finalizer){this.raise(node.start,\"Missing catch or finally clause\");}return this.finishNode(node,\"TryStatement\");};pp$1.parseVarStatement=function(node,kind){this.next();this.parseVar(node,false,kind);this.semicolon();return this.finishNode(node,\"VariableDeclaration\");};pp$1.parseWhileStatement=function(node){this.next();node.test=this.parseParenExpression();this.labels.push(loopLabel);node.body=this.parseStatement(\"while\");this.labels.pop();return this.finishNode(node,\"WhileStatement\");};pp$1.parseWithStatement=function(node){if(this.strict){this.raise(this.start,\"'with' in strict mode\");}this.next();node.object=this.parseParenExpression();node.body=this.parseStatement(\"with\");return this.finishNode(node,\"WithStatement\");};pp$1.parseEmptyStatement=function(node){this.next();return this.finishNode(node,\"EmptyStatement\");};pp$1.parseLabeledStatement=function(node,maybeName,expr,context){for(var i$1=0,list=this.labels;i$1<list.length;i$1+=1){var label=list[i$1];if(label.name===maybeName){this.raise(expr.start,\"Label '\"+maybeName+\"' is already declared\");}}var kind=this.type.isLoop?\"loop\":this.type===types._switch?\"switch\":null;for(var i=this.labels.length-1;i>=0;i--){var label$1=this.labels[i];if(label$1.statementStart===node.start){// Update information about previous labels on this node\nlabel$1.statementStart=this.start;label$1.kind=kind;}else{break;}}this.labels.push({name:maybeName,kind:kind,statementStart:this.start});node.body=this.parseStatement(context?context.indexOf(\"label\")===-1?context+\"label\":context:\"label\");this.labels.pop();node.label=expr;return this.finishNode(node,\"LabeledStatement\");};pp$1.parseExpressionStatement=function(node,expr){node.expression=expr;this.semicolon();return this.finishNode(node,\"ExpressionStatement\");};// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\npp$1.parseBlock=function(createNewLexicalScope,node,exitStrict){if(createNewLexicalScope===void 0)createNewLexicalScope=true;if(node===void 0)node=this.startNode();node.body=[];this.expect(types.braceL);if(createNewLexicalScope){this.enterScope(0);}while(this.type!==types.braceR){var stmt=this.parseStatement(null);node.body.push(stmt);}if(exitStrict){this.strict=false;}this.next();if(createNewLexicalScope){this.exitScope();}return this.finishNode(node,\"BlockStatement\");};// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\npp$1.parseFor=function(node,init){node.init=init;this.expect(types.semi);node.test=this.type===types.semi?null:this.parseExpression();this.expect(types.semi);node.update=this.type===types.parenR?null:this.parseExpression();this.expect(types.parenR);node.body=this.parseStatement(\"for\");this.exitScope();this.labels.pop();return this.finishNode(node,\"ForStatement\");};// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\npp$1.parseForIn=function(node,init){var isForIn=this.type===types._in;this.next();if(init.type===\"VariableDeclaration\"&&init.declarations[0].init!=null&&(!isForIn||this.options.ecmaVersion<8||this.strict||init.kind!==\"var\"||init.declarations[0].id.type!==\"Identifier\")){this.raise(init.start,(isForIn?\"for-in\":\"for-of\")+\" loop variable declaration may not have an initializer\");}node.left=init;node.right=isForIn?this.parseExpression():this.parseMaybeAssign();this.expect(types.parenR);node.body=this.parseStatement(\"for\");this.exitScope();this.labels.pop();return this.finishNode(node,isForIn?\"ForInStatement\":\"ForOfStatement\");};// Parse a list of variable declarations.\npp$1.parseVar=function(node,isFor,kind){node.declarations=[];node.kind=kind;for(;;){var decl=this.startNode();this.parseVarId(decl,kind);if(this.eat(types.eq)){decl.init=this.parseMaybeAssign(isFor);}else if(kind===\"const\"&&!(this.type===types._in||this.options.ecmaVersion>=6&&this.isContextual(\"of\"))){this.unexpected();}else if(decl.id.type!==\"Identifier\"&&!(isFor&&(this.type===types._in||this.isContextual(\"of\")))){this.raise(this.lastTokEnd,\"Complex binding patterns require an initialization value\");}else{decl.init=null;}node.declarations.push(this.finishNode(decl,\"VariableDeclarator\"));if(!this.eat(types.comma)){break;}}return node;};pp$1.parseVarId=function(decl,kind){decl.id=this.parseBindingAtom();this.checkLValPattern(decl.id,kind===\"var\"?BIND_VAR:BIND_LEXICAL,false);};var FUNC_STATEMENT=1,FUNC_HANGING_STATEMENT=2,FUNC_NULLABLE_ID=4;// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$1.parseFunction=function(node,statement,allowExpressionBody,isAsync){this.initFunction(node);if(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!isAsync){if(this.type===types.star&&statement&FUNC_HANGING_STATEMENT){this.unexpected();}node.generator=this.eat(types.star);}if(this.options.ecmaVersion>=8){node.async=!!isAsync;}if(statement&FUNC_STATEMENT){node.id=statement&FUNC_NULLABLE_ID&&this.type!==types.name?null:this.parseIdent();if(node.id&&!(statement&FUNC_HANGING_STATEMENT))// If it is a regular function declaration in sloppy mode, then it is\n// subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n// mode depends on properties of the current scope (see\n// treatFunctionsAsVar).\n{this.checkLValSimple(node.id,this.strict||node.generator||node.async?this.treatFunctionsAsVar?BIND_VAR:BIND_LEXICAL:BIND_FUNCTION);}}var oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;this.yieldPos=0;this.awaitPos=0;this.awaitIdentPos=0;this.enterScope(functionFlags(node.async,node.generator));if(!(statement&FUNC_STATEMENT)){node.id=this.type===types.name?this.parseIdent():null;}this.parseFunctionParams(node);this.parseFunctionBody(node,allowExpressionBody,false);this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.awaitIdentPos=oldAwaitIdentPos;return this.finishNode(node,statement&FUNC_STATEMENT?\"FunctionDeclaration\":\"FunctionExpression\");};pp$1.parseFunctionParams=function(node){this.expect(types.parenL);node.params=this.parseBindingList(types.parenR,false,this.options.ecmaVersion>=8);this.checkYieldAwaitInDefaultParams();};// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\npp$1.parseClass=function(node,isStatement){this.next();// ecma-262 14.6 Class Definitions\n// A class definition is always strict mode code.\nvar oldStrict=this.strict;this.strict=true;this.parseClassId(node,isStatement);this.parseClassSuper(node);var privateNameMap=this.enterClassBody();var classBody=this.startNode();var hadConstructor=false;classBody.body=[];this.expect(types.braceL);while(this.type!==types.braceR){var element=this.parseClassElement(node.superClass!==null);if(element){classBody.body.push(element);if(element.type===\"MethodDefinition\"&&element.kind===\"constructor\"){if(hadConstructor){this.raise(element.start,\"Duplicate constructor in the same class\");}hadConstructor=true;}else if(element.key.type===\"PrivateIdentifier\"&&isPrivateNameConflicted(privateNameMap,element)){this.raiseRecoverable(element.key.start,\"Identifier '#\"+element.key.name+\"' has already been declared\");}}}this.strict=oldStrict;this.next();node.body=this.finishNode(classBody,\"ClassBody\");this.exitClassBody();return this.finishNode(node,isStatement?\"ClassDeclaration\":\"ClassExpression\");};pp$1.parseClassElement=function(constructorAllowsSuper){if(this.eat(types.semi)){return null;}var ecmaVersion=this.options.ecmaVersion;var node=this.startNode();var keyName=\"\";var isGenerator=false;var isAsync=false;var kind=\"method\";// Parse modifiers\nnode.static=false;if(this.eatContextual(\"static\")){if(this.isClassElementNameStart()||this.type===types.star){node.static=true;}else{keyName=\"static\";}}if(!keyName&&ecmaVersion>=8&&this.eatContextual(\"async\")){if((this.isClassElementNameStart()||this.type===types.star)&&!this.canInsertSemicolon()){isAsync=true;}else{keyName=\"async\";}}if(!keyName&&(ecmaVersion>=9||!isAsync)&&this.eat(types.star)){isGenerator=true;}if(!keyName&&!isAsync&&!isGenerator){var lastValue=this.value;if(this.eatContextual(\"get\")||this.eatContextual(\"set\")){if(this.isClassElementNameStart()){kind=lastValue;}else{keyName=lastValue;}}}// Parse element name\nif(keyName){// 'async', 'get', 'set', or 'static' were not a keyword contextually.\n// The last token is any of those. Make it the element name.\nnode.computed=false;node.key=this.startNodeAt(this.lastTokStart,this.lastTokStartLoc);node.key.name=keyName;this.finishNode(node.key,\"Identifier\");}else{this.parseClassElementName(node);}// Parse element value\nif(ecmaVersion<13||this.type===types.parenL||kind!==\"method\"||isGenerator||isAsync){var isConstructor=!node.static&&checkKeyName(node,\"constructor\");var allowsDirectSuper=isConstructor&&constructorAllowsSuper;// Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\nif(isConstructor&&kind!==\"method\"){this.raise(node.key.start,\"Constructor can't have get/set modifier\");}node.kind=isConstructor?\"constructor\":kind;this.parseClassMethod(node,isGenerator,isAsync,allowsDirectSuper);}else{this.parseClassField(node);}return node;};pp$1.isClassElementNameStart=function(){return this.type===types.name||this.type===types.privateId||this.type===types.num||this.type===types.string||this.type===types.bracketL||this.type.keyword;};pp$1.parseClassElementName=function(element){if(this.type===types.privateId){if(this.value===\"constructor\"){this.raise(this.start,\"Classes can't have an element named '#constructor'\");}element.computed=false;element.key=this.parsePrivateIdent();}else{this.parsePropertyName(element);}};pp$1.parseClassMethod=function(method,isGenerator,isAsync,allowsDirectSuper){// Check key and flags\nvar key=method.key;if(method.kind===\"constructor\"){if(isGenerator){this.raise(key.start,\"Constructor can't be a generator\");}if(isAsync){this.raise(key.start,\"Constructor can't be an async method\");}}else if(method.static&&checkKeyName(method,\"prototype\")){this.raise(key.start,\"Classes may not have a static property named prototype\");}// Parse value\nvar value=method.value=this.parseMethod(isGenerator,isAsync,allowsDirectSuper);// Check value\nif(method.kind===\"get\"&&value.params.length!==0){this.raiseRecoverable(value.start,\"getter should have no params\");}if(method.kind===\"set\"&&value.params.length!==1){this.raiseRecoverable(value.start,\"setter should have exactly one param\");}if(method.kind===\"set\"&&value.params[0].type===\"RestElement\"){this.raiseRecoverable(value.params[0].start,\"Setter cannot use rest params\");}return this.finishNode(method,\"MethodDefinition\");};pp$1.parseClassField=function(field){if(checkKeyName(field,\"constructor\")){this.raise(field.key.start,\"Classes can't have a field named 'constructor'\");}else if(field.static&&checkKeyName(field,\"prototype\")){this.raise(field.key.start,\"Classes can't have a static field named 'prototype'\");}if(this.eat(types.eq)){// To raise SyntaxError if 'arguments' exists in the initializer.\nvar scope=this.currentThisScope();var inClassFieldInit=scope.inClassFieldInit;scope.inClassFieldInit=true;field.value=this.parseMaybeAssign();scope.inClassFieldInit=inClassFieldInit;}else{field.value=null;}this.semicolon();return this.finishNode(field,\"PropertyDefinition\");};pp$1.parseClassId=function(node,isStatement){if(this.type===types.name){node.id=this.parseIdent();if(isStatement){this.checkLValSimple(node.id,BIND_LEXICAL,false);}}else{if(isStatement===true){this.unexpected();}node.id=null;}};pp$1.parseClassSuper=function(node){node.superClass=this.eat(types._extends)?this.parseExprSubscripts():null;};pp$1.enterClassBody=function(){var element={declared:Object.create(null),used:[]};this.privateNameStack.push(element);return element.declared;};pp$1.exitClassBody=function(){var ref=this.privateNameStack.pop();var declared=ref.declared;var used=ref.used;var len=this.privateNameStack.length;var parent=len===0?null:this.privateNameStack[len-1];for(var i=0;i<used.length;++i){var id=used[i];if(!has(declared,id.name)){if(parent){parent.used.push(id);}else{this.raiseRecoverable(id.start,\"Private field '#\"+id.name+\"' must be declared in an enclosing class\");}}}};function isPrivateNameConflicted(privateNameMap,element){var name=element.key.name;var curr=privateNameMap[name];var next=\"true\";if(element.type===\"MethodDefinition\"&&(element.kind===\"get\"||element.kind===\"set\")){next=(element.static?\"s\":\"i\")+element.kind;}// `class { get #a(){}; static set #a(_){} }` is also conflict.\nif(curr===\"iget\"&&next===\"iset\"||curr===\"iset\"&&next===\"iget\"||curr===\"sget\"&&next===\"sset\"||curr===\"sset\"&&next===\"sget\"){privateNameMap[name]=\"true\";return false;}else if(!curr){privateNameMap[name]=next;return false;}else{return true;}}function checkKeyName(node,name){var computed=node.computed;var key=node.key;return!computed&&(key.type===\"Identifier\"&&key.name===name||key.type===\"Literal\"&&key.value===name);}// Parses module export declaration.\npp$1.parseExport=function(node,exports){this.next();// export * from '...'\nif(this.eat(types.star)){if(this.options.ecmaVersion>=11){if(this.eatContextual(\"as\")){node.exported=this.parseIdent(true);this.checkExport(exports,node.exported.name,this.lastTokStart);}else{node.exported=null;}}this.expectContextual(\"from\");if(this.type!==types.string){this.unexpected();}node.source=this.parseExprAtom();this.semicolon();return this.finishNode(node,\"ExportAllDeclaration\");}if(this.eat(types._default)){// export default ...\nthis.checkExport(exports,\"default\",this.lastTokStart);var isAsync;if(this.type===types._function||(isAsync=this.isAsyncFunction())){var fNode=this.startNode();this.next();if(isAsync){this.next();}node.declaration=this.parseFunction(fNode,FUNC_STATEMENT|FUNC_NULLABLE_ID,false,isAsync);}else if(this.type===types._class){var cNode=this.startNode();node.declaration=this.parseClass(cNode,\"nullableID\");}else{node.declaration=this.parseMaybeAssign();this.semicolon();}return this.finishNode(node,\"ExportDefaultDeclaration\");}// export var|const|let|function|class ...\nif(this.shouldParseExportStatement()){node.declaration=this.parseStatement(null);if(node.declaration.type===\"VariableDeclaration\"){this.checkVariableExport(exports,node.declaration.declarations);}else{this.checkExport(exports,node.declaration.id.name,node.declaration.id.start);}node.specifiers=[];node.source=null;}else{// export { x, y as z } [from '...']\nnode.declaration=null;node.specifiers=this.parseExportSpecifiers(exports);if(this.eatContextual(\"from\")){if(this.type!==types.string){this.unexpected();}node.source=this.parseExprAtom();}else{for(var i=0,list=node.specifiers;i<list.length;i+=1){// check for keywords used as local names\nvar spec=list[i];this.checkUnreserved(spec.local);// check if export is defined\nthis.checkLocalExport(spec.local);}node.source=null;}this.semicolon();}return this.finishNode(node,\"ExportNamedDeclaration\");};pp$1.checkExport=function(exports,name,pos){if(!exports){return;}if(has(exports,name)){this.raiseRecoverable(pos,\"Duplicate export '\"+name+\"'\");}exports[name]=true;};pp$1.checkPatternExport=function(exports,pat){var type=pat.type;if(type===\"Identifier\"){this.checkExport(exports,pat.name,pat.start);}else if(type===\"ObjectPattern\"){for(var i=0,list=pat.properties;i<list.length;i+=1){var prop=list[i];this.checkPatternExport(exports,prop);}}else if(type===\"ArrayPattern\"){for(var i$1=0,list$1=pat.elements;i$1<list$1.length;i$1+=1){var elt=list$1[i$1];if(elt){this.checkPatternExport(exports,elt);}}}else if(type===\"Property\"){this.checkPatternExport(exports,pat.value);}else if(type===\"AssignmentPattern\"){this.checkPatternExport(exports,pat.left);}else if(type===\"RestElement\"){this.checkPatternExport(exports,pat.argument);}else if(type===\"ParenthesizedExpression\"){this.checkPatternExport(exports,pat.expression);}};pp$1.checkVariableExport=function(exports,decls){if(!exports){return;}for(var i=0,list=decls;i<list.length;i+=1){var decl=list[i];this.checkPatternExport(exports,decl.id);}};pp$1.shouldParseExportStatement=function(){return this.type.keyword===\"var\"||this.type.keyword===\"const\"||this.type.keyword===\"class\"||this.type.keyword===\"function\"||this.isLet()||this.isAsyncFunction();};// Parses a comma-separated list of module exports.\npp$1.parseExportSpecifiers=function(exports){var nodes=[],first=true;// export { x, y as z } [from '...']\nthis.expect(types.braceL);while(!this.eat(types.braceR)){if(!first){this.expect(types.comma);if(this.afterTrailingComma(types.braceR)){break;}}else{first=false;}var node=this.startNode();node.local=this.parseIdent(true);node.exported=this.eatContextual(\"as\")?this.parseIdent(true):node.local;this.checkExport(exports,node.exported.name,node.exported.start);nodes.push(this.finishNode(node,\"ExportSpecifier\"));}return nodes;};// Parses import declaration.\npp$1.parseImport=function(node){this.next();// import '...'\nif(this.type===types.string){node.specifiers=empty;node.source=this.parseExprAtom();}else{node.specifiers=this.parseImportSpecifiers();this.expectContextual(\"from\");node.source=this.type===types.string?this.parseExprAtom():this.unexpected();}this.semicolon();return this.finishNode(node,\"ImportDeclaration\");};// Parses a comma-separated list of module imports.\npp$1.parseImportSpecifiers=function(){var nodes=[],first=true;if(this.type===types.name){// import defaultObj, { x, y as z } from '...'\nvar node=this.startNode();node.local=this.parseIdent();this.checkLValSimple(node.local,BIND_LEXICAL);nodes.push(this.finishNode(node,\"ImportDefaultSpecifier\"));if(!this.eat(types.comma)){return nodes;}}if(this.type===types.star){var node$1=this.startNode();this.next();this.expectContextual(\"as\");node$1.local=this.parseIdent();this.checkLValSimple(node$1.local,BIND_LEXICAL);nodes.push(this.finishNode(node$1,\"ImportNamespaceSpecifier\"));return nodes;}this.expect(types.braceL);while(!this.eat(types.braceR)){if(!first){this.expect(types.comma);if(this.afterTrailingComma(types.braceR)){break;}}else{first=false;}var node$2=this.startNode();node$2.imported=this.parseIdent(true);if(this.eatContextual(\"as\")){node$2.local=this.parseIdent();}else{this.checkUnreserved(node$2.imported);node$2.local=node$2.imported;}this.checkLValSimple(node$2.local,BIND_LEXICAL);nodes.push(this.finishNode(node$2,\"ImportSpecifier\"));}return nodes;};// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue=function(statements){for(var i=0;i<statements.length&&this.isDirectiveCandidate(statements[i]);++i){statements[i].directive=statements[i].expression.raw.slice(1,-1);}};pp$1.isDirectiveCandidate=function(statement){return statement.type===\"ExpressionStatement\"&&statement.expression.type===\"Literal\"&&typeof statement.expression.value===\"string\"&&(// Reject parenthesized strings.\nthis.input[statement.start]===\"\\\"\"||this.input[statement.start]===\"'\");};var pp$2=Parser.prototype;// Convert existing expression atom to assignable pattern\n// if possible.\npp$2.toAssignable=function(node,isBinding,refDestructuringErrors){if(this.options.ecmaVersion>=6&&node){switch(node.type){case\"Identifier\":if(this.inAsync&&node.name===\"await\"){this.raise(node.start,\"Cannot use 'await' as identifier inside an async function\");}break;case\"ObjectPattern\":case\"ArrayPattern\":case\"AssignmentPattern\":case\"RestElement\":break;case\"ObjectExpression\":node.type=\"ObjectPattern\";if(refDestructuringErrors){this.checkPatternErrors(refDestructuringErrors,true);}for(var i=0,list=node.properties;i<list.length;i+=1){var prop=list[i];this.toAssignable(prop,isBinding);// Early error:\n//   AssignmentRestProperty[Yield, Await] :\n//     `...` DestructuringAssignmentTarget[Yield, Await]\n//\n//   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\nif(prop.type===\"RestElement\"&&(prop.argument.type===\"ArrayPattern\"||prop.argument.type===\"ObjectPattern\")){this.raise(prop.argument.start,\"Unexpected token\");}}break;case\"Property\":// AssignmentProperty has type === \"Property\"\nif(node.kind!==\"init\"){this.raise(node.key.start,\"Object pattern can't contain getter or setter\");}this.toAssignable(node.value,isBinding);break;case\"ArrayExpression\":node.type=\"ArrayPattern\";if(refDestructuringErrors){this.checkPatternErrors(refDestructuringErrors,true);}this.toAssignableList(node.elements,isBinding);break;case\"SpreadElement\":node.type=\"RestElement\";this.toAssignable(node.argument,isBinding);if(node.argument.type===\"AssignmentPattern\"){this.raise(node.argument.start,\"Rest elements cannot have a default value\");}break;case\"AssignmentExpression\":if(node.operator!==\"=\"){this.raise(node.left.end,\"Only '=' operator can be used for specifying default value.\");}node.type=\"AssignmentPattern\";delete node.operator;this.toAssignable(node.left,isBinding);break;case\"ParenthesizedExpression\":this.toAssignable(node.expression,isBinding,refDestructuringErrors);break;case\"ChainExpression\":this.raiseRecoverable(node.start,\"Optional chaining cannot appear in left-hand side\");break;case\"MemberExpression\":if(!isBinding){break;}default:this.raise(node.start,\"Assigning to rvalue\");}}else if(refDestructuringErrors){this.checkPatternErrors(refDestructuringErrors,true);}return node;};// Convert list of expression atoms to binding list.\npp$2.toAssignableList=function(exprList,isBinding){var end=exprList.length;for(var i=0;i<end;i++){var elt=exprList[i];if(elt){this.toAssignable(elt,isBinding);}}if(end){var last=exprList[end-1];if(this.options.ecmaVersion===6&&isBinding&&last&&last.type===\"RestElement\"&&last.argument.type!==\"Identifier\"){this.unexpected(last.argument.start);}}return exprList;};// Parses spread element.\npp$2.parseSpread=function(refDestructuringErrors){var node=this.startNode();this.next();node.argument=this.parseMaybeAssign(false,refDestructuringErrors);return this.finishNode(node,\"SpreadElement\");};pp$2.parseRestBinding=function(){var node=this.startNode();this.next();// RestElement inside of a function parameter must be an identifier\nif(this.options.ecmaVersion===6&&this.type!==types.name){this.unexpected();}node.argument=this.parseBindingAtom();return this.finishNode(node,\"RestElement\");};// Parses lvalue (assignable) atom.\npp$2.parseBindingAtom=function(){if(this.options.ecmaVersion>=6){switch(this.type){case types.bracketL:var node=this.startNode();this.next();node.elements=this.parseBindingList(types.bracketR,true,true);return this.finishNode(node,\"ArrayPattern\");case types.braceL:return this.parseObj(true);}}return this.parseIdent();};pp$2.parseBindingList=function(close,allowEmpty,allowTrailingComma){var elts=[],first=true;while(!this.eat(close)){if(first){first=false;}else{this.expect(types.comma);}if(allowEmpty&&this.type===types.comma){elts.push(null);}else if(allowTrailingComma&&this.afterTrailingComma(close)){break;}else if(this.type===types.ellipsis){var rest=this.parseRestBinding();this.parseBindingListItem(rest);elts.push(rest);if(this.type===types.comma){this.raise(this.start,\"Comma is not permitted after the rest element\");}this.expect(close);break;}else{var elem=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(elem);elts.push(elem);}}return elts;};pp$2.parseBindingListItem=function(param){return param;};// Parses assignment pattern around given atom if possible.\npp$2.parseMaybeDefault=function(startPos,startLoc,left){left=left||this.parseBindingAtom();if(this.options.ecmaVersion<6||!this.eat(types.eq)){return left;}var node=this.startNodeAt(startPos,startLoc);node.left=left;node.right=this.parseMaybeAssign();return this.finishNode(node,\"AssignmentPattern\");};// The following three functions all verify that a node is an lvalue —\n// something that can be bound, or assigned to. In order to do so, they perform\n// a variety of checks:\n//\n// - Check that none of the bound/assigned-to identifiers are reserved words.\n// - Record name declarations for bindings in the appropriate scope.\n// - Check duplicate argument names, if checkClashes is set.\n//\n// If a complex binding pattern is encountered (e.g., object and array\n// destructuring), the entire pattern is recursively checked.\n//\n// There are three versions of checkLVal*() appropriate for different\n// circumstances:\n//\n// - checkLValSimple() shall be used if the syntactic construct supports\n//   nothing other than identifiers and member expressions. Parenthesized\n//   expressions are also correctly handled. This is generally appropriate for\n//   constructs for which the spec says\n//\n//   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   It is also appropriate for checking if an identifier is valid and not\n//   defined elsewhere, like import declarations or function/class identifiers.\n//\n//   Examples where this is used include:\n//     a += …;\n//     import a from '…';\n//   where a is the node to be checked.\n//\n// - checkLValPattern() shall be used if the syntactic construct supports\n//   anything checkLValSimple() supports, as well as object and array\n//   destructuring patterns. This is generally appropriate for constructs for\n//   which the spec says\n//\n//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n//   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   Examples where this is used include:\n//     (a = …);\n//     const a = …;\n//     try { … } catch (a) { … }\n//   where a is the node to be checked.\n//\n// - checkLValInnerPattern() shall be used if the syntactic construct supports\n//   anything checkLValPattern() supports, as well as default assignment\n//   patterns, rest elements, and other constructs that may appear within an\n//   object or array destructuring pattern.\n//\n//   As a special case, function parameters also use checkLValInnerPattern(),\n//   as they also support defaults and rest constructs.\n//\n// These functions deliberately support both assignment and binding constructs,\n// as the logic for both is exceedingly similar. If the node is the target of\n// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n// should be set to the appropriate BIND_* constant, like BIND_VAR or\n// BIND_LEXICAL.\n//\n// If the function is called with a non-BIND_NONE bindingType, then\n// additionally a checkClashes object may be specified to allow checking for\n// duplicate argument names. checkClashes is ignored if the provided construct\n// is an assignment (i.e., bindingType is BIND_NONE).\npp$2.checkLValSimple=function(expr,bindingType,checkClashes){if(bindingType===void 0)bindingType=BIND_NONE;var isBind=bindingType!==BIND_NONE;switch(expr.type){case\"Identifier\":if(this.strict&&this.reservedWordsStrictBind.test(expr.name)){this.raiseRecoverable(expr.start,(isBind?\"Binding \":\"Assigning to \")+expr.name+\" in strict mode\");}if(isBind){if(bindingType===BIND_LEXICAL&&expr.name===\"let\"){this.raiseRecoverable(expr.start,\"let is disallowed as a lexically bound name\");}if(checkClashes){if(has(checkClashes,expr.name)){this.raiseRecoverable(expr.start,\"Argument name clash\");}checkClashes[expr.name]=true;}if(bindingType!==BIND_OUTSIDE){this.declareName(expr.name,bindingType,expr.start);}}break;case\"ChainExpression\":this.raiseRecoverable(expr.start,\"Optional chaining cannot appear in left-hand side\");break;case\"MemberExpression\":if(isBind){this.raiseRecoverable(expr.start,\"Binding member expression\");}break;case\"ParenthesizedExpression\":if(isBind){this.raiseRecoverable(expr.start,\"Binding parenthesized expression\");}return this.checkLValSimple(expr.expression,bindingType,checkClashes);default:this.raise(expr.start,(isBind?\"Binding\":\"Assigning to\")+\" rvalue\");}};pp$2.checkLValPattern=function(expr,bindingType,checkClashes){if(bindingType===void 0)bindingType=BIND_NONE;switch(expr.type){case\"ObjectPattern\":for(var i=0,list=expr.properties;i<list.length;i+=1){var prop=list[i];this.checkLValInnerPattern(prop,bindingType,checkClashes);}break;case\"ArrayPattern\":for(var i$1=0,list$1=expr.elements;i$1<list$1.length;i$1+=1){var elem=list$1[i$1];if(elem){this.checkLValInnerPattern(elem,bindingType,checkClashes);}}break;default:this.checkLValSimple(expr,bindingType,checkClashes);}};pp$2.checkLValInnerPattern=function(expr,bindingType,checkClashes){if(bindingType===void 0)bindingType=BIND_NONE;switch(expr.type){case\"Property\":// AssignmentProperty has type === \"Property\"\nthis.checkLValInnerPattern(expr.value,bindingType,checkClashes);break;case\"AssignmentPattern\":this.checkLValPattern(expr.left,bindingType,checkClashes);break;case\"RestElement\":this.checkLValPattern(expr.argument,bindingType,checkClashes);break;default:this.checkLValPattern(expr,bindingType,checkClashes);}};// A recursive descent parser operates by defining functions for all\nvar pp$3=Parser.prototype;// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\npp$3.checkPropClash=function(prop,propHash,refDestructuringErrors){if(this.options.ecmaVersion>=9&&prop.type===\"SpreadElement\"){return;}if(this.options.ecmaVersion>=6&&(prop.computed||prop.method||prop.shorthand)){return;}var key=prop.key;var name;switch(key.type){case\"Identifier\":name=key.name;break;case\"Literal\":name=String(key.value);break;default:return;}var kind=prop.kind;if(this.options.ecmaVersion>=6){if(name===\"__proto__\"&&kind===\"init\"){if(propHash.proto){if(refDestructuringErrors){if(refDestructuringErrors.doubleProto<0){refDestructuringErrors.doubleProto=key.start;}// Backwards-compat kludge. Can be removed in version 6.0\n}else{this.raiseRecoverable(key.start,\"Redefinition of __proto__ property\");}}propHash.proto=true;}return;}name=\"$\"+name;var other=propHash[name];if(other){var redefinition;if(kind===\"init\"){redefinition=this.strict&&other.init||other.get||other.set;}else{redefinition=other.init||other[kind];}if(redefinition){this.raiseRecoverable(key.start,\"Redefinition of property\");}}else{other=propHash[name]={init:false,get:false,set:false};}other[kind]=true;};// ### Expression parsing\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\npp$3.parseExpression=function(forInit,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeAssign(forInit,refDestructuringErrors);if(this.type===types.comma){var node=this.startNodeAt(startPos,startLoc);node.expressions=[expr];while(this.eat(types.comma)){node.expressions.push(this.parseMaybeAssign(forInit,refDestructuringErrors));}return this.finishNode(node,\"SequenceExpression\");}return expr;};// Parse an assignment expression. This includes applications of\n// operators like `+=`.\npp$3.parseMaybeAssign=function(forInit,refDestructuringErrors,afterLeftParse){if(this.isContextual(\"yield\")){if(this.inGenerator){return this.parseYield(forInit);}// The tokenizer will assume an expression is allowed after\n// `yield`, but this isn't that kind of yield\nelse{this.exprAllowed=false;}}var ownDestructuringErrors=false,oldParenAssign=-1,oldTrailingComma=-1;if(refDestructuringErrors){oldParenAssign=refDestructuringErrors.parenthesizedAssign;oldTrailingComma=refDestructuringErrors.trailingComma;refDestructuringErrors.parenthesizedAssign=refDestructuringErrors.trailingComma=-1;}else{refDestructuringErrors=new DestructuringErrors();ownDestructuringErrors=true;}var startPos=this.start,startLoc=this.startLoc;if(this.type===types.parenL||this.type===types.name){this.potentialArrowAt=this.start;this.potentialArrowInForAwait=forInit===\"await\";}var left=this.parseMaybeConditional(forInit,refDestructuringErrors);if(afterLeftParse){left=afterLeftParse.call(this,left,startPos,startLoc);}if(this.type.isAssign){var node=this.startNodeAt(startPos,startLoc);node.operator=this.value;if(this.type===types.eq){left=this.toAssignable(left,false,refDestructuringErrors);}if(!ownDestructuringErrors){refDestructuringErrors.parenthesizedAssign=refDestructuringErrors.trailingComma=refDestructuringErrors.doubleProto=-1;}if(refDestructuringErrors.shorthandAssign>=left.start){refDestructuringErrors.shorthandAssign=-1;}// reset because shorthand default was used correctly\nif(this.type===types.eq){this.checkLValPattern(left);}else{this.checkLValSimple(left);}node.left=left;this.next();node.right=this.parseMaybeAssign(forInit);return this.finishNode(node,\"AssignmentExpression\");}else{if(ownDestructuringErrors){this.checkExpressionErrors(refDestructuringErrors,true);}}if(oldParenAssign>-1){refDestructuringErrors.parenthesizedAssign=oldParenAssign;}if(oldTrailingComma>-1){refDestructuringErrors.trailingComma=oldTrailingComma;}return left;};// Parse a ternary conditional (`?:`) operator.\npp$3.parseMaybeConditional=function(forInit,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprOps(forInit,refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors)){return expr;}if(this.eat(types.question)){var node=this.startNodeAt(startPos,startLoc);node.test=expr;node.consequent=this.parseMaybeAssign();this.expect(types.colon);node.alternate=this.parseMaybeAssign(forInit);return this.finishNode(node,\"ConditionalExpression\");}return expr;};// Start the precedence parser.\npp$3.parseExprOps=function(forInit,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeUnary(refDestructuringErrors,false);if(this.checkExpressionErrors(refDestructuringErrors)){return expr;}return expr.start===startPos&&expr.type===\"ArrowFunctionExpression\"?expr:this.parseExprOp(expr,startPos,startLoc,-1,forInit);};// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\npp$3.parseExprOp=function(left,leftStartPos,leftStartLoc,minPrec,forInit){var prec=this.type.binop;if(prec!=null&&(!forInit||this.type!==types._in)){if(prec>minPrec){var logical=this.type===types.logicalOR||this.type===types.logicalAND;var coalesce=this.type===types.coalesce;if(coalesce){// Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n// In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\nprec=types.logicalAND.binop;}var op=this.value;this.next();var startPos=this.start,startLoc=this.startLoc;var right=this.parseExprOp(this.parseMaybeUnary(null,false),startPos,startLoc,prec,forInit);var node=this.buildBinary(leftStartPos,leftStartLoc,left,right,op,logical||coalesce);if(logical&&this.type===types.coalesce||coalesce&&(this.type===types.logicalOR||this.type===types.logicalAND)){this.raiseRecoverable(this.start,\"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");}return this.parseExprOp(node,leftStartPos,leftStartLoc,minPrec,forInit);}}return left;};pp$3.buildBinary=function(startPos,startLoc,left,right,op,logical){var node=this.startNodeAt(startPos,startLoc);node.left=left;node.operator=op;node.right=right;return this.finishNode(node,logical?\"LogicalExpression\":\"BinaryExpression\");};// Parse unary operators, both prefix and postfix.\npp$3.parseMaybeUnary=function(refDestructuringErrors,sawUnary,incDec){var startPos=this.start,startLoc=this.startLoc,expr;if(this.isContextual(\"await\")&&this.canAwait){expr=this.parseAwait();sawUnary=true;}else if(this.type.prefix){var node=this.startNode(),update=this.type===types.incDec;node.operator=this.value;node.prefix=true;this.next();node.argument=this.parseMaybeUnary(null,true,update);this.checkExpressionErrors(refDestructuringErrors,true);if(update){this.checkLValSimple(node.argument);}else if(this.strict&&node.operator===\"delete\"&&node.argument.type===\"Identifier\"){this.raiseRecoverable(node.start,\"Deleting local variable in strict mode\");}else if(node.operator===\"delete\"&&isPrivateFieldAccess(node.argument)){this.raiseRecoverable(node.start,\"Private fields can not be deleted\");}else{sawUnary=true;}expr=this.finishNode(node,update?\"UpdateExpression\":\"UnaryExpression\");}else{expr=this.parseExprSubscripts(refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors)){return expr;}while(this.type.postfix&&!this.canInsertSemicolon()){var node$1=this.startNodeAt(startPos,startLoc);node$1.operator=this.value;node$1.prefix=false;node$1.argument=expr;this.checkLValSimple(expr);this.next();expr=this.finishNode(node$1,\"UpdateExpression\");}}if(!incDec&&this.eat(types.starstar)){if(sawUnary){this.unexpected(this.lastTokStart);}else{return this.buildBinary(startPos,startLoc,expr,this.parseMaybeUnary(null,false),\"**\",false);}}else{return expr;}};function isPrivateFieldAccess(node){return node.type===\"MemberExpression\"&&node.property.type===\"PrivateIdentifier\"||node.type===\"ChainExpression\"&&isPrivateFieldAccess(node.expression);}// Parse call, dot, and `[]`-subscript expressions.\npp$3.parseExprSubscripts=function(refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprAtom(refDestructuringErrors);if(expr.type===\"ArrowFunctionExpression\"&&this.input.slice(this.lastTokStart,this.lastTokEnd)!==\")\"){return expr;}var result=this.parseSubscripts(expr,startPos,startLoc);if(refDestructuringErrors&&result.type===\"MemberExpression\"){if(refDestructuringErrors.parenthesizedAssign>=result.start){refDestructuringErrors.parenthesizedAssign=-1;}if(refDestructuringErrors.parenthesizedBind>=result.start){refDestructuringErrors.parenthesizedBind=-1;}if(refDestructuringErrors.trailingComma>=result.start){refDestructuringErrors.trailingComma=-1;}}return result;};pp$3.parseSubscripts=function(base,startPos,startLoc,noCalls){var maybeAsyncArrow=this.options.ecmaVersion>=8&&base.type===\"Identifier\"&&base.name===\"async\"&&this.lastTokEnd===base.end&&!this.canInsertSemicolon()&&base.end-base.start===5&&this.potentialArrowAt===base.start;var optionalChained=false;while(true){var element=this.parseSubscript(base,startPos,startLoc,noCalls,maybeAsyncArrow,optionalChained);if(element.optional){optionalChained=true;}if(element===base||element.type===\"ArrowFunctionExpression\"){if(optionalChained){var chainNode=this.startNodeAt(startPos,startLoc);chainNode.expression=element;element=this.finishNode(chainNode,\"ChainExpression\");}return element;}base=element;}};pp$3.parseSubscript=function(base,startPos,startLoc,noCalls,maybeAsyncArrow,optionalChained){var optionalSupported=this.options.ecmaVersion>=11;var optional=optionalSupported&&this.eat(types.questionDot);if(noCalls&&optional){this.raise(this.lastTokStart,\"Optional chaining cannot appear in the callee of new expressions\");}var computed=this.eat(types.bracketL);if(computed||optional&&this.type!==types.parenL&&this.type!==types.backQuote||this.eat(types.dot)){var node=this.startNodeAt(startPos,startLoc);node.object=base;if(computed){node.property=this.parseExpression();this.expect(types.bracketR);}else if(this.type===types.privateId&&base.type!==\"Super\"){node.property=this.parsePrivateIdent();}else{node.property=this.parseIdent(this.options.allowReserved!==\"never\");}node.computed=!!computed;if(optionalSupported){node.optional=optional;}base=this.finishNode(node,\"MemberExpression\");}else if(!noCalls&&this.eat(types.parenL)){var refDestructuringErrors=new DestructuringErrors(),oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;this.yieldPos=0;this.awaitPos=0;this.awaitIdentPos=0;var exprList=this.parseExprList(types.parenR,this.options.ecmaVersion>=8,false,refDestructuringErrors);if(maybeAsyncArrow&&!optional&&!this.canInsertSemicolon()&&this.eat(types.arrow)){this.checkPatternErrors(refDestructuringErrors,false);this.checkYieldAwaitInDefaultParams();if(this.awaitIdentPos>0){this.raise(this.awaitIdentPos,\"Cannot use 'await' as identifier inside an async function\");}this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.awaitIdentPos=oldAwaitIdentPos;return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),exprList,true);}this.checkExpressionErrors(refDestructuringErrors,true);this.yieldPos=oldYieldPos||this.yieldPos;this.awaitPos=oldAwaitPos||this.awaitPos;this.awaitIdentPos=oldAwaitIdentPos||this.awaitIdentPos;var node$1=this.startNodeAt(startPos,startLoc);node$1.callee=base;node$1.arguments=exprList;if(optionalSupported){node$1.optional=optional;}base=this.finishNode(node$1,\"CallExpression\");}else if(this.type===types.backQuote){if(optional||optionalChained){this.raise(this.start,\"Optional chaining cannot appear in the tag of tagged template expressions\");}var node$2=this.startNodeAt(startPos,startLoc);node$2.tag=base;node$2.quasi=this.parseTemplate({isTagged:true});base=this.finishNode(node$2,\"TaggedTemplateExpression\");}return base;};// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\npp$3.parseExprAtom=function(refDestructuringErrors){// If a division operator appears in an expression position, the\n// tokenizer got confused, and we force it to read a regexp instead.\nif(this.type===types.slash){this.readRegexp();}var node,canBeArrow=this.potentialArrowAt===this.start;switch(this.type){case types._super:if(!this.allowSuper){this.raise(this.start,\"'super' keyword outside a method\");}node=this.startNode();this.next();if(this.type===types.parenL&&!this.allowDirectSuper){this.raise(node.start,\"super() call outside constructor of a subclass\");}// The `super` keyword can appear at below:\n// SuperProperty:\n//     super [ Expression ]\n//     super . IdentifierName\n// SuperCall:\n//     super ( Arguments )\nif(this.type!==types.dot&&this.type!==types.bracketL&&this.type!==types.parenL){this.unexpected();}return this.finishNode(node,\"Super\");case types._this:node=this.startNode();this.next();return this.finishNode(node,\"ThisExpression\");case types.name:var startPos=this.start,startLoc=this.startLoc,containsEsc=this.containsEsc;var id=this.parseIdent(false);if(this.options.ecmaVersion>=8&&!containsEsc&&id.name===\"async\"&&!this.canInsertSemicolon()&&this.eat(types._function)){return this.parseFunction(this.startNodeAt(startPos,startLoc),0,false,true);}if(canBeArrow&&!this.canInsertSemicolon()){if(this.eat(types.arrow)){return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id],false);}if(this.options.ecmaVersion>=8&&id.name===\"async\"&&this.type===types.name&&!containsEsc&&(!this.potentialArrowInForAwait||this.value!==\"of\"||this.containsEsc)){id=this.parseIdent(false);if(this.canInsertSemicolon()||!this.eat(types.arrow)){this.unexpected();}return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id],true);}}return id;case types.regexp:var value=this.value;node=this.parseLiteral(value.value);node.regex={pattern:value.pattern,flags:value.flags};return node;case types.num:case types.string:return this.parseLiteral(this.value);case types._null:case types._true:case types._false:node=this.startNode();node.value=this.type===types._null?null:this.type===types._true;node.raw=this.type.keyword;this.next();return this.finishNode(node,\"Literal\");case types.parenL:var start=this.start,expr=this.parseParenAndDistinguishExpression(canBeArrow);if(refDestructuringErrors){if(refDestructuringErrors.parenthesizedAssign<0&&!this.isSimpleAssignTarget(expr)){refDestructuringErrors.parenthesizedAssign=start;}if(refDestructuringErrors.parenthesizedBind<0){refDestructuringErrors.parenthesizedBind=start;}}return expr;case types.bracketL:node=this.startNode();this.next();node.elements=this.parseExprList(types.bracketR,true,true,refDestructuringErrors);return this.finishNode(node,\"ArrayExpression\");case types.braceL:return this.parseObj(false,refDestructuringErrors);case types._function:node=this.startNode();this.next();return this.parseFunction(node,0);case types._class:return this.parseClass(this.startNode(),false);case types._new:return this.parseNew();case types.backQuote:return this.parseTemplate();case types._import:if(this.options.ecmaVersion>=11){return this.parseExprImport();}else{return this.unexpected();}default:this.unexpected();}};pp$3.parseExprImport=function(){var node=this.startNode();// Consume `import` as an identifier for `import.meta`.\n// Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\nif(this.containsEsc){this.raiseRecoverable(this.start,\"Escape sequence in keyword import\");}var meta=this.parseIdent(true);switch(this.type){case types.parenL:return this.parseDynamicImport(node);case types.dot:node.meta=meta;return this.parseImportMeta(node);default:this.unexpected();}};pp$3.parseDynamicImport=function(node){this.next();// skip `(`\n// Parse node.source.\nnode.source=this.parseMaybeAssign();// Verify ending.\nif(!this.eat(types.parenR)){var errorPos=this.start;if(this.eat(types.comma)&&this.eat(types.parenR)){this.raiseRecoverable(errorPos,\"Trailing comma is not allowed in import()\");}else{this.unexpected(errorPos);}}return this.finishNode(node,\"ImportExpression\");};pp$3.parseImportMeta=function(node){this.next();// skip `.`\nvar containsEsc=this.containsEsc;node.property=this.parseIdent(true);if(node.property.name!==\"meta\"){this.raiseRecoverable(node.property.start,\"The only valid meta property for import is 'import.meta'\");}if(containsEsc){this.raiseRecoverable(node.start,\"'import.meta' must not contain escaped characters\");}if(this.options.sourceType!==\"module\"&&!this.options.allowImportExportEverywhere){this.raiseRecoverable(node.start,\"Cannot use 'import.meta' outside a module\");}return this.finishNode(node,\"MetaProperty\");};pp$3.parseLiteral=function(value){var node=this.startNode();node.value=value;node.raw=this.input.slice(this.start,this.end);if(node.raw.charCodeAt(node.raw.length-1)===110){node.bigint=node.raw.slice(0,-1).replace(/_/g,\"\");}this.next();return this.finishNode(node,\"Literal\");};pp$3.parseParenExpression=function(){this.expect(types.parenL);var val=this.parseExpression();this.expect(types.parenR);return val;};pp$3.parseParenAndDistinguishExpression=function(canBeArrow){var startPos=this.start,startLoc=this.startLoc,val,allowTrailingComma=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var innerStartPos=this.start,innerStartLoc=this.startLoc;var exprList=[],first=true,lastIsComma=false;var refDestructuringErrors=new DestructuringErrors(),oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,spreadStart;this.yieldPos=0;this.awaitPos=0;// Do not save awaitIdentPos to allow checking awaits nested in parameters\nwhile(this.type!==types.parenR){first?first=false:this.expect(types.comma);if(allowTrailingComma&&this.afterTrailingComma(types.parenR,true)){lastIsComma=true;break;}else if(this.type===types.ellipsis){spreadStart=this.start;exprList.push(this.parseParenItem(this.parseRestBinding()));if(this.type===types.comma){this.raise(this.start,\"Comma is not permitted after the rest element\");}break;}else{exprList.push(this.parseMaybeAssign(false,refDestructuringErrors,this.parseParenItem));}}var innerEndPos=this.start,innerEndLoc=this.startLoc;this.expect(types.parenR);if(canBeArrow&&!this.canInsertSemicolon()&&this.eat(types.arrow)){this.checkPatternErrors(refDestructuringErrors,false);this.checkYieldAwaitInDefaultParams();this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;return this.parseParenArrowList(startPos,startLoc,exprList);}if(!exprList.length||lastIsComma){this.unexpected(this.lastTokStart);}if(spreadStart){this.unexpected(spreadStart);}this.checkExpressionErrors(refDestructuringErrors,true);this.yieldPos=oldYieldPos||this.yieldPos;this.awaitPos=oldAwaitPos||this.awaitPos;if(exprList.length>1){val=this.startNodeAt(innerStartPos,innerStartLoc);val.expressions=exprList;this.finishNodeAt(val,\"SequenceExpression\",innerEndPos,innerEndLoc);}else{val=exprList[0];}}else{val=this.parseParenExpression();}if(this.options.preserveParens){var par=this.startNodeAt(startPos,startLoc);par.expression=val;return this.finishNode(par,\"ParenthesizedExpression\");}else{return val;}};pp$3.parseParenItem=function(item){return item;};pp$3.parseParenArrowList=function(startPos,startLoc,exprList){return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),exprList);};// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\nvar empty$1=[];pp$3.parseNew=function(){if(this.containsEsc){this.raiseRecoverable(this.start,\"Escape sequence in keyword new\");}var node=this.startNode();var meta=this.parseIdent(true);if(this.options.ecmaVersion>=6&&this.eat(types.dot)){node.meta=meta;var containsEsc=this.containsEsc;node.property=this.parseIdent(true);if(node.property.name!==\"target\"){this.raiseRecoverable(node.property.start,\"The only valid meta property for new is 'new.target'\");}if(containsEsc){this.raiseRecoverable(node.start,\"'new.target' must not contain escaped characters\");}if(!this.inNonArrowFunction){this.raiseRecoverable(node.start,\"'new.target' can only be used in functions\");}return this.finishNode(node,\"MetaProperty\");}var startPos=this.start,startLoc=this.startLoc,isImport=this.type===types._import;node.callee=this.parseSubscripts(this.parseExprAtom(),startPos,startLoc,true);if(isImport&&node.callee.type===\"ImportExpression\"){this.raise(startPos,\"Cannot use new with import()\");}if(this.eat(types.parenL)){node.arguments=this.parseExprList(types.parenR,this.options.ecmaVersion>=8,false);}else{node.arguments=empty$1;}return this.finishNode(node,\"NewExpression\");};// Parse template expression.\npp$3.parseTemplateElement=function(ref){var isTagged=ref.isTagged;var elem=this.startNode();if(this.type===types.invalidTemplate){if(!isTagged){this.raiseRecoverable(this.start,\"Bad escape sequence in untagged template literal\");}elem.value={raw:this.value,cooked:null};}else{elem.value={raw:this.input.slice(this.start,this.end).replace(/\\r\\n?/g,\"\\n\"),cooked:this.value};}this.next();elem.tail=this.type===types.backQuote;return this.finishNode(elem,\"TemplateElement\");};pp$3.parseTemplate=function(ref){if(ref===void 0)ref={};var isTagged=ref.isTagged;if(isTagged===void 0)isTagged=false;var node=this.startNode();this.next();node.expressions=[];var curElt=this.parseTemplateElement({isTagged:isTagged});node.quasis=[curElt];while(!curElt.tail){if(this.type===types.eof){this.raise(this.pos,\"Unterminated template literal\");}this.expect(types.dollarBraceL);node.expressions.push(this.parseExpression());this.expect(types.braceR);node.quasis.push(curElt=this.parseTemplateElement({isTagged:isTagged}));}this.next();return this.finishNode(node,\"TemplateLiteral\");};pp$3.isAsyncProp=function(prop){return!prop.computed&&prop.key.type===\"Identifier\"&&prop.key.name===\"async\"&&(this.type===types.name||this.type===types.num||this.type===types.string||this.type===types.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===types.star)&&!lineBreak.test(this.input.slice(this.lastTokEnd,this.start));};// Parse an object literal or binding pattern.\npp$3.parseObj=function(isPattern,refDestructuringErrors){var node=this.startNode(),first=true,propHash={};node.properties=[];this.next();while(!this.eat(types.braceR)){if(!first){this.expect(types.comma);if(this.options.ecmaVersion>=5&&this.afterTrailingComma(types.braceR)){break;}}else{first=false;}var prop=this.parseProperty(isPattern,refDestructuringErrors);if(!isPattern){this.checkPropClash(prop,propHash,refDestructuringErrors);}node.properties.push(prop);}return this.finishNode(node,isPattern?\"ObjectPattern\":\"ObjectExpression\");};pp$3.parseProperty=function(isPattern,refDestructuringErrors){var prop=this.startNode(),isGenerator,isAsync,startPos,startLoc;if(this.options.ecmaVersion>=9&&this.eat(types.ellipsis)){if(isPattern){prop.argument=this.parseIdent(false);if(this.type===types.comma){this.raise(this.start,\"Comma is not permitted after the rest element\");}return this.finishNode(prop,\"RestElement\");}// To disallow parenthesized identifier via `this.toAssignable()`.\nif(this.type===types.parenL&&refDestructuringErrors){if(refDestructuringErrors.parenthesizedAssign<0){refDestructuringErrors.parenthesizedAssign=this.start;}if(refDestructuringErrors.parenthesizedBind<0){refDestructuringErrors.parenthesizedBind=this.start;}}// Parse argument.\nprop.argument=this.parseMaybeAssign(false,refDestructuringErrors);// To disallow trailing comma via `this.toAssignable()`.\nif(this.type===types.comma&&refDestructuringErrors&&refDestructuringErrors.trailingComma<0){refDestructuringErrors.trailingComma=this.start;}// Finish\nreturn this.finishNode(prop,\"SpreadElement\");}if(this.options.ecmaVersion>=6){prop.method=false;prop.shorthand=false;if(isPattern||refDestructuringErrors){startPos=this.start;startLoc=this.startLoc;}if(!isPattern){isGenerator=this.eat(types.star);}}var containsEsc=this.containsEsc;this.parsePropertyName(prop);if(!isPattern&&!containsEsc&&this.options.ecmaVersion>=8&&!isGenerator&&this.isAsyncProp(prop)){isAsync=true;isGenerator=this.options.ecmaVersion>=9&&this.eat(types.star);this.parsePropertyName(prop,refDestructuringErrors);}else{isAsync=false;}this.parsePropertyValue(prop,isPattern,isGenerator,isAsync,startPos,startLoc,refDestructuringErrors,containsEsc);return this.finishNode(prop,\"Property\");};pp$3.parsePropertyValue=function(prop,isPattern,isGenerator,isAsync,startPos,startLoc,refDestructuringErrors,containsEsc){if((isGenerator||isAsync)&&this.type===types.colon){this.unexpected();}if(this.eat(types.colon)){prop.value=isPattern?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(false,refDestructuringErrors);prop.kind=\"init\";}else if(this.options.ecmaVersion>=6&&this.type===types.parenL){if(isPattern){this.unexpected();}prop.kind=\"init\";prop.method=true;prop.value=this.parseMethod(isGenerator,isAsync);}else if(!isPattern&&!containsEsc&&this.options.ecmaVersion>=5&&!prop.computed&&prop.key.type===\"Identifier\"&&(prop.key.name===\"get\"||prop.key.name===\"set\")&&this.type!==types.comma&&this.type!==types.braceR&&this.type!==types.eq){if(isGenerator||isAsync){this.unexpected();}prop.kind=prop.key.name;this.parsePropertyName(prop);prop.value=this.parseMethod(false);var paramCount=prop.kind===\"get\"?0:1;if(prop.value.params.length!==paramCount){var start=prop.value.start;if(prop.kind===\"get\"){this.raiseRecoverable(start,\"getter should have no params\");}else{this.raiseRecoverable(start,\"setter should have exactly one param\");}}else{if(prop.kind===\"set\"&&prop.value.params[0].type===\"RestElement\"){this.raiseRecoverable(prop.value.params[0].start,\"Setter cannot use rest params\");}}}else if(this.options.ecmaVersion>=6&&!prop.computed&&prop.key.type===\"Identifier\"){if(isGenerator||isAsync){this.unexpected();}this.checkUnreserved(prop.key);if(prop.key.name===\"await\"&&!this.awaitIdentPos){this.awaitIdentPos=startPos;}prop.kind=\"init\";if(isPattern){prop.value=this.parseMaybeDefault(startPos,startLoc,this.copyNode(prop.key));}else if(this.type===types.eq&&refDestructuringErrors){if(refDestructuringErrors.shorthandAssign<0){refDestructuringErrors.shorthandAssign=this.start;}prop.value=this.parseMaybeDefault(startPos,startLoc,this.copyNode(prop.key));}else{prop.value=this.copyNode(prop.key);}prop.shorthand=true;}else{this.unexpected();}};pp$3.parsePropertyName=function(prop){if(this.options.ecmaVersion>=6){if(this.eat(types.bracketL)){prop.computed=true;prop.key=this.parseMaybeAssign();this.expect(types.bracketR);return prop.key;}else{prop.computed=false;}}return prop.key=this.type===types.num||this.type===types.string?this.parseExprAtom():this.parseIdent(this.options.allowReserved!==\"never\");};// Initialize empty function node.\npp$3.initFunction=function(node){node.id=null;if(this.options.ecmaVersion>=6){node.generator=node.expression=false;}if(this.options.ecmaVersion>=8){node.async=false;}};// Parse object or class method.\npp$3.parseMethod=function(isGenerator,isAsync,allowDirectSuper){var node=this.startNode(),oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;this.initFunction(node);if(this.options.ecmaVersion>=6){node.generator=isGenerator;}if(this.options.ecmaVersion>=8){node.async=!!isAsync;}this.yieldPos=0;this.awaitPos=0;this.awaitIdentPos=0;this.enterScope(functionFlags(isAsync,node.generator)|SCOPE_SUPER|(allowDirectSuper?SCOPE_DIRECT_SUPER:0));this.expect(types.parenL);node.params=this.parseBindingList(types.parenR,false,this.options.ecmaVersion>=8);this.checkYieldAwaitInDefaultParams();this.parseFunctionBody(node,false,true);this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.awaitIdentPos=oldAwaitIdentPos;return this.finishNode(node,\"FunctionExpression\");};// Parse arrow function expression with given parameters.\npp$3.parseArrowExpression=function(node,params,isAsync){var oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;this.enterScope(functionFlags(isAsync,false)|SCOPE_ARROW);this.initFunction(node);if(this.options.ecmaVersion>=8){node.async=!!isAsync;}this.yieldPos=0;this.awaitPos=0;this.awaitIdentPos=0;node.params=this.toAssignableList(params,true);this.parseFunctionBody(node,true,false);this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.awaitIdentPos=oldAwaitIdentPos;return this.finishNode(node,\"ArrowFunctionExpression\");};// Parse function body and check parameters.\npp$3.parseFunctionBody=function(node,isArrowFunction,isMethod){var isExpression=isArrowFunction&&this.type!==types.braceL;var oldStrict=this.strict,useStrict=false;if(isExpression){node.body=this.parseMaybeAssign();node.expression=true;this.checkParams(node,false);}else{var nonSimple=this.options.ecmaVersion>=7&&!this.isSimpleParamList(node.params);if(!oldStrict||nonSimple){useStrict=this.strictDirective(this.end);// If this is a strict mode function, verify that argument names\n// are not repeated, and it does not try to bind the words `eval`\n// or `arguments`.\nif(useStrict&&nonSimple){this.raiseRecoverable(node.start,\"Illegal 'use strict' directive in function with non-simple parameter list\");}}// Start a new scope with regard to labels and the `inFunction`\n// flag (restore them to their old value afterwards).\nvar oldLabels=this.labels;this.labels=[];if(useStrict){this.strict=true;}// Add the params to varDeclaredNames to ensure that an error is thrown\n// if a let/const declaration in the function clashes with one of the params.\nthis.checkParams(node,!oldStrict&&!useStrict&&!isArrowFunction&&!isMethod&&this.isSimpleParamList(node.params));// Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\nif(this.strict&&node.id){this.checkLValSimple(node.id,BIND_OUTSIDE);}node.body=this.parseBlock(false,undefined,useStrict&&!oldStrict);node.expression=false;this.adaptDirectivePrologue(node.body.body);this.labels=oldLabels;}this.exitScope();};pp$3.isSimpleParamList=function(params){for(var i=0,list=params;i<list.length;i+=1){var param=list[i];if(param.type!==\"Identifier\"){return false;}}return true;};// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\npp$3.checkParams=function(node,allowDuplicates){var nameHash=Object.create(null);for(var i=0,list=node.params;i<list.length;i+=1){var param=list[i];this.checkLValInnerPattern(param,BIND_VAR,allowDuplicates?null:nameHash);}};// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\npp$3.parseExprList=function(close,allowTrailingComma,allowEmpty,refDestructuringErrors){var elts=[],first=true;while(!this.eat(close)){if(!first){this.expect(types.comma);if(allowTrailingComma&&this.afterTrailingComma(close)){break;}}else{first=false;}var elt=void 0;if(allowEmpty&&this.type===types.comma){elt=null;}else if(this.type===types.ellipsis){elt=this.parseSpread(refDestructuringErrors);if(refDestructuringErrors&&this.type===types.comma&&refDestructuringErrors.trailingComma<0){refDestructuringErrors.trailingComma=this.start;}}else{elt=this.parseMaybeAssign(false,refDestructuringErrors);}elts.push(elt);}return elts;};pp$3.checkUnreserved=function(ref){var start=ref.start;var end=ref.end;var name=ref.name;if(this.inGenerator&&name===\"yield\"){this.raiseRecoverable(start,\"Cannot use 'yield' as identifier inside a generator\");}if(this.inAsync&&name===\"await\"){this.raiseRecoverable(start,\"Cannot use 'await' as identifier inside an async function\");}if(this.currentThisScope().inClassFieldInit&&name===\"arguments\"){this.raiseRecoverable(start,\"Cannot use 'arguments' in class field initializer\");}if(this.keywords.test(name)){this.raise(start,\"Unexpected keyword '\"+name+\"'\");}if(this.options.ecmaVersion<6&&this.input.slice(start,end).indexOf(\"\\\\\")!==-1){return;}var re=this.strict?this.reservedWordsStrict:this.reservedWords;if(re.test(name)){if(!this.inAsync&&name===\"await\"){this.raiseRecoverable(start,\"Cannot use keyword 'await' outside an async function\");}this.raiseRecoverable(start,\"The keyword '\"+name+\"' is reserved\");}};// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\npp$3.parseIdent=function(liberal,isBinding){var node=this.startNode();if(this.type===types.name){node.name=this.value;}else if(this.type.keyword){node.name=this.type.keyword;// To fix https://github.com/acornjs/acorn/issues/575\n// `class` and `function` keywords push new context into this.context.\n// But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n// If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\nif((node.name===\"class\"||node.name===\"function\")&&(this.lastTokEnd!==this.lastTokStart+1||this.input.charCodeAt(this.lastTokStart)!==46)){this.context.pop();}}else{this.unexpected();}this.next(!!liberal);this.finishNode(node,\"Identifier\");if(!liberal){this.checkUnreserved(node);if(node.name===\"await\"&&!this.awaitIdentPos){this.awaitIdentPos=node.start;}}return node;};pp$3.parsePrivateIdent=function(){var node=this.startNode();if(this.type===types.privateId){node.name=this.value;}else{this.unexpected();}this.next();this.finishNode(node,\"PrivateIdentifier\");// For validating existence\nif(this.privateNameStack.length===0){this.raise(node.start,\"Private field '#\"+node.name+\"' must be declared in an enclosing class\");}else{this.privateNameStack[this.privateNameStack.length-1].used.push(node);}return node;};// Parses yield expression inside generator.\npp$3.parseYield=function(forInit){if(!this.yieldPos){this.yieldPos=this.start;}var node=this.startNode();this.next();if(this.type===types.semi||this.canInsertSemicolon()||this.type!==types.star&&!this.type.startsExpr){node.delegate=false;node.argument=null;}else{node.delegate=this.eat(types.star);node.argument=this.parseMaybeAssign(forInit);}return this.finishNode(node,\"YieldExpression\");};pp$3.parseAwait=function(){if(!this.awaitPos){this.awaitPos=this.start;}var node=this.startNode();this.next();node.argument=this.parseMaybeUnary(null,true);return this.finishNode(node,\"AwaitExpression\");};var pp$4=Parser.prototype;// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\npp$4.raise=function(pos,message){var loc=getLineInfo(this.input,pos);message+=\" (\"+loc.line+\":\"+loc.column+\")\";var err=new SyntaxError(message);err.pos=pos;err.loc=loc;err.raisedAt=this.pos;throw err;};pp$4.raiseRecoverable=pp$4.raise;pp$4.curPosition=function(){if(this.options.locations){return new Position(this.curLine,this.pos-this.lineStart);}};var pp$5=Parser.prototype;var Scope=function Scope(flags){this.flags=flags;// A list of var-declared names in the current lexical scope\nthis.var=[];// A list of lexically-declared names in the current lexical scope\nthis.lexical=[];// A list of lexically-declared FunctionDeclaration names in the current lexical scope\nthis.functions=[];// A switch to disallow the identifier reference 'arguments'\nthis.inClassFieldInit=false;};// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\npp$5.enterScope=function(flags){this.scopeStack.push(new Scope(flags));};pp$5.exitScope=function(){this.scopeStack.pop();};// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$5.treatFunctionsAsVarInScope=function(scope){return scope.flags&SCOPE_FUNCTION||!this.inModule&&scope.flags&SCOPE_TOP;};pp$5.declareName=function(name,bindingType,pos){var redeclared=false;if(bindingType===BIND_LEXICAL){var scope=this.currentScope();redeclared=scope.lexical.indexOf(name)>-1||scope.functions.indexOf(name)>-1||scope.var.indexOf(name)>-1;scope.lexical.push(name);if(this.inModule&&scope.flags&SCOPE_TOP){delete this.undefinedExports[name];}}else if(bindingType===BIND_SIMPLE_CATCH){var scope$1=this.currentScope();scope$1.lexical.push(name);}else if(bindingType===BIND_FUNCTION){var scope$2=this.currentScope();if(this.treatFunctionsAsVar){redeclared=scope$2.lexical.indexOf(name)>-1;}else{redeclared=scope$2.lexical.indexOf(name)>-1||scope$2.var.indexOf(name)>-1;}scope$2.functions.push(name);}else{for(var i=this.scopeStack.length-1;i>=0;--i){var scope$3=this.scopeStack[i];if(scope$3.lexical.indexOf(name)>-1&&!(scope$3.flags&SCOPE_SIMPLE_CATCH&&scope$3.lexical[0]===name)||!this.treatFunctionsAsVarInScope(scope$3)&&scope$3.functions.indexOf(name)>-1){redeclared=true;break;}scope$3.var.push(name);if(this.inModule&&scope$3.flags&SCOPE_TOP){delete this.undefinedExports[name];}if(scope$3.flags&SCOPE_VAR){break;}}}if(redeclared){this.raiseRecoverable(pos,\"Identifier '\"+name+\"' has already been declared\");}};pp$5.checkLocalExport=function(id){// scope.functions must be empty as Module code is always strict.\nif(this.scopeStack[0].lexical.indexOf(id.name)===-1&&this.scopeStack[0].var.indexOf(id.name)===-1){this.undefinedExports[id.name]=id;}};pp$5.currentScope=function(){return this.scopeStack[this.scopeStack.length-1];};pp$5.currentVarScope=function(){for(var i=this.scopeStack.length-1;;i--){var scope=this.scopeStack[i];if(scope.flags&SCOPE_VAR){return scope;}}};// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$5.currentThisScope=function(){for(var i=this.scopeStack.length-1;;i--){var scope=this.scopeStack[i];if(scope.flags&SCOPE_VAR&&!(scope.flags&SCOPE_ARROW)){return scope;}}};var Node=function Node(parser,pos,loc){this.type=\"\";this.start=pos;this.end=0;if(parser.options.locations){this.loc=new SourceLocation(parser,loc);}if(parser.options.directSourceFile){this.sourceFile=parser.options.directSourceFile;}if(parser.options.ranges){this.range=[pos,0];}};// Start an AST node, attaching a start offset.\nvar pp$6=Parser.prototype;pp$6.startNode=function(){return new Node(this,this.start,this.startLoc);};pp$6.startNodeAt=function(pos,loc){return new Node(this,pos,loc);};// Finish an AST node, adding `type` and `end` properties.\nfunction finishNodeAt(node,type,pos,loc){node.type=type;node.end=pos;if(this.options.locations){node.loc.end=loc;}if(this.options.ranges){node.range[1]=pos;}return node;}pp$6.finishNode=function(node,type){return finishNodeAt.call(this,node,type,this.lastTokEnd,this.lastTokEndLoc);};// Finish node at given position\npp$6.finishNodeAt=function(node,type,pos,loc){return finishNodeAt.call(this,node,type,pos,loc);};pp$6.copyNode=function(node){var newNode=new Node(this,node.start,this.startLoc);for(var prop in node){newNode[prop]=node[prop];}return newNode;};// The algorithm used to determine whether a regexp can appear at a\nvar TokContext=function TokContext(token,isExpr,preserveSpace,override,generator){this.token=token;this.isExpr=!!isExpr;this.preserveSpace=!!preserveSpace;this.override=override;this.generator=!!generator;};var types$1={b_stat:new TokContext(\"{\",false),b_expr:new TokContext(\"{\",true),b_tmpl:new TokContext(\"${\",false),p_stat:new TokContext(\"(\",false),p_expr:new TokContext(\"(\",true),q_tmpl:new TokContext(\"`\",true,true,function(p){return p.tryReadTemplateToken();}),f_stat:new TokContext(\"function\",false),f_expr:new TokContext(\"function\",true),f_expr_gen:new TokContext(\"function\",true,false,null,true),f_gen:new TokContext(\"function\",false,false,null,true)};var pp$7=Parser.prototype;pp$7.initialContext=function(){return[types$1.b_stat];};pp$7.braceIsBlock=function(prevType){var parent=this.curContext();if(parent===types$1.f_expr||parent===types$1.f_stat){return true;}if(prevType===types.colon&&(parent===types$1.b_stat||parent===types$1.b_expr)){return!parent.isExpr;}// The check for `tt.name && exprAllowed` detects whether we are\n// after a `yield` or `of` construct. See the `updateContext` for\n// `tt.name`.\nif(prevType===types._return||prevType===types.name&&this.exprAllowed){return lineBreak.test(this.input.slice(this.lastTokEnd,this.start));}if(prevType===types._else||prevType===types.semi||prevType===types.eof||prevType===types.parenR||prevType===types.arrow){return true;}if(prevType===types.braceL){return parent===types$1.b_stat;}if(prevType===types._var||prevType===types._const||prevType===types.name){return false;}return!this.exprAllowed;};pp$7.inGeneratorContext=function(){for(var i=this.context.length-1;i>=1;i--){var context=this.context[i];if(context.token===\"function\"){return context.generator;}}return false;};pp$7.updateContext=function(prevType){var update,type=this.type;if(type.keyword&&prevType===types.dot){this.exprAllowed=false;}else if(update=type.updateContext){update.call(this,prevType);}else{this.exprAllowed=type.beforeExpr;}};// Token-specific context update code\ntypes.parenR.updateContext=types.braceR.updateContext=function(){if(this.context.length===1){this.exprAllowed=true;return;}var out=this.context.pop();if(out===types$1.b_stat&&this.curContext().token===\"function\"){out=this.context.pop();}this.exprAllowed=!out.isExpr;};types.braceL.updateContext=function(prevType){this.context.push(this.braceIsBlock(prevType)?types$1.b_stat:types$1.b_expr);this.exprAllowed=true;};types.dollarBraceL.updateContext=function(){this.context.push(types$1.b_tmpl);this.exprAllowed=true;};types.parenL.updateContext=function(prevType){var statementParens=prevType===types._if||prevType===types._for||prevType===types._with||prevType===types._while;this.context.push(statementParens?types$1.p_stat:types$1.p_expr);this.exprAllowed=true;};types.incDec.updateContext=function(){// tokExprAllowed stays unchanged\n};types._function.updateContext=types._class.updateContext=function(prevType){if(prevType.beforeExpr&&prevType!==types._else&&!(prevType===types.semi&&this.curContext()!==types$1.p_stat)&&!(prevType===types._return&&lineBreak.test(this.input.slice(this.lastTokEnd,this.start)))&&!((prevType===types.colon||prevType===types.braceL)&&this.curContext()===types$1.b_stat)){this.context.push(types$1.f_expr);}else{this.context.push(types$1.f_stat);}this.exprAllowed=false;};types.backQuote.updateContext=function(){if(this.curContext()===types$1.q_tmpl){this.context.pop();}else{this.context.push(types$1.q_tmpl);}this.exprAllowed=false;};types.star.updateContext=function(prevType){if(prevType===types._function){var index=this.context.length-1;if(this.context[index]===types$1.f_expr){this.context[index]=types$1.f_expr_gen;}else{this.context[index]=types$1.f_gen;}}this.exprAllowed=true;};types.name.updateContext=function(prevType){var allowed=false;if(this.options.ecmaVersion>=6&&prevType!==types.dot){if(this.value===\"of\"&&!this.exprAllowed||this.value===\"yield\"&&this.inGeneratorContext()){allowed=true;}}this.exprAllowed=allowed;};// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties=\"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";var ecma10BinaryProperties=ecma9BinaryProperties+\" Extended_Pictographic\";var ecma11BinaryProperties=ecma10BinaryProperties;var ecma12BinaryProperties=ecma11BinaryProperties+\" EBase EComp EMod EPres ExtPict\";var unicodeBinaryProperties={9:ecma9BinaryProperties,10:ecma10BinaryProperties,11:ecma11BinaryProperties,12:ecma12BinaryProperties};// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues=\"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";// #table-unicode-script-values\nvar ecma9ScriptValues=\"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";var ecma10ScriptValues=ecma9ScriptValues+\" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";var ecma11ScriptValues=ecma10ScriptValues+\" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";var ecma12ScriptValues=ecma11ScriptValues+\" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";var unicodeScriptValues={9:ecma9ScriptValues,10:ecma10ScriptValues,11:ecma11ScriptValues,12:ecma12ScriptValues};var data={};function buildUnicodeData(ecmaVersion){var d=data[ecmaVersion]={binary:wordsRegexp(unicodeBinaryProperties[ecmaVersion]+\" \"+unicodeGeneralCategoryValues),nonBinary:{General_Category:wordsRegexp(unicodeGeneralCategoryValues),Script:wordsRegexp(unicodeScriptValues[ecmaVersion])}};d.nonBinary.Script_Extensions=d.nonBinary.Script;d.nonBinary.gc=d.nonBinary.General_Category;d.nonBinary.sc=d.nonBinary.Script;d.nonBinary.scx=d.nonBinary.Script_Extensions;}buildUnicodeData(9);buildUnicodeData(10);buildUnicodeData(11);buildUnicodeData(12);var pp$8=Parser.prototype;var RegExpValidationState=function RegExpValidationState(parser){this.parser=parser;this.validFlags=\"gim\"+(parser.options.ecmaVersion>=6?\"uy\":\"\")+(parser.options.ecmaVersion>=9?\"s\":\"\")+(parser.options.ecmaVersion>=13?\"d\":\"\");this.unicodeProperties=data[parser.options.ecmaVersion>=12?12:parser.options.ecmaVersion];this.source=\"\";this.flags=\"\";this.start=0;this.switchU=false;this.switchN=false;this.pos=0;this.lastIntValue=0;this.lastStringValue=\"\";this.lastAssertionIsQuantifiable=false;this.numCapturingParens=0;this.maxBackReference=0;this.groupNames=[];this.backReferenceNames=[];};RegExpValidationState.prototype.reset=function reset(start,pattern,flags){var unicode=flags.indexOf(\"u\")!==-1;this.start=start|0;this.source=pattern+\"\";this.flags=flags;this.switchU=unicode&&this.parser.options.ecmaVersion>=6;this.switchN=unicode&&this.parser.options.ecmaVersion>=9;};RegExpValidationState.prototype.raise=function raise(message){this.parser.raiseRecoverable(this.start,\"Invalid regular expression: /\"+this.source+\"/: \"+message);};// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at=function at(i,forceU){if(forceU===void 0)forceU=false;var s=this.source;var l=s.length;if(i>=l){return-1;}var c=s.charCodeAt(i);if(!(forceU||this.switchU)||c<=0xD7FF||c>=0xE000||i+1>=l){return c;}var next=s.charCodeAt(i+1);return next>=0xDC00&&next<=0xDFFF?(c<<10)+next-0x35FDC00:c;};RegExpValidationState.prototype.nextIndex=function nextIndex(i,forceU){if(forceU===void 0)forceU=false;var s=this.source;var l=s.length;if(i>=l){return l;}var c=s.charCodeAt(i),next;if(!(forceU||this.switchU)||c<=0xD7FF||c>=0xE000||i+1>=l||(next=s.charCodeAt(i+1))<0xDC00||next>0xDFFF){return i+1;}return i+2;};RegExpValidationState.prototype.current=function current(forceU){if(forceU===void 0)forceU=false;return this.at(this.pos,forceU);};RegExpValidationState.prototype.lookahead=function lookahead(forceU){if(forceU===void 0)forceU=false;return this.at(this.nextIndex(this.pos,forceU),forceU);};RegExpValidationState.prototype.advance=function advance(forceU){if(forceU===void 0)forceU=false;this.pos=this.nextIndex(this.pos,forceU);};RegExpValidationState.prototype.eat=function eat(ch,forceU){if(forceU===void 0)forceU=false;if(this.current(forceU)===ch){this.advance(forceU);return true;}return false;};function codePointToString(ch){if(ch<=0xFFFF){return String.fromCharCode(ch);}ch-=0x10000;return String.fromCharCode((ch>>10)+0xD800,(ch&0x03FF)+0xDC00);}/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */pp$8.validateRegExpFlags=function(state){var validFlags=state.validFlags;var flags=state.flags;for(var i=0;i<flags.length;i++){var flag=flags.charAt(i);if(validFlags.indexOf(flag)===-1){this.raise(state.start,\"Invalid regular expression flag\");}if(flags.indexOf(flag,i+1)>-1){this.raise(state.start,\"Duplicate regular expression flag\");}}};/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */pp$8.validateRegExpPattern=function(state){this.regexp_pattern(state);// The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n// parsing contains a |GroupName|, reparse with the goal symbol\n// |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n// exception if _P_ did not conform to the grammar, if any elements of _P_\n// were not matched by the parse, or if any Early Error conditions exist.\nif(!state.switchN&&this.options.ecmaVersion>=9&&state.groupNames.length>0){state.switchN=true;this.regexp_pattern(state);}};// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$8.regexp_pattern=function(state){state.pos=0;state.lastIntValue=0;state.lastStringValue=\"\";state.lastAssertionIsQuantifiable=false;state.numCapturingParens=0;state.maxBackReference=0;state.groupNames.length=0;state.backReferenceNames.length=0;this.regexp_disjunction(state);if(state.pos!==state.source.length){// Make the same messages as V8.\nif(state.eat(0x29/* ) */)){state.raise(\"Unmatched ')'\");}if(state.eat(0x5D/* ] */)||state.eat(0x7D/* } */)){state.raise(\"Lone quantifier brackets\");}}if(state.maxBackReference>state.numCapturingParens){state.raise(\"Invalid escape\");}for(var i=0,list=state.backReferenceNames;i<list.length;i+=1){var name=list[i];if(state.groupNames.indexOf(name)===-1){state.raise(\"Invalid named capture referenced\");}}};// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$8.regexp_disjunction=function(state){this.regexp_alternative(state);while(state.eat(0x7C/* | */)){this.regexp_alternative(state);}// Make the same message as V8.\nif(this.regexp_eatQuantifier(state,true)){state.raise(\"Nothing to repeat\");}if(state.eat(0x7B/* { */)){state.raise(\"Lone quantifier brackets\");}};// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$8.regexp_alternative=function(state){while(state.pos<state.source.length&&this.regexp_eatTerm(state)){}};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$8.regexp_eatTerm=function(state){if(this.regexp_eatAssertion(state)){// Handle `QuantifiableAssertion Quantifier` alternative.\n// `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n// is a QuantifiableAssertion.\nif(state.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(state)){// Make the same message as V8.\nif(state.switchU){state.raise(\"Invalid quantifier\");}}return true;}if(state.switchU?this.regexp_eatAtom(state):this.regexp_eatExtendedAtom(state)){this.regexp_eatQuantifier(state);return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$8.regexp_eatAssertion=function(state){var start=state.pos;state.lastAssertionIsQuantifiable=false;// ^, $\nif(state.eat(0x5E/* ^ */)||state.eat(0x24/* $ */)){return true;}// \\b \\B\nif(state.eat(0x5C/* \\ */)){if(state.eat(0x42/* B */)||state.eat(0x62/* b */)){return true;}state.pos=start;}// Lookahead / Lookbehind\nif(state.eat(0x28/* ( */)&&state.eat(0x3F/* ? */)){var lookbehind=false;if(this.options.ecmaVersion>=9){lookbehind=state.eat(0x3C/* < */);}if(state.eat(0x3D/* = */)||state.eat(0x21/* ! */)){this.regexp_disjunction(state);if(!state.eat(0x29/* ) */)){state.raise(\"Unterminated group\");}state.lastAssertionIsQuantifiable=!lookbehind;return true;}}state.pos=start;return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$8.regexp_eatQuantifier=function(state,noError){if(noError===void 0)noError=false;if(this.regexp_eatQuantifierPrefix(state,noError)){state.eat(0x3F/* ? */);return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$8.regexp_eatQuantifierPrefix=function(state,noError){return state.eat(0x2A/* * */)||state.eat(0x2B/* + */)||state.eat(0x3F/* ? */)||this.regexp_eatBracedQuantifier(state,noError);};pp$8.regexp_eatBracedQuantifier=function(state,noError){var start=state.pos;if(state.eat(0x7B/* { */)){var min=0,max=-1;if(this.regexp_eatDecimalDigits(state)){min=state.lastIntValue;if(state.eat(0x2C/* , */)&&this.regexp_eatDecimalDigits(state)){max=state.lastIntValue;}if(state.eat(0x7D/* } */)){// SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\nif(max!==-1&&max<min&&!noError){state.raise(\"numbers out of order in {} quantifier\");}return true;}}if(state.switchU&&!noError){state.raise(\"Incomplete quantifier\");}state.pos=start;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$8.regexp_eatAtom=function(state){return this.regexp_eatPatternCharacters(state)||state.eat(0x2E/* . */)||this.regexp_eatReverseSolidusAtomEscape(state)||this.regexp_eatCharacterClass(state)||this.regexp_eatUncapturingGroup(state)||this.regexp_eatCapturingGroup(state);};pp$8.regexp_eatReverseSolidusAtomEscape=function(state){var start=state.pos;if(state.eat(0x5C/* \\ */)){if(this.regexp_eatAtomEscape(state)){return true;}state.pos=start;}return false;};pp$8.regexp_eatUncapturingGroup=function(state){var start=state.pos;if(state.eat(0x28/* ( */)){if(state.eat(0x3F/* ? */)&&state.eat(0x3A/* : */)){this.regexp_disjunction(state);if(state.eat(0x29/* ) */)){return true;}state.raise(\"Unterminated group\");}state.pos=start;}return false;};pp$8.regexp_eatCapturingGroup=function(state){if(state.eat(0x28/* ( */)){if(this.options.ecmaVersion>=9){this.regexp_groupSpecifier(state);}else if(state.current()===0x3F/* ? */){state.raise(\"Invalid group\");}this.regexp_disjunction(state);if(state.eat(0x29/* ) */)){state.numCapturingParens+=1;return true;}state.raise(\"Unterminated group\");}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$8.regexp_eatExtendedAtom=function(state){return state.eat(0x2E/* . */)||this.regexp_eatReverseSolidusAtomEscape(state)||this.regexp_eatCharacterClass(state)||this.regexp_eatUncapturingGroup(state)||this.regexp_eatCapturingGroup(state)||this.regexp_eatInvalidBracedQuantifier(state)||this.regexp_eatExtendedPatternCharacter(state);};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$8.regexp_eatInvalidBracedQuantifier=function(state){if(this.regexp_eatBracedQuantifier(state,true)){state.raise(\"Nothing to repeat\");}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$8.regexp_eatSyntaxCharacter=function(state){var ch=state.current();if(isSyntaxCharacter(ch)){state.lastIntValue=ch;state.advance();return true;}return false;};function isSyntaxCharacter(ch){return ch===0x24/* $ */||ch>=0x28/* ( */&&ch<=0x2B/* + */||ch===0x2E/* . */||ch===0x3F/* ? */||ch>=0x5B/* [ */&&ch<=0x5E/* ^ */||ch>=0x7B/* { */&&ch<=0x7D/* } */;}// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$8.regexp_eatPatternCharacters=function(state){var start=state.pos;var ch=0;while((ch=state.current())!==-1&&!isSyntaxCharacter(ch)){state.advance();}return state.pos!==start;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$8.regexp_eatExtendedPatternCharacter=function(state){var ch=state.current();if(ch!==-1&&ch!==0x24/* $ */&&!(ch>=0x28/* ( */&&ch<=0x2B/* + */)&&ch!==0x2E/* . */&&ch!==0x3F/* ? */&&ch!==0x5B/* [ */&&ch!==0x5E/* ^ */&&ch!==0x7C/* | */){state.advance();return true;}return false;};// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$8.regexp_groupSpecifier=function(state){if(state.eat(0x3F/* ? */)){if(this.regexp_eatGroupName(state)){if(state.groupNames.indexOf(state.lastStringValue)!==-1){state.raise(\"Duplicate capture group name\");}state.groupNames.push(state.lastStringValue);return;}state.raise(\"Invalid group\");}};// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatGroupName=function(state){state.lastStringValue=\"\";if(state.eat(0x3C/* < */)){if(this.regexp_eatRegExpIdentifierName(state)&&state.eat(0x3E/* > */)){return true;}state.raise(\"Invalid capture group name\");}return false;};// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatRegExpIdentifierName=function(state){state.lastStringValue=\"\";if(this.regexp_eatRegExpIdentifierStart(state)){state.lastStringValue+=codePointToString(state.lastIntValue);while(this.regexp_eatRegExpIdentifierPart(state)){state.lastStringValue+=codePointToString(state.lastIntValue);}return true;}return false;};// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$8.regexp_eatRegExpIdentifierStart=function(state){var start=state.pos;var forceU=this.options.ecmaVersion>=11;var ch=state.current(forceU);state.advance(forceU);if(ch===0x5C/* \\ */&&this.regexp_eatRegExpUnicodeEscapeSequence(state,forceU)){ch=state.lastIntValue;}if(isRegExpIdentifierStart(ch)){state.lastIntValue=ch;return true;}state.pos=start;return false;};function isRegExpIdentifierStart(ch){return isIdentifierStart(ch,true)||ch===0x24/* $ */||ch===0x5F;/* _ */}// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$8.regexp_eatRegExpIdentifierPart=function(state){var start=state.pos;var forceU=this.options.ecmaVersion>=11;var ch=state.current(forceU);state.advance(forceU);if(ch===0x5C/* \\ */&&this.regexp_eatRegExpUnicodeEscapeSequence(state,forceU)){ch=state.lastIntValue;}if(isRegExpIdentifierPart(ch)){state.lastIntValue=ch;return true;}state.pos=start;return false;};function isRegExpIdentifierPart(ch){return isIdentifierChar(ch,true)||ch===0x24/* $ */||ch===0x5F/* _ */||ch===0x200C/* <ZWNJ> */||ch===0x200D;/* <ZWJ> */}// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$8.regexp_eatAtomEscape=function(state){if(this.regexp_eatBackReference(state)||this.regexp_eatCharacterClassEscape(state)||this.regexp_eatCharacterEscape(state)||state.switchN&&this.regexp_eatKGroupName(state)){return true;}if(state.switchU){// Make the same message as V8.\nif(state.current()===0x63/* c */){state.raise(\"Invalid unicode escape\");}state.raise(\"Invalid escape\");}return false;};pp$8.regexp_eatBackReference=function(state){var start=state.pos;if(this.regexp_eatDecimalEscape(state)){var n=state.lastIntValue;if(state.switchU){// For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\nif(n>state.maxBackReference){state.maxBackReference=n;}return true;}if(n<=state.numCapturingParens){return true;}state.pos=start;}return false;};pp$8.regexp_eatKGroupName=function(state){if(state.eat(0x6B/* k */)){if(this.regexp_eatGroupName(state)){state.backReferenceNames.push(state.lastStringValue);return true;}state.raise(\"Invalid named reference\");}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$8.regexp_eatCharacterEscape=function(state){return this.regexp_eatControlEscape(state)||this.regexp_eatCControlLetter(state)||this.regexp_eatZero(state)||this.regexp_eatHexEscapeSequence(state)||this.regexp_eatRegExpUnicodeEscapeSequence(state,false)||!state.switchU&&this.regexp_eatLegacyOctalEscapeSequence(state)||this.regexp_eatIdentityEscape(state);};pp$8.regexp_eatCControlLetter=function(state){var start=state.pos;if(state.eat(0x63/* c */)){if(this.regexp_eatControlLetter(state)){return true;}state.pos=start;}return false;};pp$8.regexp_eatZero=function(state){if(state.current()===0x30/* 0 */&&!isDecimalDigit(state.lookahead())){state.lastIntValue=0;state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$8.regexp_eatControlEscape=function(state){var ch=state.current();if(ch===0x74/* t */){state.lastIntValue=0x09;/* \\t */state.advance();return true;}if(ch===0x6E/* n */){state.lastIntValue=0x0A;/* \\n */state.advance();return true;}if(ch===0x76/* v */){state.lastIntValue=0x0B;/* \\v */state.advance();return true;}if(ch===0x66/* f */){state.lastIntValue=0x0C;/* \\f */state.advance();return true;}if(ch===0x72/* r */){state.lastIntValue=0x0D;/* \\r */state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$8.regexp_eatControlLetter=function(state){var ch=state.current();if(isControlLetter(ch)){state.lastIntValue=ch%0x20;state.advance();return true;}return false;};function isControlLetter(ch){return ch>=0x41/* A */&&ch<=0x5A/* Z */||ch>=0x61/* a */&&ch<=0x7A/* z */;}// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$8.regexp_eatRegExpUnicodeEscapeSequence=function(state,forceU){if(forceU===void 0)forceU=false;var start=state.pos;var switchU=forceU||state.switchU;if(state.eat(0x75/* u */)){if(this.regexp_eatFixedHexDigits(state,4)){var lead=state.lastIntValue;if(switchU&&lead>=0xD800&&lead<=0xDBFF){var leadSurrogateEnd=state.pos;if(state.eat(0x5C/* \\ */)&&state.eat(0x75/* u */)&&this.regexp_eatFixedHexDigits(state,4)){var trail=state.lastIntValue;if(trail>=0xDC00&&trail<=0xDFFF){state.lastIntValue=(lead-0xD800)*0x400+(trail-0xDC00)+0x10000;return true;}}state.pos=leadSurrogateEnd;state.lastIntValue=lead;}return true;}if(switchU&&state.eat(0x7B/* { */)&&this.regexp_eatHexDigits(state)&&state.eat(0x7D/* } */)&&isValidUnicode(state.lastIntValue)){return true;}if(switchU){state.raise(\"Invalid unicode escape\");}state.pos=start;}return false;};function isValidUnicode(ch){return ch>=0&&ch<=0x10FFFF;}// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$8.regexp_eatIdentityEscape=function(state){if(state.switchU){if(this.regexp_eatSyntaxCharacter(state)){return true;}if(state.eat(0x2F/* / */)){state.lastIntValue=0x2F;/* / */return true;}return false;}var ch=state.current();if(ch!==0x63/* c */&&(!state.switchN||ch!==0x6B/* k */)){state.lastIntValue=ch;state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$8.regexp_eatDecimalEscape=function(state){state.lastIntValue=0;var ch=state.current();if(ch>=0x31/* 1 */&&ch<=0x39/* 9 */){do{state.lastIntValue=10*state.lastIntValue+(ch-0x30/* 0 */);state.advance();}while((ch=state.current())>=0x30/* 0 */&&ch<=0x39/* 9 */);return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$8.regexp_eatCharacterClassEscape=function(state){var ch=state.current();if(isCharacterClassEscape(ch)){state.lastIntValue=-1;state.advance();return true;}if(state.switchU&&this.options.ecmaVersion>=9&&(ch===0x50/* P */||ch===0x70/* p */)){state.lastIntValue=-1;state.advance();if(state.eat(0x7B/* { */)&&this.regexp_eatUnicodePropertyValueExpression(state)&&state.eat(0x7D/* } */)){return true;}state.raise(\"Invalid property name\");}return false;};function isCharacterClassEscape(ch){return ch===0x64/* d */||ch===0x44/* D */||ch===0x73/* s */||ch===0x53/* S */||ch===0x77/* w */||ch===0x57/* W */;}// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$8.regexp_eatUnicodePropertyValueExpression=function(state){var start=state.pos;// UnicodePropertyName `=` UnicodePropertyValue\nif(this.regexp_eatUnicodePropertyName(state)&&state.eat(0x3D/* = */)){var name=state.lastStringValue;if(this.regexp_eatUnicodePropertyValue(state)){var value=state.lastStringValue;this.regexp_validateUnicodePropertyNameAndValue(state,name,value);return true;}}state.pos=start;// LoneUnicodePropertyNameOrValue\nif(this.regexp_eatLoneUnicodePropertyNameOrValue(state)){var nameOrValue=state.lastStringValue;this.regexp_validateUnicodePropertyNameOrValue(state,nameOrValue);return true;}return false;};pp$8.regexp_validateUnicodePropertyNameAndValue=function(state,name,value){if(!has(state.unicodeProperties.nonBinary,name)){state.raise(\"Invalid property name\");}if(!state.unicodeProperties.nonBinary[name].test(value)){state.raise(\"Invalid property value\");}};pp$8.regexp_validateUnicodePropertyNameOrValue=function(state,nameOrValue){if(!state.unicodeProperties.binary.test(nameOrValue)){state.raise(\"Invalid property name\");}};// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$8.regexp_eatUnicodePropertyName=function(state){var ch=0;state.lastStringValue=\"\";while(isUnicodePropertyNameCharacter(ch=state.current())){state.lastStringValue+=codePointToString(ch);state.advance();}return state.lastStringValue!==\"\";};function isUnicodePropertyNameCharacter(ch){return isControlLetter(ch)||ch===0x5F;/* _ */}// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatUnicodePropertyValue=function(state){var ch=0;state.lastStringValue=\"\";while(isUnicodePropertyValueCharacter(ch=state.current())){state.lastStringValue+=codePointToString(ch);state.advance();}return state.lastStringValue!==\"\";};function isUnicodePropertyValueCharacter(ch){return isUnicodePropertyNameCharacter(ch)||isDecimalDigit(ch);}// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatLoneUnicodePropertyNameOrValue=function(state){return this.regexp_eatUnicodePropertyValue(state);};// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$8.regexp_eatCharacterClass=function(state){if(state.eat(0x5B/* [ */)){state.eat(0x5E/* ^ */);this.regexp_classRanges(state);if(state.eat(0x5D/* ] */)){return true;}// Unreachable since it threw \"unterminated regular expression\" error before.\nstate.raise(\"Unterminated character class\");}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$8.regexp_classRanges=function(state){while(this.regexp_eatClassAtom(state)){var left=state.lastIntValue;if(state.eat(0x2D/* - */)&&this.regexp_eatClassAtom(state)){var right=state.lastIntValue;if(state.switchU&&(left===-1||right===-1)){state.raise(\"Invalid character class\");}if(left!==-1&&right!==-1&&left>right){state.raise(\"Range out of order in character class\");}}}};// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$8.regexp_eatClassAtom=function(state){var start=state.pos;if(state.eat(0x5C/* \\ */)){if(this.regexp_eatClassEscape(state)){return true;}if(state.switchU){// Make the same message as V8.\nvar ch$1=state.current();if(ch$1===0x63/* c */||isOctalDigit(ch$1)){state.raise(\"Invalid class escape\");}state.raise(\"Invalid escape\");}state.pos=start;}var ch=state.current();if(ch!==0x5D/* ] */){state.lastIntValue=ch;state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$8.regexp_eatClassEscape=function(state){var start=state.pos;if(state.eat(0x62/* b */)){state.lastIntValue=0x08;/* <BS> */return true;}if(state.switchU&&state.eat(0x2D/* - */)){state.lastIntValue=0x2D;/* - */return true;}if(!state.switchU&&state.eat(0x63/* c */)){if(this.regexp_eatClassControlLetter(state)){return true;}state.pos=start;}return this.regexp_eatCharacterClassEscape(state)||this.regexp_eatCharacterEscape(state);};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$8.regexp_eatClassControlLetter=function(state){var ch=state.current();if(isDecimalDigit(ch)||ch===0x5F/* _ */){state.lastIntValue=ch%0x20;state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatHexEscapeSequence=function(state){var start=state.pos;if(state.eat(0x78/* x */)){if(this.regexp_eatFixedHexDigits(state,2)){return true;}if(state.switchU){state.raise(\"Invalid escape\");}state.pos=start;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$8.regexp_eatDecimalDigits=function(state){var start=state.pos;var ch=0;state.lastIntValue=0;while(isDecimalDigit(ch=state.current())){state.lastIntValue=10*state.lastIntValue+(ch-0x30/* 0 */);state.advance();}return state.pos!==start;};function isDecimalDigit(ch){return ch>=0x30/* 0 */&&ch<=0x39;/* 9 */}// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$8.regexp_eatHexDigits=function(state){var start=state.pos;var ch=0;state.lastIntValue=0;while(isHexDigit(ch=state.current())){state.lastIntValue=16*state.lastIntValue+hexToInt(ch);state.advance();}return state.pos!==start;};function isHexDigit(ch){return ch>=0x30/* 0 */&&ch<=0x39/* 9 */||ch>=0x41/* A */&&ch<=0x46/* F */||ch>=0x61/* a */&&ch<=0x66/* f */;}function hexToInt(ch){if(ch>=0x41/* A */&&ch<=0x46/* F */){return 10+(ch-0x41/* A */);}if(ch>=0x61/* a */&&ch<=0x66/* f */){return 10+(ch-0x61/* a */);}return ch-0x30;/* 0 */}// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$8.regexp_eatLegacyOctalEscapeSequence=function(state){if(this.regexp_eatOctalDigit(state)){var n1=state.lastIntValue;if(this.regexp_eatOctalDigit(state)){var n2=state.lastIntValue;if(n1<=3&&this.regexp_eatOctalDigit(state)){state.lastIntValue=n1*64+n2*8+state.lastIntValue;}else{state.lastIntValue=n1*8+n2;}}else{state.lastIntValue=n1;}return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$8.regexp_eatOctalDigit=function(state){var ch=state.current();if(isOctalDigit(ch)){state.lastIntValue=ch-0x30;/* 0 */state.advance();return true;}state.lastIntValue=0;return false;};function isOctalDigit(ch){return ch>=0x30/* 0 */&&ch<=0x37;/* 7 */}// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatFixedHexDigits=function(state,length){var start=state.pos;state.lastIntValue=0;for(var i=0;i<length;++i){var ch=state.current();if(!isHexDigit(ch)){state.pos=start;return false;}state.lastIntValue=16*state.lastIntValue+hexToInt(ch);state.advance();}return true;};// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\nvar Token=function Token(p){this.type=p.type;this.value=p.value;this.start=p.start;this.end=p.end;if(p.options.locations){this.loc=new SourceLocation(p,p.startLoc,p.endLoc);}if(p.options.ranges){this.range=[p.start,p.end];}};// ## Tokenizer\nvar pp$9=Parser.prototype;// Move to the next token\npp$9.next=function(ignoreEscapeSequenceInKeyword){if(!ignoreEscapeSequenceInKeyword&&this.type.keyword&&this.containsEsc){this.raiseRecoverable(this.start,\"Escape sequence in keyword \"+this.type.keyword);}if(this.options.onToken){this.options.onToken(new Token(this));}this.lastTokEnd=this.end;this.lastTokStart=this.start;this.lastTokEndLoc=this.endLoc;this.lastTokStartLoc=this.startLoc;this.nextToken();};pp$9.getToken=function(){this.next();return new Token(this);};// If we're in an ES6 environment, make parsers iterable\nif(typeof Symbol!==\"undefined\"){pp$9[Symbol.iterator]=function(){var this$1=this;return{next:function next(){var token=this$1.getToken();return{done:token.type===types.eof,value:token};}};};}// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\npp$9.curContext=function(){return this.context[this.context.length-1];};// Read a single token, updating the parser object's token-related\n// properties.\npp$9.nextToken=function(){var curContext=this.curContext();if(!curContext||!curContext.preserveSpace){this.skipSpace();}this.start=this.pos;if(this.options.locations){this.startLoc=this.curPosition();}if(this.pos>=this.input.length){return this.finishToken(types.eof);}if(curContext.override){return curContext.override(this);}else{this.readToken(this.fullCharCodeAtPos());}};pp$9.readToken=function(code){// Identifier or keyword. '\\uXXXX' sequences are allowed in\n// identifiers, so '\\' also dispatches to that.\nif(isIdentifierStart(code,this.options.ecmaVersion>=6)||code===92/* '\\' */){return this.readWord();}return this.getTokenFromCode(code);};pp$9.fullCharCodeAtPos=function(){var code=this.input.charCodeAt(this.pos);if(code<=0xd7ff||code>=0xdc00){return code;}var next=this.input.charCodeAt(this.pos+1);return next<=0xdbff||next>=0xe000?code:(code<<10)+next-0x35fdc00;};pp$9.skipBlockComment=function(){var startLoc=this.options.onComment&&this.curPosition();var start=this.pos,end=this.input.indexOf(\"*/\",this.pos+=2);if(end===-1){this.raise(this.pos-2,\"Unterminated comment\");}this.pos=end+2;if(this.options.locations){lineBreakG.lastIndex=start;var match;while((match=lineBreakG.exec(this.input))&&match.index<this.pos){++this.curLine;this.lineStart=match.index+match[0].length;}}if(this.options.onComment){this.options.onComment(true,this.input.slice(start+2,end),start,this.pos,startLoc,this.curPosition());}};pp$9.skipLineComment=function(startSkip){var start=this.pos;var startLoc=this.options.onComment&&this.curPosition();var ch=this.input.charCodeAt(this.pos+=startSkip);while(this.pos<this.input.length&&!isNewLine(ch)){ch=this.input.charCodeAt(++this.pos);}if(this.options.onComment){this.options.onComment(false,this.input.slice(start+startSkip,this.pos),start,this.pos,startLoc,this.curPosition());}};// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\npp$9.skipSpace=function(){loop:while(this.pos<this.input.length){var ch=this.input.charCodeAt(this.pos);switch(ch){case 32:case 160:// ' '\n++this.pos;break;case 13:if(this.input.charCodeAt(this.pos+1)===10){++this.pos;}case 10:case 8232:case 8233:++this.pos;if(this.options.locations){++this.curLine;this.lineStart=this.pos;}break;case 47:// '/'\nswitch(this.input.charCodeAt(this.pos+1)){case 42:// '*'\nthis.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break loop;}break;default:if(ch>8&&ch<14||ch>=5760&&nonASCIIwhitespace.test(String.fromCharCode(ch))){++this.pos;}else{break loop;}}}};// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\npp$9.finishToken=function(type,val){this.end=this.pos;if(this.options.locations){this.endLoc=this.curPosition();}var prevType=this.type;this.type=type;this.value=val;this.updateContext(prevType);};// ### Token reading\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$9.readToken_dot=function(){var next=this.input.charCodeAt(this.pos+1);if(next>=48&&next<=57){return this.readNumber(true);}var next2=this.input.charCodeAt(this.pos+2);if(this.options.ecmaVersion>=6&&next===46&&next2===46){// 46 = dot '.'\nthis.pos+=3;return this.finishToken(types.ellipsis);}else{++this.pos;return this.finishToken(types.dot);}};pp$9.readToken_slash=function(){// '/'\nvar next=this.input.charCodeAt(this.pos+1);if(this.exprAllowed){++this.pos;return this.readRegexp();}if(next===61){return this.finishOp(types.assign,2);}return this.finishOp(types.slash,1);};pp$9.readToken_mult_modulo_exp=function(code){// '%*'\nvar next=this.input.charCodeAt(this.pos+1);var size=1;var tokentype=code===42?types.star:types.modulo;// exponentiation operator ** and **=\nif(this.options.ecmaVersion>=7&&code===42&&next===42){++size;tokentype=types.starstar;next=this.input.charCodeAt(this.pos+2);}if(next===61){return this.finishOp(types.assign,size+1);}return this.finishOp(tokentype,size);};pp$9.readToken_pipe_amp=function(code){// '|&'\nvar next=this.input.charCodeAt(this.pos+1);if(next===code){if(this.options.ecmaVersion>=12){var next2=this.input.charCodeAt(this.pos+2);if(next2===61){return this.finishOp(types.assign,3);}}return this.finishOp(code===124?types.logicalOR:types.logicalAND,2);}if(next===61){return this.finishOp(types.assign,2);}return this.finishOp(code===124?types.bitwiseOR:types.bitwiseAND,1);};pp$9.readToken_caret=function(){// '^'\nvar next=this.input.charCodeAt(this.pos+1);if(next===61){return this.finishOp(types.assign,2);}return this.finishOp(types.bitwiseXOR,1);};pp$9.readToken_plus_min=function(code){// '+-'\nvar next=this.input.charCodeAt(this.pos+1);if(next===code){if(next===45&&!this.inModule&&this.input.charCodeAt(this.pos+2)===62&&(this.lastTokEnd===0||lineBreak.test(this.input.slice(this.lastTokEnd,this.pos)))){// A `-->` line comment\nthis.skipLineComment(3);this.skipSpace();return this.nextToken();}return this.finishOp(types.incDec,2);}if(next===61){return this.finishOp(types.assign,2);}return this.finishOp(types.plusMin,1);};pp$9.readToken_lt_gt=function(code){// '<>'\nvar next=this.input.charCodeAt(this.pos+1);var size=1;if(next===code){size=code===62&&this.input.charCodeAt(this.pos+2)===62?3:2;if(this.input.charCodeAt(this.pos+size)===61){return this.finishOp(types.assign,size+1);}return this.finishOp(types.bitShift,size);}if(next===33&&code===60&&!this.inModule&&this.input.charCodeAt(this.pos+2)===45&&this.input.charCodeAt(this.pos+3)===45){// `<!--`, an XML-style comment that should be interpreted as a line comment\nthis.skipLineComment(4);this.skipSpace();return this.nextToken();}if(next===61){size=2;}return this.finishOp(types.relational,size);};pp$9.readToken_eq_excl=function(code){// '=!'\nvar next=this.input.charCodeAt(this.pos+1);if(next===61){return this.finishOp(types.equality,this.input.charCodeAt(this.pos+2)===61?3:2);}if(code===61&&next===62&&this.options.ecmaVersion>=6){// '=>'\nthis.pos+=2;return this.finishToken(types.arrow);}return this.finishOp(code===61?types.eq:types.prefix,1);};pp$9.readToken_question=function(){// '?'\nvar ecmaVersion=this.options.ecmaVersion;if(ecmaVersion>=11){var next=this.input.charCodeAt(this.pos+1);if(next===46){var next2=this.input.charCodeAt(this.pos+2);if(next2<48||next2>57){return this.finishOp(types.questionDot,2);}}if(next===63){if(ecmaVersion>=12){var next2$1=this.input.charCodeAt(this.pos+2);if(next2$1===61){return this.finishOp(types.assign,3);}}return this.finishOp(types.coalesce,2);}}return this.finishOp(types.question,1);};pp$9.readToken_numberSign=function(){// '#'\nvar ecmaVersion=this.options.ecmaVersion;var code=35;// '#'\nif(ecmaVersion>=13){++this.pos;code=this.fullCharCodeAtPos();if(isIdentifierStart(code,true)||code===92/* '\\' */){return this.finishToken(types.privateId,this.readWord1());}}this.raise(this.pos,\"Unexpected character '\"+codePointToString$1(code)+\"'\");};pp$9.getTokenFromCode=function(code){switch(code){// The interpretation of a dot depends on whether it is followed\n// by a digit or another two dots.\ncase 46:// '.'\nreturn this.readToken_dot();// Punctuation tokens.\ncase 40:++this.pos;return this.finishToken(types.parenL);case 41:++this.pos;return this.finishToken(types.parenR);case 59:++this.pos;return this.finishToken(types.semi);case 44:++this.pos;return this.finishToken(types.comma);case 91:++this.pos;return this.finishToken(types.bracketL);case 93:++this.pos;return this.finishToken(types.bracketR);case 123:++this.pos;return this.finishToken(types.braceL);case 125:++this.pos;return this.finishToken(types.braceR);case 58:++this.pos;return this.finishToken(types.colon);case 96:// '`'\nif(this.options.ecmaVersion<6){break;}++this.pos;return this.finishToken(types.backQuote);case 48:// '0'\nvar next=this.input.charCodeAt(this.pos+1);if(next===120||next===88){return this.readRadixNumber(16);}// '0x', '0X' - hex number\nif(this.options.ecmaVersion>=6){if(next===111||next===79){return this.readRadixNumber(8);}// '0o', '0O' - octal number\nif(next===98||next===66){return this.readRadixNumber(2);}// '0b', '0B' - binary number\n}// Anything else beginning with a digit is an integer, octal\n// number, or float.\ncase 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:// 1-9\nreturn this.readNumber(false);// Quotes produce strings.\ncase 34:case 39:// '\"', \"'\"\nreturn this.readString(code);// Operators are parsed inline in tiny state machines. '=' (61) is\n// often referred to. `finishOp` simply skips the amount of\n// characters it is given as second argument, and returns a token\n// of the type given by its first argument.\ncase 47:// '/'\nreturn this.readToken_slash();case 37:case 42:// '%*'\nreturn this.readToken_mult_modulo_exp(code);case 124:case 38:// '|&'\nreturn this.readToken_pipe_amp(code);case 94:// '^'\nreturn this.readToken_caret();case 43:case 45:// '+-'\nreturn this.readToken_plus_min(code);case 60:case 62:// '<>'\nreturn this.readToken_lt_gt(code);case 61:case 33:// '=!'\nreturn this.readToken_eq_excl(code);case 63:// '?'\nreturn this.readToken_question();case 126:// '~'\nreturn this.finishOp(types.prefix,1);case 35:// '#'\nreturn this.readToken_numberSign();}this.raise(this.pos,\"Unexpected character '\"+codePointToString$1(code)+\"'\");};pp$9.finishOp=function(type,size){var str=this.input.slice(this.pos,this.pos+size);this.pos+=size;return this.finishToken(type,str);};pp$9.readRegexp=function(){var escaped,inClass,start=this.pos;for(;;){if(this.pos>=this.input.length){this.raise(start,\"Unterminated regular expression\");}var ch=this.input.charAt(this.pos);if(lineBreak.test(ch)){this.raise(start,\"Unterminated regular expression\");}if(!escaped){if(ch===\"[\"){inClass=true;}else if(ch===\"]\"&&inClass){inClass=false;}else if(ch===\"/\"&&!inClass){break;}escaped=ch===\"\\\\\";}else{escaped=false;}++this.pos;}var pattern=this.input.slice(start,this.pos);++this.pos;var flagsStart=this.pos;var flags=this.readWord1();if(this.containsEsc){this.unexpected(flagsStart);}// Validate pattern\nvar state=this.regexpState||(this.regexpState=new RegExpValidationState(this));state.reset(start,pattern,flags);this.validateRegExpFlags(state);this.validateRegExpPattern(state);// Create Literal#value property value.\nvar value=null;try{value=new RegExp(pattern,flags);}catch(e){// ESTree requires null if it failed to instantiate RegExp object.\n// https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n}return this.finishToken(types.regexp,{pattern:pattern,flags:flags,value:value});};// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\npp$9.readInt=function(radix,len,maybeLegacyOctalNumericLiteral){// `len` is used for character escape sequences. In that case, disallow separators.\nvar allowSeparators=this.options.ecmaVersion>=12&&len===undefined;// `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n// and isn't fraction part nor exponent part. In that case, if the first digit\n// is zero then disallow separators.\nvar isLegacyOctalNumericLiteral=maybeLegacyOctalNumericLiteral&&this.input.charCodeAt(this.pos)===48;var start=this.pos,total=0,lastCode=0;for(var i=0,e=len==null?Infinity:len;i<e;++i,++this.pos){var code=this.input.charCodeAt(this.pos),val=void 0;if(allowSeparators&&code===95){if(isLegacyOctalNumericLiteral){this.raiseRecoverable(this.pos,\"Numeric separator is not allowed in legacy octal numeric literals\");}if(lastCode===95){this.raiseRecoverable(this.pos,\"Numeric separator must be exactly one underscore\");}if(i===0){this.raiseRecoverable(this.pos,\"Numeric separator is not allowed at the first of digits\");}lastCode=code;continue;}if(code>=97){val=code-97+10;}// a\nelse if(code>=65){val=code-65+10;}// A\nelse if(code>=48&&code<=57){val=code-48;}// 0-9\nelse{val=Infinity;}if(val>=radix){break;}lastCode=code;total=total*radix+val;}if(allowSeparators&&lastCode===95){this.raiseRecoverable(this.pos-1,\"Numeric separator is not allowed at the last of digits\");}if(this.pos===start||len!=null&&this.pos-start!==len){return null;}return total;};function stringToNumber(str,isLegacyOctalNumericLiteral){if(isLegacyOctalNumericLiteral){return parseInt(str,8);}// `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\nreturn parseFloat(str.replace(/_/g,\"\"));}function stringToBigInt(str){if(typeof BigInt!==\"function\"){return null;}// `BigInt(value)` throws syntax error if the string contains numeric separators.\nreturn BigInt(str.replace(/_/g,\"\"));}pp$9.readRadixNumber=function(radix){var start=this.pos;this.pos+=2;// 0x\nvar val=this.readInt(radix);if(val==null){this.raise(this.start+2,\"Expected number in radix \"+radix);}if(this.options.ecmaVersion>=11&&this.input.charCodeAt(this.pos)===110){val=stringToBigInt(this.input.slice(start,this.pos));++this.pos;}else if(isIdentifierStart(this.fullCharCodeAtPos())){this.raise(this.pos,\"Identifier directly after number\");}return this.finishToken(types.num,val);};// Read an integer, octal integer, or floating-point number.\npp$9.readNumber=function(startsWithDot){var start=this.pos;if(!startsWithDot&&this.readInt(10,undefined,true)===null){this.raise(start,\"Invalid number\");}var octal=this.pos-start>=2&&this.input.charCodeAt(start)===48;if(octal&&this.strict){this.raise(start,\"Invalid number\");}var next=this.input.charCodeAt(this.pos);if(!octal&&!startsWithDot&&this.options.ecmaVersion>=11&&next===110){var val$1=stringToBigInt(this.input.slice(start,this.pos));++this.pos;if(isIdentifierStart(this.fullCharCodeAtPos())){this.raise(this.pos,\"Identifier directly after number\");}return this.finishToken(types.num,val$1);}if(octal&&/[89]/.test(this.input.slice(start,this.pos))){octal=false;}if(next===46&&!octal){// '.'\n++this.pos;this.readInt(10);next=this.input.charCodeAt(this.pos);}if((next===69||next===101)&&!octal){// 'eE'\nnext=this.input.charCodeAt(++this.pos);if(next===43||next===45){++this.pos;}// '+-'\nif(this.readInt(10)===null){this.raise(start,\"Invalid number\");}}if(isIdentifierStart(this.fullCharCodeAtPos())){this.raise(this.pos,\"Identifier directly after number\");}var val=stringToNumber(this.input.slice(start,this.pos),octal);return this.finishToken(types.num,val);};// Read a string value, interpreting backslash-escapes.\npp$9.readCodePoint=function(){var ch=this.input.charCodeAt(this.pos),code;if(ch===123){// '{'\nif(this.options.ecmaVersion<6){this.unexpected();}var codePos=++this.pos;code=this.readHexChar(this.input.indexOf(\"}\",this.pos)-this.pos);++this.pos;if(code>0x10FFFF){this.invalidStringToken(codePos,\"Code point out of bounds\");}}else{code=this.readHexChar(4);}return code;};function codePointToString$1(code){// UTF-16 Decoding\nif(code<=0xFFFF){return String.fromCharCode(code);}code-=0x10000;return String.fromCharCode((code>>10)+0xD800,(code&1023)+0xDC00);}pp$9.readString=function(quote){var out=\"\",chunkStart=++this.pos;for(;;){if(this.pos>=this.input.length){this.raise(this.start,\"Unterminated string constant\");}var ch=this.input.charCodeAt(this.pos);if(ch===quote){break;}if(ch===92){// '\\'\nout+=this.input.slice(chunkStart,this.pos);out+=this.readEscapedChar(false);chunkStart=this.pos;}else{if(isNewLine(ch,this.options.ecmaVersion>=10)){this.raise(this.start,\"Unterminated string constant\");}++this.pos;}}out+=this.input.slice(chunkStart,this.pos++);return this.finishToken(types.string,out);};// Reads template string tokens.\nvar INVALID_TEMPLATE_ESCAPE_ERROR={};pp$9.tryReadTemplateToken=function(){this.inTemplateElement=true;try{this.readTmplToken();}catch(err){if(err===INVALID_TEMPLATE_ESCAPE_ERROR){this.readInvalidTemplateToken();}else{throw err;}}this.inTemplateElement=false;};pp$9.invalidStringToken=function(position,message){if(this.inTemplateElement&&this.options.ecmaVersion>=9){throw INVALID_TEMPLATE_ESCAPE_ERROR;}else{this.raise(position,message);}};pp$9.readTmplToken=function(){var out=\"\",chunkStart=this.pos;for(;;){if(this.pos>=this.input.length){this.raise(this.start,\"Unterminated template\");}var ch=this.input.charCodeAt(this.pos);if(ch===96||ch===36&&this.input.charCodeAt(this.pos+1)===123){// '`', '${'\nif(this.pos===this.start&&(this.type===types.template||this.type===types.invalidTemplate)){if(ch===36){this.pos+=2;return this.finishToken(types.dollarBraceL);}else{++this.pos;return this.finishToken(types.backQuote);}}out+=this.input.slice(chunkStart,this.pos);return this.finishToken(types.template,out);}if(ch===92){// '\\'\nout+=this.input.slice(chunkStart,this.pos);out+=this.readEscapedChar(true);chunkStart=this.pos;}else if(isNewLine(ch)){out+=this.input.slice(chunkStart,this.pos);++this.pos;switch(ch){case 13:if(this.input.charCodeAt(this.pos)===10){++this.pos;}case 10:out+=\"\\n\";break;default:out+=String.fromCharCode(ch);break;}if(this.options.locations){++this.curLine;this.lineStart=this.pos;}chunkStart=this.pos;}else{++this.pos;}}};// Reads a template token to search for the end, without validating any escape sequences\npp$9.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++){switch(this.input[this.pos]){case\"\\\\\":++this.pos;break;case\"$\":if(this.input[this.pos+1]!==\"{\"){break;}// falls through\ncase\"`\":return this.finishToken(types.invalidTemplate,this.input.slice(this.start,this.pos));// no default\n}}this.raise(this.start,\"Unterminated template\");};// Used to read escaped characters\npp$9.readEscapedChar=function(inTemplate){var ch=this.input.charCodeAt(++this.pos);++this.pos;switch(ch){case 110:return\"\\n\";// 'n' -> '\\n'\ncase 114:return\"\\r\";// 'r' -> '\\r'\ncase 120:return String.fromCharCode(this.readHexChar(2));// 'x'\ncase 117:return codePointToString$1(this.readCodePoint());// 'u'\ncase 116:return\"\\t\";// 't' -> '\\t'\ncase 98:return\"\\b\";// 'b' -> '\\b'\ncase 118:return\"\\x0B\";// 'v' -> '\\u000b'\ncase 102:return\"\\f\";// 'f' -> '\\f'\ncase 13:if(this.input.charCodeAt(this.pos)===10){++this.pos;}// '\\r\\n'\ncase 10:// ' \\n'\nif(this.options.locations){this.lineStart=this.pos;++this.curLine;}return\"\";case 56:case 57:if(this.strict){this.invalidStringToken(this.pos-1,\"Invalid escape sequence\");}if(inTemplate){var codePos=this.pos-1;this.invalidStringToken(codePos,\"Invalid escape sequence in template string\");return null;}default:if(ch>=48&&ch<=55){var octalStr=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0];var octal=parseInt(octalStr,8);if(octal>255){octalStr=octalStr.slice(0,-1);octal=parseInt(octalStr,8);}this.pos+=octalStr.length-1;ch=this.input.charCodeAt(this.pos);if((octalStr!==\"0\"||ch===56||ch===57)&&(this.strict||inTemplate)){this.invalidStringToken(this.pos-1-octalStr.length,inTemplate?\"Octal literal in template string\":\"Octal literal in strict mode\");}return String.fromCharCode(octal);}if(isNewLine(ch)){// Unicode new line characters after \\ get removed from output in both\n// template literals and strings\nreturn\"\";}return String.fromCharCode(ch);}};// Used to read character escape sequences ('\\x', '\\u', '\\U').\npp$9.readHexChar=function(len){var codePos=this.pos;var n=this.readInt(16,len);if(n===null){this.invalidStringToken(codePos,\"Bad character escape sequence\");}return n;};// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\npp$9.readWord1=function(){this.containsEsc=false;var word=\"\",first=true,chunkStart=this.pos;var astral=this.options.ecmaVersion>=6;while(this.pos<this.input.length){var ch=this.fullCharCodeAtPos();if(isIdentifierChar(ch,astral)){this.pos+=ch<=0xffff?1:2;}else if(ch===92){// \"\\\"\nthis.containsEsc=true;word+=this.input.slice(chunkStart,this.pos);var escStart=this.pos;if(this.input.charCodeAt(++this.pos)!==117)// \"u\"\n{this.invalidStringToken(this.pos,\"Expecting Unicode escape sequence \\\\uXXXX\");}++this.pos;var esc=this.readCodePoint();if(!(first?isIdentifierStart:isIdentifierChar)(esc,astral)){this.invalidStringToken(escStart,\"Invalid Unicode escape\");}word+=codePointToString$1(esc);chunkStart=this.pos;}else{break;}first=false;}return word+this.input.slice(chunkStart,this.pos);};// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\npp$9.readWord=function(){var word=this.readWord1();var type=types.name;if(this.keywords.test(word)){type=keywords$1[word];}return this.finishToken(type,word);};// Acorn is a tiny, fast JavaScript parser written in JavaScript.\nvar version=\"8.4.1\";Parser.acorn={Parser:Parser,version:version,defaultOptions:defaultOptions,Position:Position,SourceLocation:SourceLocation,getLineInfo:getLineInfo,Node:Node,TokenType:TokenType,tokTypes:types,keywordTypes:keywords$1,TokContext:TokContext,tokContexts:types$1,isIdentifierChar:isIdentifierChar,isIdentifierStart:isIdentifierStart,Token:Token,isNewLine:isNewLine,lineBreak:lineBreak,lineBreakG:lineBreakG,nonASCIIwhitespace:nonASCIIwhitespace};// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\nfunction parse(input,options){return Parser.parse(input,options);}// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\nfunction parseExpressionAt(input,pos,options){return Parser.parseExpressionAt(input,pos,options);}function flatten(nodes){var target=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];for(var _i2=0;_i2<nodes.length;_i2+=1){var _node2=nodes[_i2];if(Array.isArray(_node2)){flatten(_node2,target);}else{target.push(_node2);}}return target;}var pattern=/^\\s*svelte-ignore\\s+([\\s\\S]+)\\s*$/m;function extract_svelte_ignore(text){var match=pattern.exec(text);return match?match[1].split(/[^\\S]/).map(function(x){return x.trim();}).filter(Boolean):[];}function extract_svelte_ignore_from_comments(node){return flatten((node.leadingComments||[]).map(function(comment){return extract_svelte_ignore(comment.value);}));}function extract_ignores_above_position(position,template_nodes){var previous_node_idx=template_nodes.findIndex(function(child){return child.end===position;});if(previous_node_idx===-1){return[];}for(var _i3=previous_node_idx;_i3>=0;_i3--){var _node3=template_nodes[_i3];if(_node3.type!=='Comment'&&_node3.type!=='Text'){return[];}if(_node3.type==='Comment'){if(_node3.ignores.length){return _node3.ignores;}}}return[];}function fuzzymatch(name,names){var set=new FuzzySet(names);var matches=set.get(name);return matches&&matches[0]&&matches[0][0]>0.7?matches[0][1]:null;}// adapted from https://github.com/Glench/fuzzyset.js/blob/master/lib/fuzzyset.js\n// BSD Licensed\nvar GRAM_SIZE_LOWER=2;var GRAM_SIZE_UPPER=3;// return an edit distance from 0 to 1\nfunction _distance(str1,str2){if(str1===null&&str2===null){throw'Trying to compare two null values';}if(str1===null||str2===null)return 0;str1=String(str1);str2=String(str2);var distance=levenshtein(str1,str2);if(str1.length>str2.length){return 1-distance/str1.length;}else{return 1-distance/str2.length;}}// helper functions\nfunction levenshtein(str1,str2){var current=[];var prev;var value;for(var _i4=0;_i4<=str2.length;_i4++){for(var j=0;j<=str1.length;j++){if(_i4&&j){if(str1.charAt(j-1)===str2.charAt(_i4-1)){value=prev;}else{value=Math.min(current[j],current[j-1],prev)+1;}}else{value=_i4+j;}prev=current[j];current[j]=value;}}return current.pop();}var non_word_regex=/[^\\w, ]+/;function iterate_grams(value){var gram_size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;var simplified='-'+value.toLowerCase().replace(non_word_regex,'')+'-';var len_diff=gram_size-simplified.length;var results=[];if(len_diff>0){for(var _i5=0;_i5<len_diff;++_i5){value+='-';}}for(var _i6=0;_i6<simplified.length-gram_size+1;++_i6){results.push(simplified.slice(_i6,_i6+gram_size));}return results;}function gram_counter(value){var gram_size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;// return an object where key=gram, value=number of occurrences\nvar result={};var grams=iterate_grams(value,gram_size);var i=0;for(i;i<grams.length;++i){if(grams[i]in result){result[grams[i]]+=1;}else{result[grams[i]]=1;}}return result;}function sort_descending(a,b){return b[0]-a[0];}var FuzzySet=/*#__PURE__*/function(){function FuzzySet(arr){(0,_classCallCheck2.default)(this,FuzzySet);this.exact_set={};this.match_dict={};this.items={};// initialization\nfor(var _i7=GRAM_SIZE_LOWER;_i7<GRAM_SIZE_UPPER+1;++_i7){this.items[_i7]=[];}// add all the items to the set\nfor(var _i8=0;_i8<arr.length;++_i8){this.add(arr[_i8]);}}(0,_createClass2.default)(FuzzySet,[{key:\"add\",value:function add(value){var normalized_value=value.toLowerCase();if(normalized_value in this.exact_set){return false;}var i=GRAM_SIZE_LOWER;for(i;i<GRAM_SIZE_UPPER+1;++i){this._add(value,i);}}},{key:\"_add\",value:function _add(value,gram_size){var normalized_value=value.toLowerCase();var items=this.items[gram_size]||[];var index=items.length;items.push(0);var gram_counts=gram_counter(normalized_value,gram_size);var sum_of_square_gram_counts=0;var gram;var gram_count;for(gram in gram_counts){gram_count=gram_counts[gram];sum_of_square_gram_counts+=Math.pow(gram_count,2);if(gram in this.match_dict){this.match_dict[gram].push([index,gram_count]);}else{this.match_dict[gram]=[[index,gram_count]];}}var vector_normal=Math.sqrt(sum_of_square_gram_counts);items[index]=[vector_normal,normalized_value];this.items[gram_size]=items;this.exact_set[normalized_value]=value;}},{key:\"get\",value:function get(value){var normalized_value=value.toLowerCase();var result=this.exact_set[normalized_value];if(result){return[[1,result]];}var results=[];// start with high gram size and if there are no results, go to lower gram sizes\nfor(var gram_size=GRAM_SIZE_UPPER;gram_size>=GRAM_SIZE_LOWER;--gram_size){results=this.__get(value,gram_size);if(results){return results;}}return null;}},{key:\"__get\",value:function __get(value,gram_size){var normalized_value=value.toLowerCase();var matches={};var gram_counts=gram_counter(normalized_value,gram_size);var items=this.items[gram_size];var sum_of_square_gram_counts=0;var gram;var gram_count;var i;var index;var other_gram_count;for(gram in gram_counts){gram_count=gram_counts[gram];sum_of_square_gram_counts+=Math.pow(gram_count,2);if(gram in this.match_dict){for(i=0;i<this.match_dict[gram].length;++i){index=this.match_dict[gram][i][0];other_gram_count=this.match_dict[gram][i][1];if(index in matches){matches[index]+=gram_count*other_gram_count;}else{matches[index]=gram_count*other_gram_count;}}}}var vector_normal=Math.sqrt(sum_of_square_gram_counts);var results=[];var match_score;// build a results list of [score, str]\nfor(var match_index in matches){match_score=matches[match_index];results.push([match_score/(vector_normal*items[match_index][0]),items[match_index][1]]);}results.sort(sort_descending);var new_results=[];var end_index=Math.min(50,results.length);// truncate somewhat arbitrarily to 50\nfor(var _i9=0;_i9<end_index;++_i9){new_results.push([_distance(results[_i9][1],normalized_value),results[_i9][1]]);}results=new_results;results.sort(sort_descending);new_results=[];for(var _i10=0;_i10<results.length;++_i10){if(results[_i10][0]==results[0][0]){new_results.push([results[_i10][0],this.exact_set[results[_i10][1]]]);}}return new_results;}}]);return FuzzySet;}();// Adapted from https://github.com/acornjs/acorn/blob/6584815dca7440e00de841d1dad152302fdd7ca5/src/tokenize.js\n// Reproduced under MIT License https://github.com/acornjs/acorn/blob/master/LICENSE\nfunction full_char_code_at(str,i){var code=str.charCodeAt(i);if(code<=0xd7ff||code>=0xe000)return code;var next=str.charCodeAt(i+1);return(code<<10)+next-0x35fdc00;}var globals=new Set(['alert','Array','BigInt','Boolean','clearInterval','clearTimeout','confirm','console','Date','decodeURI','decodeURIComponent','document','Element','encodeURI','encodeURIComponent','Error','EvalError','Event','EventSource','fetch','global','globalThis','history','HTMLElement','Infinity','InternalError','Intl','isFinite','isNaN','JSON','localStorage','location','Map','Math','NaN','navigator','Node','Number','Object','parseFloat','parseInt','process','Promise','prompt','RangeError','ReferenceError','RegExp','sessionStorage','Set','setInterval','setTimeout','String','SVGElement','SyntaxError','TypeError','undefined','URIError','URL','URLSearchParams','window']);var reserved=new Set(['arguments','await','break','case','catch','class','const','continue','debugger','default','delete','do','else','enum','eval','export','extends','false','finally','for','function','if','implements','import','in','instanceof','interface','let','new','null','package','private','protected','public','return','static','super','switch','this','throw','true','try','typeof','var','void','while','with','yield']);var void_element_names=/^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;function is_void(name){return void_element_names.test(name)||name.toLowerCase()==='!doctype';}function is_valid(str){var i=0;while(i<str.length){var code=full_char_code_at(str,i);if(!(i===0?isIdentifierStart:isIdentifierChar)(code,true))return false;i+=code<=0xffff?1:2;}return true;}function sanitize(name){return name.replace(/[^a-zA-Z0-9_]+/g,'_').replace(/^_/,'').replace(/_$/,'').replace(/^[0-9]/,'_$&');}function list(items){var conjunction=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'or';if(items.length===1)return items[0];return\"\".concat(items.slice(0,-1).join(', '),\" \").concat(conjunction,\" \").concat(items[items.length-1]);}// All parser errors should be listed and accessed from here\n/**\n * @internal\n */var parser_errors={css_syntax_error:function css_syntax_error(message){return{code:'css-syntax-error',message:message};},duplicate_attribute:{code:'duplicate-attribute',message:'Attributes need to be unique'},duplicate_element:function duplicate_element(slug,name){return{code:\"duplicate-\".concat(slug),message:\"A component can only have one <\".concat(name,\"> tag\")};},duplicate_style:{code:'duplicate-style',message:'You can only have one top-level <style> tag per component'},empty_attribute_shorthand:{code:'empty-attribute-shorthand',message:'Attribute shorthand cannot be empty'},empty_directive_name:function empty_directive_name(type){return{code:'empty-directive-name',message:\"\".concat(type,\" name cannot be empty\")};},empty_global_selector:{code:'css-syntax-error',message:':global() must contain a selector'},expected_block_type:{code:'expected-block-type',message:'Expected if, each or await'},expected_name:{code:'expected-name',message:'Expected name'},invalid_catch_placement_unclosed_block:function invalid_catch_placement_unclosed_block(block){return{code:'invalid-catch-placement',message:\"Expected to close \".concat(block,\" before seeing {:catch} block\")};},invalid_catch_placement_without_await:{code:'invalid-catch-placement',message:'Cannot have an {:catch} block outside an {#await ...} block'},invalid_component_definition:{code:'invalid-component-definition',message:'invalid component definition'},invalid_closing_tag_unopened:function invalid_closing_tag_unopened(name){return{code:'invalid-closing-tag',message:\"</\".concat(name,\"> attempted to close an element that was not open\")};},invalid_closing_tag_autoclosed:function invalid_closing_tag_autoclosed(name,reason){return{code:'invalid-closing-tag',message:\"</\".concat(name,\"> attempted to close <\").concat(name,\"> that was already automatically closed by <\").concat(reason,\">\")};},invalid_debug_args:{code:'invalid-debug-args',message:'{@debug ...} arguments must be identifiers, not arbitrary expressions'},invalid_declaration:{code:'invalid-declaration',message:'Declaration cannot be empty'},invalid_directive_value:{code:'invalid-directive-value',message:'Directive value must be a JavaScript expression enclosed in curly braces'},invalid_elseif:{code:'invalid-elseif',message:'\\'elseif\\' should be \\'else if\\''},invalid_elseif_placement_outside_if:{code:'invalid-elseif-placement',message:'Cannot have an {:else if ...} block outside an {#if ...} block'},invalid_elseif_placement_unclosed_block:function invalid_elseif_placement_unclosed_block(block){return{code:'invalid-elseif-placement',message:\"Expected to close \".concat(block,\" before seeing {:else if ...} block\")};},invalid_else_placement_outside_if:{code:'invalid-else-placement',message:'Cannot have an {:else} block outside an {#if ...} or {#each ...} block'},invalid_else_placement_unclosed_block:function invalid_else_placement_unclosed_block(block){return{code:'invalid-else-placement',message:\"Expected to close \".concat(block,\" before seeing {:else} block\")};},invalid_element_content:function invalid_element_content(slug,name){return{code:\"invalid-\".concat(slug,\"-content\"),message:\"<\".concat(name,\"> cannot have children\")};},invalid_element_placement:function invalid_element_placement(slug,name){return{code:\"invalid-\".concat(slug,\"-placement\"),message:\"<\".concat(name,\"> tags cannot be inside elements or blocks\")};},invalid_ref_directive:function invalid_ref_directive(name){return{code:'invalid-ref-directive',message:\"The ref directive is no longer supported \\u2014 use `bind:this={\".concat(name,\"}` instead\")};},invalid_ref_selector:{code:'invalid-ref-selector',message:'ref selectors are no longer supported'},invalid_self_placement:{code:'invalid-self-placement',message:'<svelte:self> components can only exist inside {#if} blocks, {#each} blocks, or slots passed to components'},invalid_script_instance:{code:'invalid-script',message:'A component can only have one instance-level <script> element'},invalid_script_module:{code:'invalid-script',message:'A component can only have one <script context=\"module\"> element'},invalid_script_context_attribute:{code:'invalid-script',message:'context attribute must be static'},invalid_script_context_value:{code:'invalid-script',message:'If the context attribute is supplied, its value must be \"module\"'},invalid_tag_name:{code:'invalid-tag-name',message:'Expected valid tag name'},invalid_tag_name_svelte_element:function invalid_tag_name_svelte_element(tags,match){return{code:'invalid-tag-name',message:\"Valid <svelte:...> tag names are \".concat(list(tags)).concat(match?' (did you mean '+match+'?)':'')};},invalid_then_placement_unclosed_block:function invalid_then_placement_unclosed_block(block){return{code:'invalid-then-placement',message:\"Expected to close \".concat(block,\" before seeing {:then} block\")};},invalid_then_placement_without_await:{code:'invalid-then-placement',message:'Cannot have an {:then} block outside an {#await ...} block'},invalid_void_content:function invalid_void_content(name){return{code:'invalid-void-content',message:\"<\".concat(name,\"> is a void element and cannot have children, or a closing tag\")};},missing_component_definition:{code:'missing-component-definition',message:'<svelte:component> must have a \\'this\\' attribute'},missing_attribute_value:{code:'missing-attribute-value',message:'Expected value for the attribute'},unclosed_script:{code:'unclosed-script',message:'<script> must have a closing tag'},unclosed_style:{code:'unclosed-style',message:'<style> must have a closing tag'},unclosed_comment:{code:'unclosed-comment',message:'comment was left open, expected -->'},unclosed_attribute_value:function unclosed_attribute_value(token){return{code:'unclosed-attribute-value',message:\"Expected to close the attribute value with \".concat(token)};},unexpected_block_close:{code:'unexpected-block-close',message:'Unexpected block closing tag'},unexpected_eof:{code:'unexpected-eof',message:'Unexpected end of input'},unexpected_eof_token:function unexpected_eof_token(token){return{code:'unexpected-eof',message:\"Unexpected \".concat(token)};},unexpected_token:function unexpected_token(token){return{code:'unexpected-token',message:\"Expected \".concat(token)};},unexpected_token_destructure:{code:'unexpected-token',message:'Expected identifier or destructure pattern'}};// @ts-check\n/** @typedef { import('estree').BaseNode} BaseNode */ /** @typedef {{\n\tskip: () => void;\n\tremove: () => void;\n\treplace: (node: BaseNode) => void;\n}} WalkerContext */var WalkerBase=/*#__PURE__*/function(){function WalkerBase(){var _this2=this;(0,_classCallCheck2.default)(this,WalkerBase);/** @type {boolean} */this.should_skip=false;/** @type {boolean} */this.should_remove=false;/** @type {BaseNode | null} */this.replacement=null;/** @type {WalkerContext} */this.context={skip:function skip(){return _this2.should_skip=true;},remove:function remove(){return _this2.should_remove=true;},replace:function replace(node){return _this2.replacement=node;}};}/**\n\t *\n\t * @param {any} parent\n\t * @param {string} prop\n\t * @param {number} index\n\t * @param {BaseNode} node\n\t */(0,_createClass2.default)(WalkerBase,[{key:\"replace\",value:function replace(parent,prop,index,node){if(parent){if(index!==null){parent[prop][index]=node;}else{parent[prop]=node;}}}/**\n\t *\n\t * @param {any} parent\n\t * @param {string} prop\n\t * @param {number} index\n\t */},{key:\"remove\",value:function remove(parent,prop,index){if(parent){if(index!==null){parent[prop].splice(index,1);}else{delete parent[prop];}}}}]);return WalkerBase;}();// @ts-check\n/** @typedef { import('estree').BaseNode} BaseNode */ /** @typedef { import('./walker.js').WalkerContext} WalkerContext */ /** @typedef {(\n *    this: WalkerContext,\n *    node: BaseNode,\n *    parent: BaseNode,\n *    key: string,\n *    index: number\n * ) => void} SyncHandler */var SyncWalker=/*#__PURE__*/function(_WalkerBase){(0,_inherits2.default)(SyncWalker,_WalkerBase);var _super=_createSuper(SyncWalker);/**\n\t *\n\t * @param {SyncHandler} enter\n\t * @param {SyncHandler} leave\n\t */function SyncWalker(enter,leave){var _this3;(0,_classCallCheck2.default)(this,SyncWalker);_this3=_super.call(this);/** @type {SyncHandler} */_this3.enter=enter;/** @type {SyncHandler} */_this3.leave=leave;return _this3;}/**\n\t *\n\t * @param {BaseNode} node\n\t * @param {BaseNode} parent\n\t * @param {string} [prop]\n\t * @param {number} [index]\n\t * @returns {BaseNode}\n\t */(0,_createClass2.default)(SyncWalker,[{key:\"visit\",value:function visit(node,parent,prop,index){if(node){if(this.enter){var _should_skip=this.should_skip;var _should_remove=this.should_remove;var _replacement=this.replacement;this.should_skip=false;this.should_remove=false;this.replacement=null;this.enter.call(this.context,node,parent,prop,index);if(this.replacement){node=this.replacement;this.replace(parent,prop,index,node);}if(this.should_remove){this.remove(parent,prop,index);}var skipped=this.should_skip;var removed=this.should_remove;this.should_skip=_should_skip;this.should_remove=_should_remove;this.replacement=_replacement;if(skipped)return node;if(removed)return null;}for(var key in node){var _value2=node[key];if((0,_typeof2.default)(_value2)!==\"object\"){continue;}else if(Array.isArray(_value2)){for(var _i11=0;_i11<_value2.length;_i11+=1){if(_value2[_i11]!==null&&typeof _value2[_i11].type==='string'){if(!this.visit(_value2[_i11],node,key,_i11)){// removed\n_i11--;}}}}else if(_value2!==null&&typeof _value2.type===\"string\"){this.visit(_value2,node,key,null);}}if(this.leave){var _replacement2=this.replacement;var _should_remove2=this.should_remove;this.replacement=null;this.should_remove=false;this.leave.call(this.context,node,parent,prop,index);if(this.replacement){node=this.replacement;this.replace(parent,prop,index,node);}if(this.should_remove){this.remove(parent,prop,index);}var _removed=this.should_remove;this.replacement=_replacement2;this.should_remove=_should_remove2;if(_removed)return null;}}return node;}}]);return SyncWalker;}(WalkerBase);// @ts-check\n/** @typedef { import('estree').BaseNode} BaseNode */ /** @typedef { import('./sync.js').SyncHandler} SyncHandler */ /** @typedef { import('./async.js').AsyncHandler} AsyncHandler */ /**\n *\n * @param {BaseNode} ast\n * @param {{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }} walker\n * @returns {BaseNode}\n */function walk(ast,_ref){var enter=_ref.enter,leave=_ref.leave;var instance=new SyncWalker(enter,leave);return instance.visit(ast,null);}// generate an ID that is, to all intents and purposes, unique\nvar id=Math.round(Math.random()*1e20).toString(36);var re=new RegExp(\"_\".concat(id,\"_(?:(\\\\d+)|(AT)|(HASH))_(\\\\w+)?\"),'g');/** @typedef {import('estree').Comment} Comment */ /** @typedef {import('estree').Node} Node */ /**\n * @typedef {Node & {\n *   start: number;\n *   end: number;\n *   has_trailing_newline?: boolean\n * }} NodeWithLocation\n */ /**\n * @typedef {Comment & {\n *   start: number;\n *   end: number;\n *   has_trailing_newline?: boolean\n * }} CommentWithLocation\n */ /**\n * @param {CommentWithLocation[]} comments\n * @param {string} raw\n */var get_comment_handlers=function get_comment_handlers(comments,raw){return{// pass to acorn options\n/**\n\t * @param {boolean} block\n\t * @param {string} value\n\t * @param {number} start\n\t * @param {number} end\n\t */onComment:function onComment(block,value,start,end){if(block&&/\\n/.test(value)){var a=start;while(a>0&&raw[a-1]!=='\\n'){a-=1;}var _b=a;while(/[ \\t]/.test(raw[_b])){_b+=1;}var indentation=raw.slice(a,_b);value=value.replace(new RegExp(\"^\".concat(indentation),'gm'),'');}comments.push({type:block?'Block':'Line',value:value,start:start,end:end});},// pass to estree-walker options\n/** @param {NodeWithLocation} node */enter:function enter(node){var comment;while(comments[0]&&comments[0].start<node.start){comment=comments.shift();comment.value=comment.value.replace(re,function(match,id,at,hash,value){if(hash)return\"#\".concat(value);if(at)return\"@\".concat(value);return match;});var next=comments[0]||node;comment.has_trailing_newline=comment.type==='Line'||/\\n/.test(raw.slice(comment.end,next.start));(node.leadingComments||(node.leadingComments=[])).push(comment);}},/** @param {NodeWithLocation} node */leave:function leave(node){if(comments[0]){var slice=raw.slice(node.end,comments[0].start);if(/^[,) \\t]*$/.test(slice)){node.trailingComments=[comments.shift()];}}}};};//@ts-check\n/** @typedef { import('estree').Node} Node */ /** @typedef {Node | {\n *   type: 'PropertyDefinition';\n *   computed: boolean;\n *   value: Node\n * }} NodeWithPropertyDefinition */ /**\n *\n * @param {NodeWithPropertyDefinition} node\n * @param {NodeWithPropertyDefinition} parent\n * @returns boolean\n */function is_reference(node,parent){if(node.type==='MemberExpression'){return!node.computed&&is_reference(node.object,node);}if(node.type==='Identifier'){if(!parent)return true;switch(parent.type){// disregard `bar` in `foo.bar`\ncase'MemberExpression':return parent.computed||node===parent.object;// disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\ncase'MethodDefinition':return parent.computed;// disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\ncase'PropertyDefinition':return parent.computed||node===parent.value;// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\ncase'Property':return parent.computed||node===parent.value;// disregard the `bar` in `export { foo as bar }` or\n// the foo in `import { foo as bar }`\ncase'ExportSpecifier':case'ImportSpecifier':return node===parent.local;// disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\ncase'LabeledStatement':case'BreakStatement':case'ContinueStatement':return false;default:return true;}}return false;}/** @param {import('estree').Node} expression */function analyze(expression){/** @typedef {import('estree').Node} Node */ /** @type {WeakMap<Node, Scope>} */var map=new WeakMap();/** @type {Map<string, Node>} */var globals=new Map();var scope=new Scope$1(null,false);/** @type {[Scope, import('estree').Identifier][]} */var references=[];var current_scope=scope;walk(expression,{/**\n\t\t * @param {Node} node\n\t\t * @param {any} parent\n\t\t */enter:function enter(node,parent){switch(node.type){case'Identifier':if(is_reference(node,parent)){references.push([current_scope,node]);}break;case'ImportDeclaration':node.specifiers.forEach(function(specifier){current_scope.declarations.set(specifier.local.name,specifier);});break;case'FunctionExpression':case'FunctionDeclaration':case'ArrowFunctionExpression':if(node.type==='FunctionDeclaration'){if(node.id){current_scope.declarations.set(node.id.name,node);}map.set(node,current_scope=new Scope$1(current_scope,false));}else{map.set(node,current_scope=new Scope$1(current_scope,false));if(node.type==='FunctionExpression'&&node.id){current_scope.declarations.set(node.id.name,node);}}node.params.forEach(function(param){extract_names(param).forEach(function(name){current_scope.declarations.set(name,node);});});break;case'ForStatement':case'ForInStatement':case'ForOfStatement':map.set(node,current_scope=new Scope$1(current_scope,true));break;case'BlockStatement':map.set(node,current_scope=new Scope$1(current_scope,true));break;case'ClassDeclaration':case'VariableDeclaration':current_scope.add_declaration(node);break;case'CatchClause':map.set(node,current_scope=new Scope$1(current_scope,true));if(node.param){extract_names(node.param).forEach(function(name){current_scope.declarations.set(name,node.param);});}break;}},/** @param {Node} node */leave:function leave(node){if(map.has(node)){current_scope=current_scope.parent;}}});for(var _i12=references.length-1;_i12>=0;--_i12){var _references$_i=(0,_slicedToArray2.default)(references[_i12],2),_scope2=_references$_i[0],reference=_references$_i[1];if(!_scope2.references.has(reference.name)){add_reference(_scope2,reference.name);}if(!_scope2.find_owner(reference.name)){globals.set(reference.name,reference);}}return{map:map,scope:scope,globals:globals};}/**\n *\n * @param {Scope} scope\n * @param {string} name\n */function add_reference(scope,name){scope.references.add(name);if(scope.parent)add_reference(scope.parent,name);}var Scope$1=/*#__PURE__*/function(){function Scope$1(parent,block){(0,_classCallCheck2.default)(this,Scope$1);/** @type {Scope | null} */this.parent=parent;/** @type {boolean} */this.block=block;/** @type {Map<string, import('estree').Node>} */this.declarations=new Map();/** @type {Set<string>} */this.initialised_declarations=new Set();/** @type {Set<string>} */this.references=new Set();}/** @param {import('estree').VariableDeclaration | import('estree').ClassDeclaration} node */(0,_createClass2.default)(Scope$1,[{key:\"add_declaration\",value:function add_declaration(node){var _this4=this;if(node.type==='VariableDeclaration'){if(node.kind==='var'&&this.block&&this.parent){this.parent.add_declaration(node);}else{/** @param {import('estree').VariableDeclarator} declarator */var handle_declarator=function handle_declarator(declarator){extract_names(declarator.id).forEach(function(name){_this4.declarations.set(name,node);if(declarator.init)_this4.initialised_declarations.add(name);});};node.declarations.forEach(handle_declarator);}}else if(node.id){this.declarations.set(node.id.name,node);}}/**\n\t * @param {string} name\n\t * @returns {Scope | null}\n\t */},{key:\"find_owner\",value:function find_owner(name){if(this.declarations.has(name))return this;return this.parent&&this.parent.find_owner(name);}/**\n\t * @param {string} name\n\t * @returns {boolean}\n\t */},{key:\"has\",value:function has(name){return this.declarations.has(name)||!!this.parent&&this.parent.has(name);}}]);return Scope$1;}();/**\n * @param {import('estree').Node} param\n * @returns {string[]}\n */function extract_names(param){return extract_identifiers(param).map(function(node){return node.name;});}/**\n * @param {import('estree').Node} param\n * @param {import('estree').Identifier[]} nodes\n * @returns {import('estree').Identifier[]}\n */function extract_identifiers(param){var nodes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];switch(param.type){case'Identifier':nodes.push(param);break;case'MemberExpression':var object=param;while(object.type==='MemberExpression'){object=/** @type {any} */object.object;}nodes.push(/** @type {any} */object);break;case'ObjectPattern':/** @param {import('estree').Property | import('estree').RestElement} prop */var handle_prop=function handle_prop(prop){if(prop.type==='RestElement'){extract_identifiers(prop.argument,nodes);}else{extract_identifiers(prop.value,nodes);}};param.properties.forEach(handle_prop);break;case'ArrayPattern':/** @param {import('estree').Node} element */var handle_element=function handle_element(element){if(element)extract_identifiers(element,nodes);};param.elements.forEach(handle_element);break;case'RestElement':extract_identifiers(param.argument,nodes);break;case'AssignmentPattern':extract_identifiers(param.left,nodes);break;}return nodes;}// heavily based on https://github.com/davidbonnet/astring\n/** @typedef {import('estree').ArrowFunctionExpression} ArrowFunctionExpression */ /** @typedef {import('estree').BinaryExpression} BinaryExpression */ /** @typedef {import('estree').CallExpression} CallExpression */ /** @typedef {import('estree').Comment} Comment */ /** @typedef {import('estree').ExportSpecifier} ExportSpecifier */ /** @typedef {import('estree').Expression} Expression */ /** @typedef {import('estree').FunctionDeclaration} FunctionDeclaration */ /** @typedef {import('estree').ImportDeclaration} ImportDeclaration */ /** @typedef {import('estree').ImportSpecifier} ImportSpecifier */ /** @typedef {import('estree').Literal} Literal */ /** @typedef {import('estree').LogicalExpression} LogicalExpression */ /** @typedef {import('estree').NewExpression} NewExpression */ /** @typedef {import('estree').Node} Node */ /** @typedef {import('estree').ObjectExpression} ObjectExpression */ /** @typedef {import('estree').Pattern} Pattern */ /** @typedef {import('estree').SequenceExpression} SequenceExpression */ /** @typedef {import('estree').SimpleCallExpression} SimpleCallExpression */ /** @typedef {import('estree').SwitchStatement} SwitchStatement */ /** @typedef {import('estree').VariableDeclaration} VariableDeclaration */ /**\n * @typedef {{\n *   content: string;\n *   loc?: {\n *     start: { line: number; column: number; };\n *     end: { line: number; column: number; };\n *   };\n *   has_newline: boolean;\n * }} Chunk\n */ /**\n * @typedef {(node: any, state: State) => Chunk[]} Handler\n */ /**\n * @typedef {{\n *   indent: string;\n *   scope: any; // TODO import from periscopic\n *   scope_map: WeakMap<Node, any>;\n *   getName: (name: string) => string;\n *   deconflicted: WeakMap<Node, Map<string, string>>;\n *   comments: Comment[];\n * }} State\n */ /**\n * @param {Node} node\n * @param {State} state\n * @returns {Chunk[]}\n */function handle(node,state){var handler=handlers[node.type];if(!handler){throw new Error(\"Not implemented \".concat(node.type));}var result=handler(node,state);if(node.leadingComments){result.unshift(c(node.leadingComments.map(function(comment){return comment.type==='Block'?\"/*\".concat(comment.value,\"*/\").concat(/** @type {any} */comment.has_trailing_newline?\"\\n\".concat(state.indent):\" \"):\"//\".concat(comment.value).concat(/** @type {any} */comment.has_trailing_newline?\"\\n\".concat(state.indent):\" \");}).join(\"\")));}if(node.trailingComments){state.comments.push(node.trailingComments[0]);// there is only ever one\n}return result;}/**\n * @param {string} content\n * @param {Node} [node]\n * @returns {Chunk}\n */function c(content,node){return{content:content,loc:node&&node.loc,has_newline:/\\n/.test(content)};}var OPERATOR_PRECEDENCE={'||':2,'&&':3,'??':4,'|':5,'^':6,'&':7,'==':8,'!=':8,'===':8,'!==':8,'<':9,'>':9,'<=':9,'>=':9,in:9,instanceof:9,'<<':10,'>>':10,'>>>':10,'+':11,'-':11,'*':12,'%':12,'/':12,'**':13};/** @type {Record<string, number>} */var EXPRESSIONS_PRECEDENCE={ArrayExpression:20,TaggedTemplateExpression:20,ThisExpression:20,Identifier:20,Literal:18,TemplateLiteral:20,Super:20,SequenceExpression:20,MemberExpression:19,CallExpression:19,NewExpression:19,AwaitExpression:17,ClassExpression:17,FunctionExpression:17,ObjectExpression:17,UpdateExpression:16,UnaryExpression:15,BinaryExpression:14,LogicalExpression:13,ConditionalExpression:4,ArrowFunctionExpression:3,AssignmentExpression:3,YieldExpression:2,RestElement:1};/**\n *\n * @param {Expression} node\n * @param {BinaryExpression | LogicalExpression} parent\n * @param {boolean} is_right\n * @returns\n */function needs_parens(node,parent,is_right){// special case where logical expressions and coalesce expressions cannot be mixed,\n// either of them need to be wrapped with parentheses\nif(node.type==='LogicalExpression'&&parent.type==='LogicalExpression'&&(parent.operator==='??'&&node.operator!=='??'||parent.operator!=='??'&&node.operator==='??')){return true;}var precedence=EXPRESSIONS_PRECEDENCE[node.type];var parent_precedence=EXPRESSIONS_PRECEDENCE[parent.type];if(precedence!==parent_precedence){// Different node types\nreturn!is_right&&precedence===15&&parent_precedence===14&&parent.operator==='**'||precedence<parent_precedence;}if(precedence!==13&&precedence!==14){// Not a `LogicalExpression` or `BinaryExpression`\nreturn false;}if(/** @type {BinaryExpression} */node.operator==='**'&&parent.operator==='**'){// Exponentiation operator has right-to-left associativity\nreturn!is_right;}if(is_right){// Parenthesis are used if both operators have the same precedence\nreturn OPERATOR_PRECEDENCE[/** @type {BinaryExpression} */node.operator]<=OPERATOR_PRECEDENCE[parent.operator];}return OPERATOR_PRECEDENCE[/** @type {BinaryExpression} */node.operator]<OPERATOR_PRECEDENCE[parent.operator];}/** @param {Node} node */function has_call_expression(node){while(node){if(node.type[0]==='CallExpression'){return true;}else if(node.type==='MemberExpression'){node=node.object;}else{return false;}}}/** @param {Chunk[]} chunks */var has_newline=function has_newline(chunks){for(var _i13=0;_i13<chunks.length;_i13+=1){if(chunks[_i13].has_newline)return true;}return false;};/** @param {Chunk[]} chunks */var get_length=function get_length(chunks){var total=0;for(var _i14=0;_i14<chunks.length;_i14+=1){total+=chunks[_i14].content.length;}return total;};/**\n * @param {number} a\n * @param {number} b\n */var sum=function sum(a,b){return a+b;};/**\n * @param {Chunk[][]} nodes\n * @param {Chunk} separator\n * @returns {Chunk[]}\n */var join=function join(nodes,separator){if(nodes.length===0)return[];var joined=(0,_toConsumableArray2.default)(nodes[0]);for(var _i15=1;_i15<nodes.length;_i15+=1){joined.push.apply(joined,[separator].concat((0,_toConsumableArray2.default)(nodes[_i15])));}return joined;};/**\n * @param {(node: any, state: State) => Chunk[]} fn\n */var scoped=function scoped(fn){/**\n\t * @param {any} node\n\t * @param {State} state\n\t */var scoped_fn=function scoped_fn(node,state){return fn(node,_objectSpread(_objectSpread({},state),{},{scope:state.scope_map.get(node)}));};return scoped_fn;};/**\n * @param {string} name\n * @param {Set<string>} names\n */var deconflict=function deconflict(name,names){var original=name;var i=1;while(names.has(name)){name=\"\".concat(original,\"$\").concat(i++);}return name;};/**\n * @param {Node[]} nodes\n * @param {State} state\n */var handle_body=function handle_body(nodes,state){var chunks=[];var body=nodes.map(function(statement){var chunks=handle(statement,_objectSpread(_objectSpread({},state),{},{indent:state.indent}));var add_newline=false;while(state.comments.length){var comment=state.comments.shift();var prefix=add_newline?\"\\n\".concat(state.indent):\" \";chunks.push(c(comment.type==='Block'?\"\".concat(prefix,\"/*\").concat(comment.value,\"*/\"):\"\".concat(prefix,\"//\").concat(comment.value)));add_newline=comment.type==='Line';}return chunks;});var needed_padding=false;for(var _i16=0;_i16<body.length;_i16+=1){var needs_padding=has_newline(body[_i16]);if(_i16>0){chunks.push(c(needs_padding||needed_padding?\"\\n\\n\".concat(state.indent):\"\\n\".concat(state.indent)));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(body[_i16]));needed_padding=needs_padding;}return chunks;};/**\n * @param {VariableDeclaration} node\n * @param {State} state\n */var handle_var_declaration=function handle_var_declaration(node,state){var chunks=[c(\"\".concat(node.kind,\" \"))];var declarators=node.declarations.map(function(d){return handle(d,_objectSpread(_objectSpread({},state),{},{indent:state.indent+(node.declarations.length===1?'':'\\t')}));});var multiple_lines=declarators.some(has_newline)||declarators.map(get_length).reduce(sum,0)+(state.indent.length+declarators.length-1)*2>80;var separator=c(multiple_lines?\",\\n\".concat(state.indent,\"\\t\"):', ');if(multiple_lines){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(join(declarators,separator)));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(join(declarators,separator)));}return chunks;};/** @type {Record<string, Handler>} */var handlers={Program:function Program(node,state){return handle_body(node.body,state);},BlockStatement:scoped(function(node,state){return[c(\"{\\n\".concat(state.indent,\"\\t\"))].concat((0,_toConsumableArray2.default)(handle_body(node.body,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}))),[c(\"\\n\".concat(state.indent,\"}\"))]);}),EmptyStatement:function EmptyStatement(node,state){return[c(';')];},ParenthesizedExpression:function ParenthesizedExpression(node,state){return handle(node.expression,state);},ExpressionStatement:function ExpressionStatement(node,state){if(node.expression.type==='AssignmentExpression'&&node.expression.left.type==='ObjectPattern'){// is an AssignmentExpression to an ObjectPattern\nreturn[c('(')].concat((0,_toConsumableArray2.default)(handle(node.expression,state)),[c(');')]);}return[].concat((0,_toConsumableArray2.default)(handle(node.expression,state)),[c(';')]);},IfStatement:function IfStatement(node,state){var chunks=[c('if (')].concat((0,_toConsumableArray2.default)(handle(node.test,state)),[c(') ')],(0,_toConsumableArray2.default)(handle(node.consequent,state)));if(node.alternate){chunks.push.apply(chunks,[c(' else ')].concat((0,_toConsumableArray2.default)(handle(node.alternate,state))));}return chunks;},LabeledStatement:function LabeledStatement(node,state){return[].concat((0,_toConsumableArray2.default)(handle(node.label,state)),[c(': ')],(0,_toConsumableArray2.default)(handle(node.body,state)));},BreakStatement:function BreakStatement(node,state){return node.label?[c('break ')].concat((0,_toConsumableArray2.default)(handle(node.label,state)),[c(';')]):[c('break;')];},ContinueStatement:function ContinueStatement(node,state){return node.label?[c('continue ')].concat((0,_toConsumableArray2.default)(handle(node.label,state)),[c(';')]):[c('continue;')];},WithStatement:function WithStatement(node,state){return[c('with (')].concat((0,_toConsumableArray2.default)(handle(node.object,state)),[c(') ')],(0,_toConsumableArray2.default)(handle(node.body,state)));},SwitchStatement:function SwitchStatement(/** @type {SwitchStatement} */node,state){var chunks=[c('switch (')].concat((0,_toConsumableArray2.default)(handle(node.discriminant,state)),[c(') {')]);node.cases.forEach(function(block){if(block.test){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"\\tcase \"))].concat((0,_toConsumableArray2.default)(handle(block.test,_objectSpread(_objectSpread({},state),{},{indent:\"\".concat(state.indent,\"\\t\")}))),[c(':')]));}else{chunks.push(c(\"\\n\".concat(state.indent,\"\\tdefault:\")));}block.consequent.forEach(function(statement){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"\\t\\t\"))].concat((0,_toConsumableArray2.default)(handle(statement,_objectSpread(_objectSpread({},state),{},{indent:\"\".concat(state.indent,\"\\t\\t\")})))));});});chunks.push(c(\"\\n\".concat(state.indent,\"}\")));return chunks;},ReturnStatement:function ReturnStatement(node,state){if(node.argument){var contains_comment=node.argument.leadingComments&&node.argument.leadingComments.some(function(/** @type import('../utils/comments.js').CommentWithLocation */comment){return comment.has_trailing_newline;});return[c(contains_comment?'return (':'return ')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(contains_comment?');':';')]);}else{return[c('return;')];}},ThrowStatement:function ThrowStatement(node,state){return[c('throw ')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(';')]);},TryStatement:function TryStatement(node,state){var chunks=[c('try ')].concat((0,_toConsumableArray2.default)(handle(node.block,state)));if(node.handler){if(node.handler.param){chunks.push.apply(chunks,[c(' catch(')].concat((0,_toConsumableArray2.default)(handle(node.handler.param,state)),[c(') ')]));}else{chunks.push(c(' catch '));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.handler.body,state)));}if(node.finalizer){chunks.push.apply(chunks,[c(' finally ')].concat((0,_toConsumableArray2.default)(handle(node.finalizer,state))));}return chunks;},WhileStatement:function WhileStatement(node,state){return[c('while (')].concat((0,_toConsumableArray2.default)(handle(node.test,state)),[c(') ')],(0,_toConsumableArray2.default)(handle(node.body,state)));},DoWhileStatement:function DoWhileStatement(node,state){return[c('do ')].concat((0,_toConsumableArray2.default)(handle(node.body,state)),[c(' while (')],(0,_toConsumableArray2.default)(handle(node.test,state)),[c(');')]);},ForStatement:scoped(function(node,state){var chunks=[c('for (')];if(node.init){if(node.init.type==='VariableDeclaration'){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle_var_declaration(node.init,state)));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.init,state)));}}chunks.push(c('; '));if(node.test)chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.test,state)));chunks.push(c('; '));if(node.update)chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.update,state)));chunks.push.apply(chunks,[c(') ')].concat((0,_toConsumableArray2.default)(handle(node.body,state))));return chunks;}),ForInStatement:scoped(function(node,state){var chunks=[c(\"for \".concat(node.await?'await ':'',\"(\"))];if(node.left.type==='VariableDeclaration'){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle_var_declaration(node.left,state)));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.left,state)));}chunks.push.apply(chunks,[c(node.type==='ForInStatement'?\" in \":\" of \")].concat((0,_toConsumableArray2.default)(handle(node.right,state)),[c(') ')],(0,_toConsumableArray2.default)(handle(node.body,state))));return chunks;}),DebuggerStatement:function DebuggerStatement(node,state){return[c('debugger',node),c(';')];},FunctionDeclaration:scoped(function(/** @type {FunctionDeclaration} */node,state){var chunks=[];if(node.async)chunks.push(c('async '));chunks.push(c(node.generator?'function* ':'function '));if(node.id)chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.id,state)));chunks.push(c('('));var params=node.params.map(function(p){return handle(p,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}));});var multiple_lines=params.some(has_newline)||params.map(get_length).reduce(sum,0)+(state.indent.length+params.length-1)*2>80;var separator=c(multiple_lines?\",\\n\".concat(state.indent):', ');if(multiple_lines){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"\\t\"))].concat((0,_toConsumableArray2.default)(join(params,separator)),[c(\"\\n\".concat(state.indent))]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(join(params,separator)));}chunks.push.apply(chunks,[c(') ')].concat((0,_toConsumableArray2.default)(handle(node.body,state))));return chunks;}),VariableDeclaration:function VariableDeclaration(node,state){return handle_var_declaration(node,state).concat(c(';'));},VariableDeclarator:function VariableDeclarator(node,state){if(node.init){return[].concat((0,_toConsumableArray2.default)(handle(node.id,state)),[c(' = ')],(0,_toConsumableArray2.default)(handle(node.init,state)));}else{return handle(node.id,state);}},ClassDeclaration:function ClassDeclaration(node,state){var chunks=[c('class ')];if(node.id)chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.id,state)).concat([c(' ')]));if(node.superClass){chunks.push.apply(chunks,[c('extends ')].concat((0,_toConsumableArray2.default)(handle(node.superClass,state)),[c(' ')]));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.body,state)));return chunks;},ImportDeclaration:function ImportDeclaration(/** @type {ImportDeclaration} */node,state){var chunks=[c('import ')];var length=node.specifiers.length;var source=handle(node.source,state);if(length>0){var _i17=0;while(_i17<length){if(_i17>0){chunks.push(c(', '));}var specifier=node.specifiers[_i17];if(specifier.type==='ImportDefaultSpecifier'){chunks.push(c(specifier.local.name,specifier));_i17+=1;}else if(specifier.type==='ImportNamespaceSpecifier'){chunks.push(c('* as '+specifier.local.name,specifier));_i17+=1;}else{break;}}if(_i17<length){// we have named specifiers\nvar specifiers=node.specifiers.slice(_i17).map(function(/** @type {ImportSpecifier} */specifier){var name=handle(specifier.imported,state)[0];var as=handle(specifier.local,state)[0];if(name.content===as.content){return[as];}return[name,c(' as '),as];});var width=get_length(chunks)+specifiers.map(get_length).reduce(sum,0)+2*specifiers.length+6+get_length(source);if(width>80){chunks.push.apply(chunks,[c(\"{\\n\\t\")].concat((0,_toConsumableArray2.default)(join(specifiers,c(',\\n\\t'))),[c('\\n}')]));}else{chunks.push.apply(chunks,[c(\"{ \")].concat((0,_toConsumableArray2.default)(join(specifiers,c(', '))),[c(' }')]));}}chunks.push(c(' from '));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(source).concat([c(';')]));return chunks;},ImportExpression:function ImportExpression(node,state){return[c('import(')].concat((0,_toConsumableArray2.default)(handle(node.source,state)),[c(')')]);},ExportDefaultDeclaration:function ExportDefaultDeclaration(node,state){var chunks=[c(\"export default \")].concat((0,_toConsumableArray2.default)(handle(node.declaration,state)));if(node.declaration.type!=='FunctionDeclaration'){chunks.push(c(';'));}return chunks;},ExportNamedDeclaration:function ExportNamedDeclaration(node,state){var chunks=[c('export ')];if(node.declaration){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.declaration,state)));}else{var specifiers=node.specifiers.map(function(/** @type {ExportSpecifier} */specifier){var name=handle(specifier.local,state)[0];var as=handle(specifier.exported,state)[0];if(name.content===as.content){return[name];}return[name,c(' as '),as];});var width=7+specifiers.map(get_length).reduce(sum,0)+2*specifiers.length;if(width>80){chunks.push.apply(chunks,[c('{\\n\\t')].concat((0,_toConsumableArray2.default)(join(specifiers,c(',\\n\\t'))),[c('\\n}')]));}else{chunks.push.apply(chunks,[c('{ ')].concat((0,_toConsumableArray2.default)(join(specifiers,c(', '))),[c(' }')]));}if(node.source){chunks.push.apply(chunks,[c(' from ')].concat((0,_toConsumableArray2.default)(handle(node.source,state))));}}chunks.push(c(';'));return chunks;},ExportAllDeclaration:function ExportAllDeclaration(node,state){return[c(\"export * from \")].concat((0,_toConsumableArray2.default)(handle(node.source,state)),[c(\";\")]);},MethodDefinition:function MethodDefinition(node,state){var chunks=[];if(node.static){chunks.push(c('static '));}if(node.kind==='get'||node.kind==='set'){// Getter or setter\nchunks.push(c(node.kind+' '));}if(node.value.async){chunks.push(c('async '));}if(node.value.generator){chunks.push(c('*'));}if(node.computed){chunks.push.apply(chunks,[c('[')].concat((0,_toConsumableArray2.default)(handle(node.key,state)),[c(']')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.key,state)));}chunks.push(c('('));var params=node.value.params;for(var _i18=0;_i18<params.length;_i18+=1){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(params[_i18],state)));if(_i18<params.length-1)chunks.push(c(', '));}chunks.push.apply(chunks,[c(') ')].concat((0,_toConsumableArray2.default)(handle(node.value.body,state))));return chunks;},ArrowFunctionExpression:scoped(function(/** @type {ArrowFunctionExpression} */node,state){var chunks=[];if(node.async)chunks.push(c('async '));if(node.params.length===1&&node.params[0].type==='Identifier'){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.params[0],state)));}else{var params=node.params.map(function(param){return handle(param,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}));});chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(join(params,c(', '))),[c(')')]));}chunks.push(c(' => '));if(node.body.type==='ObjectExpression'||node.body.type==='AssignmentExpression'&&node.body.left.type==='ObjectPattern'){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.body,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.body,state)));}return chunks;}),ThisExpression:function ThisExpression(node,state){return[c('this',node)];},Super:function Super(node,state){return[c('super',node)];},RestElement:function RestElement(node,state){return[c('...')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)));},YieldExpression:function YieldExpression(node,state){if(node.argument){return[c(node.delegate?\"yield* \":\"yield \")].concat((0,_toConsumableArray2.default)(handle(node.argument,state)));}return[c(node.delegate?\"yield*\":\"yield\")];},AwaitExpression:function AwaitExpression(node,state){if(node.argument){var precedence=EXPRESSIONS_PRECEDENCE[node.argument.type];if(precedence&&precedence<EXPRESSIONS_PRECEDENCE.AwaitExpression){return[c('await (')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(')')]);}else{return[c('await ')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)));}}return[c('await')];},TemplateLiteral:function TemplateLiteral(node,state){var chunks=[c('`')];var quasis=node.quasis,expressions=node.expressions;for(var _i19=0;_i19<expressions.length;_i19++){chunks.push.apply(chunks,[c(quasis[_i19].value.raw),c('${')].concat((0,_toConsumableArray2.default)(handle(expressions[_i19],state)),[c('}')]));}chunks.push(c(quasis[quasis.length-1].value.raw),c('`'));return chunks;},TaggedTemplateExpression:function TaggedTemplateExpression(node,state){return handle(node.tag,state).concat(handle(node.quasi,state));},ArrayExpression:function ArrayExpression(node,state){var chunks=[c('[')];/** @type {Chunk[][]} */var elements=[];/** @type {Chunk[]} */var sparse_commas=[];for(var _i20=0;_i20<node.elements.length;_i20+=1){// can't use map/forEach because of sparse arrays\nvar element=node.elements[_i20];if(element){elements.push([].concat((0,_toConsumableArray2.default)(sparse_commas),(0,_toConsumableArray2.default)(handle(element,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'})))));sparse_commas=[];}else{sparse_commas.push(c(','));}}var multiple_lines=elements.some(has_newline)||elements.map(get_length).reduce(sum,0)+(state.indent.length+elements.length-1)*2>80;if(multiple_lines){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"\\t\"))].concat((0,_toConsumableArray2.default)(join(elements,c(\",\\n\".concat(state.indent,\"\\t\")))),[c(\"\\n\".concat(state.indent))],(0,_toConsumableArray2.default)(sparse_commas)));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(join(elements,c(', '))).concat((0,_toConsumableArray2.default)(sparse_commas)));}chunks.push(c(']'));return chunks;},ObjectExpression:function ObjectExpression(/** @type {ObjectExpression} */node,state){if(node.properties.length===0){return[c('{}')];}var has_inline_comment=false;/** @type {Chunk[]} */var chunks=[];var separator=c(', ');node.properties.forEach(function(p,i){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(p,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}))));if(state.comments.length){// TODO generalise this, so it works with ArrayExpressions and other things.\n// At present, stuff will just get appended to the closest statement/declaration\nchunks.push(c(', '));while(state.comments.length){var comment=state.comments.shift();chunks.push(c(comment.type==='Block'?\"/*\".concat(comment.value,\"*/\\n\").concat(state.indent,\"\\t\"):\"//\".concat(comment.value,\"\\n\").concat(state.indent,\"\\t\")));if(comment.type==='Line'){has_inline_comment=true;}}}else{if(i<node.properties.length-1){chunks.push(separator);}}});var multiple_lines=has_inline_comment||has_newline(chunks)||get_length(chunks)>40;if(multiple_lines){separator.content=\",\\n\".concat(state.indent,\"\\t\");}return[c(multiple_lines?\"{\\n\".concat(state.indent,\"\\t\"):\"{ \")].concat(chunks,[c(multiple_lines?\"\\n\".concat(state.indent,\"}\"):\" }\")]);},Property:function Property(node,state){var value=handle(node.value,state);if(node.key===node.value){return value;}// special case\nif(!node.computed&&node.value.type==='AssignmentPattern'&&node.value.left.type==='Identifier'&&node.value.left.name===node.key.name){return value;}if(!node.computed&&node.value.type==='Identifier'&&(node.key.type==='Identifier'&&node.key.name===value[0].content||node.key.type==='Literal'&&node.key.value===value[0].content)){return value;}var key=handle(node.key,state);if(node.value.type==='FunctionExpression'&&!node.value.id){state=_objectSpread(_objectSpread({},state),{},{scope:state.scope_map.get(node.value)});var chunks=node.kind!=='init'?[c(\"\".concat(node.kind,\" \"))]:[];if(node.value.async){chunks.push(c('async '));}if(node.value.generator){chunks.push(c('*'));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(node.computed?[c('[')].concat((0,_toConsumableArray2.default)(key),[c(']')]):key).concat([c('(')],(0,_toConsumableArray2.default)(join(node.value.params.map(function(/** @type {Pattern} */param){return handle(param,state);}),c(', '))),[c(') ')],(0,_toConsumableArray2.default)(handle(node.value.body,state))));return chunks;}if(node.computed){return[c('[')].concat((0,_toConsumableArray2.default)(key),[c(']: ')],(0,_toConsumableArray2.default)(value));}return[].concat((0,_toConsumableArray2.default)(key),[c(': ')],(0,_toConsumableArray2.default)(value));},ObjectPattern:function ObjectPattern(node,state){var chunks=[c('{ ')];for(var _i21=0;_i21<node.properties.length;_i21+=1){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.properties[_i21],state)));if(_i21<node.properties.length-1)chunks.push(c(', '));}chunks.push(c(' }'));return chunks;},SequenceExpression:function SequenceExpression(/** @type {SequenceExpression} */node,state){var expressions=node.expressions.map(function(e){return handle(e,state);});return[c('(')].concat((0,_toConsumableArray2.default)(join(expressions,c(', '))),[c(')')]);},UnaryExpression:function UnaryExpression(node,state){var chunks=[c(node.operator)];if(node.operator.length>1){chunks.push(c(' '));}if(EXPRESSIONS_PRECEDENCE[node.argument.type]<EXPRESSIONS_PRECEDENCE.UnaryExpression){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.argument,state)));}return chunks;},UpdateExpression:function UpdateExpression(node,state){return node.prefix?[c(node.operator)].concat((0,_toConsumableArray2.default)(handle(node.argument,state))):[].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(node.operator)]);},AssignmentExpression:function AssignmentExpression(node,state){return[].concat((0,_toConsumableArray2.default)(handle(node.left,state)),[c(\" \".concat(node.operator||'=',\" \"))],(0,_toConsumableArray2.default)(handle(node.right,state)));},BinaryExpression:function BinaryExpression(node,state){var chunks=[];// TODO\n// const is_in = node.operator === 'in';\n// if (is_in) {\n// \t// Avoids confusion in `for` loops initializers\n// \tchunks.push(c('('));\n// }\nif(needs_parens(node.left,node,false)){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.left,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.left,state)));}chunks.push(c(\" \".concat(node.operator,\" \")));if(needs_parens(node.right,node,true)){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.right,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.right,state)));}return chunks;},ConditionalExpression:function ConditionalExpression(node,state){var chunks=[];if(EXPRESSIONS_PRECEDENCE[node.test.type]>EXPRESSIONS_PRECEDENCE.ConditionalExpression){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.test,state)));}else{chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.test,state)),[c(')')]));}var child_state=_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'});var consequent=handle(node.consequent,child_state);var alternate=handle(node.alternate,child_state);var multiple_lines=has_newline(consequent)||has_newline(alternate)||get_length(chunks)+get_length(consequent)+get_length(alternate)>50;if(multiple_lines){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"? \"))].concat((0,_toConsumableArray2.default)(consequent),[c(\"\\n\".concat(state.indent,\": \"))],(0,_toConsumableArray2.default)(alternate)));}else{chunks.push.apply(chunks,[c(\" ? \")].concat((0,_toConsumableArray2.default)(consequent),[c(\" : \")],(0,_toConsumableArray2.default)(alternate)));}return chunks;},NewExpression:function NewExpression(/** @type {NewExpression} */node,state){var chunks=[c('new ')];if(EXPRESSIONS_PRECEDENCE[node.callee.type]<EXPRESSIONS_PRECEDENCE.CallExpression||has_call_expression(node.callee)){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.callee,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.callee,state)));}// TODO this is copied from CallExpression — DRY it out\nvar args=node.arguments.map(function(arg){return handle(arg,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}));});var separator=args.some(has_newline)// TODO or length exceeds 80\n?c(',\\n'+state.indent):c(', ');chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(join(args,separator)),[c(')')]));return chunks;},ChainExpression:function ChainExpression(node,state){return handle(node.expression,state);},CallExpression:function CallExpression(/** @type {CallExpression} */node,state){var chunks=[];if(EXPRESSIONS_PRECEDENCE[node.callee.type]<EXPRESSIONS_PRECEDENCE.CallExpression){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.callee,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.callee,state)));}if(/** @type {SimpleCallExpression} */node.optional){chunks.push(c('?.'));}var args=node.arguments.map(function(arg){return handle(arg,state);});var multiple_lines=args.slice(0,-1).some(has_newline);// TODO or length exceeds 80\nif(multiple_lines){// need to handle args again. TODO find alternative approach?\nvar _args=node.arguments.map(function(arg){return handle(arg,_objectSpread(_objectSpread({},state),{},{indent:\"\".concat(state.indent,\"\\t\")}));});chunks.push.apply(chunks,[c(\"(\\n\".concat(state.indent,\"\\t\"))].concat((0,_toConsumableArray2.default)(join(_args,c(\",\\n\".concat(state.indent,\"\\t\")))),[c(\"\\n\".concat(state.indent,\")\"))]));}else{chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(join(args,c(', '))),[c(')')]));}return chunks;},MemberExpression:function MemberExpression(node,state){var chunks=[];if(EXPRESSIONS_PRECEDENCE[node.object.type]<EXPRESSIONS_PRECEDENCE.MemberExpression){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.object,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.object,state)));}if(node.computed){if(node.optional){chunks.push(c('?.'));}chunks.push.apply(chunks,[c('[')].concat((0,_toConsumableArray2.default)(handle(node.property,state)),[c(']')]));}else{chunks.push.apply(chunks,[c(node.optional?'?.':'.')].concat((0,_toConsumableArray2.default)(handle(node.property,state))));}return chunks;},MetaProperty:function MetaProperty(node,state){return[].concat((0,_toConsumableArray2.default)(handle(node.meta,state)),[c('.')],(0,_toConsumableArray2.default)(handle(node.property,state)));},Identifier:function Identifier(node,state){var name=node.name;if(name[0]==='@'){name=state.getName(name.slice(1));}else if(node.name[0]==='#'){var owner=state.scope.find_owner(node.name);if(!owner){throw new Error(\"Could not find owner for node\");}if(!state.deconflicted.has(owner)){state.deconflicted.set(owner,new Map());}var deconflict_map=state.deconflicted.get(owner);if(!deconflict_map.has(node.name)){deconflict_map.set(node.name,deconflict(node.name.slice(1),owner.references));}name=deconflict_map.get(node.name);}return[c(name,node)];},Literal:function Literal(/** @type {Literal} */node,state){if(typeof node.value==='string'){return[// TODO do we need to handle weird unicode characters somehow?\n// str.replace(/\\\\u(\\d{4})/g, (m, n) => String.fromCharCode(+n))\nc((node.raw||JSON.stringify(node.value)).replace(re,function(_m,_i,at,hash,name){if(at)return'@'+name;if(hash)return'#'+name;throw new Error(\"this shouldn't happen\");}),node)];}return[c(node.raw||String(node.value),node)];}};handlers.ForOfStatement=handlers.ForInStatement;handlers.FunctionExpression=handlers.FunctionDeclaration;handlers.ClassExpression=handlers.ClassDeclaration;handlers.ClassBody=handlers.BlockStatement;handlers.SpreadElement=handlers.RestElement;handlers.ArrayPattern=handlers.ArrayExpression;handlers.LogicalExpression=handlers.BinaryExpression;handlers.AssignmentPattern=handlers.AssignmentExpression;var charToInteger={};var chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';for(var i=0;i<chars.length;i++){charToInteger[chars.charCodeAt(i)]=i;}function decode(mappings){var decoded=[];var line=[];var segment=[0,0,0,0,0];var j=0;for(var i=0,shift=0,value=0;i<mappings.length;i++){var c=mappings.charCodeAt(i);if(c===44){// \",\"\nsegmentify(line,segment,j);j=0;}else if(c===59){// \";\"\nsegmentify(line,segment,j);j=0;decoded.push(line);line=[];segment[0]=0;}else{var integer=charToInteger[c];if(integer===undefined){throw new Error('Invalid character ('+String.fromCharCode(c)+')');}var hasContinuationBit=integer&32;integer&=31;value+=integer<<shift;if(hasContinuationBit){shift+=5;}else{var shouldNegate=value&1;value>>>=1;if(shouldNegate){value=value===0?-0x80000000:-value;}segment[j]+=value;j++;value=shift=0;// reset\n}}}segmentify(line,segment,j);decoded.push(line);return decoded;}function segmentify(line,segment,j){// This looks ugly, but we're creating specialized arrays with a specific\n// length. This is much faster than creating a new array (which v8 expands to\n// a capacity of 17 after pushing the first item), or slicing out a subarray\n// (which is slow). Length 4 is assumed to be the most frequent, followed by\n// length 5 (since not everything will have an associated name), followed by\n// length 1 (it's probably rare for a source substring to not have an\n// associated segment data).\nif(j===4)line.push([segment[0],segment[1],segment[2],segment[3]]);else if(j===5)line.push([segment[0],segment[1],segment[2],segment[3],segment[4]]);else if(j===1)line.push([segment[0]]);}function encode(decoded){var sourceFileIndex=0;// second field\nvar sourceCodeLine=0;// third field\nvar sourceCodeColumn=0;// fourth field\nvar nameIndex=0;// fifth field\nvar mappings='';for(var i=0;i<decoded.length;i++){var line=decoded[i];if(i>0)mappings+=';';if(line.length===0)continue;var generatedCodeColumn=0;// first field\nvar lineMappings=[];for(var _i=0,line_1=line;_i<line_1.length;_i++){var segment=line_1[_i];var segmentMappings=encodeInteger(segment[0]-generatedCodeColumn);generatedCodeColumn=segment[0];if(segment.length>1){segmentMappings+=encodeInteger(segment[1]-sourceFileIndex)+encodeInteger(segment[2]-sourceCodeLine)+encodeInteger(segment[3]-sourceCodeColumn);sourceFileIndex=segment[1];sourceCodeLine=segment[2];sourceCodeColumn=segment[3];}if(segment.length===5){segmentMappings+=encodeInteger(segment[4]-nameIndex);nameIndex=segment[4];}lineMappings.push(segmentMappings);}mappings+=lineMappings.join(',');}return mappings;}function encodeInteger(num){var result='';num=num<0?-num<<1|1:num<<1;do{var clamped=num&31;num>>>=5;if(num>0){clamped|=32;}result+=chars[clamped];}while(num>0);return result;}/** @type {(str?: string) => string} str */var btoa$1=function btoa$1(){throw new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');};if(typeof window!=='undefined'&&typeof window.btoa==='function'){btoa$1=function btoa$1(str){return window.btoa(unescape(encodeURIComponent(str)));};}else if(typeof Buffer==='function'){btoa$1=function btoa$1(str){return Buffer.from(str,'utf-8').toString('base64');};}/** @typedef {import('estree').Node} Node */ /**\n * @typedef {{\n *   file?: string;\n *   sourceMapSource?: string;\n *   sourceMapContent?: string;\n *   sourceMapEncodeMappings?: boolean; // default true\n *   getName?: (name: string) => string;\n * }} PrintOptions\n */ /**\n * @param {Node} node\n * @param {PrintOptions} opts\n * @returns {{ code: string, map: any }} // TODO\n */function print(node){var opts=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(Array.isArray(node)){return print({type:'Program',body:node,sourceType:'module'},opts);}var _opts$getName=opts.getName,getName=_opts$getName===void 0?/** @param {string} x */function(x){throw new Error(\"Unhandled sigil @\".concat(x));}:_opts$getName;var _analyze=analyze(node),scope_map=_analyze.map,scope=_analyze.scope;var deconflicted=new WeakMap();var chunks=handle(node,{indent:'',getName:getName,scope:scope,scope_map:scope_map,deconflicted:deconflicted,comments:[]});/** @typedef {[number, number, number, number]} Segment */var code='';var current_column=0;/** @type {Segment[][]} */var mappings=[];/** @type {Segment[]} */var current_line=[];for(var _i22=0;_i22<chunks.length;_i22+=1){var chunk=chunks[_i22];code+=chunk.content;if(chunk.loc){current_line.push([current_column,0,// source index is always zero\nchunk.loc.start.line-1,chunk.loc.start.column]);}for(var _i23=0;_i23<chunk.content.length;_i23+=1){if(chunk.content[_i23]==='\\n'){mappings.push(current_line);current_line=[];current_column=0;}else{current_column+=1;}}if(chunk.loc){current_line.push([current_column,0,// source index is always zero\nchunk.loc.end.line-1,chunk.loc.end.column]);}}mappings.push(current_line);var map={version:3,/** @type {string[]} */names:[],sources:[opts.sourceMapSource||null],sourcesContent:[opts.sourceMapContent||null],mappings:opts.sourceMapEncodeMappings==undefined||opts.sourceMapEncodeMappings?encode(mappings):mappings};Object.defineProperties(map,{toString:{enumerable:false,value:function toString(){return JSON.stringify(this);}},toUrl:{enumerable:false,value:function toUrl(){return'data:application/json;charset=utf-8;base64,'+btoa$1(this.toString());}}});return{code:code,map:map};}/** @typedef {import('estree').Expression} Expression */ /** @typedef {import('estree').Node} Node */ /** @typedef {import('estree').ObjectExpression} ObjectExpression */ /** @typedef {import('estree').Property} Property */ /** @typedef {import('estree').SpreadElement} SpreadElement */ /** @typedef {import('./utils/comments').CommentWithLocation} CommentWithLocation */ /** @type {Record<string, string>} */var sigils={'@':'AT','#':'HASH'};/** @param {TemplateStringsArray} strings */var join$1=function join$1(strings){var str=strings[0];for(var _i24=1;_i24<strings.length;_i24+=1){str+=\"_\".concat(id,\"_\").concat(_i24-1,\"_\").concat(strings[_i24]);}return str.replace(/([@#])(\\w+)/g,function(_m,sigil,name){return\"_\".concat(id,\"_\").concat(sigils[sigil],\"_\").concat(name);});};/**\n * @param {any[]} array\n * @param {any[]} target\n */var flatten_body=function flatten_body(array,target){for(var _i25=0;_i25<array.length;_i25+=1){var statement=array[_i25];if(Array.isArray(statement)){flatten_body(statement,target);continue;}if(statement.type==='ExpressionStatement'){if(statement.expression===EMPTY)continue;if(Array.isArray(statement.expression)){// TODO this is hacktacular\nvar _node4=statement.expression[0];while(Array.isArray(_node4)){_node4=_node4[0];}if(_node4)_node4.leadingComments=statement.leadingComments;flatten_body(statement.expression,target);continue;}if(/(Expression|Literal)$/.test(statement.expression.type)){target.push(statement);continue;}if(statement.leadingComments)statement.expression.leadingComments=statement.leadingComments;if(statement.trailingComments)statement.expression.trailingComments=statement.trailingComments;target.push(statement.expression);continue;}target.push(statement);}return target;};/**\n * @param {any[]} array\n * @param {any[]} target\n */var flatten_properties=function flatten_properties(array,target){for(var _i26=0;_i26<array.length;_i26+=1){var property=array[_i26];if(property.value===EMPTY)continue;if(property.key===property.value&&Array.isArray(property.key)){flatten_properties(property.key,target);continue;}target.push(property);}return target;};/**\n * @param {any[]} nodes\n * @param {any[]} target\n */var flatten$1=function flatten$1(nodes,target){for(var _i27=0;_i27<nodes.length;_i27+=1){var _node5=nodes[_i27];if(_node5===EMPTY)continue;if(Array.isArray(_node5)){flatten$1(_node5,target);continue;}target.push(_node5);}return target;};var EMPTY={type:'Empty'};/**\n *\n * @param {CommentWithLocation[]} comments\n * @param {string} raw\n * @returns {any}\n */var acorn_opts=function acorn_opts(comments,raw){var _get_comment_handlers=get_comment_handlers(comments,raw),onComment=_get_comment_handlers.onComment;return{ecmaVersion:2020,sourceType:'module',allowAwaitOutsideFunction:true,allowImportExportEverywhere:true,allowReturnOutsideFunction:true,onComment:onComment};};/**\n * @param {string} raw\n * @param {Node} node\n * @param {any[]} values\n * @param {CommentWithLocation[]} comments\n */var inject=function inject(raw,node,values,comments){comments.forEach(function(comment){comment.value=comment.value.replace(re,function(m,i){return+i in values?values[+i]:m;});});var _get_comment_handlers2=get_comment_handlers(comments,raw),enter=_get_comment_handlers2.enter,_leave=_get_comment_handlers2.leave;return walk(node,{enter:enter,/** @param {any} node */leave:function leave(node){if(node.type==='Identifier'){re.lastIndex=0;var match=re.exec(node.name);if(match){if(match[1]){if(+match[1]in values){var _value3=values[+match[1]];if(typeof _value3==='string'){_value3={type:'Identifier',name:_value3,leadingComments:node.leadingComments,trailingComments:node.trailingComments};}else if(typeof _value3==='number'){_value3={type:'Literal',value:_value3,leadingComments:node.leadingComments,trailingComments:node.trailingComments};}this.replace(_value3||EMPTY);}}else{node.name=\"\".concat(match[2]?\"@\":\"#\").concat(match[4]);}}}if(node.type==='Literal'){if(typeof node.value==='string'){re.lastIndex=0;var new_value=/** @type {string} */node.value.replace(re,function(m,i){return+i in values?values[+i]:m;});var has_changed=new_value!==node.value;node.value=new_value;if(has_changed&&node.raw){// preserve the quotes\nnode.raw=\"\".concat(node.raw[0]).concat(JSON.stringify(node.value).slice(1,-1)).concat(node.raw[node.raw.length-1]);}}}if(node.type==='TemplateElement'){re.lastIndex=0;node.value.raw=/** @type {string} */node.value.raw.replace(re,function(m,i){return+i in values?values[+i]:m;});}if(node.type==='Program'||node.type==='BlockStatement'){node.body=flatten_body(node.body,[]);}if(node.type==='ObjectExpression'||node.type==='ObjectPattern'){node.properties=flatten_properties(node.properties,[]);}if(node.type==='ArrayExpression'||node.type==='ArrayPattern'){node.elements=flatten$1(node.elements,[]);}if(node.type==='FunctionExpression'||node.type==='FunctionDeclaration'||node.type==='ArrowFunctionExpression'){node.params=flatten$1(node.params,[]);}if(node.type==='CallExpression'||node.type==='NewExpression'){node.arguments=flatten$1(node.arguments,[]);}if(node.type==='ImportDeclaration'||node.type==='ExportNamedDeclaration'){node.specifiers=flatten$1(node.specifiers,[]);}if(node.type==='ForStatement'){node.init=node.init===EMPTY?null:node.init;node.test=node.test===EMPTY?null:node.test;node.update=node.update===EMPTY?null:node.update;}_leave(node);}});};/**\n *\n * @param {TemplateStringsArray} strings\n * @param  {any[]} values\n * @returns {Node[]}\n */function b(strings){var str=join$1(strings);/** @type {CommentWithLocation[]} */var comments=[];try{var ast=/** @type {any} */parse(str,acorn_opts(comments,str));for(var _len=arguments.length,values=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){values[_key-1]=arguments[_key];}ast=inject(str,ast,values,comments);return ast.body;}catch(err){handle_error(str,err);}}/**\n *\n * @param {TemplateStringsArray} strings\n * @param  {any[]} values\n * @returns {Expression & { start: Number, end: number }}\n */function x(strings){var str=join$1(strings);/** @type {CommentWithLocation[]} */var comments=[];try{var _expression=/** @type {Expression & { start: Number, end: number }} */parseExpressionAt(str,0,acorn_opts(comments,str));var match=/\\S+/.exec(str.slice(_expression.end));if(match){throw new Error(\"Unexpected token '\".concat(match[0],\"'\"));}for(var _len2=arguments.length,values=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){values[_key2-1]=arguments[_key2];}_expression=/** @type {Expression & { start: Number, end: number }} */inject(str,_expression,values,comments);return _expression;}catch(err){handle_error(str,err);}}/**\n *\n * @param {TemplateStringsArray} strings\n * @param  {any[]} values\n * @returns {(Property | SpreadElement) & { start: Number, end: number }}\n */function p(strings){var str=\"{\".concat(join$1(strings),\"}\");/** @type {CommentWithLocation[]} */var comments=[];try{var _expression2=/** @type {any} */parseExpressionAt(str,0,acorn_opts(comments,str));for(var _len3=arguments.length,values=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){values[_key3-1]=arguments[_key3];}_expression2=inject(str,_expression2,values,comments);return _expression2.properties[0];}catch(err){handle_error(str,err);}}/**\n * @param {string} str\n * @param {Error} err\n */function handle_error(str,err){// TODO location/code frame\nre.lastIndex=0;str=str.replace(re,function(m,i,at,hash,name){if(at)return\"@\".concat(name);if(hash)return\"#\".concat(name);return'${...}';});console.log(\"failed to parse:\\n\".concat(str));throw err;}/**\n * @param {string} source\n * @param {any} opts\n */var parse$1=function parse$1(source,opts){/** @type {CommentWithLocation[]} */var comments=[];var _get_comment_handlers3=get_comment_handlers(comments,source),onComment=_get_comment_handlers3.onComment,enter=_get_comment_handlers3.enter,leave=_get_comment_handlers3.leave;var ast=/** @type {any} */parse(source,_objectSpread({onComment:onComment},opts));walk(ast,{enter:enter,leave:leave});return ast;};/**\n * @param {string} source\n * @param {number} index\n * @param {any} opts\n */var parseExpressionAt$1=function parseExpressionAt$1(source,index,opts){/** @type {CommentWithLocation[]} */var comments=[];var _get_comment_handlers4=get_comment_handlers(comments,source),onComment=_get_comment_handlers4.onComment,enter=_get_comment_handlers4.enter,leave=_get_comment_handlers4.leave;var ast=/** @type {any} */parseExpressionAt(source,index,_objectSpread({onComment:onComment},opts));walk(ast,{enter:enter,leave:leave});return ast;};var parse$2=function parse$2(source){return parse$1(source,{sourceType:'module',ecmaVersion:12,locations:true});};var parse_expression_at=function parse_expression_at(source,index){return parseExpressionAt$1(source,index,{sourceType:'module',ecmaVersion:12,locations:true});};var whitespace=/[ \\t\\r\\n]/;var start_whitespace=/^[ \\t\\r\\n]*/;var end_whitespace=/[ \\t\\r\\n]*$/;var dimensions=/^(?:offset|client)(?:Width|Height)$/;function read_expression(parser){try{var _node6=parse_expression_at(parser.template,parser.index);var num_parens=0;for(var _i28=parser.index;_i28<_node6.start;_i28+=1){if(parser.template[_i28]==='(')num_parens+=1;}var index=_node6.end;while(num_parens>0){var char=parser.template[index];if(char===')'){num_parens-=1;}else if(!whitespace.test(char)){parser.error(parser_errors.unexpected_token(')'),index);}index+=1;}parser.index=index;return _node6;}catch(err){parser.acorn_error(err);}}function get_context(parser,attributes,start){var context=attributes.find(function(attribute){return attribute.name==='context';});if(!context)return'default';if(context.value.length!==1||context.value[0].type!=='Text'){parser.error(parser_errors.invalid_script_context_attribute,start);}var value=context.value[0].data;if(value!=='module'){parser.error(parser_errors.invalid_script_context_value,context.start);}return value;}function read_script(parser,start,attributes){var script_start=parser.index;var data=parser.read_until(/<\\/script\\s*>/,parser_errors.unclosed_script);if(parser.index>=parser.template.length){parser.error(parser_errors.unclosed_script);}var source=parser.template.slice(0,script_start).replace(/[^\\n]/g,' ')+data;parser.read(/<\\/script\\s*>/);var ast;try{ast=parse$2(source);}catch(err){parser.acorn_error(err);}// TODO is this necessary?\nast.start=script_start;return{type:'Script',start:start,end:parser.index,context:get_context(parser,attributes,start),content:ast};}var MIN_SIZE=16*1024;var SafeUint32Array=typeof Uint32Array!=='undefined'?Uint32Array:Array;// fallback on Array when TypedArray is not supported\nvar adoptBuffer=function adoptBuffer(buffer,size){if(buffer===null||buffer.length<size){return new SafeUint32Array(Math.max(size+1024,MIN_SIZE));}return buffer;};// CSS Syntax Module Level 3\n// https://www.w3.org/TR/css-syntax-3/\nvar TYPE={EOF:0,// <EOF-token>\nIdent:1,// <ident-token>\nFunction:2,// <function-token>\nAtKeyword:3,// <at-keyword-token>\nHash:4,// <hash-token>\nString:5,// <string-token>\nBadString:6,// <bad-string-token>\nUrl:7,// <url-token>\nBadUrl:8,// <bad-url-token>\nDelim:9,// <delim-token>\nNumber:10,// <number-token>\nPercentage:11,// <percentage-token>\nDimension:12,// <dimension-token>\nWhiteSpace:13,// <whitespace-token>\nCDO:14,// <CDO-token>\nCDC:15,// <CDC-token>\nColon:16,// <colon-token>     :\nSemicolon:17,// <semicolon-token> ;\nComma:18,// <comma-token>     ,\nLeftSquareBracket:19,// <[-token>\nRightSquareBracket:20,// <]-token>\nLeftParenthesis:21,// <(-token>\nRightParenthesis:22,// <)-token>\nLeftCurlyBracket:23,// <{-token>\nRightCurlyBracket:24,// <}-token>\nComment:25};var NAME=Object.keys(TYPE).reduce(function(result,key){result[TYPE[key]]=key;return result;},{});var _const={TYPE:TYPE,NAME:NAME};var EOF=0;// https://drafts.csswg.org/css-syntax-3/\n// § 4.2. Definitions\n// digit\n// A code point between U+0030 DIGIT ZERO (0) and U+0039 DIGIT NINE (9).\nfunction isDigit(code){return code>=0x0030&&code<=0x0039;}// hex digit\n// A digit, or a code point between U+0041 LATIN CAPITAL LETTER A (A) and U+0046 LATIN CAPITAL LETTER F (F),\n// or a code point between U+0061 LATIN SMALL LETTER A (a) and U+0066 LATIN SMALL LETTER F (f).\nfunction isHexDigit$1(code){return isDigit(code)||// 0 .. 9\ncode>=0x0041&&code<=0x0046||// A .. F\ncode>=0x0061&&code<=0x0066// a .. f\n;}// uppercase letter\n// A code point between U+0041 LATIN CAPITAL LETTER A (A) and U+005A LATIN CAPITAL LETTER Z (Z).\nfunction isUppercaseLetter(code){return code>=0x0041&&code<=0x005A;}// lowercase letter\n// A code point between U+0061 LATIN SMALL LETTER A (a) and U+007A LATIN SMALL LETTER Z (z).\nfunction isLowercaseLetter(code){return code>=0x0061&&code<=0x007A;}// letter\n// An uppercase letter or a lowercase letter.\nfunction isLetter(code){return isUppercaseLetter(code)||isLowercaseLetter(code);}// non-ASCII code point\n// A code point with a value equal to or greater than U+0080 <control>.\nfunction isNonAscii(code){return code>=0x0080;}// name-start code point\n// A letter, a non-ASCII code point, or U+005F LOW LINE (_).\nfunction isNameStart(code){return isLetter(code)||isNonAscii(code)||code===0x005F;}// name code point\n// A name-start code point, a digit, or U+002D HYPHEN-MINUS (-).\nfunction isName(code){return isNameStart(code)||isDigit(code)||code===0x002D;}// non-printable code point\n// A code point between U+0000 NULL and U+0008 BACKSPACE, or U+000B LINE TABULATION,\n// or a code point between U+000E SHIFT OUT and U+001F INFORMATION SEPARATOR ONE, or U+007F DELETE.\nfunction isNonPrintable(code){return code>=0x0000&&code<=0x0008||code===0x000B||code>=0x000E&&code<=0x001F||code===0x007F;}// newline\n// U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition,\n// as they are converted to U+000A LINE FEED during preprocessing.\n// TODO: we doesn't do a preprocessing, so check a code point for U+000D CARRIAGE RETURN and U+000C FORM FEED\nfunction isNewline(code){return code===0x000A||code===0x000D||code===0x000C;}// whitespace\n// A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.\nfunction isWhiteSpace(code){return isNewline(code)||code===0x0020||code===0x0009;}// § 4.3.8. Check if two code points are a valid escape\nfunction isValidEscape(first,second){// If the first code point is not U+005C REVERSE SOLIDUS (\\), return false.\nif(first!==0x005C){return false;}// Otherwise, if the second code point is a newline or EOF, return false.\nif(isNewline(second)||second===EOF){return false;}// Otherwise, return true.\nreturn true;}// § 4.3.9. Check if three code points would start an identifier\nfunction isIdentifierStart$1(first,second,third){// Look at the first code point:\n// U+002D HYPHEN-MINUS\nif(first===0x002D){// If the second code point is a name-start code point or a U+002D HYPHEN-MINUS,\n// or the second and third code points are a valid escape, return true. Otherwise, return false.\nreturn isNameStart(second)||second===0x002D||isValidEscape(second,third);}// name-start code point\nif(isNameStart(first)){// Return true.\nreturn true;}// U+005C REVERSE SOLIDUS (\\)\nif(first===0x005C){// If the first and second code points are a valid escape, return true. Otherwise, return false.\nreturn isValidEscape(first,second);}// anything else\n// Return false.\nreturn false;}// § 4.3.10. Check if three code points would start a number\nfunction isNumberStart(first,second,third){// Look at the first code point:\n// U+002B PLUS SIGN (+)\n// U+002D HYPHEN-MINUS (-)\nif(first===0x002B||first===0x002D){// If the second code point is a digit, return true.\nif(isDigit(second)){return 2;}// Otherwise, if the second code point is a U+002E FULL STOP (.)\n// and the third code point is a digit, return true.\n// Otherwise, return false.\nreturn second===0x002E&&isDigit(third)?3:0;}// U+002E FULL STOP (.)\nif(first===0x002E){// If the second code point is a digit, return true. Otherwise, return false.\nreturn isDigit(second)?2:0;}// digit\nif(isDigit(first)){// Return true.\nreturn 1;}// anything else\n// Return false.\nreturn 0;}//\n// Misc\n//\n// detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\nfunction isBOM(code){// UTF-16BE\nif(code===0xFEFF){return 1;}// UTF-16LE\nif(code===0xFFFE){return 1;}return 0;}// Fast code category\n//\n// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we define a maps for 0..127 codes only\nvar CATEGORY=new Array(0x80);charCodeCategory.Eof=0x80;charCodeCategory.WhiteSpace=0x82;charCodeCategory.Digit=0x83;charCodeCategory.NameStart=0x84;charCodeCategory.NonPrintable=0x85;for(var i$1=0;i$1<CATEGORY.length;i$1++){switch(true){case isWhiteSpace(i$1):CATEGORY[i$1]=charCodeCategory.WhiteSpace;break;case isDigit(i$1):CATEGORY[i$1]=charCodeCategory.Digit;break;case isNameStart(i$1):CATEGORY[i$1]=charCodeCategory.NameStart;break;case isNonPrintable(i$1):CATEGORY[i$1]=charCodeCategory.NonPrintable;break;default:CATEGORY[i$1]=i$1||charCodeCategory.Eof;}}function charCodeCategory(code){return code<0x80?CATEGORY[code]:charCodeCategory.NameStart;}var charCodeDefinitions={isDigit:isDigit,isHexDigit:isHexDigit$1,isUppercaseLetter:isUppercaseLetter,isLowercaseLetter:isLowercaseLetter,isLetter:isLetter,isNonAscii:isNonAscii,isNameStart:isNameStart,isName:isName,isNonPrintable:isNonPrintable,isNewline:isNewline,isWhiteSpace:isWhiteSpace,isValidEscape:isValidEscape,isIdentifierStart:isIdentifierStart$1,isNumberStart:isNumberStart,isBOM:isBOM,charCodeCategory:charCodeCategory};var isDigit$1=charCodeDefinitions.isDigit;var isHexDigit$2=charCodeDefinitions.isHexDigit;var isUppercaseLetter$1=charCodeDefinitions.isUppercaseLetter;var isName$1=charCodeDefinitions.isName;var isWhiteSpace$1=charCodeDefinitions.isWhiteSpace;var isValidEscape$1=charCodeDefinitions.isValidEscape;function getCharCode(source,offset){return offset<source.length?source.charCodeAt(offset):0;}function getNewlineLength(source,offset,code){if(code===13/* \\r */&&getCharCode(source,offset+1)===10/* \\n */){return 2;}return 1;}function cmpChar(testStr,offset,referenceCode){var code=testStr.charCodeAt(offset);// code.toLowerCase() for A..Z\nif(isUppercaseLetter$1(code)){code=code|32;}return code===referenceCode;}function cmpStr(testStr,start,end,referenceStr){if(end-start!==referenceStr.length){return false;}if(start<0||end>testStr.length){return false;}for(var i=start;i<end;i++){var testCode=testStr.charCodeAt(i);var referenceCode=referenceStr.charCodeAt(i-start);// testCode.toLowerCase() for A..Z\nif(isUppercaseLetter$1(testCode)){testCode=testCode|32;}if(testCode!==referenceCode){return false;}}return true;}function findWhiteSpaceStart(source,offset){for(;offset>=0;offset--){if(!isWhiteSpace$1(source.charCodeAt(offset))){break;}}return offset+1;}function findWhiteSpaceEnd(source,offset){for(;offset<source.length;offset++){if(!isWhiteSpace$1(source.charCodeAt(offset))){break;}}return offset;}function findDecimalNumberEnd(source,offset){for(;offset<source.length;offset++){if(!isDigit$1(source.charCodeAt(offset))){break;}}return offset;}// § 4.3.7. Consume an escaped code point\nfunction consumeEscaped(source,offset){// It assumes that the U+005C REVERSE SOLIDUS (\\) has already been consumed and\n// that the next input code point has already been verified to be part of a valid escape.\noffset+=2;// hex digit\nif(isHexDigit$2(getCharCode(source,offset-1))){// Consume as many hex digits as possible, but no more than 5.\n// Note that this means 1-6 hex digits have been consumed in total.\nfor(var maxOffset=Math.min(source.length,offset+5);offset<maxOffset;offset++){if(!isHexDigit$2(getCharCode(source,offset))){break;}}// If the next input code point is whitespace, consume it as well.\nvar code=getCharCode(source,offset);if(isWhiteSpace$1(code)){offset+=getNewlineLength(source,offset,code);}}return offset;}// §4.3.11. Consume a name\n// Note: This algorithm does not do the verification of the first few code points that are necessary\n// to ensure the returned code points would constitute an <ident-token>. If that is the intended use,\n// ensure that the stream starts with an identifier before calling this algorithm.\nfunction consumeName(source,offset){// Let result initially be an empty string.\n// Repeatedly consume the next input code point from the stream:\nfor(;offset<source.length;offset++){var code=source.charCodeAt(offset);// name code point\nif(isName$1(code)){// Append the code point to result.\ncontinue;}// the stream starts with a valid escape\nif(isValidEscape$1(code,getCharCode(source,offset+1))){// Consume an escaped code point. Append the returned code point to result.\noffset=consumeEscaped(source,offset)-1;continue;}// anything else\n// Reconsume the current input code point. Return result.\nbreak;}return offset;}// §4.3.12. Consume a number\nfunction consumeNumber(source,offset){var code=source.charCodeAt(offset);// 2. If the next input code point is U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-),\n// consume it and append it to repr.\nif(code===0x002B||code===0x002D){code=source.charCodeAt(offset+=1);}// 3. While the next input code point is a digit, consume it and append it to repr.\nif(isDigit$1(code)){offset=findDecimalNumberEnd(source,offset+1);code=source.charCodeAt(offset);}// 4. If the next 2 input code points are U+002E FULL STOP (.) followed by a digit, then:\nif(code===0x002E&&isDigit$1(source.charCodeAt(offset+1))){// 4.1 Consume them.\n// 4.2 Append them to repr.\ncode=source.charCodeAt(offset+=2);// 4.3 Set type to \"number\".\n// TODO\n// 4.4 While the next input code point is a digit, consume it and append it to repr.\noffset=findDecimalNumberEnd(source,offset);}// 5. If the next 2 or 3 input code points are U+0045 LATIN CAPITAL LETTER E (E)\n// or U+0065 LATIN SMALL LETTER E (e), ... , followed by a digit, then:\nif(cmpChar(source,offset,101/* e */)){var sign=0;code=source.charCodeAt(offset+1);// ... optionally followed by U+002D HYPHEN-MINUS (-) or U+002B PLUS SIGN (+) ...\nif(code===0x002D||code===0x002B){sign=1;code=source.charCodeAt(offset+2);}// ... followed by a digit\nif(isDigit$1(code)){// 5.1 Consume them.\n// 5.2 Append them to repr.\n// 5.3 Set type to \"number\".\n// TODO\n// 5.4 While the next input code point is a digit, consume it and append it to repr.\noffset=findDecimalNumberEnd(source,offset+1+sign+1);}}return offset;}// § 4.3.14. Consume the remnants of a bad url\n// ... its sole use is to consume enough of the input stream to reach a recovery point\n// where normal tokenizing can resume.\nfunction consumeBadUrlRemnants(source,offset){// Repeatedly consume the next input code point from the stream:\nfor(;offset<source.length;offset++){var code=source.charCodeAt(offset);// U+0029 RIGHT PARENTHESIS ())\n// EOF\nif(code===0x0029){// Return.\noffset++;break;}if(isValidEscape$1(code,getCharCode(source,offset+1))){// Consume an escaped code point.\n// Note: This allows an escaped right parenthesis (\"\\)\") to be encountered\n// without ending the <bad-url-token>. This is otherwise identical to\n// the \"anything else\" clause.\noffset=consumeEscaped(source,offset);}}return offset;}var utils={consumeEscaped:consumeEscaped,consumeName:consumeName,consumeNumber:consumeNumber,consumeBadUrlRemnants:consumeBadUrlRemnants,cmpChar:cmpChar,cmpStr:cmpStr,getNewlineLength:getNewlineLength,findWhiteSpaceStart:findWhiteSpaceStart,findWhiteSpaceEnd:findWhiteSpaceEnd};var TYPE$1=_const.TYPE;var NAME$1=_const.NAME;var cmpStr$1=utils.cmpStr;var EOF$1=TYPE$1.EOF;var WHITESPACE=TYPE$1.WhiteSpace;var COMMENT=TYPE$1.Comment;var OFFSET_MASK=0x00FFFFFF;var TYPE_SHIFT=24;var TokenStream=function TokenStream(){this.offsetAndType=null;this.balance=null;this.reset();};TokenStream.prototype={reset:function reset(){this.eof=false;this.tokenIndex=-1;this.tokenType=0;this.tokenStart=this.firstCharOffset;this.tokenEnd=this.firstCharOffset;},lookupType:function lookupType(offset){offset+=this.tokenIndex;if(offset<this.tokenCount){return this.offsetAndType[offset]>>TYPE_SHIFT;}return EOF$1;},lookupOffset:function lookupOffset(offset){offset+=this.tokenIndex;if(offset<this.tokenCount){return this.offsetAndType[offset-1]&OFFSET_MASK;}return this.source.length;},lookupValue:function lookupValue(offset,referenceStr){offset+=this.tokenIndex;if(offset<this.tokenCount){return cmpStr$1(this.source,this.offsetAndType[offset-1]&OFFSET_MASK,this.offsetAndType[offset]&OFFSET_MASK,referenceStr);}return false;},getTokenStart:function getTokenStart(tokenIndex){if(tokenIndex===this.tokenIndex){return this.tokenStart;}if(tokenIndex>0){return tokenIndex<this.tokenCount?this.offsetAndType[tokenIndex-1]&OFFSET_MASK:this.offsetAndType[this.tokenCount]&OFFSET_MASK;}return this.firstCharOffset;},// TODO: -> skipUntilBalanced\ngetRawLength:function getRawLength(startToken,mode){var cursor=startToken;var balanceEnd;var offset=this.offsetAndType[Math.max(cursor-1,0)]&OFFSET_MASK;var type;loop:for(;cursor<this.tokenCount;cursor++){balanceEnd=this.balance[cursor];// stop scanning on balance edge that points to offset before start token\nif(balanceEnd<startToken){break loop;}type=this.offsetAndType[cursor]>>TYPE_SHIFT;// check token is stop type\nswitch(mode(type,this.source,offset)){case 1:break loop;case 2:cursor++;break loop;default:offset=this.offsetAndType[cursor]&OFFSET_MASK;// fast forward to the end of balanced block\nif(this.balance[balanceEnd]===cursor){cursor=balanceEnd;}}}return cursor-this.tokenIndex;},isBalanceEdge:function isBalanceEdge(pos){return this.balance[this.tokenIndex]<pos;},isDelim:function isDelim(code,offset){if(offset){return this.lookupType(offset)===TYPE$1.Delim&&this.source.charCodeAt(this.lookupOffset(offset))===code;}return this.tokenType===TYPE$1.Delim&&this.source.charCodeAt(this.tokenStart)===code;},getTokenValue:function getTokenValue(){return this.source.substring(this.tokenStart,this.tokenEnd);},getTokenLength:function getTokenLength(){return this.tokenEnd-this.tokenStart;},substrToCursor:function substrToCursor(start){return this.source.substring(start,this.tokenStart);},skipWS:function skipWS(){for(var i=this.tokenIndex,skipTokenCount=0;i<this.tokenCount;i++,skipTokenCount++){if(this.offsetAndType[i]>>TYPE_SHIFT!==WHITESPACE){break;}}if(skipTokenCount>0){this.skip(skipTokenCount);}},skipSC:function skipSC(){while(this.tokenType===WHITESPACE||this.tokenType===COMMENT){this.next();}},skip:function skip(tokenCount){var next=this.tokenIndex+tokenCount;if(next<this.tokenCount){this.tokenIndex=next;this.tokenStart=this.offsetAndType[next-1]&OFFSET_MASK;next=this.offsetAndType[next];this.tokenType=next>>TYPE_SHIFT;this.tokenEnd=next&OFFSET_MASK;}else{this.tokenIndex=this.tokenCount;this.next();}},next:function next(){var next=this.tokenIndex+1;if(next<this.tokenCount){this.tokenIndex=next;this.tokenStart=this.tokenEnd;next=this.offsetAndType[next];this.tokenType=next>>TYPE_SHIFT;this.tokenEnd=next&OFFSET_MASK;}else{this.tokenIndex=this.tokenCount;this.eof=true;this.tokenType=EOF$1;this.tokenStart=this.tokenEnd=this.source.length;}},forEachToken:function forEachToken(fn){for(var i=0,offset=this.firstCharOffset;i<this.tokenCount;i++){var start=offset;var item=this.offsetAndType[i];var end=item&OFFSET_MASK;var type=item>>TYPE_SHIFT;offset=end;fn(type,start,end,i);}},dump:function dump(){var _this5=this;var tokens=new Array(this.tokenCount);this.forEachToken(function(type,start,end,index){tokens[index]={idx:index,type:NAME$1[type],chunk:_this5.source.substring(start,end),balance:_this5.balance[index]};});return tokens;}};var TokenStream_1=TokenStream;var TYPE$2=_const.TYPE;var isNewline$1=charCodeDefinitions.isNewline;var isName$2=charCodeDefinitions.isName;var isValidEscape$2=charCodeDefinitions.isValidEscape;var isNumberStart$1=charCodeDefinitions.isNumberStart;var isIdentifierStart$2=charCodeDefinitions.isIdentifierStart;var charCodeCategory$1=charCodeDefinitions.charCodeCategory;var isBOM$1=charCodeDefinitions.isBOM;var cmpStr$2=utils.cmpStr;var getNewlineLength$1=utils.getNewlineLength;var findWhiteSpaceEnd$1=utils.findWhiteSpaceEnd;var consumeEscaped$1=utils.consumeEscaped;var consumeName$1=utils.consumeName;var consumeNumber$1=utils.consumeNumber;var consumeBadUrlRemnants$1=utils.consumeBadUrlRemnants;var OFFSET_MASK$1=0x00FFFFFF;var TYPE_SHIFT$1=24;function tokenize(source,stream){function getCharCode(offset){return offset<sourceLength?source.charCodeAt(offset):0;}// § 4.3.3. Consume a numeric token\nfunction consumeNumericToken(){// Consume a number and let number be the result.\noffset=consumeNumber$1(source,offset);// If the next 3 input code points would start an identifier, then:\nif(isIdentifierStart$2(getCharCode(offset),getCharCode(offset+1),getCharCode(offset+2))){// Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n// Consume a name. Set the <dimension-token>’s unit to the returned value.\n// Return the <dimension-token>.\ntype=TYPE$2.Dimension;offset=consumeName$1(source,offset);return;}// Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\nif(getCharCode(offset)===0x0025){// Create a <percentage-token> with the same value as number, and return it.\ntype=TYPE$2.Percentage;offset++;return;}// Otherwise, create a <number-token> with the same value and type flag as number, and return it.\ntype=TYPE$2.Number;}// § 4.3.4. Consume an ident-like token\nfunction consumeIdentLikeToken(){var nameStartOffset=offset;// Consume a name, and let string be the result.\noffset=consumeName$1(source,offset);// If string’s value is an ASCII case-insensitive match for \"url\",\n// and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\nif(cmpStr$2(source,nameStartOffset,offset,'url')&&getCharCode(offset)===0x0028){// While the next two input code points are whitespace, consume the next input code point.\noffset=findWhiteSpaceEnd$1(source,offset+1);// If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n// or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n// then create a <function-token> with its value set to string and return it.\nif(getCharCode(offset)===0x0022||getCharCode(offset)===0x0027){type=TYPE$2.Function;offset=nameStartOffset+4;return;}// Otherwise, consume a url token, and return it.\nconsumeUrlToken();return;}// Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n// Create a <function-token> with its value set to string and return it.\nif(getCharCode(offset)===0x0028){type=TYPE$2.Function;offset++;return;}// Otherwise, create an <ident-token> with its value set to string and return it.\ntype=TYPE$2.Ident;}// § 4.3.5. Consume a string token\nfunction consumeStringToken(endingCodePoint){// This algorithm may be called with an ending code point, which denotes the code point\n// that ends the string. If an ending code point is not specified,\n// the current input code point is used.\nif(!endingCodePoint){endingCodePoint=getCharCode(offset++);}// Initially create a <string-token> with its value set to the empty string.\ntype=TYPE$2.String;// Repeatedly consume the next input code point from the stream:\nfor(;offset<source.length;offset++){var code=source.charCodeAt(offset);switch(charCodeCategory$1(code)){// ending code point\ncase endingCodePoint:// Return the <string-token>.\noffset++;return;// EOF\ncase charCodeCategory$1.Eof:// This is a parse error. Return the <string-token>.\nreturn;// newline\ncase charCodeCategory$1.WhiteSpace:if(isNewline$1(code)){// This is a parse error. Reconsume the current input code point,\n// create a <bad-string-token>, and return it.\noffset+=getNewlineLength$1(source,offset,code);type=TYPE$2.BadString;return;}break;// U+005C REVERSE SOLIDUS (\\)\ncase 0x005C:// If the next input code point is EOF, do nothing.\nif(offset===source.length-1){break;}var nextCode=getCharCode(offset+1);// Otherwise, if the next input code point is a newline, consume it.\nif(isNewline$1(nextCode)){offset+=getNewlineLength$1(source,offset+1,nextCode);}else if(isValidEscape$2(code,nextCode)){// Otherwise, (the stream starts with a valid escape) consume\n// an escaped code point and append the returned code point to\n// the <string-token>’s value.\noffset=consumeEscaped$1(source,offset)-1;}break;// anything else\n// Append the current input code point to the <string-token>’s value.\n}}}// § 4.3.6. Consume a url token\n// Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n// This algorithm also assumes that it’s being called to consume an \"unquoted\" value, like url(foo).\n// A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n// automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\nfunction consumeUrlToken(){// Initially create a <url-token> with its value set to the empty string.\ntype=TYPE$2.Url;// Consume as much whitespace as possible.\noffset=findWhiteSpaceEnd$1(source,offset);// Repeatedly consume the next input code point from the stream:\nfor(;offset<source.length;offset++){var code=source.charCodeAt(offset);switch(charCodeCategory$1(code)){// U+0029 RIGHT PARENTHESIS ())\ncase 0x0029:// Return the <url-token>.\noffset++;return;// EOF\ncase charCodeCategory$1.Eof:// This is a parse error. Return the <url-token>.\nreturn;// whitespace\ncase charCodeCategory$1.WhiteSpace:// Consume as much whitespace as possible.\noffset=findWhiteSpaceEnd$1(source,offset);// If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n// consume it and return the <url-token>\n// (if EOF was encountered, this is a parse error);\nif(getCharCode(offset)===0x0029||offset>=source.length){if(offset<source.length){offset++;}return;}// otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n// and return it.\noffset=consumeBadUrlRemnants$1(source,offset);type=TYPE$2.BadUrl;return;// U+0022 QUOTATION MARK (\")\n// U+0027 APOSTROPHE (')\n// U+0028 LEFT PARENTHESIS (()\n// non-printable code point\ncase 0x0022:case 0x0027:case 0x0028:case charCodeCategory$1.NonPrintable:// This is a parse error. Consume the remnants of a bad url,\n// create a <bad-url-token>, and return it.\noffset=consumeBadUrlRemnants$1(source,offset);type=TYPE$2.BadUrl;return;// U+005C REVERSE SOLIDUS (\\)\ncase 0x005C:// If the stream starts with a valid escape, consume an escaped code point and\n// append the returned code point to the <url-token>’s value.\nif(isValidEscape$2(code,getCharCode(offset+1))){offset=consumeEscaped$1(source,offset)-1;break;}// Otherwise, this is a parse error. Consume the remnants of a bad url,\n// create a <bad-url-token>, and return it.\noffset=consumeBadUrlRemnants$1(source,offset);type=TYPE$2.BadUrl;return;// anything else\n// Append the current input code point to the <url-token>’s value.\n}}}if(!stream){stream=new TokenStream_1();}// ensure source is a string\nsource=String(source||'');var sourceLength=source.length;var offsetAndType=adoptBuffer(stream.offsetAndType,sourceLength+1);// +1 because of eof-token\nvar balance=adoptBuffer(stream.balance,sourceLength+1);var tokenCount=0;var start=isBOM$1(getCharCode(0));var offset=start;var balanceCloseType=0;var balanceStart=0;var balancePrev=0;// https://drafts.csswg.org/css-syntax-3/#consume-token\n// § 4.3.1. Consume a token\nwhile(offset<sourceLength){var code=source.charCodeAt(offset);var type=0;balance[tokenCount]=sourceLength;switch(charCodeCategory$1(code)){// whitespace\ncase charCodeCategory$1.WhiteSpace:// Consume as much whitespace as possible. Return a <whitespace-token>.\ntype=TYPE$2.WhiteSpace;offset=findWhiteSpaceEnd$1(source,offset+1);break;// U+0022 QUOTATION MARK (\")\ncase 0x0022:// Consume a string token and return it.\nconsumeStringToken();break;// U+0023 NUMBER SIGN (#)\ncase 0x0023:// If the next input code point is a name code point or the next two input code points are a valid escape, then:\nif(isName$2(getCharCode(offset+1))||isValidEscape$2(getCharCode(offset+1),getCharCode(offset+2))){// Create a <hash-token>.\ntype=TYPE$2.Hash;// If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to \"id\".\n// if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n//     // TODO: set id flag\n// }\n// Consume a name, and set the <hash-token>’s value to the returned string.\noffset=consumeName$1(source,offset+1);// Return the <hash-token>.\n}else{// Otherwise, return a <delim-token> with its value set to the current input code point.\ntype=TYPE$2.Delim;offset++;}break;// U+0027 APOSTROPHE (')\ncase 0x0027:// Consume a string token and return it.\nconsumeStringToken();break;// U+0028 LEFT PARENTHESIS (()\ncase 0x0028:// Return a <(-token>.\ntype=TYPE$2.LeftParenthesis;offset++;break;// U+0029 RIGHT PARENTHESIS ())\ncase 0x0029:// Return a <)-token>.\ntype=TYPE$2.RightParenthesis;offset++;break;// U+002B PLUS SIGN (+)\ncase 0x002B:// If the input stream starts with a number, ...\nif(isNumberStart$1(code,getCharCode(offset+1),getCharCode(offset+2))){// ... reconsume the current input code point, consume a numeric token, and return it.\nconsumeNumericToken();}else{// Otherwise, return a <delim-token> with its value set to the current input code point.\ntype=TYPE$2.Delim;offset++;}break;// U+002C COMMA (,)\ncase 0x002C:// Return a <comma-token>.\ntype=TYPE$2.Comma;offset++;break;// U+002D HYPHEN-MINUS (-)\ncase 0x002D:// If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\nif(isNumberStart$1(code,getCharCode(offset+1),getCharCode(offset+2))){consumeNumericToken();}else{// Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\nif(getCharCode(offset+1)===0x002D&&getCharCode(offset+2)===0x003E){type=TYPE$2.CDC;offset=offset+3;}else{// Otherwise, if the input stream starts with an identifier, ...\nif(isIdentifierStart$2(code,getCharCode(offset+1),getCharCode(offset+2))){// ... reconsume the current input code point, consume an ident-like token, and return it.\nconsumeIdentLikeToken();}else{// Otherwise, return a <delim-token> with its value set to the current input code point.\ntype=TYPE$2.Delim;offset++;}}}break;// U+002E FULL STOP (.)\ncase 0x002E:// If the input stream starts with a number, ...\nif(isNumberStart$1(code,getCharCode(offset+1),getCharCode(offset+2))){// ... reconsume the current input code point, consume a numeric token, and return it.\nconsumeNumericToken();}else{// Otherwise, return a <delim-token> with its value set to the current input code point.\ntype=TYPE$2.Delim;offset++;}break;// U+002F SOLIDUS (/)\ncase 0x002F:// If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\nif(getCharCode(offset+1)===0x002A){// ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n// followed by a U+002F SOLIDUS (/), or up to an EOF code point.\ntype=TYPE$2.Comment;offset=source.indexOf('*/',offset+2)+2;if(offset===1){offset=source.length;}}else{type=TYPE$2.Delim;offset++;}break;// U+003A COLON (:)\ncase 0x003A:// Return a <colon-token>.\ntype=TYPE$2.Colon;offset++;break;// U+003B SEMICOLON (;)\ncase 0x003B:// Return a <semicolon-token>.\ntype=TYPE$2.Semicolon;offset++;break;// U+003C LESS-THAN SIGN (<)\ncase 0x003C:// If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\nif(getCharCode(offset+1)===0x0021&&getCharCode(offset+2)===0x002D&&getCharCode(offset+3)===0x002D){// ... consume them and return a <CDO-token>.\ntype=TYPE$2.CDO;offset=offset+4;}else{// Otherwise, return a <delim-token> with its value set to the current input code point.\ntype=TYPE$2.Delim;offset++;}break;// U+0040 COMMERCIAL AT (@)\ncase 0x0040:// If the next 3 input code points would start an identifier, ...\nif(isIdentifierStart$2(getCharCode(offset+1),getCharCode(offset+2),getCharCode(offset+3))){// ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\ntype=TYPE$2.AtKeyword;offset=consumeName$1(source,offset+1);}else{// Otherwise, return a <delim-token> with its value set to the current input code point.\ntype=TYPE$2.Delim;offset++;}break;// U+005B LEFT SQUARE BRACKET ([)\ncase 0x005B:// Return a <[-token>.\ntype=TYPE$2.LeftSquareBracket;offset++;break;// U+005C REVERSE SOLIDUS (\\)\ncase 0x005C:// If the input stream starts with a valid escape, ...\nif(isValidEscape$2(code,getCharCode(offset+1))){// ... reconsume the current input code point, consume an ident-like token, and return it.\nconsumeIdentLikeToken();}else{// Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\ntype=TYPE$2.Delim;offset++;}break;// U+005D RIGHT SQUARE BRACKET (])\ncase 0x005D:// Return a <]-token>.\ntype=TYPE$2.RightSquareBracket;offset++;break;// U+007B LEFT CURLY BRACKET ({)\ncase 0x007B:// Return a <{-token>.\ntype=TYPE$2.LeftCurlyBracket;offset++;break;// U+007D RIGHT CURLY BRACKET (})\ncase 0x007D:// Return a <}-token>.\ntype=TYPE$2.RightCurlyBracket;offset++;break;// digit\ncase charCodeCategory$1.Digit:// Reconsume the current input code point, consume a numeric token, and return it.\nconsumeNumericToken();break;// name-start code point\ncase charCodeCategory$1.NameStart:// Reconsume the current input code point, consume an ident-like token, and return it.\nconsumeIdentLikeToken();break;// EOF\ncase charCodeCategory$1.Eof:// Return an <EOF-token>.\nbreak;// anything else\ndefault:// Return a <delim-token> with its value set to the current input code point.\ntype=TYPE$2.Delim;offset++;}switch(type){case balanceCloseType:balancePrev=balanceStart&OFFSET_MASK$1;balanceStart=balance[balancePrev];balanceCloseType=balanceStart>>TYPE_SHIFT$1;balance[tokenCount]=balancePrev;balance[balancePrev++]=tokenCount;for(;balancePrev<tokenCount;balancePrev++){if(balance[balancePrev]===sourceLength){balance[balancePrev]=tokenCount;}}break;case TYPE$2.LeftParenthesis:case TYPE$2.Function:balance[tokenCount]=balanceStart;balanceCloseType=TYPE$2.RightParenthesis;balanceStart=balanceCloseType<<TYPE_SHIFT$1|tokenCount;break;case TYPE$2.LeftSquareBracket:balance[tokenCount]=balanceStart;balanceCloseType=TYPE$2.RightSquareBracket;balanceStart=balanceCloseType<<TYPE_SHIFT$1|tokenCount;break;case TYPE$2.LeftCurlyBracket:balance[tokenCount]=balanceStart;balanceCloseType=TYPE$2.RightCurlyBracket;balanceStart=balanceCloseType<<TYPE_SHIFT$1|tokenCount;break;}offsetAndType[tokenCount++]=type<<TYPE_SHIFT$1|offset;}// finalize buffers\noffsetAndType[tokenCount]=TYPE$2.EOF<<TYPE_SHIFT$1|offset;// <EOF-token>\nbalance[tokenCount]=sourceLength;balance[sourceLength]=sourceLength;// prevents false positive balance match with any token\nwhile(balanceStart!==0){balancePrev=balanceStart&OFFSET_MASK$1;balanceStart=balance[balancePrev];balance[balancePrev]=sourceLength;}// update stream\nstream.source=source;stream.firstCharOffset=start;stream.offsetAndType=offsetAndType;stream.tokenCount=tokenCount;stream.balance=balance;stream.reset();stream.next();return stream;}// extend tokenizer with constants\nObject.keys(_const).forEach(function(key){tokenize[key]=_const[key];});// extend tokenizer with static methods from utils\nObject.keys(charCodeDefinitions).forEach(function(key){tokenize[key]=charCodeDefinitions[key];});Object.keys(utils).forEach(function(key){tokenize[key]=utils[key];});var tokenizer=tokenize;var isBOM$2=tokenizer.isBOM;var N=10;var F=12;var R=13;function computeLinesAndColumns(host,source){var sourceLength=source.length;var lines=adoptBuffer(host.lines,sourceLength);// +1\nvar line=host.startLine;var columns=adoptBuffer(host.columns,sourceLength);var column=host.startColumn;var startOffset=source.length>0?isBOM$2(source.charCodeAt(0)):0;for(var i=startOffset;i<sourceLength;i++){// -1\nvar code=source.charCodeAt(i);lines[i]=line;columns[i]=column++;if(code===N||code===R||code===F){if(code===R&&i+1<sourceLength&&source.charCodeAt(i+1)===N){i++;lines[i]=line;columns[i]=column;}line++;column=1;}}lines[i]=line;columns[i]=column;host.lines=lines;host.columns=columns;}var OffsetToLocation=function OffsetToLocation(){this.lines=null;this.columns=null;this.linesAndColumnsComputed=false;};OffsetToLocation.prototype={setSource:function setSource(source,startOffset,startLine,startColumn){this.source=source;this.startOffset=typeof startOffset==='undefined'?0:startOffset;this.startLine=typeof startLine==='undefined'?1:startLine;this.startColumn=typeof startColumn==='undefined'?1:startColumn;this.linesAndColumnsComputed=false;},ensureLinesAndColumnsComputed:function ensureLinesAndColumnsComputed(){if(!this.linesAndColumnsComputed){computeLinesAndColumns(this,this.source);this.linesAndColumnsComputed=true;}},getLocation:function getLocation(offset,filename){this.ensureLinesAndColumnsComputed();return{source:filename,offset:this.startOffset+offset,line:this.lines[offset],column:this.columns[offset]};},getLocationRange:function getLocationRange(start,end,filename){this.ensureLinesAndColumnsComputed();return{source:filename,start:{offset:this.startOffset+start,line:this.lines[start],column:this.columns[start]},end:{offset:this.startOffset+end,line:this.lines[end],column:this.columns[end]}};}};var OffsetToLocation_1=OffsetToLocation;var createCustomError=function createCustomError(name,message){// use Object.create(), because some VMs prevent setting line/column otherwise\n// (iOS Safari 10 even throws an exception)\nvar error=Object.create(SyntaxError.prototype);var errorStack=new Error();error.name=name;error.message=message;Object.defineProperty(error,'stack',{get:function get(){return(errorStack.stack||'').replace(/^(.+\\n){1,3}/,name+': '+message+'\\n');}});return error;};var MAX_LINE_LENGTH=100;var OFFSET_CORRECTION=60;var TAB_REPLACEMENT='    ';function sourceFragment(error,extraLines){function processLines(start,end){return lines.slice(start,end).map(function(line,idx){var num=String(start+idx+1);while(num.length<maxNumLength){num=' '+num;}return num+' |'+line;}).join('\\n');}var lines=error.source.split(/\\r\\n?|\\n|\\f/);var line=error.line;var column=error.column;var startLine=Math.max(1,line-extraLines)-1;var endLine=Math.min(line+extraLines,lines.length+1);var maxNumLength=Math.max(4,String(endLine).length)+1;var cutLeft=0;// column correction according to replaced tab before column\ncolumn+=(TAB_REPLACEMENT.length-1)*(lines[line-1].substr(0,column-1).match(/\\t/g)||[]).length;if(column>MAX_LINE_LENGTH){cutLeft=column-OFFSET_CORRECTION+3;column=OFFSET_CORRECTION-2;}for(var i=startLine;i<=endLine;i++){if(i>=0&&i<lines.length){lines[i]=lines[i].replace(/\\t/g,TAB_REPLACEMENT);lines[i]=(cutLeft>0&&lines[i].length>cutLeft?\"\\u2026\":'')+lines[i].substr(cutLeft,MAX_LINE_LENGTH-2)+(lines[i].length>cutLeft+MAX_LINE_LENGTH-1?\"\\u2026\":'');}}return[processLines(startLine,line),new Array(column+maxNumLength+2).join('-')+'^',processLines(line,endLine)].filter(Boolean).join('\\n');}var SyntaxError$1=function SyntaxError$1(message,source,offset,line,column){var error=createCustomError('SyntaxError',message);error.source=source;error.offset=offset;error.line=line;error.column=column;error.sourceFragment=function(extraLines){return sourceFragment(error,isNaN(extraLines)?0:extraLines);};Object.defineProperty(error,'formattedMessage',{get:function get(){return'Parse error: '+error.message+'\\n'+sourceFragment(error,2);}});// for backward capability\nerror.parseError={offset:offset,line:line,column:column};return error;};var _SyntaxError=SyntaxError$1;//\n//                              list\n//                            ┌──────┐\n//             ┌──────────────┼─head │\n//             │              │ tail─┼──────────────┐\n//             │              └──────┘              │\n//             ▼                                    ▼\n//            item        item        item        item\n//          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐\n//  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │\n//          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null\n//          ├──────┤    ├──────┤    ├──────┤    ├──────┤\n//          │ data │    │ data │    │ data │    │ data │\n//          └──────┘    └──────┘    └──────┘    └──────┘\n//\nfunction createItem(data){return{prev:null,next:null,data:data};}function allocateCursor(node,prev,next){var cursor;if(cursors!==null){cursor=cursors;cursors=cursors.cursor;cursor.prev=prev;cursor.next=next;cursor.cursor=node.cursor;}else{cursor={prev:prev,next:next,cursor:node.cursor};}node.cursor=cursor;return cursor;}function releaseCursor(node){var cursor=node.cursor;node.cursor=cursor.cursor;cursor.prev=null;cursor.next=null;cursor.cursor=cursors;cursors=cursor;}var cursors=null;var List=function List(){this.cursor=null;this.head=null;this.tail=null;};List.createItem=createItem;List.prototype.createItem=createItem;List.prototype.updateCursors=function(prevOld,prevNew,nextOld,nextNew){var cursor=this.cursor;while(cursor!==null){if(cursor.prev===prevOld){cursor.prev=prevNew;}if(cursor.next===nextOld){cursor.next=nextNew;}cursor=cursor.cursor;}};List.prototype.getSize=function(){var size=0;var cursor=this.head;while(cursor){size++;cursor=cursor.next;}return size;};List.prototype.fromArray=function(array){var cursor=null;this.head=null;for(var i=0;i<array.length;i++){var item=createItem(array[i]);if(cursor!==null){cursor.next=item;}else{this.head=item;}item.prev=cursor;cursor=item;}this.tail=cursor;return this;};List.prototype.toArray=function(){var cursor=this.head;var result=[];while(cursor){result.push(cursor.data);cursor=cursor.next;}return result;};List.prototype.toJSON=List.prototype.toArray;List.prototype.isEmpty=function(){return this.head===null;};List.prototype.first=function(){return this.head&&this.head.data;};List.prototype.last=function(){return this.tail&&this.tail.data;};List.prototype.each=function(fn,context){var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,null,this.head);while(cursor.next!==null){item=cursor.next;cursor.next=item.next;fn.call(context,item.data,item,this);}// pop cursor\nreleaseCursor(this);};List.prototype.forEach=List.prototype.each;List.prototype.eachRight=function(fn,context){var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,this.tail,null);while(cursor.prev!==null){item=cursor.prev;cursor.prev=item.prev;fn.call(context,item.data,item,this);}// pop cursor\nreleaseCursor(this);};List.prototype.forEachRight=List.prototype.eachRight;List.prototype.reduce=function(fn,initialValue,context){var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,null,this.head);var acc=initialValue;while(cursor.next!==null){item=cursor.next;cursor.next=item.next;acc=fn.call(context,acc,item.data,item,this);}// pop cursor\nreleaseCursor(this);return acc;};List.prototype.reduceRight=function(fn,initialValue,context){var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,this.tail,null);var acc=initialValue;while(cursor.prev!==null){item=cursor.prev;cursor.prev=item.prev;acc=fn.call(context,acc,item.data,item,this);}// pop cursor\nreleaseCursor(this);return acc;};List.prototype.nextUntil=function(start,fn,context){if(start===null){return;}var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,null,start);while(cursor.next!==null){item=cursor.next;cursor.next=item.next;if(fn.call(context,item.data,item,this)){break;}}// pop cursor\nreleaseCursor(this);};List.prototype.prevUntil=function(start,fn,context){if(start===null){return;}var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,start,null);while(cursor.prev!==null){item=cursor.prev;cursor.prev=item.prev;if(fn.call(context,item.data,item,this)){break;}}// pop cursor\nreleaseCursor(this);};List.prototype.some=function(fn,context){var cursor=this.head;if(context===undefined){context=this;}while(cursor!==null){if(fn.call(context,cursor.data,cursor,this)){return true;}cursor=cursor.next;}return false;};List.prototype.map=function(fn,context){var result=new List();var cursor=this.head;if(context===undefined){context=this;}while(cursor!==null){result.appendData(fn.call(context,cursor.data,cursor,this));cursor=cursor.next;}return result;};List.prototype.filter=function(fn,context){var result=new List();var cursor=this.head;if(context===undefined){context=this;}while(cursor!==null){if(fn.call(context,cursor.data,cursor,this)){result.appendData(cursor.data);}cursor=cursor.next;}return result;};List.prototype.clear=function(){this.head=null;this.tail=null;};List.prototype.copy=function(){var result=new List();var cursor=this.head;while(cursor!==null){result.insert(createItem(cursor.data));cursor=cursor.next;}return result;};List.prototype.prepend=function(item){//      head\n//    ^\n// item\nthis.updateCursors(null,item,this.head,item);// insert to the beginning of the list\nif(this.head!==null){// new item <- first item\nthis.head.prev=item;// new item -> first item\nitem.next=this.head;}else{// if list has no head, then it also has no tail\n// in this case tail points to the new item\nthis.tail=item;}// head always points to new item\nthis.head=item;return this;};List.prototype.prependData=function(data){return this.prepend(createItem(data));};List.prototype.append=function(item){return this.insert(item);};List.prototype.appendData=function(data){return this.insert(createItem(data));};List.prototype.insert=function(item,before){if(before!==undefined&&before!==null){// prev   before\n//      ^\n//     item\nthis.updateCursors(before.prev,item,before,item);if(before.prev===null){// insert to the beginning of list\nif(this.head!==before){throw new Error('before doesn\\'t belong to list');}// since head points to before therefore list doesn't empty\n// no need to check tail\nthis.head=item;before.prev=item;item.next=before;this.updateCursors(null,item);}else{// insert between two items\nbefore.prev.next=item;item.prev=before.prev;before.prev=item;item.next=before;}}else{// tail\n//      ^\n//      item\nthis.updateCursors(this.tail,item,null,item);// insert to the ending of the list\nif(this.tail!==null){// last item -> new item\nthis.tail.next=item;// last item <- new item\nitem.prev=this.tail;}else{// if list has no tail, then it also has no head\n// in this case head points to new item\nthis.head=item;}// tail always points to new item\nthis.tail=item;}return this;};List.prototype.insertData=function(data,before){return this.insert(createItem(data),before);};List.prototype.remove=function(item){//      item\n//       ^\n// prev     next\nthis.updateCursors(item,item.prev,item,item.next);if(item.prev!==null){item.prev.next=item.next;}else{if(this.head!==item){throw new Error('item doesn\\'t belong to list');}this.head=item.next;}if(item.next!==null){item.next.prev=item.prev;}else{if(this.tail!==item){throw new Error('item doesn\\'t belong to list');}this.tail=item.prev;}item.prev=null;item.next=null;return item;};List.prototype.push=function(data){this.insert(createItem(data));};List.prototype.pop=function(){if(this.tail!==null){return this.remove(this.tail);}};List.prototype.unshift=function(data){this.prepend(createItem(data));};List.prototype.shift=function(){if(this.head!==null){return this.remove(this.head);}};List.prototype.prependList=function(list){return this.insertList(list,this.head);};List.prototype.appendList=function(list){return this.insertList(list);};List.prototype.insertList=function(list,before){// ignore empty lists\nif(list.head===null){return this;}if(before!==undefined&&before!==null){this.updateCursors(before.prev,list.tail,before,list.head);// insert in the middle of dist list\nif(before.prev!==null){// before.prev <-> list.head\nbefore.prev.next=list.head;list.head.prev=before.prev;}else{this.head=list.head;}before.prev=list.tail;list.tail.next=before;}else{this.updateCursors(this.tail,list.tail,null,list.head);// insert to end of the list\nif(this.tail!==null){// if destination list has a tail, then it also has a head,\n// but head doesn't change\n// dest tail -> source head\nthis.tail.next=list.head;// dest tail <- source head\nlist.head.prev=this.tail;}else{// if list has no a tail, then it also has no a head\n// in this case points head to new item\nthis.head=list.head;}// tail always start point to new item\nthis.tail=list.tail;}list.head=null;list.tail=null;return this;};List.prototype.replace=function(oldItem,newItemOrList){if('head'in newItemOrList){this.insertList(newItemOrList,oldItem);}else{this.insert(newItemOrList,oldItem);}this.remove(oldItem);};var List_1=List;var TYPE$3=tokenizer.TYPE;var WHITESPACE$1=TYPE$3.WhiteSpace;var COMMENT$1=TYPE$3.Comment;var sequence=function readSequence(recognizer){var children=this.createList();var child=null;var context={recognizer:recognizer,space:null,ignoreWS:false,ignoreWSAfter:false};this.scanner.skipSC();while(!this.scanner.eof){switch(this.scanner.tokenType){case COMMENT$1:this.scanner.next();continue;case WHITESPACE$1:if(context.ignoreWS){this.scanner.next();}else{context.space=this.WhiteSpace();}continue;}child=recognizer.getNode.call(this,context);if(child===undefined){break;}if(context.space!==null){children.push(context.space);context.space=null;}children.push(child);if(context.ignoreWSAfter){context.ignoreWSAfter=false;context.ignoreWS=true;}else{context.ignoreWS=false;}}return children;};var findWhiteSpaceStart$1=utils.findWhiteSpaceStart,cmpStr$3=utils.cmpStr;var noop=function noop(){};var TYPE$4=_const.TYPE;var NAME$2=_const.NAME;var WHITESPACE$2=TYPE$4.WhiteSpace;var COMMENT$2=TYPE$4.Comment;var IDENT=TYPE$4.Ident;var FUNCTION=TYPE$4.Function;var URL$1=TYPE$4.Url;var HASH=TYPE$4.Hash;var PERCENTAGE=TYPE$4.Percentage;var NUMBER=TYPE$4.Number;var NUMBERSIGN=0x0023;// U+0023 NUMBER SIGN (#)\nvar NULL=0;function createParseContext(name){return function(){return this[name]();};}function processConfig(config){var parserConfig={context:{},scope:{},atrule:{},pseudo:{}};if(config.parseContext){for(var name in config.parseContext){switch((0,_typeof2.default)(config.parseContext[name])){case'function':parserConfig.context[name]=config.parseContext[name];break;case'string':parserConfig.context[name]=createParseContext(config.parseContext[name]);break;}}}if(config.scope){for(var name in config.scope){parserConfig.scope[name]=config.scope[name];}}if(config.atrule){for(var name in config.atrule){var atrule=config.atrule[name];if(atrule.parse){parserConfig.atrule[name]=atrule.parse;}}}if(config.pseudo){for(var name in config.pseudo){var pseudo=config.pseudo[name];if(pseudo.parse){parserConfig.pseudo[name]=pseudo.parse;}}}if(config.node){for(var name in config.node){parserConfig[name]=config.node[name].parse;}}return parserConfig;}var create=function createParser(config){var parser={scanner:new TokenStream_1(),locationMap:new OffsetToLocation_1(),filename:'<unknown>',needPositions:false,onParseError:noop,onParseErrorThrow:false,parseAtrulePrelude:true,parseRulePrelude:true,parseValue:true,parseCustomProperty:false,readSequence:sequence,createList:function createList(){return new List_1();},createSingleNodeList:function createSingleNodeList(node){return new List_1().appendData(node);},getFirstListNode:function getFirstListNode(list){return list&&list.first();},getLastListNode:function getLastListNode(list){return list.last();},parseWithFallback:function parseWithFallback(consumer,fallback){var startToken=this.scanner.tokenIndex;try{return consumer.call(this);}catch(e){if(this.onParseErrorThrow){throw e;}var fallbackNode=fallback.call(this,startToken);this.onParseErrorThrow=true;this.onParseError(e,fallbackNode);this.onParseErrorThrow=false;return fallbackNode;}},lookupNonWSType:function lookupNonWSType(offset){do{var type=this.scanner.lookupType(offset++);if(type!==WHITESPACE$2){return type;}}while(type!==NULL);return NULL;},eat:function eat(tokenType){if(this.scanner.tokenType!==tokenType){var offset=this.scanner.tokenStart;var message=NAME$2[tokenType]+' is expected';// tweak message and offset\nswitch(tokenType){case IDENT:// when identifier is expected but there is a function or url\nif(this.scanner.tokenType===FUNCTION||this.scanner.tokenType===URL$1){offset=this.scanner.tokenEnd-1;message='Identifier is expected but function found';}else{message='Identifier is expected';}break;case HASH:if(this.scanner.isDelim(NUMBERSIGN)){this.scanner.next();offset++;message='Name is expected';}break;case PERCENTAGE:if(this.scanner.tokenType===NUMBER){offset=this.scanner.tokenEnd;message='Percent sign is expected';}break;default:// when test type is part of another token show error for current position + 1\n// e.g. eat(HYPHENMINUS) will fail on \"-foo\", but pointing on \"-\" is odd\nif(this.scanner.source.charCodeAt(this.scanner.tokenStart)===tokenType){offset=offset+1;}}this.error(message,offset);}this.scanner.next();},consume:function consume(tokenType){var value=this.scanner.getTokenValue();this.eat(tokenType);return value;},consumeFunctionName:function consumeFunctionName(){var name=this.scanner.source.substring(this.scanner.tokenStart,this.scanner.tokenEnd-1);this.eat(FUNCTION);return name;},getLocation:function getLocation(start,end){if(this.needPositions){return this.locationMap.getLocationRange(start,end,this.filename);}return null;},getLocationFromList:function getLocationFromList(list){if(this.needPositions){var head=this.getFirstListNode(list);var tail=this.getLastListNode(list);return this.locationMap.getLocationRange(head!==null?head.loc.start.offset-this.locationMap.startOffset:this.scanner.tokenStart,tail!==null?tail.loc.end.offset-this.locationMap.startOffset:this.scanner.tokenStart,this.filename);}return null;},error:function error(message,offset){var location=typeof offset!=='undefined'&&offset<this.scanner.source.length?this.locationMap.getLocation(offset):this.scanner.eof?this.locationMap.getLocation(findWhiteSpaceStart$1(this.scanner.source,this.scanner.source.length-1)):this.locationMap.getLocation(this.scanner.tokenStart);throw new _SyntaxError(message||'Unexpected input',this.scanner.source,location.offset,location.line,location.column);}};config=processConfig(config||{});for(var key in config){parser[key]=config[key];}return function(source,options){options=options||{};var context=options.context||'default';var onComment=options.onComment;var ast;tokenizer(source,parser.scanner);parser.locationMap.setSource(source,options.offset,options.line,options.column);parser.filename=options.filename||'<unknown>';parser.needPositions=Boolean(options.positions);parser.onParseError=typeof options.onParseError==='function'?options.onParseError:noop;parser.onParseErrorThrow=false;parser.parseAtrulePrelude='parseAtrulePrelude'in options?Boolean(options.parseAtrulePrelude):true;parser.parseRulePrelude='parseRulePrelude'in options?Boolean(options.parseRulePrelude):true;parser.parseValue='parseValue'in options?Boolean(options.parseValue):true;parser.parseCustomProperty='parseCustomProperty'in options?Boolean(options.parseCustomProperty):false;if(!parser.context.hasOwnProperty(context)){throw new Error('Unknown context `'+context+'`');}if(typeof onComment==='function'){parser.scanner.forEachToken(function(type,start,end){if(type===COMMENT$2){var loc=parser.getLocation(start,end);var _value4=cmpStr$3(source,end-2,end,'*/')?source.slice(start+2,end-2):source.slice(start+2,end);onComment(_value4,loc);}});}ast=parser.context[context].call(parser,options);if(!parser.scanner.eof){parser.error();}return ast;};};var cmpChar$1=tokenizer.cmpChar;var cmpStr$4=tokenizer.cmpStr;var TYPE$5=tokenizer.TYPE;var IDENT$1=TYPE$5.Ident;var STRING=TYPE$5.String;var NUMBER$1=TYPE$5.Number;var FUNCTION$1=TYPE$5.Function;var URL$2=TYPE$5.Url;var HASH$1=TYPE$5.Hash;var DIMENSION=TYPE$5.Dimension;var PERCENTAGE$1=TYPE$5.Percentage;var LEFTPARENTHESIS=TYPE$5.LeftParenthesis;var LEFTSQUAREBRACKET=TYPE$5.LeftSquareBracket;var COMMA=TYPE$5.Comma;var DELIM=TYPE$5.Delim;var NUMBERSIGN$1=0x0023;// U+0023 NUMBER SIGN (#)\nvar ASTERISK=0x002A;// U+002A ASTERISK (*)\nvar PLUSSIGN=0x002B;// U+002B PLUS SIGN (+)\nvar HYPHENMINUS=0x002D;// U+002D HYPHEN-MINUS (-)\nvar SOLIDUS=0x002F;// U+002F SOLIDUS (/)\nvar U=0x0075;// U+0075 LATIN SMALL LETTER U (u)\nvar _default=function defaultRecognizer(context){switch(this.scanner.tokenType){case HASH$1:return this.Hash();case COMMA:context.space=null;context.ignoreWSAfter=true;return this.Operator();case LEFTPARENTHESIS:return this.Parentheses(this.readSequence,context.recognizer);case LEFTSQUAREBRACKET:return this.Brackets(this.readSequence,context.recognizer);case STRING:return this.String();case DIMENSION:return this.Dimension();case PERCENTAGE$1:return this.Percentage();case NUMBER$1:return this.Number();case FUNCTION$1:return cmpStr$4(this.scanner.source,this.scanner.tokenStart,this.scanner.tokenEnd,'url(')?this.Url():this.Function(this.readSequence,context.recognizer);case URL$2:return this.Url();case IDENT$1:// check for unicode range, it should start with u+ or U+\nif(cmpChar$1(this.scanner.source,this.scanner.tokenStart,U)&&cmpChar$1(this.scanner.source,this.scanner.tokenStart+1,PLUSSIGN)){return this.UnicodeRange();}else{return this.Identifier();}case DELIM:var code=this.scanner.source.charCodeAt(this.scanner.tokenStart);if(code===SOLIDUS||code===ASTERISK||code===PLUSSIGN||code===HYPHENMINUS){return this.Operator();// TODO: replace with Delim\n}// TODO: produce a node with Delim node type\nif(code===NUMBERSIGN$1){this.error('Hex or identifier is expected',this.scanner.tokenStart+1);}break;}};var atrulePrelude={getNode:_default};var TYPE$6=tokenizer.TYPE;var DELIM$1=TYPE$6.Delim;var IDENT$2=TYPE$6.Ident;var DIMENSION$1=TYPE$6.Dimension;var PERCENTAGE$2=TYPE$6.Percentage;var NUMBER$2=TYPE$6.Number;var HASH$2=TYPE$6.Hash;var COLON=TYPE$6.Colon;var LEFTSQUAREBRACKET$1=TYPE$6.LeftSquareBracket;var NUMBERSIGN$2=0x0023;// U+0023 NUMBER SIGN (#)\nvar ASTERISK$1=0x002A;// U+002A ASTERISK (*)\nvar PLUSSIGN$1=0x002B;// U+002B PLUS SIGN (+)\nvar SOLIDUS$1=0x002F;// U+002F SOLIDUS (/)\nvar FULLSTOP=0x002E;// U+002E FULL STOP (.)\nvar GREATERTHANSIGN=0x003E;// U+003E GREATER-THAN SIGN (>)\nvar VERTICALLINE=0x007C;// U+007C VERTICAL LINE (|)\nvar TILDE=0x007E;// U+007E TILDE (~)\nfunction getNode(context){switch(this.scanner.tokenType){case LEFTSQUAREBRACKET$1:return this.AttributeSelector();case HASH$2:return this.IdSelector();case COLON:if(this.scanner.lookupType(1)===COLON){return this.PseudoElementSelector();}else{return this.PseudoClassSelector();}case IDENT$2:return this.TypeSelector();case NUMBER$2:case PERCENTAGE$2:return this.Percentage();case DIMENSION$1:// throws when .123ident\nif(this.scanner.source.charCodeAt(this.scanner.tokenStart)===FULLSTOP){this.error('Identifier is expected',this.scanner.tokenStart+1);}break;case DELIM$1:var code=this.scanner.source.charCodeAt(this.scanner.tokenStart);switch(code){case PLUSSIGN$1:case GREATERTHANSIGN:case TILDE:context.space=null;context.ignoreWSAfter=true;return this.Combinator();case SOLIDUS$1:// /deep/\nreturn this.Combinator();case FULLSTOP:return this.ClassSelector();case ASTERISK$1:case VERTICALLINE:return this.TypeSelector();case NUMBERSIGN$2:return this.IdSelector();}break;}}var selector={getNode:getNode};// legacy IE function\n// expression( <any-value> )\nvar expression=function expression(){return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex,null,false));};var TYPE$7=tokenizer.TYPE;var WhiteSpace=TYPE$7.WhiteSpace;var Semicolon=TYPE$7.Semicolon;var LeftCurlyBracket=TYPE$7.LeftCurlyBracket;var Delim=TYPE$7.Delim;var EXCLAMATIONMARK=0x0021;// U+0021 EXCLAMATION MARK (!)\nfunction getOffsetExcludeWS(){if(this.scanner.tokenIndex>0){if(this.scanner.lookupType(-1)===WhiteSpace){return this.scanner.tokenIndex>1?this.scanner.getTokenStart(this.scanner.tokenIndex-1):this.scanner.firstCharOffset;}}return this.scanner.tokenStart;}// 0, 0, false\nfunction balanceEnd(){return 0;}// LEFTCURLYBRACKET, 0, false\nfunction leftCurlyBracket(tokenType){return tokenType===LeftCurlyBracket?1:0;}// LEFTCURLYBRACKET, SEMICOLON, false\nfunction leftCurlyBracketOrSemicolon(tokenType){return tokenType===LeftCurlyBracket||tokenType===Semicolon?1:0;}// EXCLAMATIONMARK, SEMICOLON, false\nfunction exclamationMarkOrSemicolon(tokenType,source,offset){if(tokenType===Delim&&source.charCodeAt(offset)===EXCLAMATIONMARK){return 1;}return tokenType===Semicolon?1:0;}// 0, SEMICOLON, true\nfunction semicolonIncluded(tokenType){return tokenType===Semicolon?2:0;}var Raw={name:'Raw',structure:{value:String},parse:function parse(startToken,mode,excludeWhiteSpace){var startOffset=this.scanner.getTokenStart(startToken);var endOffset;this.scanner.skip(this.scanner.getRawLength(startToken,mode||balanceEnd));if(excludeWhiteSpace&&this.scanner.tokenStart>startOffset){endOffset=getOffsetExcludeWS.call(this);}else{endOffset=this.scanner.tokenStart;}return{type:'Raw',loc:this.getLocation(startOffset,endOffset),value:this.scanner.source.substring(startOffset,endOffset)};},generate:function generate(node){this.chunk(node.value);},mode:{default:balanceEnd,leftCurlyBracket:leftCurlyBracket,leftCurlyBracketOrSemicolon:leftCurlyBracketOrSemicolon,exclamationMarkOrSemicolon:exclamationMarkOrSemicolon,semicolonIncluded:semicolonIncluded}};var TYPE$8=tokenizer.TYPE;var rawMode=Raw.mode;var COMMA$1=TYPE$8.Comma;var WHITESPACE$3=TYPE$8.WhiteSpace;// var( <ident> , <value>? )\nvar _var=function _var(){var children=this.createList();this.scanner.skipSC();// NOTE: Don't check more than a first argument is an ident, rest checks are for lexer\nchildren.push(this.Identifier());this.scanner.skipSC();if(this.scanner.tokenType===COMMA$1){children.push(this.Operator());var startIndex=this.scanner.tokenIndex;var _value5=this.parseCustomProperty?this.Value(null):this.Raw(this.scanner.tokenIndex,rawMode.exclamationMarkOrSemicolon,false);if(_value5.type==='Value'&&_value5.children.isEmpty()){for(var offset=startIndex-this.scanner.tokenIndex;offset<=0;offset++){if(this.scanner.lookupType(offset)===WHITESPACE$3){_value5.children.appendData({type:'WhiteSpace',loc:null,value:' '});break;}}}children.push(_value5);}return children;};var value={getNode:_default,'expression':expression,'var':_var};var scope={AtrulePrelude:atrulePrelude,Selector:selector,Value:value};var fontFace={parse:{prelude:null,block:function block(){return this.Block(true);}}};var TYPE$9=tokenizer.TYPE;var STRING$1=TYPE$9.String;var IDENT$3=TYPE$9.Ident;var URL$3=TYPE$9.Url;var FUNCTION$2=TYPE$9.Function;var LEFTPARENTHESIS$1=TYPE$9.LeftParenthesis;var _import={parse:{prelude:function prelude(){var children=this.createList();this.scanner.skipSC();switch(this.scanner.tokenType){case STRING$1:children.push(this.String());break;case URL$3:case FUNCTION$2:children.push(this.Url());break;default:this.error('String or url() is expected');}if(this.lookupNonWSType(0)===IDENT$3||this.lookupNonWSType(0)===LEFTPARENTHESIS$1){children.push(this.WhiteSpace());children.push(this.MediaQueryList());}return children;},block:null}};var media={parse:{prelude:function prelude(){return this.createSingleNodeList(this.MediaQueryList());},block:function block(){return this.Block(false);}}};var page={parse:{prelude:function prelude(){return this.createSingleNodeList(this.SelectorList());},block:function block(){return this.Block(true);}}};var TYPE$a=tokenizer.TYPE;var WHITESPACE$4=TYPE$a.WhiteSpace;var COMMENT$3=TYPE$a.Comment;var IDENT$4=TYPE$a.Ident;var FUNCTION$3=TYPE$a.Function;var COLON$1=TYPE$a.Colon;var LEFTPARENTHESIS$2=TYPE$a.LeftParenthesis;function consumeRaw(){return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex,null,false));}function parentheses(){this.scanner.skipSC();if(this.scanner.tokenType===IDENT$4&&this.lookupNonWSType(1)===COLON$1){return this.createSingleNodeList(this.Declaration());}return readSequence.call(this);}function readSequence(){var children=this.createList();var space=null;var child;this.scanner.skipSC();scan:while(!this.scanner.eof){switch(this.scanner.tokenType){case WHITESPACE$4:space=this.WhiteSpace();continue;case COMMENT$3:this.scanner.next();continue;case FUNCTION$3:child=this.Function(consumeRaw,this.scope.AtrulePrelude);break;case IDENT$4:child=this.Identifier();break;case LEFTPARENTHESIS$2:child=this.Parentheses(parentheses,this.scope.AtrulePrelude);break;default:break scan;}if(space!==null){children.push(space);space=null;}children.push(child);}return children;}var supports={parse:{prelude:function prelude(){var children=readSequence.call(this);if(this.getFirstListNode(children)===null){this.error('Condition is expected');}return children;},block:function block(){return this.Block(false);}}};var atrule={'font-face':fontFace,'import':_import,'media':media,'page':page,'supports':supports};var dir={parse:function parse(){return this.createSingleNodeList(this.Identifier());}};var has$1={parse:function parse(){return this.createSingleNodeList(this.SelectorList());}};var lang={parse:function parse(){return this.createSingleNodeList(this.Identifier());}};var selectorList={parse:function selectorList(){return this.createSingleNodeList(this.SelectorList());}};var matches=selectorList;var not=selectorList;var ALLOW_OF_CLAUSE=true;var nthWithOfClause={parse:function nthWithOfClause(){return this.createSingleNodeList(this.Nth(ALLOW_OF_CLAUSE));}};var nthChild=nthWithOfClause;var nthLastChild=nthWithOfClause;var DISALLOW_OF_CLAUSE=false;var nth={parse:function nth(){return this.createSingleNodeList(this.Nth(DISALLOW_OF_CLAUSE));}};var nthLastOfType=nth;var nthOfType=nth;var slotted={parse:function compoundSelector(){return this.createSingleNodeList(this.Selector());}};var pseudo={'dir':dir,'has':has$1,'lang':lang,'matches':matches,'not':not,'nth-child':nthChild,'nth-last-child':nthLastChild,'nth-last-of-type':nthLastOfType,'nth-of-type':nthOfType,'slotted':slotted};var cmpChar$2=tokenizer.cmpChar;var isDigit$2=tokenizer.isDigit;var TYPE$b=tokenizer.TYPE;var WHITESPACE$5=TYPE$b.WhiteSpace;var COMMENT$4=TYPE$b.Comment;var IDENT$5=TYPE$b.Ident;var NUMBER$3=TYPE$b.Number;var DIMENSION$2=TYPE$b.Dimension;var PLUSSIGN$2=0x002B;// U+002B PLUS SIGN (+)\nvar HYPHENMINUS$1=0x002D;// U+002D HYPHEN-MINUS (-)\nvar N$1=0x006E;// U+006E LATIN SMALL LETTER N (n)\nvar DISALLOW_SIGN=true;var ALLOW_SIGN=false;function checkInteger(offset,disallowSign){var pos=this.scanner.tokenStart+offset;var code=this.scanner.source.charCodeAt(pos);if(code===PLUSSIGN$2||code===HYPHENMINUS$1){if(disallowSign){this.error('Number sign is not allowed');}pos++;}for(;pos<this.scanner.tokenEnd;pos++){if(!isDigit$2(this.scanner.source.charCodeAt(pos))){this.error('Integer is expected',pos);}}}function checkTokenIsInteger(disallowSign){return checkInteger.call(this,0,disallowSign);}function expectCharCode(offset,code){if(!cmpChar$2(this.scanner.source,this.scanner.tokenStart+offset,code)){var msg='';switch(code){case N$1:msg='N is expected';break;case HYPHENMINUS$1:msg='HyphenMinus is expected';break;}this.error(msg,this.scanner.tokenStart+offset);}}// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB(){var offset=0;var sign=0;var type=this.scanner.tokenType;while(type===WHITESPACE$5||type===COMMENT$4){type=this.scanner.lookupType(++offset);}if(type!==NUMBER$3){if(this.scanner.isDelim(PLUSSIGN$2,offset)||this.scanner.isDelim(HYPHENMINUS$1,offset)){sign=this.scanner.isDelim(PLUSSIGN$2,offset)?PLUSSIGN$2:HYPHENMINUS$1;do{type=this.scanner.lookupType(++offset);}while(type===WHITESPACE$5||type===COMMENT$4);if(type!==NUMBER$3){this.scanner.skip(offset);checkTokenIsInteger.call(this,DISALLOW_SIGN);}}else{return null;}}if(offset>0){this.scanner.skip(offset);}if(sign===0){type=this.scanner.source.charCodeAt(this.scanner.tokenStart);if(type!==PLUSSIGN$2&&type!==HYPHENMINUS$1){this.error('Number sign is expected');}}checkTokenIsInteger.call(this,sign!==0);return sign===HYPHENMINUS$1?'-'+this.consume(NUMBER$3):this.consume(NUMBER$3);}// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nvar AnPlusB={name:'AnPlusB',structure:{a:[String,null],b:[String,null]},parse:function parse(){/* eslint-disable brace-style*/var start=this.scanner.tokenStart;var a=null;var b=null;// <integer>\nif(this.scanner.tokenType===NUMBER$3){checkTokenIsInteger.call(this,ALLOW_SIGN);b=this.consume(NUMBER$3);}// -n\n// -n <signed-integer>\n// -n ['+' | '-'] <signless-integer>\n// -n- <signless-integer>\n// <dashndashdigit-ident>\nelse if(this.scanner.tokenType===IDENT$5&&cmpChar$2(this.scanner.source,this.scanner.tokenStart,HYPHENMINUS$1)){a='-1';expectCharCode.call(this,1,N$1);switch(this.scanner.getTokenLength()){// -n\n// -n <signed-integer>\n// -n ['+' | '-'] <signless-integer>\ncase 2:this.scanner.next();b=consumeB.call(this);break;// -n- <signless-integer>\ncase 3:expectCharCode.call(this,2,HYPHENMINUS$1);this.scanner.next();this.scanner.skipSC();checkTokenIsInteger.call(this,DISALLOW_SIGN);b='-'+this.consume(NUMBER$3);break;// <dashndashdigit-ident>\ndefault:expectCharCode.call(this,2,HYPHENMINUS$1);checkInteger.call(this,3,DISALLOW_SIGN);this.scanner.next();b=this.scanner.substrToCursor(start+2);}}// '+'? n\n// '+'? n <signed-integer>\n// '+'? n ['+' | '-'] <signless-integer>\n// '+'? n- <signless-integer>\n// '+'? <ndashdigit-ident>\nelse if(this.scanner.tokenType===IDENT$5||this.scanner.isDelim(PLUSSIGN$2)&&this.scanner.lookupType(1)===IDENT$5){var sign=0;a='1';// just ignore a plus\nif(this.scanner.isDelim(PLUSSIGN$2)){sign=1;this.scanner.next();}expectCharCode.call(this,0,N$1);switch(this.scanner.getTokenLength()){// '+'? n\n// '+'? n <signed-integer>\n// '+'? n ['+' | '-'] <signless-integer>\ncase 1:this.scanner.next();b=consumeB.call(this);break;// '+'? n- <signless-integer>\ncase 2:expectCharCode.call(this,1,HYPHENMINUS$1);this.scanner.next();this.scanner.skipSC();checkTokenIsInteger.call(this,DISALLOW_SIGN);b='-'+this.consume(NUMBER$3);break;// '+'? <ndashdigit-ident>\ndefault:expectCharCode.call(this,1,HYPHENMINUS$1);checkInteger.call(this,2,DISALLOW_SIGN);this.scanner.next();b=this.scanner.substrToCursor(start+sign+1);}}// <ndashdigit-dimension>\n// <ndash-dimension> <signless-integer>\n// <n-dimension>\n// <n-dimension> <signed-integer>\n// <n-dimension> ['+' | '-'] <signless-integer>\nelse if(this.scanner.tokenType===DIMENSION$2){var code=this.scanner.source.charCodeAt(this.scanner.tokenStart);var sign=code===PLUSSIGN$2||code===HYPHENMINUS$1;for(var i=this.scanner.tokenStart+sign;i<this.scanner.tokenEnd;i++){if(!isDigit$2(this.scanner.source.charCodeAt(i))){break;}}if(i===this.scanner.tokenStart+sign){this.error('Integer is expected',this.scanner.tokenStart+sign);}expectCharCode.call(this,i-this.scanner.tokenStart,N$1);a=this.scanner.source.substring(start,i);// <n-dimension>\n// <n-dimension> <signed-integer>\n// <n-dimension> ['+' | '-'] <signless-integer>\nif(i+1===this.scanner.tokenEnd){this.scanner.next();b=consumeB.call(this);}else{expectCharCode.call(this,i-this.scanner.tokenStart+1,HYPHENMINUS$1);// <ndash-dimension> <signless-integer>\nif(i+2===this.scanner.tokenEnd){this.scanner.next();this.scanner.skipSC();checkTokenIsInteger.call(this,DISALLOW_SIGN);b='-'+this.consume(NUMBER$3);}// <ndashdigit-dimension>\nelse{checkInteger.call(this,i-this.scanner.tokenStart+2,DISALLOW_SIGN);this.scanner.next();b=this.scanner.substrToCursor(i+1);}}}else{this.error();}if(a!==null&&a.charCodeAt(0)===PLUSSIGN$2){a=a.substr(1);}if(b!==null&&b.charCodeAt(0)===PLUSSIGN$2){b=b.substr(1);}return{type:'AnPlusB',loc:this.getLocation(start,this.scanner.tokenStart),a:a,b:b};},generate:function generate(node){var a=node.a!==null&&node.a!==undefined;var b=node.b!==null&&node.b!==undefined;if(a){this.chunk(node.a==='+1'?'+n':// eslint-disable-line operator-linebreak, indent\nnode.a==='1'?'n':// eslint-disable-line operator-linebreak, indent\nnode.a==='-1'?'-n':// eslint-disable-line operator-linebreak, indent\nnode.a+'n'// eslint-disable-line operator-linebreak, indent\n);if(b){b=String(node.b);if(b.charAt(0)==='-'||b.charAt(0)==='+'){this.chunk(b.charAt(0));this.chunk(b.substr(1));}else{this.chunk('+');this.chunk(b);}}}else{this.chunk(String(node.b));}}};var TYPE$c=tokenizer.TYPE;var rawMode$1=Raw.mode;var ATKEYWORD=TYPE$c.AtKeyword;var SEMICOLON=TYPE$c.Semicolon;var LEFTCURLYBRACKET=TYPE$c.LeftCurlyBracket;var RIGHTCURLYBRACKET=TYPE$c.RightCurlyBracket;function consumeRaw$1(startToken){return this.Raw(startToken,rawMode$1.leftCurlyBracketOrSemicolon,true);}function isDeclarationBlockAtrule(){for(var offset=1,type;type=this.scanner.lookupType(offset);offset++){if(type===RIGHTCURLYBRACKET){return true;}if(type===LEFTCURLYBRACKET||type===ATKEYWORD){return false;}}return false;}var Atrule={name:'Atrule',structure:{name:String,prelude:['AtrulePrelude','Raw',null],block:['Block',null]},parse:function parse(){var start=this.scanner.tokenStart;var name;var nameLowerCase;var prelude=null;var block=null;this.eat(ATKEYWORD);name=this.scanner.substrToCursor(start+1);nameLowerCase=name.toLowerCase();this.scanner.skipSC();// parse prelude\nif(this.scanner.eof===false&&this.scanner.tokenType!==LEFTCURLYBRACKET&&this.scanner.tokenType!==SEMICOLON){if(this.parseAtrulePrelude){prelude=this.parseWithFallback(this.AtrulePrelude.bind(this,name),consumeRaw$1);// turn empty AtrulePrelude into null\nif(prelude.type==='AtrulePrelude'&&prelude.children.head===null){prelude=null;}}else{prelude=consumeRaw$1.call(this,this.scanner.tokenIndex);}this.scanner.skipSC();}switch(this.scanner.tokenType){case SEMICOLON:this.scanner.next();break;case LEFTCURLYBRACKET:if(this.atrule.hasOwnProperty(nameLowerCase)&&typeof this.atrule[nameLowerCase].block==='function'){block=this.atrule[nameLowerCase].block.call(this);}else{// TODO: should consume block content as Raw?\nblock=this.Block(isDeclarationBlockAtrule.call(this));}break;}return{type:'Atrule',loc:this.getLocation(start,this.scanner.tokenStart),name:name,prelude:prelude,block:block};},generate:function generate(node){this.chunk('@');this.chunk(node.name);if(node.prelude!==null){this.chunk(' ');this.node(node.prelude);}if(node.block){this.node(node.block);}else{this.chunk(';');}},walkContext:'atrule'};var TYPE$d=tokenizer.TYPE;var SEMICOLON$1=TYPE$d.Semicolon;var LEFTCURLYBRACKET$1=TYPE$d.LeftCurlyBracket;var AtrulePrelude={name:'AtrulePrelude',structure:{children:[[]]},parse:function parse(name){var children=null;if(name!==null){name=name.toLowerCase();}this.scanner.skipSC();if(this.atrule.hasOwnProperty(name)&&typeof this.atrule[name].prelude==='function'){// custom consumer\nchildren=this.atrule[name].prelude.call(this);}else{// default consumer\nchildren=this.readSequence(this.scope.AtrulePrelude);}this.scanner.skipSC();if(this.scanner.eof!==true&&this.scanner.tokenType!==LEFTCURLYBRACKET$1&&this.scanner.tokenType!==SEMICOLON$1){this.error('Semicolon or block is expected');}if(children===null){children=this.createList();}return{type:'AtrulePrelude',loc:this.getLocationFromList(children),children:children};},generate:function generate(node){this.children(node);},walkContext:'atrulePrelude'};var TYPE$e=tokenizer.TYPE;var IDENT$6=TYPE$e.Ident;var STRING$2=TYPE$e.String;var COLON$2=TYPE$e.Colon;var LEFTSQUAREBRACKET$2=TYPE$e.LeftSquareBracket;var RIGHTSQUAREBRACKET=TYPE$e.RightSquareBracket;var DOLLARSIGN=0x0024;// U+0024 DOLLAR SIGN ($)\nvar ASTERISK$2=0x002A;// U+002A ASTERISK (*)\nvar EQUALSSIGN=0x003D;// U+003D EQUALS SIGN (=)\nvar CIRCUMFLEXACCENT=0x005E;// U+005E (^)\nvar VERTICALLINE$1=0x007C;// U+007C VERTICAL LINE (|)\nvar TILDE$1=0x007E;// U+007E TILDE (~)\nfunction getAttributeName(){if(this.scanner.eof){this.error('Unexpected end of input');}var start=this.scanner.tokenStart;var expectIdent=false;var checkColon=true;if(this.scanner.isDelim(ASTERISK$2)){expectIdent=true;checkColon=false;this.scanner.next();}else if(!this.scanner.isDelim(VERTICALLINE$1)){this.eat(IDENT$6);}if(this.scanner.isDelim(VERTICALLINE$1)){if(this.scanner.source.charCodeAt(this.scanner.tokenStart+1)!==EQUALSSIGN){this.scanner.next();this.eat(IDENT$6);}else if(expectIdent){this.error('Identifier is expected',this.scanner.tokenEnd);}}else if(expectIdent){this.error('Vertical line is expected');}if(checkColon&&this.scanner.tokenType===COLON$2){this.scanner.next();this.eat(IDENT$6);}return{type:'Identifier',loc:this.getLocation(start,this.scanner.tokenStart),name:this.scanner.substrToCursor(start)};}function getOperator(){var start=this.scanner.tokenStart;var code=this.scanner.source.charCodeAt(start);if(code!==EQUALSSIGN&&// =\ncode!==TILDE$1&&// ~=\ncode!==CIRCUMFLEXACCENT&&// ^=\ncode!==DOLLARSIGN&&// $=\ncode!==ASTERISK$2&&// *=\ncode!==VERTICALLINE$1// |=\n){this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');}this.scanner.next();if(code!==EQUALSSIGN){if(!this.scanner.isDelim(EQUALSSIGN)){this.error('Equal sign is expected');}this.scanner.next();}return this.scanner.substrToCursor(start);}// '[' <wq-name> ']'\n// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\nvar AttributeSelector={name:'AttributeSelector',structure:{name:'Identifier',matcher:[String,null],value:['String','Identifier',null],flags:[String,null]},parse:function parse(){var start=this.scanner.tokenStart;var name;var matcher=null;var value=null;var flags=null;this.eat(LEFTSQUAREBRACKET$2);this.scanner.skipSC();name=getAttributeName.call(this);this.scanner.skipSC();if(this.scanner.tokenType!==RIGHTSQUAREBRACKET){// avoid case `[name i]`\nif(this.scanner.tokenType!==IDENT$6){matcher=getOperator.call(this);this.scanner.skipSC();value=this.scanner.tokenType===STRING$2?this.String():this.Identifier();this.scanner.skipSC();}// attribute flags\nif(this.scanner.tokenType===IDENT$6){flags=this.scanner.getTokenValue();this.scanner.next();this.scanner.skipSC();}}this.eat(RIGHTSQUAREBRACKET);return{type:'AttributeSelector',loc:this.getLocation(start,this.scanner.tokenStart),name:name,matcher:matcher,value:value,flags:flags};},generate:function generate(node){var flagsPrefix=' ';this.chunk('[');this.node(node.name);if(node.matcher!==null){this.chunk(node.matcher);if(node.value!==null){this.node(node.value);// space between string and flags is not required\nif(node.value.type==='String'){flagsPrefix='';}}}if(node.flags!==null){this.chunk(flagsPrefix);this.chunk(node.flags);}this.chunk(']');}};var TYPE$f=tokenizer.TYPE;var rawMode$2=Raw.mode;var WHITESPACE$6=TYPE$f.WhiteSpace;var COMMENT$5=TYPE$f.Comment;var SEMICOLON$2=TYPE$f.Semicolon;var ATKEYWORD$1=TYPE$f.AtKeyword;var LEFTCURLYBRACKET$2=TYPE$f.LeftCurlyBracket;var RIGHTCURLYBRACKET$1=TYPE$f.RightCurlyBracket;function consumeRaw$2(startToken){return this.Raw(startToken,null,true);}function consumeRule(){return this.parseWithFallback(this.Rule,consumeRaw$2);}function consumeRawDeclaration(startToken){return this.Raw(startToken,rawMode$2.semicolonIncluded,true);}function consumeDeclaration(){if(this.scanner.tokenType===SEMICOLON$2){return consumeRawDeclaration.call(this,this.scanner.tokenIndex);}var node=this.parseWithFallback(this.Declaration,consumeRawDeclaration);if(this.scanner.tokenType===SEMICOLON$2){this.scanner.next();}return node;}var Block={name:'Block',structure:{children:[['Atrule','Rule','Declaration']]},parse:function parse(isDeclaration){var consumer=isDeclaration?consumeDeclaration:consumeRule;var start=this.scanner.tokenStart;var children=this.createList();this.eat(LEFTCURLYBRACKET$2);scan:while(!this.scanner.eof){switch(this.scanner.tokenType){case RIGHTCURLYBRACKET$1:break scan;case WHITESPACE$6:case COMMENT$5:this.scanner.next();break;case ATKEYWORD$1:children.push(this.parseWithFallback(this.Atrule,consumeRaw$2));break;default:children.push(consumer.call(this));}}if(!this.scanner.eof){this.eat(RIGHTCURLYBRACKET$1);}return{type:'Block',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(node){this.chunk('{');this.children(node,function(prev){if(prev.type==='Declaration'){this.chunk(';');}});this.chunk('}');},walkContext:'block'};var TYPE$g=tokenizer.TYPE;var LEFTSQUAREBRACKET$3=TYPE$g.LeftSquareBracket;var RIGHTSQUAREBRACKET$1=TYPE$g.RightSquareBracket;var Brackets={name:'Brackets',structure:{children:[[]]},parse:function parse(readSequence,recognizer){var start=this.scanner.tokenStart;var children=null;this.eat(LEFTSQUAREBRACKET$3);children=readSequence.call(this,recognizer);if(!this.scanner.eof){this.eat(RIGHTSQUAREBRACKET$1);}return{type:'Brackets',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(node){this.chunk('[');this.children(node);this.chunk(']');}};var CDC=tokenizer.TYPE.CDC;var CDC_1={name:'CDC',structure:[],parse:function parse(){var start=this.scanner.tokenStart;this.eat(CDC);// -->\nreturn{type:'CDC',loc:this.getLocation(start,this.scanner.tokenStart)};},generate:function generate(){this.chunk('-->');}};var CDO=tokenizer.TYPE.CDO;var CDO_1={name:'CDO',structure:[],parse:function parse(){var start=this.scanner.tokenStart;this.eat(CDO);// <!--\nreturn{type:'CDO',loc:this.getLocation(start,this.scanner.tokenStart)};},generate:function generate(){this.chunk('<!--');}};var TYPE$h=tokenizer.TYPE;var IDENT$7=TYPE$h.Ident;var FULLSTOP$1=0x002E;// U+002E FULL STOP (.)\n// '.' ident\nvar ClassSelector={name:'ClassSelector',structure:{name:String},parse:function parse(){if(!this.scanner.isDelim(FULLSTOP$1)){this.error('Full stop is expected');}this.scanner.next();return{type:'ClassSelector',loc:this.getLocation(this.scanner.tokenStart-1,this.scanner.tokenEnd),name:this.consume(IDENT$7)};},generate:function generate(node){this.chunk('.');this.chunk(node.name);}};var TYPE$i=tokenizer.TYPE;var IDENT$8=TYPE$i.Ident;var PLUSSIGN$3=0x002B;// U+002B PLUS SIGN (+)\nvar SOLIDUS$2=0x002F;// U+002F SOLIDUS (/)\nvar GREATERTHANSIGN$1=0x003E;// U+003E GREATER-THAN SIGN (>)\nvar TILDE$2=0x007E;// U+007E TILDE (~)\n// + | > | ~ | /deep/\nvar Combinator={name:'Combinator',structure:{name:String},parse:function parse(){var start=this.scanner.tokenStart;var code=this.scanner.source.charCodeAt(this.scanner.tokenStart);switch(code){case GREATERTHANSIGN$1:case PLUSSIGN$3:case TILDE$2:this.scanner.next();break;case SOLIDUS$2:this.scanner.next();if(this.scanner.tokenType!==IDENT$8||this.scanner.lookupValue(0,'deep')===false){this.error('Identifier `deep` is expected');}this.scanner.next();if(!this.scanner.isDelim(SOLIDUS$2)){this.error('Solidus is expected');}this.scanner.next();break;default:this.error('Combinator is expected');}return{type:'Combinator',loc:this.getLocation(start,this.scanner.tokenStart),name:this.scanner.substrToCursor(start)};},generate:function generate(node){this.chunk(node.name);}};var TYPE$j=tokenizer.TYPE;var COMMENT$6=TYPE$j.Comment;var ASTERISK$3=0x002A;// U+002A ASTERISK (*)\nvar SOLIDUS$3=0x002F;// U+002F SOLIDUS (/)\n// '/*' .* '*/'\nvar Comment={name:'Comment',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;var end=this.scanner.tokenEnd;this.eat(COMMENT$6);if(end-start+2>=2&&this.scanner.source.charCodeAt(end-2)===ASTERISK$3&&this.scanner.source.charCodeAt(end-1)===SOLIDUS$3){end-=2;}return{type:'Comment',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.source.substring(start+2,end)};},generate:function generate(node){this.chunk('/*');this.chunk(node.value);this.chunk('*/');}};var hasOwnProperty$1=Object.prototype.hasOwnProperty;var keywords$2=Object.create(null);var properties=Object.create(null);var HYPHENMINUS$2=45;// '-'.charCodeAt()\nfunction isCustomProperty(str,offset){offset=offset||0;return str.length-offset>=2&&str.charCodeAt(offset)===HYPHENMINUS$2&&str.charCodeAt(offset+1)===HYPHENMINUS$2;}function getVendorPrefix(str,offset){offset=offset||0;// verdor prefix should be at least 3 chars length\nif(str.length-offset>=3){// vendor prefix starts with hyper minus following non-hyper minus\nif(str.charCodeAt(offset)===HYPHENMINUS$2&&str.charCodeAt(offset+1)!==HYPHENMINUS$2){// vendor prefix should contain a hyper minus at the ending\nvar secondDashIndex=str.indexOf('-',offset+2);if(secondDashIndex!==-1){return str.substring(offset,secondDashIndex+1);}}}return'';}function getKeywordDescriptor(keyword){if(hasOwnProperty$1.call(keywords$2,keyword)){return keywords$2[keyword];}var name=keyword.toLowerCase();if(hasOwnProperty$1.call(keywords$2,name)){return keywords$2[keyword]=keywords$2[name];}var custom=isCustomProperty(name,0);var vendor=!custom?getVendorPrefix(name,0):'';return keywords$2[keyword]=Object.freeze({basename:name.substr(vendor.length),name:name,vendor:vendor,prefix:vendor,custom:custom});}function getPropertyDescriptor(property){if(hasOwnProperty$1.call(properties,property)){return properties[property];}var name=property;var hack=property[0];if(hack==='/'){hack=property[1]==='/'?'//':'/';}else if(hack!=='_'&&hack!=='*'&&hack!=='$'&&hack!=='#'&&hack!=='+'&&hack!=='&'){hack='';}var custom=isCustomProperty(name,hack.length);// re-use result when possible (the same as for lower case)\nif(!custom){name=name.toLowerCase();if(hasOwnProperty$1.call(properties,name)){return properties[property]=properties[name];}}var vendor=!custom?getVendorPrefix(name,hack.length):'';var prefix=name.substr(0,hack.length+vendor.length);return properties[property]=Object.freeze({basename:name.substr(prefix.length),name:name.substr(hack.length),hack:hack,vendor:vendor,prefix:prefix,custom:custom});}var names={keyword:getKeywordDescriptor,property:getPropertyDescriptor,isCustomProperty:isCustomProperty,vendorPrefix:getVendorPrefix};var isCustomProperty$1=names.isCustomProperty;var TYPE$k=tokenizer.TYPE;var rawMode$3=Raw.mode;var IDENT$9=TYPE$k.Ident;var HASH$3=TYPE$k.Hash;var COLON$3=TYPE$k.Colon;var SEMICOLON$3=TYPE$k.Semicolon;var DELIM$2=TYPE$k.Delim;var WHITESPACE$7=TYPE$k.WhiteSpace;var EXCLAMATIONMARK$1=0x0021;// U+0021 EXCLAMATION MARK (!)\nvar NUMBERSIGN$3=0x0023;// U+0023 NUMBER SIGN (#)\nvar DOLLARSIGN$1=0x0024;// U+0024 DOLLAR SIGN ($)\nvar AMPERSAND=0x0026;// U+0026 ANPERSAND (&)\nvar ASTERISK$4=0x002A;// U+002A ASTERISK (*)\nvar PLUSSIGN$4=0x002B;// U+002B PLUS SIGN (+)\nvar SOLIDUS$4=0x002F;// U+002F SOLIDUS (/)\nfunction consumeValueRaw(startToken){return this.Raw(startToken,rawMode$3.exclamationMarkOrSemicolon,true);}function consumeCustomPropertyRaw(startToken){return this.Raw(startToken,rawMode$3.exclamationMarkOrSemicolon,false);}function consumeValue(){var startValueToken=this.scanner.tokenIndex;var value=this.Value();if(value.type!=='Raw'&&this.scanner.eof===false&&this.scanner.tokenType!==SEMICOLON$3&&this.scanner.isDelim(EXCLAMATIONMARK$1)===false&&this.scanner.isBalanceEdge(startValueToken)===false){this.error();}return value;}var Declaration={name:'Declaration',structure:{important:[Boolean,String],property:String,value:['Value','Raw']},parse:function parse(){var start=this.scanner.tokenStart;var startToken=this.scanner.tokenIndex;var property=readProperty.call(this);var customProperty=isCustomProperty$1(property);var parseValue=customProperty?this.parseCustomProperty:this.parseValue;var consumeRaw=customProperty?consumeCustomPropertyRaw:consumeValueRaw;var important=false;var value;this.scanner.skipSC();this.eat(COLON$3);var valueStart=this.scanner.tokenIndex;if(!customProperty){this.scanner.skipSC();}if(parseValue){value=this.parseWithFallback(consumeValue,consumeRaw);}else{value=consumeRaw.call(this,this.scanner.tokenIndex);}if(customProperty&&value.type==='Value'&&value.children.isEmpty()){for(var offset=valueStart-this.scanner.tokenIndex;offset<=0;offset++){if(this.scanner.lookupType(offset)===WHITESPACE$7){value.children.appendData({type:'WhiteSpace',loc:null,value:' '});break;}}}if(this.scanner.isDelim(EXCLAMATIONMARK$1)){important=getImportant.call(this);this.scanner.skipSC();}// Do not include semicolon to range per spec\n// https://drafts.csswg.org/css-syntax/#declaration-diagram\nif(this.scanner.eof===false&&this.scanner.tokenType!==SEMICOLON$3&&this.scanner.isBalanceEdge(startToken)===false){this.error();}return{type:'Declaration',loc:this.getLocation(start,this.scanner.tokenStart),important:important,property:property,value:value};},generate:function generate(node){this.chunk(node.property);this.chunk(':');this.node(node.value);if(node.important){this.chunk(node.important===true?'!important':'!'+node.important);}},walkContext:'declaration'};function readProperty(){var start=this.scanner.tokenStart;// hacks\nif(this.scanner.tokenType===DELIM$2){switch(this.scanner.source.charCodeAt(this.scanner.tokenStart)){case ASTERISK$4:case DOLLARSIGN$1:case PLUSSIGN$4:case NUMBERSIGN$3:case AMPERSAND:this.scanner.next();break;// TODO: not sure we should support this hack\ncase SOLIDUS$4:this.scanner.next();if(this.scanner.isDelim(SOLIDUS$4)){this.scanner.next();}break;}}if(this.scanner.tokenType===HASH$3){this.eat(HASH$3);}else{this.eat(IDENT$9);}return this.scanner.substrToCursor(start);}// ! ws* important\nfunction getImportant(){this.eat(DELIM$2);this.scanner.skipSC();var important=this.consume(IDENT$9);// store original value in case it differ from `important`\n// for better original source restoring and hacks like `!ie` support\nreturn important==='important'?true:important;}var TYPE$l=tokenizer.TYPE;var rawMode$4=Raw.mode;var WHITESPACE$8=TYPE$l.WhiteSpace;var COMMENT$7=TYPE$l.Comment;var SEMICOLON$4=TYPE$l.Semicolon;function consumeRaw$3(startToken){return this.Raw(startToken,rawMode$4.semicolonIncluded,true);}var DeclarationList={name:'DeclarationList',structure:{children:[['Declaration']]},parse:function parse(){var children=this.createList();while(!this.scanner.eof){switch(this.scanner.tokenType){case WHITESPACE$8:case COMMENT$7:case SEMICOLON$4:this.scanner.next();break;default:children.push(this.parseWithFallback(this.Declaration,consumeRaw$3));}}return{type:'DeclarationList',loc:this.getLocationFromList(children),children:children};},generate:function generate(node){this.children(node,function(prev){if(prev.type==='Declaration'){this.chunk(';');}});}};var consumeNumber$2=utils.consumeNumber;var TYPE$m=tokenizer.TYPE;var DIMENSION$3=TYPE$m.Dimension;var Dimension={name:'Dimension',structure:{value:String,unit:String},parse:function parse(){var start=this.scanner.tokenStart;var numberEnd=consumeNumber$2(this.scanner.source,start);this.eat(DIMENSION$3);return{type:'Dimension',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.source.substring(start,numberEnd),unit:this.scanner.source.substring(numberEnd,this.scanner.tokenStart)};},generate:function generate(node){this.chunk(node.value);this.chunk(node.unit);}};var TYPE$n=tokenizer.TYPE;var RIGHTPARENTHESIS=TYPE$n.RightParenthesis;// <function-token> <sequence> )\nvar _Function={name:'Function',structure:{name:String,children:[[]]},parse:function parse(readSequence,recognizer){var start=this.scanner.tokenStart;var name=this.consumeFunctionName();var nameLowerCase=name.toLowerCase();var children;children=recognizer.hasOwnProperty(nameLowerCase)?recognizer[nameLowerCase].call(this,recognizer):readSequence.call(this,recognizer);if(!this.scanner.eof){this.eat(RIGHTPARENTHESIS);}return{type:'Function',loc:this.getLocation(start,this.scanner.tokenStart),name:name,children:children};},generate:function generate(node){this.chunk(node.name);this.chunk('(');this.children(node);this.chunk(')');},walkContext:'function'};var TYPE$o=tokenizer.TYPE;var HASH$4=TYPE$o.Hash;// '#' ident\nvar Hash={name:'Hash',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;this.eat(HASH$4);return{type:'Hash',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.substrToCursor(start+1)};},generate:function generate(node){this.chunk('#');this.chunk(node.value);}};var TYPE$p=tokenizer.TYPE;var IDENT$a=TYPE$p.Ident;var Identifier={name:'Identifier',structure:{name:String},parse:function parse(){return{type:'Identifier',loc:this.getLocation(this.scanner.tokenStart,this.scanner.tokenEnd),name:this.consume(IDENT$a)};},generate:function generate(node){this.chunk(node.name);}};var TYPE$q=tokenizer.TYPE;var HASH$5=TYPE$q.Hash;// <hash-token>\nvar IdSelector={name:'IdSelector',structure:{name:String},parse:function parse(){var start=this.scanner.tokenStart;// TODO: check value is an ident\nthis.eat(HASH$5);return{type:'IdSelector',loc:this.getLocation(start,this.scanner.tokenStart),name:this.scanner.substrToCursor(start+1)};},generate:function generate(node){this.chunk('#');this.chunk(node.name);}};var TYPE$r=tokenizer.TYPE;var IDENT$b=TYPE$r.Ident;var NUMBER$4=TYPE$r.Number;var DIMENSION$4=TYPE$r.Dimension;var LEFTPARENTHESIS$3=TYPE$r.LeftParenthesis;var RIGHTPARENTHESIS$1=TYPE$r.RightParenthesis;var COLON$4=TYPE$r.Colon;var DELIM$3=TYPE$r.Delim;var MediaFeature={name:'MediaFeature',structure:{name:String,value:['Identifier','Number','Dimension','Ratio',null]},parse:function parse(){var start=this.scanner.tokenStart;var name;var value=null;this.eat(LEFTPARENTHESIS$3);this.scanner.skipSC();name=this.consume(IDENT$b);this.scanner.skipSC();if(this.scanner.tokenType!==RIGHTPARENTHESIS$1){this.eat(COLON$4);this.scanner.skipSC();switch(this.scanner.tokenType){case NUMBER$4:if(this.lookupNonWSType(1)===DELIM$3){value=this.Ratio();}else{value=this.Number();}break;case DIMENSION$4:value=this.Dimension();break;case IDENT$b:value=this.Identifier();break;default:this.error('Number, dimension, ratio or identifier is expected');}this.scanner.skipSC();}this.eat(RIGHTPARENTHESIS$1);return{type:'MediaFeature',loc:this.getLocation(start,this.scanner.tokenStart),name:name,value:value};},generate:function generate(node){this.chunk('(');this.chunk(node.name);if(node.value!==null){this.chunk(':');this.node(node.value);}this.chunk(')');}};var TYPE$s=tokenizer.TYPE;var WHITESPACE$9=TYPE$s.WhiteSpace;var COMMENT$8=TYPE$s.Comment;var IDENT$c=TYPE$s.Ident;var LEFTPARENTHESIS$4=TYPE$s.LeftParenthesis;var MediaQuery={name:'MediaQuery',structure:{children:[['Identifier','MediaFeature','WhiteSpace']]},parse:function parse(){this.scanner.skipSC();var children=this.createList();var child=null;var space=null;scan:while(!this.scanner.eof){switch(this.scanner.tokenType){case COMMENT$8:this.scanner.next();continue;case WHITESPACE$9:space=this.WhiteSpace();continue;case IDENT$c:child=this.Identifier();break;case LEFTPARENTHESIS$4:child=this.MediaFeature();break;default:break scan;}if(space!==null){children.push(space);space=null;}children.push(child);}if(child===null){this.error('Identifier or parenthesis is expected');}return{type:'MediaQuery',loc:this.getLocationFromList(children),children:children};},generate:function generate(node){this.children(node);}};var COMMA$2=tokenizer.TYPE.Comma;var MediaQueryList={name:'MediaQueryList',structure:{children:[['MediaQuery']]},parse:function parse(relative){var children=this.createList();this.scanner.skipSC();while(!this.scanner.eof){children.push(this.MediaQuery(relative));if(this.scanner.tokenType!==COMMA$2){break;}this.scanner.next();}return{type:'MediaQueryList',loc:this.getLocationFromList(children),children:children};},generate:function generate(node){this.children(node,function(){this.chunk(',');});}};var Nth={name:'Nth',structure:{nth:['AnPlusB','Identifier'],selector:['SelectorList',null]},parse:function parse(allowOfClause){this.scanner.skipSC();var start=this.scanner.tokenStart;var end=start;var selector=null;var query;if(this.scanner.lookupValue(0,'odd')||this.scanner.lookupValue(0,'even')){query=this.Identifier();}else{query=this.AnPlusB();}this.scanner.skipSC();if(allowOfClause&&this.scanner.lookupValue(0,'of')){this.scanner.next();selector=this.SelectorList();if(this.needPositions){end=this.getLastListNode(selector.children).loc.end.offset;}}else{if(this.needPositions){end=query.loc.end.offset;}}return{type:'Nth',loc:this.getLocation(start,end),nth:query,selector:selector};},generate:function generate(node){this.node(node.nth);if(node.selector!==null){this.chunk(' of ');this.node(node.selector);}}};var NUMBER$5=tokenizer.TYPE.Number;var _Number={name:'Number',structure:{value:String},parse:function parse(){return{type:'Number',loc:this.getLocation(this.scanner.tokenStart,this.scanner.tokenEnd),value:this.consume(NUMBER$5)};},generate:function generate(node){this.chunk(node.value);}};// '/' | '*' | ',' | ':' | '+' | '-'\nvar Operator={name:'Operator',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;this.scanner.next();return{type:'Operator',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.substrToCursor(start)};},generate:function generate(node){this.chunk(node.value);}};var TYPE$t=tokenizer.TYPE;var LEFTPARENTHESIS$5=TYPE$t.LeftParenthesis;var RIGHTPARENTHESIS$2=TYPE$t.RightParenthesis;var Parentheses={name:'Parentheses',structure:{children:[[]]},parse:function parse(readSequence,recognizer){var start=this.scanner.tokenStart;var children=null;this.eat(LEFTPARENTHESIS$5);children=readSequence.call(this,recognizer);if(!this.scanner.eof){this.eat(RIGHTPARENTHESIS$2);}return{type:'Parentheses',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(node){this.chunk('(');this.children(node);this.chunk(')');}};var consumeNumber$3=utils.consumeNumber;var TYPE$u=tokenizer.TYPE;var PERCENTAGE$3=TYPE$u.Percentage;var Percentage={name:'Percentage',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;var numberEnd=consumeNumber$3(this.scanner.source,start);this.eat(PERCENTAGE$3);return{type:'Percentage',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.source.substring(start,numberEnd)};},generate:function generate(node){this.chunk(node.value);this.chunk('%');}};var TYPE$v=tokenizer.TYPE;var IDENT$d=TYPE$v.Ident;var FUNCTION$4=TYPE$v.Function;var COLON$5=TYPE$v.Colon;var RIGHTPARENTHESIS$3=TYPE$v.RightParenthesis;// : [ <ident> | <function-token> <any-value>? ) ]\nvar PseudoClassSelector={name:'PseudoClassSelector',structure:{name:String,children:[['Raw'],null]},parse:function parse(){var start=this.scanner.tokenStart;var children=null;var name;var nameLowerCase;this.eat(COLON$5);if(this.scanner.tokenType===FUNCTION$4){name=this.consumeFunctionName();nameLowerCase=name.toLowerCase();if(this.pseudo.hasOwnProperty(nameLowerCase)){this.scanner.skipSC();children=this.pseudo[nameLowerCase].call(this);this.scanner.skipSC();}else{children=this.createList();children.push(this.Raw(this.scanner.tokenIndex,null,false));}this.eat(RIGHTPARENTHESIS$3);}else{name=this.consume(IDENT$d);}return{type:'PseudoClassSelector',loc:this.getLocation(start,this.scanner.tokenStart),name:name,children:children};},generate:function generate(node){this.chunk(':');this.chunk(node.name);if(node.children!==null){this.chunk('(');this.children(node);this.chunk(')');}},walkContext:'function'};var TYPE$w=tokenizer.TYPE;var IDENT$e=TYPE$w.Ident;var FUNCTION$5=TYPE$w.Function;var COLON$6=TYPE$w.Colon;var RIGHTPARENTHESIS$4=TYPE$w.RightParenthesis;// :: [ <ident> | <function-token> <any-value>? ) ]\nvar PseudoElementSelector={name:'PseudoElementSelector',structure:{name:String,children:[['Raw'],null]},parse:function parse(){var start=this.scanner.tokenStart;var children=null;var name;var nameLowerCase;this.eat(COLON$6);this.eat(COLON$6);if(this.scanner.tokenType===FUNCTION$5){name=this.consumeFunctionName();nameLowerCase=name.toLowerCase();if(this.pseudo.hasOwnProperty(nameLowerCase)){this.scanner.skipSC();children=this.pseudo[nameLowerCase].call(this);this.scanner.skipSC();}else{children=this.createList();children.push(this.Raw(this.scanner.tokenIndex,null,false));}this.eat(RIGHTPARENTHESIS$4);}else{name=this.consume(IDENT$e);}return{type:'PseudoElementSelector',loc:this.getLocation(start,this.scanner.tokenStart),name:name,children:children};},generate:function generate(node){this.chunk('::');this.chunk(node.name);if(node.children!==null){this.chunk('(');this.children(node);this.chunk(')');}},walkContext:'function'};var isDigit$3=tokenizer.isDigit;var TYPE$x=tokenizer.TYPE;var NUMBER$6=TYPE$x.Number;var DELIM$4=TYPE$x.Delim;var SOLIDUS$5=0x002F;// U+002F SOLIDUS (/)\nvar FULLSTOP$2=0x002E;// U+002E FULL STOP (.)\n// Terms of <ratio> should be a positive numbers (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without an exponent part.\n// Additional checking may be applied on lexer validation.\nfunction consumeNumber$4(){this.scanner.skipWS();var value=this.consume(NUMBER$6);for(var i=0;i<value.length;i++){var code=value.charCodeAt(i);if(!isDigit$3(code)&&code!==FULLSTOP$2){this.error('Unsigned number is expected',this.scanner.tokenStart-value.length+i);}}if(Number(value)===0){this.error('Zero number is not allowed',this.scanner.tokenStart-value.length);}return value;}// <positive-integer> S* '/' S* <positive-integer>\nvar Ratio={name:'Ratio',structure:{left:String,right:String},parse:function parse(){var start=this.scanner.tokenStart;var left=consumeNumber$4.call(this);var right;this.scanner.skipWS();if(!this.scanner.isDelim(SOLIDUS$5)){this.error('Solidus is expected');}this.eat(DELIM$4);right=consumeNumber$4.call(this);return{type:'Ratio',loc:this.getLocation(start,this.scanner.tokenStart),left:left,right:right};},generate:function generate(node){this.chunk(node.left);this.chunk('/');this.chunk(node.right);}};var TYPE$y=tokenizer.TYPE;var rawMode$5=Raw.mode;var LEFTCURLYBRACKET$3=TYPE$y.LeftCurlyBracket;function consumeRaw$4(startToken){return this.Raw(startToken,rawMode$5.leftCurlyBracket,true);}function consumePrelude(){var prelude=this.SelectorList();if(prelude.type!=='Raw'&&this.scanner.eof===false&&this.scanner.tokenType!==LEFTCURLYBRACKET$3){this.error();}return prelude;}var Rule={name:'Rule',structure:{prelude:['SelectorList','Raw'],block:['Block']},parse:function parse(){var startToken=this.scanner.tokenIndex;var startOffset=this.scanner.tokenStart;var prelude;var block;if(this.parseRulePrelude){prelude=this.parseWithFallback(consumePrelude,consumeRaw$4);}else{prelude=consumeRaw$4.call(this,startToken);}block=this.Block(true);return{type:'Rule',loc:this.getLocation(startOffset,this.scanner.tokenStart),prelude:prelude,block:block};},generate:function generate(node){this.node(node.prelude);this.node(node.block);},walkContext:'rule'};var Selector={name:'Selector',structure:{children:[['TypeSelector','IdSelector','ClassSelector','AttributeSelector','PseudoClassSelector','PseudoElementSelector','Combinator','WhiteSpace']]},parse:function parse(){var children=this.readSequence(this.scope.Selector);// nothing were consumed\nif(this.getFirstListNode(children)===null){this.error('Selector is expected');}return{type:'Selector',loc:this.getLocationFromList(children),children:children};},generate:function generate(node){this.children(node);}};var TYPE$z=tokenizer.TYPE;var COMMA$3=TYPE$z.Comma;var SelectorList={name:'SelectorList',structure:{children:[['Selector','Raw']]},parse:function parse(){var children=this.createList();while(!this.scanner.eof){children.push(this.Selector());if(this.scanner.tokenType===COMMA$3){this.scanner.next();continue;}break;}return{type:'SelectorList',loc:this.getLocationFromList(children),children:children};},generate:function generate(node){this.children(node,function(){this.chunk(',');});},walkContext:'selector'};var STRING$3=tokenizer.TYPE.String;var _String={name:'String',structure:{value:String},parse:function parse(){return{type:'String',loc:this.getLocation(this.scanner.tokenStart,this.scanner.tokenEnd),value:this.consume(STRING$3)};},generate:function generate(node){this.chunk(node.value);}};var TYPE$A=tokenizer.TYPE;var WHITESPACE$a=TYPE$A.WhiteSpace;var COMMENT$9=TYPE$A.Comment;var ATKEYWORD$2=TYPE$A.AtKeyword;var CDO$1=TYPE$A.CDO;var CDC$1=TYPE$A.CDC;var EXCLAMATIONMARK$2=0x0021;// U+0021 EXCLAMATION MARK (!)\nfunction consumeRaw$5(startToken){return this.Raw(startToken,null,false);}var StyleSheet={name:'StyleSheet',structure:{children:[['Comment','CDO','CDC','Atrule','Rule','Raw']]},parse:function parse(){var start=this.scanner.tokenStart;var children=this.createList();var child;while(!this.scanner.eof){switch(this.scanner.tokenType){case WHITESPACE$a:this.scanner.next();continue;case COMMENT$9:// ignore comments except exclamation comments (i.e. /*! .. */) on top level\nif(this.scanner.source.charCodeAt(this.scanner.tokenStart+2)!==EXCLAMATIONMARK$2){this.scanner.next();continue;}child=this.Comment();break;case CDO$1:// <!--\nchild=this.CDO();break;case CDC$1:// -->\nchild=this.CDC();break;// CSS Syntax Module Level 3\n// §2.2 Error handling\n// At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\ncase ATKEYWORD$2:child=this.parseWithFallback(this.Atrule,consumeRaw$5);break;// Anything else starts a qualified rule ...\ndefault:child=this.parseWithFallback(this.Rule,consumeRaw$5);}children.push(child);}return{type:'StyleSheet',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(node){this.children(node);},walkContext:'stylesheet'};var TYPE$B=tokenizer.TYPE;var IDENT$f=TYPE$B.Ident;var ASTERISK$5=0x002A;// U+002A ASTERISK (*)\nvar VERTICALLINE$2=0x007C;// U+007C VERTICAL LINE (|)\nfunction eatIdentifierOrAsterisk(){if(this.scanner.tokenType!==IDENT$f&&this.scanner.isDelim(ASTERISK$5)===false){this.error('Identifier or asterisk is expected');}this.scanner.next();}// ident\n// ident|ident\n// ident|*\n// *\n// *|ident\n// *|*\n// |ident\n// |*\nvar TypeSelector={name:'TypeSelector',structure:{name:String},parse:function parse(){var start=this.scanner.tokenStart;if(this.scanner.isDelim(VERTICALLINE$2)){this.scanner.next();eatIdentifierOrAsterisk.call(this);}else{eatIdentifierOrAsterisk.call(this);if(this.scanner.isDelim(VERTICALLINE$2)){this.scanner.next();eatIdentifierOrAsterisk.call(this);}}return{type:'TypeSelector',loc:this.getLocation(start,this.scanner.tokenStart),name:this.scanner.substrToCursor(start)};},generate:function generate(node){this.chunk(node.name);}};var isHexDigit$3=tokenizer.isHexDigit;var cmpChar$3=tokenizer.cmpChar;var TYPE$C=tokenizer.TYPE;var NAME$3=tokenizer.NAME;var IDENT$g=TYPE$C.Ident;var NUMBER$7=TYPE$C.Number;var DIMENSION$5=TYPE$C.Dimension;var PLUSSIGN$5=0x002B;// U+002B PLUS SIGN (+)\nvar HYPHENMINUS$3=0x002D;// U+002D HYPHEN-MINUS (-)\nvar QUESTIONMARK=0x003F;// U+003F QUESTION MARK (?)\nvar U$1=0x0075;// U+0075 LATIN SMALL LETTER U (u)\nfunction eatHexSequence(offset,allowDash){for(var pos=this.scanner.tokenStart+offset,len=0;pos<this.scanner.tokenEnd;pos++){var code=this.scanner.source.charCodeAt(pos);if(code===HYPHENMINUS$3&&allowDash&&len!==0){if(eatHexSequence.call(this,offset+len+1,false)===0){this.error();}return-1;}if(!isHexDigit$3(code)){this.error(allowDash&&len!==0?'HyphenMinus'+(len<6?' or hex digit':'')+' is expected':len<6?'Hex digit is expected':'Unexpected input',pos);}if(++len>6){this.error('Too many hex digits',pos);}}this.scanner.next();return len;}function eatQuestionMarkSequence(max){var count=0;while(this.scanner.isDelim(QUESTIONMARK)){if(++count>max){this.error('Too many question marks');}this.scanner.next();}}function startsWith(code){if(this.scanner.source.charCodeAt(this.scanner.tokenStart)!==code){this.error(NAME$3[code]+' is expected');}}// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nfunction scanUnicodeRange(){var hexLength=0;// u '+' <ident-token> '?'*\n// u '+' '?'+\nif(this.scanner.isDelim(PLUSSIGN$5)){this.scanner.next();if(this.scanner.tokenType===IDENT$g){hexLength=eatHexSequence.call(this,0,true);if(hexLength>0){eatQuestionMarkSequence.call(this,6-hexLength);}return;}if(this.scanner.isDelim(QUESTIONMARK)){this.scanner.next();eatQuestionMarkSequence.call(this,5);return;}this.error('Hex digit or question mark is expected');return;}// u <number-token> '?'*\n// u <number-token> <dimension-token>\n// u <number-token> <number-token>\nif(this.scanner.tokenType===NUMBER$7){startsWith.call(this,PLUSSIGN$5);hexLength=eatHexSequence.call(this,1,true);if(this.scanner.isDelim(QUESTIONMARK)){eatQuestionMarkSequence.call(this,6-hexLength);return;}if(this.scanner.tokenType===DIMENSION$5||this.scanner.tokenType===NUMBER$7){startsWith.call(this,HYPHENMINUS$3);eatHexSequence.call(this,1,false);return;}return;}// u <dimension-token> '?'*\nif(this.scanner.tokenType===DIMENSION$5){startsWith.call(this,PLUSSIGN$5);hexLength=eatHexSequence.call(this,1,true);if(hexLength>0){eatQuestionMarkSequence.call(this,6-hexLength);}return;}this.error();}var UnicodeRange={name:'UnicodeRange',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;// U or u\nif(!cmpChar$3(this.scanner.source,start,U$1)){this.error('U is expected');}if(!cmpChar$3(this.scanner.source,start+1,PLUSSIGN$5)){this.error('Plus sign is expected');}this.scanner.next();scanUnicodeRange.call(this);return{type:'UnicodeRange',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.substrToCursor(start)};},generate:function generate(node){this.chunk(node.value);}};var isWhiteSpace$2=tokenizer.isWhiteSpace;var cmpStr$5=tokenizer.cmpStr;var TYPE$D=tokenizer.TYPE;var FUNCTION$6=TYPE$D.Function;var URL$4=TYPE$D.Url;var RIGHTPARENTHESIS$5=TYPE$D.RightParenthesis;// <url-token> | <function-token> <string> )\nvar Url={name:'Url',structure:{value:['String','Raw']},parse:function parse(){var start=this.scanner.tokenStart;var value;switch(this.scanner.tokenType){case URL$4:var rawStart=start+4;var rawEnd=this.scanner.tokenEnd-1;while(rawStart<rawEnd&&isWhiteSpace$2(this.scanner.source.charCodeAt(rawStart))){rawStart++;}while(rawStart<rawEnd&&isWhiteSpace$2(this.scanner.source.charCodeAt(rawEnd-1))){rawEnd--;}value={type:'Raw',loc:this.getLocation(rawStart,rawEnd),value:this.scanner.source.substring(rawStart,rawEnd)};this.eat(URL$4);break;case FUNCTION$6:if(!cmpStr$5(this.scanner.source,this.scanner.tokenStart,this.scanner.tokenEnd,'url(')){this.error('Function name must be `url`');}this.eat(FUNCTION$6);this.scanner.skipSC();value=this.String();this.scanner.skipSC();this.eat(RIGHTPARENTHESIS$5);break;default:this.error('Url or Function is expected');}return{type:'Url',loc:this.getLocation(start,this.scanner.tokenStart),value:value};},generate:function generate(node){this.chunk('url');this.chunk('(');this.node(node.value);this.chunk(')');}};var Value={name:'Value',structure:{children:[[]]},parse:function parse(){var start=this.scanner.tokenStart;var children=this.readSequence(this.scope.Value);return{type:'Value',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(node){this.children(node);}};var WHITESPACE$b=tokenizer.TYPE.WhiteSpace;var SPACE=Object.freeze({type:'WhiteSpace',loc:null,value:' '});var WhiteSpace$1={name:'WhiteSpace',structure:{value:String},parse:function parse(){this.eat(WHITESPACE$b);return SPACE;// return {\n//     type: 'WhiteSpace',\n//     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n//     value: this.consume(WHITESPACE)\n// };\n},generate:function generate(node){this.chunk(node.value);}};var node={AnPlusB:AnPlusB,Atrule:Atrule,AtrulePrelude:AtrulePrelude,AttributeSelector:AttributeSelector,Block:Block,Brackets:Brackets,CDC:CDC_1,CDO:CDO_1,ClassSelector:ClassSelector,Combinator:Combinator,Comment:Comment,Declaration:Declaration,DeclarationList:DeclarationList,Dimension:Dimension,Function:_Function,Hash:Hash,Identifier:Identifier,IdSelector:IdSelector,MediaFeature:MediaFeature,MediaQuery:MediaQuery,MediaQueryList:MediaQueryList,Nth:Nth,Number:_Number,Operator:Operator,Parentheses:Parentheses,Percentage:Percentage,PseudoClassSelector:PseudoClassSelector,PseudoElementSelector:PseudoElementSelector,Ratio:Ratio,Raw:Raw,Rule:Rule,Selector:Selector,SelectorList:SelectorList,String:_String,StyleSheet:StyleSheet,TypeSelector:TypeSelector,UnicodeRange:UnicodeRange,Url:Url,Value:Value,WhiteSpace:WhiteSpace$1};var parser={parseContext:{default:'StyleSheet',stylesheet:'StyleSheet',atrule:'Atrule',atrulePrelude:function atrulePrelude(options){return this.AtrulePrelude(options.atrule?String(options.atrule):null);},mediaQueryList:'MediaQueryList',mediaQuery:'MediaQuery',rule:'Rule',selectorList:'SelectorList',selector:'Selector',block:function block(){return this.Block(true);},declarationList:'DeclarationList',declaration:'Declaration',value:'Value'},scope:scope,atrule:atrule,pseudo:pseudo,node:node};var parser$1=create(parser);function read_style(parser,start,attributes){var content_start=parser.index;var styles=parser.read_until(/<\\/style\\s*>/,parser_errors.unclosed_style);if(parser.index>=parser.template.length){parser.error(parser_errors.unclosed_style);}var content_end=parser.index;var ast;try{ast=parser$1(styles,{positions:true,offset:content_start,onParseError:function onParseError(error){throw error;}});}catch(err){if(err.name==='SyntaxError'){parser.error(parser_errors.css_syntax_error(err.message),err.offset);}else{throw err;}}ast=JSON.parse(JSON.stringify(ast));// tidy up AST\nwalk(ast,{enter:function enter(node){// replace `ref:a` nodes\nif(node.type==='Selector'){for(var _i29=0;_i29<node.children.length;_i29+=1){var a=node.children[_i29];var _b2=node.children[_i29+1];if(is_ref_selector(a,_b2)){parser.error(parser_errors.invalid_ref_selector,a.loc.start.offset);}}}if(node.type==='Declaration'&&node.value.type==='Value'&&node.value.children.length===0){parser.error(parser_errors.invalid_declaration,node.start);}if(node.type==='PseudoClassSelector'&&node.name==='global'&&node.children===null){parser.error(parser_errors.empty_global_selector,node.loc.start.offset);}if(node.loc){node.start=node.loc.start.offset;node.end=node.loc.end.offset;delete node.loc;}}});parser.read(/<\\/style\\s*>/);var end=parser.index;return{type:'Style',start:start,end:end,attributes:attributes,children:ast.children,content:{start:content_start,end:content_end,styles:styles}};}function is_ref_selector(a,b){if(!b)return false;return a.type==='TypeSelector'&&a.name==='ref'&&b.type==='PseudoClassSelector';}// https://dev.w3.org/html5/html-author/charref\nvar entities={CounterClockwiseContourIntegral:8755,ClockwiseContourIntegral:8754,DoubleLongLeftRightArrow:10234,DiacriticalDoubleAcute:733,NotSquareSupersetEqual:8931,CloseCurlyDoubleQuote:8221,DoubleContourIntegral:8751,FilledVerySmallSquare:9642,NegativeVeryThinSpace:8203,NotPrecedesSlantEqual:8928,NotRightTriangleEqual:8941,NotSucceedsSlantEqual:8929,CapitalDifferentialD:8517,DoubleLeftRightArrow:8660,DoubleLongRightArrow:10233,EmptyVerySmallSquare:9643,NestedGreaterGreater:8811,NotDoubleVerticalBar:8742,NotLeftTriangleEqual:8940,NotSquareSubsetEqual:8930,OpenCurlyDoubleQuote:8220,ReverseUpEquilibrium:10607,DoubleLongLeftArrow:10232,DownLeftRightVector:10576,LeftArrowRightArrow:8646,NegativeMediumSpace:8203,RightArrowLeftArrow:8644,SquareSupersetEqual:8850,leftrightsquigarrow:8621,DownRightTeeVector:10591,DownRightVectorBar:10583,LongLeftRightArrow:10231,Longleftrightarrow:10234,NegativeThickSpace:8203,PrecedesSlantEqual:8828,ReverseEquilibrium:8651,RightDoubleBracket:10215,RightDownTeeVector:10589,RightDownVectorBar:10581,RightTriangleEqual:8885,SquareIntersection:8851,SucceedsSlantEqual:8829,blacktriangleright:9656,longleftrightarrow:10231,DoubleUpDownArrow:8661,DoubleVerticalBar:8741,DownLeftTeeVector:10590,DownLeftVectorBar:10582,FilledSmallSquare:9724,GreaterSlantEqual:10878,LeftDoubleBracket:10214,LeftDownTeeVector:10593,LeftDownVectorBar:10585,LeftTriangleEqual:8884,NegativeThinSpace:8203,NotReverseElement:8716,NotTildeFullEqual:8775,RightAngleBracket:10217,RightUpDownVector:10575,SquareSubsetEqual:8849,VerticalSeparator:10072,blacktriangledown:9662,blacktriangleleft:9666,leftrightharpoons:8651,rightleftharpoons:8652,twoheadrightarrow:8608,DiacriticalAcute:180,DiacriticalGrave:96,DiacriticalTilde:732,DoubleRightArrow:8658,DownArrowUpArrow:8693,EmptySmallSquare:9723,GreaterEqualLess:8923,GreaterFullEqual:8807,LeftAngleBracket:10216,LeftUpDownVector:10577,LessEqualGreater:8922,NonBreakingSpace:160,NotRightTriangle:8939,NotSupersetEqual:8841,RightTriangleBar:10704,RightUpTeeVector:10588,RightUpVectorBar:10580,UnderParenthesis:9181,UpArrowDownArrow:8645,circlearrowright:8635,downharpoonright:8642,ntrianglerighteq:8941,rightharpoondown:8641,rightrightarrows:8649,twoheadleftarrow:8606,vartriangleright:8883,CloseCurlyQuote:8217,ContourIntegral:8750,DoubleDownArrow:8659,DoubleLeftArrow:8656,DownRightVector:8641,LeftRightVector:10574,LeftTriangleBar:10703,LeftUpTeeVector:10592,LeftUpVectorBar:10584,LowerRightArrow:8600,NotGreaterEqual:8817,NotGreaterTilde:8821,NotLeftTriangle:8938,OverParenthesis:9180,RightDownVector:8642,ShortRightArrow:8594,UpperRightArrow:8599,bigtriangledown:9661,circlearrowleft:8634,curvearrowright:8631,downharpoonleft:8643,leftharpoondown:8637,leftrightarrows:8646,nLeftrightarrow:8654,nleftrightarrow:8622,ntrianglelefteq:8940,rightleftarrows:8644,rightsquigarrow:8605,rightthreetimes:8908,straightepsilon:1013,trianglerighteq:8885,vartriangleleft:8882,DiacriticalDot:729,DoubleRightTee:8872,DownLeftVector:8637,GreaterGreater:10914,HorizontalLine:9472,InvisibleComma:8291,InvisibleTimes:8290,LeftDownVector:8643,LeftRightArrow:8596,Leftrightarrow:8660,LessSlantEqual:10877,LongRightArrow:10230,Longrightarrow:10233,LowerLeftArrow:8601,NestedLessLess:8810,NotGreaterLess:8825,NotLessGreater:8824,NotSubsetEqual:8840,NotVerticalBar:8740,OpenCurlyQuote:8216,ReverseElement:8715,RightTeeVector:10587,RightVectorBar:10579,ShortDownArrow:8595,ShortLeftArrow:8592,SquareSuperset:8848,TildeFullEqual:8773,UpperLeftArrow:8598,ZeroWidthSpace:8203,curvearrowleft:8630,doublebarwedge:8966,downdownarrows:8650,hookrightarrow:8618,leftleftarrows:8647,leftrightarrow:8596,leftthreetimes:8907,longrightarrow:10230,looparrowright:8620,nshortparallel:8742,ntriangleright:8939,rightarrowtail:8611,rightharpoonup:8640,trianglelefteq:8884,upharpoonright:8638,ApplyFunction:8289,DifferentialD:8518,DoubleLeftTee:10980,DoubleUpArrow:8657,LeftTeeVector:10586,LeftVectorBar:10578,LessFullEqual:8806,LongLeftArrow:10229,Longleftarrow:10232,NotTildeEqual:8772,NotTildeTilde:8777,Poincareplane:8460,PrecedesEqual:10927,PrecedesTilde:8830,RightArrowBar:8677,RightTeeArrow:8614,RightTriangle:8883,RightUpVector:8638,SucceedsEqual:10928,SucceedsTilde:8831,SupersetEqual:8839,UpEquilibrium:10606,VerticalTilde:8768,VeryThinSpace:8202,bigtriangleup:9651,blacktriangle:9652,divideontimes:8903,fallingdotseq:8786,hookleftarrow:8617,leftarrowtail:8610,leftharpoonup:8636,longleftarrow:10229,looparrowleft:8619,measuredangle:8737,ntriangleleft:8938,shortparallel:8741,smallsetminus:8726,triangleright:9657,upharpoonleft:8639,DownArrowBar:10515,DownTeeArrow:8615,ExponentialE:8519,GreaterEqual:8805,GreaterTilde:8819,HilbertSpace:8459,HumpDownHump:8782,Intersection:8898,LeftArrowBar:8676,LeftTeeArrow:8612,LeftTriangle:8882,LeftUpVector:8639,NotCongruent:8802,NotLessEqual:8816,NotLessTilde:8820,Proportional:8733,RightCeiling:8969,RoundImplies:10608,ShortUpArrow:8593,SquareSubset:8847,UnderBracket:9141,VerticalLine:124,blacklozenge:10731,exponentiale:8519,risingdotseq:8787,triangledown:9663,triangleleft:9667,CircleMinus:8854,CircleTimes:8855,Equilibrium:8652,GreaterLess:8823,LeftCeiling:8968,LessGreater:8822,MediumSpace:8287,NotPrecedes:8832,NotSucceeds:8833,OverBracket:9140,RightVector:8640,Rrightarrow:8667,RuleDelayed:10740,SmallCircle:8728,SquareUnion:8852,SubsetEqual:8838,UpDownArrow:8597,Updownarrow:8661,VerticalBar:8739,backepsilon:1014,blacksquare:9642,circledcirc:8858,circleddash:8861,curlyeqprec:8926,curlyeqsucc:8927,diamondsuit:9830,eqslantless:10901,expectation:8496,nRightarrow:8655,nrightarrow:8603,preccurlyeq:8828,precnapprox:10937,quaternions:8461,straightphi:981,succcurlyeq:8829,succnapprox:10938,thickapprox:8776,updownarrow:8597,Bernoullis:8492,CirclePlus:8853,EqualTilde:8770,Fouriertrf:8497,ImaginaryI:8520,Laplacetrf:8466,LeftVector:8636,Lleftarrow:8666,NotElement:8713,NotGreater:8815,Proportion:8759,RightArrow:8594,RightFloor:8971,Rightarrow:8658,TildeEqual:8771,TildeTilde:8776,UnderBrace:9183,UpArrowBar:10514,UpTeeArrow:8613,circledast:8859,complement:8705,curlywedge:8911,eqslantgtr:10902,gtreqqless:10892,lessapprox:10885,lesseqqgtr:10891,lmoustache:9136,longmapsto:10236,mapstodown:8615,mapstoleft:8612,nLeftarrow:8653,nleftarrow:8602,precapprox:10935,rightarrow:8594,rmoustache:9137,sqsubseteq:8849,sqsupseteq:8850,subsetneqq:10955,succapprox:10936,supsetneqq:10956,upuparrows:8648,varepsilon:949,varnothing:8709,Backslash:8726,CenterDot:183,CircleDot:8857,Congruent:8801,Coproduct:8720,DoubleDot:168,DownArrow:8595,DownBreve:785,Downarrow:8659,HumpEqual:8783,LeftArrow:8592,LeftFloor:8970,Leftarrow:8656,LessTilde:8818,Mellintrf:8499,MinusPlus:8723,NotCupCap:8813,NotExists:8708,OverBrace:9182,PlusMinus:177,Therefore:8756,ThinSpace:8201,TripleDot:8411,UnionPlus:8846,backprime:8245,backsimeq:8909,bigotimes:10754,centerdot:183,checkmark:10003,complexes:8450,dotsquare:8865,downarrow:8595,gtrapprox:10886,gtreqless:8923,heartsuit:9829,leftarrow:8592,lesseqgtr:8922,nparallel:8742,nshortmid:8740,nsubseteq:8840,nsupseteq:8841,pitchfork:8916,rationals:8474,spadesuit:9824,subseteqq:10949,subsetneq:8842,supseteqq:10950,supsetneq:8843,therefore:8756,triangleq:8796,varpropto:8733,DDotrahd:10513,DotEqual:8784,Integral:8747,LessLess:10913,NotEqual:8800,NotTilde:8769,PartialD:8706,Precedes:8826,RightTee:8866,Succeeds:8827,SuchThat:8715,Superset:8835,Uarrocir:10569,UnderBar:818,andslope:10840,angmsdaa:10664,angmsdab:10665,angmsdac:10666,angmsdad:10667,angmsdae:10668,angmsdaf:10669,angmsdag:10670,angmsdah:10671,angrtvbd:10653,approxeq:8778,awconint:8755,backcong:8780,barwedge:8965,bbrktbrk:9142,bigoplus:10753,bigsqcup:10758,biguplus:10756,bigwedge:8896,boxminus:8863,boxtimes:8864,capbrcup:10825,circledR:174,circledS:9416,cirfnint:10768,clubsuit:9827,cupbrcap:10824,curlyvee:8910,cwconint:8754,doteqdot:8785,dotminus:8760,drbkarow:10512,dzigrarr:10239,elinters:9191,emptyset:8709,eqvparsl:10725,fpartint:10765,geqslant:10878,gesdotol:10884,gnapprox:10890,hksearow:10533,hkswarow:10534,imagline:8464,imagpart:8465,infintie:10717,integers:8484,intercal:8890,intlarhk:10775,laemptyv:10676,ldrushar:10571,leqslant:10877,lesdotor:10883,llcorner:8990,lnapprox:10889,lrcorner:8991,lurdshar:10570,mapstoup:8613,multimap:8888,naturals:8469,otimesas:10806,parallel:8741,plusacir:10787,pointint:10773,precneqq:10933,precnsim:8936,profalar:9006,profline:8978,profsurf:8979,raemptyv:10675,realpart:8476,rppolint:10770,rtriltri:10702,scpolint:10771,setminus:8726,shortmid:8739,smeparsl:10724,sqsubset:8847,sqsupset:8848,subseteq:8838,succneqq:10934,succnsim:8937,supseteq:8839,thetasym:977,thicksim:8764,timesbar:10801,triangle:9653,triminus:10810,trpezium:9186,ulcorner:8988,urcorner:8989,varkappa:1008,varsigma:962,vartheta:977,Because:8757,Cayleys:8493,Cconint:8752,Cedilla:184,Diamond:8900,DownTee:8868,Element:8712,Epsilon:917,Implies:8658,LeftTee:8867,NewLine:10,NoBreak:8288,NotLess:8814,Omicron:927,OverBar:175,Product:8719,UpArrow:8593,Uparrow:8657,Upsilon:933,alefsym:8501,angrtvb:8894,angzarr:9084,asympeq:8781,backsim:8765,because:8757,bemptyv:10672,between:8812,bigcirc:9711,bigodot:10752,bigstar:9733,boxplus:8862,ccupssm:10832,cemptyv:10674,cirscir:10690,coloneq:8788,congdot:10861,cudarrl:10552,cudarrr:10549,cularrp:10557,curarrm:10556,dbkarow:10511,ddagger:8225,ddotseq:10871,demptyv:10673,diamond:8900,digamma:989,dotplus:8724,dwangle:10662,epsilon:949,eqcolon:8789,equivDD:10872,gesdoto:10882,gtquest:10876,gtrless:8823,harrcir:10568,intprod:10812,isindot:8949,larrbfs:10527,larrsim:10611,lbrksld:10639,lbrkslu:10637,ldrdhar:10599,lesdoto:10881,lessdot:8918,lessgtr:8822,lesssim:8818,lotimes:10804,lozenge:9674,ltquest:10875,luruhar:10598,maltese:10016,minusdu:10794,napprox:8777,natural:9838,nearrow:8599,nexists:8708,notinva:8713,notinvb:8951,notinvc:8950,notniva:8716,notnivb:8958,notnivc:8957,npolint:10772,nsqsube:8930,nsqsupe:8931,nvinfin:10718,nwarrow:8598,olcross:10683,omicron:959,orderof:8500,orslope:10839,pertenk:8241,planckh:8462,pluscir:10786,plussim:10790,plustwo:10791,precsim:8830,quatint:10774,questeq:8799,rarrbfs:10528,rarrsim:10612,rbrksld:10638,rbrkslu:10640,rdldhar:10601,realine:8475,rotimes:10805,ruluhar:10600,searrow:8600,simplus:10788,simrarr:10610,subedot:10947,submult:10945,subplus:10943,subrarr:10617,succsim:8831,supdsub:10968,supedot:10948,suphsub:10967,suplarr:10619,supmult:10946,supplus:10944,swarrow:8601,topfork:10970,triplus:10809,tritime:10811,uparrow:8593,upsilon:965,uwangle:10663,vzigzag:10650,zigrarr:8669,Aacute:193,Abreve:258,Agrave:192,Assign:8788,Atilde:195,Barwed:8966,Bumpeq:8782,Cacute:262,Ccaron:268,Ccedil:199,Colone:10868,Conint:8751,CupCap:8781,Dagger:8225,Dcaron:270,DotDot:8412,Dstrok:272,Eacute:201,Ecaron:282,Egrave:200,Exists:8707,ForAll:8704,Gammad:988,Gbreve:286,Gcedil:290,HARDcy:1066,Hstrok:294,Iacute:205,Igrave:204,Itilde:296,Jsercy:1032,Kcedil:310,Lacute:313,Lambda:923,Lcaron:317,Lcedil:315,Lmidot:319,Lstrok:321,Nacute:323,Ncaron:327,Ncedil:325,Ntilde:209,Oacute:211,Odblac:336,Ograve:210,Oslash:216,Otilde:213,Otimes:10807,Racute:340,Rarrtl:10518,Rcaron:344,Rcedil:342,SHCHcy:1065,SOFTcy:1068,Sacute:346,Scaron:352,Scedil:350,Square:9633,Subset:8912,Supset:8913,Tcaron:356,Tcedil:354,Tstrok:358,Uacute:218,Ubreve:364,Udblac:368,Ugrave:217,Utilde:360,Vdashl:10982,Verbar:8214,Vvdash:8874,Yacute:221,Zacute:377,Zcaron:381,aacute:225,abreve:259,agrave:224,andand:10837,angmsd:8737,angsph:8738,apacir:10863,approx:8776,atilde:227,barvee:8893,barwed:8965,becaus:8757,bernou:8492,bigcap:8898,bigcup:8899,bigvee:8897,bkarow:10509,bottom:8869,bowtie:8904,boxbox:10697,bprime:8245,brvbar:166,bullet:8226,bumpeq:8783,cacute:263,capand:10820,capcap:10827,capcup:10823,capdot:10816,ccaron:269,ccedil:231,circeq:8791,cirmid:10991,colone:8788,commat:64,compfn:8728,conint:8750,coprod:8720,copysr:8471,cularr:8630,cupcap:10822,cupcup:10826,cupdot:8845,curarr:8631,curren:164,cylcty:9005,dagger:8224,daleth:8504,dcaron:271,dfisht:10623,divide:247,divonx:8903,dlcorn:8990,dlcrop:8973,dollar:36,drcorn:8991,drcrop:8972,dstrok:273,eacute:233,easter:10862,ecaron:283,ecolon:8789,egrave:232,egsdot:10904,elsdot:10903,emptyv:8709,emsp13:8196,emsp14:8197,eparsl:10723,eqcirc:8790,equals:61,equest:8799,female:9792,ffilig:64259,ffllig:64260,forall:8704,frac12:189,frac13:8531,frac14:188,frac15:8533,frac16:8537,frac18:8539,frac23:8532,frac25:8534,frac34:190,frac35:8535,frac38:8540,frac45:8536,frac56:8538,frac58:8541,frac78:8542,gacute:501,gammad:989,gbreve:287,gesdot:10880,gesles:10900,gtlPar:10645,gtrarr:10616,gtrdot:8919,gtrsim:8819,hairsp:8202,hamilt:8459,hardcy:1098,hearts:9829,hellip:8230,hercon:8889,homtht:8763,horbar:8213,hslash:8463,hstrok:295,hybull:8259,hyphen:8208,iacute:237,igrave:236,iiiint:10764,iinfin:10716,incare:8453,inodot:305,intcal:8890,iquest:191,isinsv:8947,itilde:297,jsercy:1112,kappav:1008,kcedil:311,kgreen:312,lAtail:10523,lacute:314,lagran:8466,lambda:955,langle:10216,larrfs:10525,larrhk:8617,larrlp:8619,larrpl:10553,larrtl:8610,latail:10521,lbrace:123,lbrack:91,lcaron:318,lcedil:316,ldquor:8222,lesdot:10879,lesges:10899,lfisht:10620,lfloor:8970,lharul:10602,llhard:10603,lmidot:320,lmoust:9136,loplus:10797,lowast:8727,lowbar:95,lparlt:10643,lrhard:10605,lsaquo:8249,lsquor:8218,lstrok:322,lthree:8907,ltimes:8905,ltlarr:10614,ltrPar:10646,mapsto:8614,marker:9646,mcomma:10793,midast:42,midcir:10992,middot:183,minusb:8863,minusd:8760,mnplus:8723,models:8871,mstpos:8766,nVDash:8879,nVdash:8878,nacute:324,ncaron:328,ncedil:326,nearhk:10532,nequiv:8802,nesear:10536,nexist:8708,nltrie:8940,nprcue:8928,nrtrie:8941,nsccue:8929,nsimeq:8772,ntilde:241,numero:8470,nvDash:8877,nvHarr:10500,nvdash:8876,nvlArr:10498,nvrArr:10499,nwarhk:10531,nwnear:10535,oacute:243,odblac:337,odsold:10684,ograve:242,ominus:8854,origof:8886,oslash:248,otilde:245,otimes:8855,parsim:10995,percnt:37,period:46,permil:8240,phmmat:8499,planck:8463,plankv:8463,plusdo:8724,plusdu:10789,plusmn:177,preceq:10927,primes:8473,prnsim:8936,propto:8733,prurel:8880,puncsp:8200,qprime:8279,rAtail:10524,racute:341,rangle:10217,rarrap:10613,rarrfs:10526,rarrhk:8618,rarrlp:8620,rarrpl:10565,rarrtl:8611,ratail:10522,rbrace:125,rbrack:93,rcaron:345,rcedil:343,rdquor:8221,rfisht:10621,rfloor:8971,rharul:10604,rmoust:9137,roplus:10798,rpargt:10644,rsaquo:8250,rsquor:8217,rthree:8908,rtimes:8906,sacute:347,scaron:353,scedil:351,scnsim:8937,searhk:10533,seswar:10537,sfrown:8994,shchcy:1097,sigmaf:962,sigmav:962,simdot:10858,smashp:10803,softcy:1100,solbar:9023,spades:9824,sqsube:8849,sqsupe:8850,square:9633,squarf:9642,ssetmn:8726,ssmile:8995,sstarf:8902,subdot:10941,subset:8834,subsim:10951,subsub:10965,subsup:10963,succeq:10928,supdot:10942,supset:8835,supsim:10952,supsub:10964,supsup:10966,swarhk:10534,swnwar:10538,target:8982,tcaron:357,tcedil:355,telrec:8981,there4:8756,thetav:977,thinsp:8201,thksim:8764,timesb:8864,timesd:10800,topbot:9014,topcir:10993,tprime:8244,tridot:9708,tstrok:359,uacute:250,ubreve:365,udblac:369,ufisht:10622,ugrave:249,ulcorn:8988,ulcrop:8975,urcorn:8989,urcrop:8974,utilde:361,vangrt:10652,varphi:966,varrho:1009,veebar:8891,vellip:8942,verbar:124,wedbar:10847,wedgeq:8793,weierp:8472,wreath:8768,xoplus:10753,xotime:10754,xsqcup:10758,xuplus:10756,xwedge:8896,yacute:253,zacute:378,zcaron:382,zeetrf:8488,AElig:198,Acirc:194,Alpha:913,Amacr:256,Aogon:260,Aring:197,Breve:728,Ccirc:264,Colon:8759,Cross:10799,Dashv:10980,Delta:916,Ecirc:202,Emacr:274,Eogon:280,Equal:10869,Gamma:915,Gcirc:284,Hacek:711,Hcirc:292,IJlig:306,Icirc:206,Imacr:298,Iogon:302,Iukcy:1030,Jcirc:308,Jukcy:1028,Kappa:922,OElig:338,Ocirc:212,Omacr:332,Omega:937,Prime:8243,RBarr:10512,Scirc:348,Sigma:931,THORN:222,TRADE:8482,TSHcy:1035,Theta:920,Tilde:8764,Ubrcy:1038,Ucirc:219,Umacr:362,Union:8899,Uogon:370,UpTee:8869,Uring:366,VDash:8875,Vdash:8873,Wcirc:372,Wedge:8896,Ycirc:374,acirc:226,acute:180,aelig:230,aleph:8501,alpha:945,amacr:257,amalg:10815,angle:8736,angrt:8735,angst:8491,aogon:261,aring:229,asymp:8776,awint:10769,bcong:8780,bdquo:8222,bepsi:1014,blank:9251,blk12:9618,blk14:9617,blk34:9619,block:9608,boxDL:9559,boxDR:9556,boxDl:9558,boxDr:9555,boxHD:9574,boxHU:9577,boxHd:9572,boxHu:9575,boxUL:9565,boxUR:9562,boxUl:9564,boxUr:9561,boxVH:9580,boxVL:9571,boxVR:9568,boxVh:9579,boxVl:9570,boxVr:9567,boxdL:9557,boxdR:9554,boxdl:9488,boxdr:9484,boxhD:9573,boxhU:9576,boxhd:9516,boxhu:9524,boxuL:9563,boxuR:9560,boxul:9496,boxur:9492,boxvH:9578,boxvL:9569,boxvR:9566,boxvh:9532,boxvl:9508,boxvr:9500,breve:728,bsemi:8271,bsime:8909,bsolb:10693,bumpE:10926,bumpe:8783,caret:8257,caron:711,ccaps:10829,ccirc:265,ccups:10828,cedil:184,check:10003,clubs:9827,colon:58,comma:44,crarr:8629,cross:10007,csube:10961,csupe:10962,ctdot:8943,cuepr:8926,cuesc:8927,cupor:10821,cuvee:8910,cuwed:8911,cwint:8753,dashv:8867,dblac:733,ddarr:8650,delta:948,dharl:8643,dharr:8642,diams:9830,disin:8946,doteq:8784,dtdot:8945,dtrif:9662,duarr:8693,duhar:10607,eDDot:10871,ecirc:234,efDot:8786,emacr:275,empty:8709,eogon:281,eplus:10865,epsiv:949,eqsim:8770,equiv:8801,erDot:8787,erarr:10609,esdot:8784,exist:8707,fflig:64256,filig:64257,fllig:64258,fltns:9649,forkv:10969,frasl:8260,frown:8994,gamma:947,gcirc:285,gescc:10921,gimel:8503,gneqq:8809,gnsim:8935,grave:96,gsime:10894,gsiml:10896,gtcir:10874,gtdot:8919,harrw:8621,hcirc:293,hoarr:8703,icirc:238,iexcl:161,iiint:8749,iiota:8489,ijlig:307,imacr:299,image:8465,imath:305,imped:437,infin:8734,iogon:303,iprod:10812,isinE:8953,isins:8948,isinv:8712,iukcy:1110,jcirc:309,jmath:567,jukcy:1108,kappa:954,lAarr:8666,lBarr:10510,langd:10641,laquo:171,larrb:8676,lbarr:10508,lbbrk:10098,lbrke:10635,lceil:8968,ldquo:8220,lescc:10920,lhard:8637,lharu:8636,lhblk:9604,llarr:8647,lltri:9722,lneqq:8808,lnsim:8934,loang:10220,loarr:8701,lobrk:10214,lopar:10629,lrarr:8646,lrhar:8651,lrtri:8895,lsime:10893,lsimg:10895,lsquo:8216,ltcir:10873,ltdot:8918,ltrie:8884,ltrif:9666,mDDot:8762,mdash:8212,micro:181,minus:8722,mumap:8888,nabla:8711,napos:329,natur:9838,ncong:8775,ndash:8211,neArr:8663,nearr:8599,ngsim:8821,nhArr:8654,nharr:8622,nhpar:10994,nlArr:8653,nlarr:8602,nless:8814,nlsim:8820,nltri:8938,notin:8713,notni:8716,nprec:8832,nrArr:8655,nrarr:8603,nrtri:8939,nsime:8772,nsmid:8740,nspar:8742,nsube:8840,nsucc:8833,nsupe:8841,numsp:8199,nwArr:8662,nwarr:8598,ocirc:244,odash:8861,oelig:339,ofcir:10687,ohbar:10677,olarr:8634,olcir:10686,oline:8254,omacr:333,omega:969,operp:10681,oplus:8853,orarr:8635,order:8500,ovbar:9021,parsl:11005,phone:9742,plusb:8862,pluse:10866,pound:163,prcue:8828,prime:8242,prnap:10937,prsim:8830,quest:63,rAarr:8667,rBarr:10511,radic:8730,rangd:10642,range:10661,raquo:187,rarrb:8677,rarrc:10547,rarrw:8605,ratio:8758,rbarr:10509,rbbrk:10099,rbrke:10636,rceil:8969,rdquo:8221,reals:8477,rhard:8641,rharu:8640,rlarr:8644,rlhar:8652,rnmid:10990,roang:10221,roarr:8702,robrk:10215,ropar:10630,rrarr:8649,rsquo:8217,rtrie:8885,rtrif:9656,sbquo:8218,sccue:8829,scirc:349,scnap:10938,scsim:8831,sdotb:8865,sdote:10854,seArr:8664,searr:8600,setmn:8726,sharp:9839,sigma:963,simeq:8771,simgE:10912,simlE:10911,simne:8774,slarr:8592,smile:8995,sqcap:8851,sqcup:8852,sqsub:8847,sqsup:8848,srarr:8594,starf:9733,strns:175,subnE:10955,subne:8842,supnE:10956,supne:8843,swArr:8665,swarr:8601,szlig:223,theta:952,thkap:8776,thorn:254,tilde:732,times:215,trade:8482,trisb:10701,tshcy:1115,twixt:8812,ubrcy:1118,ucirc:251,udarr:8645,udhar:10606,uharl:8639,uharr:8638,uhblk:9600,ultri:9720,umacr:363,uogon:371,uplus:8846,upsih:978,uring:367,urtri:9721,utdot:8944,utrif:9652,uuarr:8648,vBarv:10985,vDash:8872,varpi:982,vdash:8866,veeeq:8794,vltri:8882,vprop:8733,vrtri:8883,wcirc:373,wedge:8743,xcirc:9711,xdtri:9661,xhArr:10234,xharr:10231,xlArr:10232,xlarr:10229,xodot:10752,xrArr:10233,xrarr:10230,xutri:9651,ycirc:375,Aopf:120120,Ascr:119964,Auml:196,Barv:10983,Beta:914,Bopf:120121,Bscr:8492,CHcy:1063,COPY:169,Cdot:266,Copf:8450,Cscr:119966,DJcy:1026,DScy:1029,DZcy:1039,Darr:8609,Dopf:120123,Dscr:119967,Edot:278,Eopf:120124,Escr:8496,Esim:10867,Euml:203,Fopf:120125,Fscr:8497,GJcy:1027,Gdot:288,Gopf:120126,Gscr:119970,Hopf:8461,Hscr:8459,IEcy:1045,IOcy:1025,Idot:304,Iopf:120128,Iota:921,Iscr:8464,Iuml:207,Jopf:120129,Jscr:119973,KHcy:1061,KJcy:1036,Kopf:120130,Kscr:119974,LJcy:1033,Lang:10218,Larr:8606,Lopf:120131,Lscr:8466,Mopf:120132,Mscr:8499,NJcy:1034,Nopf:8469,Nscr:119977,Oopf:120134,Oscr:119978,Ouml:214,Popf:8473,Pscr:119979,QUOT:34,Qopf:8474,Qscr:119980,Rang:10219,Rarr:8608,Ropf:8477,Rscr:8475,SHcy:1064,Sopf:120138,Sqrt:8730,Sscr:119982,Star:8902,TScy:1062,Topf:120139,Tscr:119983,Uarr:8607,Uopf:120140,Upsi:978,Uscr:119984,Uuml:220,Vbar:10987,Vert:8214,Vopf:120141,Vscr:119985,Wopf:120142,Wscr:119986,Xopf:120143,Xscr:119987,YAcy:1071,YIcy:1031,YUcy:1070,Yopf:120144,Yscr:119988,Yuml:376,ZHcy:1046,Zdot:379,Zeta:918,Zopf:8484,Zscr:119989,andd:10844,andv:10842,ange:10660,aopf:120146,apid:8779,apos:39,ascr:119990,auml:228,bNot:10989,bbrk:9141,beta:946,beth:8502,bnot:8976,bopf:120147,boxH:9552,boxV:9553,boxh:9472,boxv:9474,bscr:119991,bsim:8765,bsol:92,bull:8226,bump:8782,cdot:267,cent:162,chcy:1095,cirE:10691,circ:710,cire:8791,comp:8705,cong:8773,copf:120148,copy:169,cscr:119992,csub:10959,csup:10960,dArr:8659,dHar:10597,darr:8595,dash:8208,diam:8900,djcy:1106,dopf:120149,dscr:119993,dscy:1109,dsol:10742,dtri:9663,dzcy:1119,eDot:8785,ecir:8790,edot:279,emsp:8195,ensp:8194,eopf:120150,epar:8917,epsi:1013,escr:8495,esim:8770,euml:235,euro:8364,excl:33,flat:9837,fnof:402,fopf:120151,fork:8916,fscr:119995,gdot:289,geqq:8807,gjcy:1107,gnap:10890,gneq:10888,gopf:120152,gscr:8458,gsim:8819,gtcc:10919,hArr:8660,half:189,harr:8596,hbar:8463,hopf:120153,hscr:119997,iecy:1077,imof:8887,iocy:1105,iopf:120154,iota:953,iscr:119998,isin:8712,iuml:239,jopf:120155,jscr:119999,khcy:1093,kjcy:1116,kopf:120156,kscr:120000,lArr:8656,lHar:10594,lang:10216,larr:8592,late:10925,lcub:123,ldca:10550,ldsh:8626,leqq:8806,ljcy:1113,lnap:10889,lneq:10887,lopf:120157,lozf:10731,lpar:40,lscr:120001,lsim:8818,lsqb:91,ltcc:10918,ltri:9667,macr:175,male:9794,malt:10016,mlcp:10971,mldr:8230,mopf:120158,mscr:120002,nbsp:160,ncap:10819,ncup:10818,ngeq:8817,ngtr:8815,nisd:8954,njcy:1114,nldr:8229,nleq:8816,nmid:8740,nopf:120159,npar:8742,nscr:120003,nsim:8769,nsub:8836,nsup:8837,ntgl:8825,ntlg:8824,oast:8859,ocir:8858,odiv:10808,odot:8857,ogon:731,oint:8750,omid:10678,oopf:120160,opar:10679,ordf:170,ordm:186,oror:10838,oscr:8500,osol:8856,ouml:246,para:182,part:8706,perp:8869,phiv:966,plus:43,popf:120161,prap:10935,prec:8826,prnE:10933,prod:8719,prop:8733,pscr:120005,qint:10764,qopf:120162,qscr:120006,quot:34,rArr:8658,rHar:10596,race:10714,rang:10217,rarr:8594,rcub:125,rdca:10551,rdsh:8627,real:8476,rect:9645,rhov:1009,ring:730,ropf:120163,rpar:41,rscr:120007,rsqb:93,rtri:9657,scap:10936,scnE:10934,sdot:8901,sect:167,semi:59,sext:10038,shcy:1096,sime:8771,simg:10910,siml:10909,smid:8739,smte:10924,solb:10692,sopf:120164,spar:8741,squf:9642,sscr:120008,star:9734,subE:10949,sube:8838,succ:8827,sung:9834,sup1:185,sup2:178,sup3:179,supE:10950,supe:8839,tbrk:9140,tdot:8411,tint:8749,toea:10536,topf:120165,tosa:10537,trie:8796,tscr:120009,tscy:1094,uArr:8657,uHar:10595,uarr:8593,uopf:120166,upsi:965,uscr:120010,utri:9653,uuml:252,vArr:8661,vBar:10984,varr:8597,vert:124,vopf:120167,vscr:120011,wopf:120168,wscr:120012,xcap:8898,xcup:8899,xmap:10236,xnis:8955,xopf:120169,xscr:120013,xvee:8897,yacy:1103,yicy:1111,yopf:120170,yscr:120014,yucy:1102,yuml:255,zdot:380,zeta:950,zhcy:1078,zopf:120171,zscr:120015,zwnj:8204,AMP:38,Acy:1040,Afr:120068,And:10835,Bcy:1041,Bfr:120069,Cap:8914,Cfr:8493,Chi:935,Cup:8915,Dcy:1044,Del:8711,Dfr:120071,Dot:168,ENG:330,ETH:208,Ecy:1069,Efr:120072,Eta:919,Fcy:1060,Ffr:120073,Gcy:1043,Gfr:120074,Hat:94,Hfr:8460,Icy:1048,Ifr:8465,Int:8748,Jcy:1049,Jfr:120077,Kcy:1050,Kfr:120078,Lcy:1051,Lfr:120079,Lsh:8624,Map:10501,Mcy:1052,Mfr:120080,Ncy:1053,Nfr:120081,Not:10988,Ocy:1054,Ofr:120082,Pcy:1055,Pfr:120083,Phi:934,Psi:936,Qfr:120084,REG:174,Rcy:1056,Rfr:8476,Rho:929,Rsh:8625,Scy:1057,Sfr:120086,Sub:8912,Sum:8721,Sup:8913,Tab:9,Tau:932,Tcy:1058,Tfr:120087,Ucy:1059,Ufr:120088,Vcy:1042,Vee:8897,Vfr:120089,Wfr:120090,Xfr:120091,Ycy:1067,Yfr:120092,Zcy:1047,Zfr:8488,acd:8767,acy:1072,afr:120094,amp:38,and:8743,ang:8736,apE:10864,ape:8778,ast:42,bcy:1073,bfr:120095,bot:8869,cap:8745,cfr:120096,chi:967,cir:9675,cup:8746,dcy:1076,deg:176,dfr:120097,die:168,div:247,dot:729,ecy:1101,efr:120098,egs:10902,ell:8467,els:10901,eng:331,eta:951,eth:240,fcy:1092,ffr:120099,gEl:10892,gap:10886,gcy:1075,gel:8923,geq:8805,ges:10878,gfr:120100,ggg:8921,glE:10898,gla:10917,glj:10916,gnE:8809,gne:10888,hfr:120101,icy:1080,iff:8660,ifr:120102,int:8747,jcy:1081,jfr:120103,kcy:1082,kfr:120104,lEg:10891,lap:10885,lat:10923,lcy:1083,leg:8922,leq:8804,les:10877,lfr:120105,lgE:10897,lnE:8808,lne:10887,loz:9674,lrm:8206,lsh:8624,map:8614,mcy:1084,mfr:120106,mho:8487,mid:8739,nap:8777,ncy:1085,nfr:120107,nge:8817,ngt:8815,nis:8956,niv:8715,nle:8816,nlt:8814,not:172,npr:8832,nsc:8833,num:35,ocy:1086,ofr:120108,ogt:10689,ohm:8486,olt:10688,ord:10845,orv:10843,par:8741,pcy:1087,pfr:120109,phi:966,piv:982,prE:10931,pre:10927,psi:968,qfr:120110,rcy:1088,reg:174,rfr:120111,rho:961,rlm:8207,rsh:8625,scE:10932,sce:10928,scy:1089,sfr:120112,shy:173,sim:8764,smt:10922,sol:47,squ:9633,sub:8834,sum:8721,sup:8835,tau:964,tcy:1090,tfr:120113,top:8868,ucy:1091,ufr:120114,uml:168,vcy:1074,vee:8744,vfr:120115,wfr:120116,xfr:120117,ycy:1099,yen:165,yfr:120118,zcy:1079,zfr:120119,zwj:8205,DD:8517,GT:62,Gg:8921,Gt:8811,Im:8465,LT:60,Ll:8920,Lt:8810,Mu:924,Nu:925,Or:10836,Pi:928,Pr:10939,Re:8476,Sc:10940,Xi:926,ac:8766,af:8289,ap:8776,dd:8518,ee:8519,eg:10906,el:10905,gE:8807,ge:8805,gg:8811,gl:8823,gt:62,ic:8291,ii:8520,in:8712,it:8290,lE:8806,le:8804,lg:8822,ll:8810,lt:60,mp:8723,mu:956,ne:8800,ni:8715,nu:957,oS:9416,or:8744,pi:960,pm:177,pr:8826,rx:8478,sc:8827,wp:8472,wr:8768,xi:958};var windows_1252=[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376];var entity_pattern=new RegExp(\"&(#?(?:x[\\\\w\\\\d]+|\\\\d+|\".concat(Object.keys(entities).join('|'),\"))(?:;|\\\\b)\"),'g');function decode_character_references(html){return html.replace(entity_pattern,function(match,entity){var code;// Handle named entities\nif(entity[0]!=='#'){code=entities[entity];}else if(entity[1]==='x'){code=parseInt(entity.substring(2),16);}else{code=parseInt(entity.substring(1),10);}if(!code){return match;}return String.fromCodePoint(validate_code(code));});}var NUL=0;// some code points are verboten. If we were inserting HTML, the browser would replace the illegal\n// code points with alternatives in some cases - since we're bypassing that mechanism, we need\n// to replace them ourselves\n//\n// Source: http://en.wikipedia.org/wiki/Character_encodings_in_HTML#Illegal_characters\nfunction validate_code(code){// line feed becomes generic whitespace\nif(code===10){return 32;}// ASCII range. (Why someone would use HTML entities for ASCII characters I don't know, but...)\nif(code<128){return code;}// code points 128-159 are dealt with leniently by browsers, but they're incorrect. We need\n// to correct the mistake or we'll end up with missing € signs and so on\nif(code<=159){return windows_1252[code-128];}// basic multilingual plane\nif(code<55296){return code;}// UTF-16 surrogate halves\nif(code<=57343){return NUL;}// rest of the basic multilingual plane\nif(code<=65535){return code;}// supplementary multilingual plane 0x10000 - 0x1ffff\nif(code>=65536&&code<=131071){return code;}// supplementary ideographic plane 0x20000 - 0x2ffff\nif(code>=131072&&code<=196607){return code;}return NUL;}// based on http://developers.whatwg.org/syntax.html#syntax-tag-omission\nvar disallowed_contents=new Map([['li',new Set(['li'])],['dt',new Set(['dt','dd'])],['dd',new Set(['dt','dd'])],['p',new Set('address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul'.split(' '))],['rt',new Set(['rt','rp'])],['rp',new Set(['rt','rp'])],['optgroup',new Set(['optgroup'])],['option',new Set(['option','optgroup'])],['thead',new Set(['tbody','tfoot'])],['tbody',new Set(['tbody','tfoot'])],['tfoot',new Set(['tbody'])],['tr',new Set(['tr','tbody'])],['td',new Set(['td','th','tr'])],['th',new Set(['td','th','tr'])]]);// can this be a child of the parent element, or does it implicitly\n// close it, like `<li>one<li>two`?\nfunction closing_tag_omitted(current,next){if(disallowed_contents.has(current)){if(!next||disallowed_contents.get(current).has(next)){return true;}}return false;}// eslint-disable-next-line no-useless-escape\nvar valid_tag_name=/^\\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\\-]*/;var meta_tags=new Map([['svelte:head','Head'],['svelte:options','Options'],['svelte:window','Window'],['svelte:body','Body']]);var valid_meta_tags=Array.from(meta_tags.keys()).concat('svelte:self','svelte:component','svelte:fragment');var specials=new Map([['script',{read:read_script,property:'js'}],['style',{read:read_style,property:'css'}]]);var SELF=/^svelte:self(?=[\\s/>])/;var COMPONENT=/^svelte:component(?=[\\s/>])/;var SLOT=/^svelte:fragment(?=[\\s/>])/;function parent_is_head(stack){var i=stack.length;while(i--){var type=stack[i].type;if(type==='Head')return true;if(type==='Element'||type==='InlineComponent')return false;}return false;}function tag(parser){var start=parser.index++;var parent=parser.current();if(parser.eat('!--')){var _data=parser.read_until(/-->/);parser.eat('-->',true,parser_errors.unclosed_comment);parser.current().children.push({start:start,end:parser.index,type:'Comment',data:_data,ignores:extract_svelte_ignore(_data)});return;}var is_closing_tag=parser.eat('/');var name=read_tag_name(parser);if(meta_tags.has(name)){var slug=meta_tags.get(name).toLowerCase();if(is_closing_tag){if((name==='svelte:window'||name==='svelte:body')&&parser.current().children.length){parser.error(parser_errors.invalid_element_content(slug,name),parser.current().children[0].start);}}else{if(name in parser.meta_tags){parser.error(parser_errors.duplicate_element(slug,name),start);}if(parser.stack.length>1){parser.error(parser_errors.invalid_element_placement(slug,name),start);}parser.meta_tags[name]=true;}}var type=meta_tags.has(name)?meta_tags.get(name):/[A-Z]/.test(name[0])||name==='svelte:self'||name==='svelte:component'?'InlineComponent':name==='svelte:fragment'?'SlotTemplate':name==='title'&&parent_is_head(parser.stack)?'Title':name==='slot'&&!parser.customElement?'Slot':'Element';var element={start:start,end:null,type:type,name:name,attributes:[],children:[]};parser.allow_whitespace();if(is_closing_tag){if(is_void(name)){parser.error(parser_errors.invalid_void_content(name),start);}parser.eat('>',true);// close any elements that don't have their own closing tags, e.g. <div><p></div>\nwhile(parent.name!==name){if(parent.type!=='Element'){var _error=parser.last_auto_closed_tag&&parser.last_auto_closed_tag.tag===name?parser_errors.invalid_closing_tag_autoclosed(name,parser.last_auto_closed_tag.reason):parser_errors.invalid_closing_tag_unopened(name);parser.error(_error,start);}parent.end=start;parser.stack.pop();parent=parser.current();}parent.end=parser.index;parser.stack.pop();if(parser.last_auto_closed_tag&&parser.stack.length<parser.last_auto_closed_tag.depth){parser.last_auto_closed_tag=null;}return;}else if(closing_tag_omitted(parent.name,name)){parent.end=start;parser.stack.pop();parser.last_auto_closed_tag={tag:parent.name,reason:name,depth:parser.stack.length};}var unique_names=new Set();var attribute;while(attribute=read_attribute(parser,unique_names)){element.attributes.push(attribute);parser.allow_whitespace();}if(name==='svelte:component'){var index=element.attributes.findIndex(function(attr){return attr.type==='Attribute'&&attr.name==='this';});if(!~index){parser.error(parser_errors.missing_component_definition,start);}var definition=element.attributes.splice(index,1)[0];if(definition.value===true||definition.value.length!==1||definition.value[0].type==='Text'){parser.error(parser_errors.invalid_component_definition,definition.start);}element.expression=definition.value[0].expression;}// special cases – top-level <script> and <style>\nif(specials.has(name)&&parser.stack.length===1){var special=specials.get(name);parser.eat('>',true);var content=special.read(parser,start,element.attributes);if(content)parser[special.property].push(content);return;}parser.current().children.push(element);var self_closing=parser.eat('/')||is_void(name);parser.eat('>',true);if(self_closing){// don't push self-closing elements onto the stack\nelement.end=parser.index;}else if(name==='textarea'){// special case\nelement.children=read_sequence(parser,function(){return /^<\\/textarea(\\s[^>]*)?>/i.test(parser.template.slice(parser.index));});parser.read(/^<\\/textarea(\\s[^>]*)?>/i);element.end=parser.index;}else if(name==='script'||name==='style'){// special case\nvar _start=parser.index;var _data2=parser.read_until(new RegExp(\"</\".concat(name,\">\")));var end=parser.index;element.children.push({start:_start,end:end,type:'Text',data:_data2});parser.eat(\"</\".concat(name,\">\"),true);element.end=parser.index;}else{parser.stack.push(element);}}function read_tag_name(parser){var start=parser.index;if(parser.read(SELF)){// check we're inside a block, otherwise this\n// will cause infinite recursion\nvar _i30=parser.stack.length;var legal=false;while(_i30--){var _fragment=parser.stack[_i30];if(_fragment.type==='IfBlock'||_fragment.type==='EachBlock'||_fragment.type==='InlineComponent'){legal=true;break;}}if(!legal){parser.error(parser_errors.invalid_self_placement,start);}return'svelte:self';}if(parser.read(COMPONENT))return'svelte:component';if(parser.read(SLOT))return'svelte:fragment';var name=parser.read_until(/(\\s|\\/|>)/);if(meta_tags.has(name))return name;if(name.startsWith('svelte:')){var match=fuzzymatch(name.slice(7),valid_meta_tags);parser.error(parser_errors.invalid_tag_name_svelte_element(valid_meta_tags,match),start);}if(!valid_tag_name.test(name)){parser.error(parser_errors.invalid_tag_name,start);}return name;}function read_attribute(parser,unique_names){var start=parser.index;function check_unique(name){if(unique_names.has(name)){parser.error(parser_errors.duplicate_attribute,start);}unique_names.add(name);}if(parser.eat('{')){parser.allow_whitespace();if(parser.eat('...')){var _expression3=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);return{start:start,end:parser.index,type:'Spread',expression:_expression3};}else{var value_start=parser.index;var _name2=parser.read_identifier();parser.allow_whitespace();parser.eat('}',true);if(_name2===null){parser.error(parser_errors.empty_attribute_shorthand,start);}check_unique(_name2);return{start:start,end:parser.index,type:'Attribute',name:_name2,value:[{start:value_start,end:value_start+_name2.length,type:'AttributeShorthand',expression:{start:value_start,end:value_start+_name2.length,type:'Identifier',name:_name2}}]};}}// eslint-disable-next-line no-useless-escape\nvar name=parser.read_until(/[\\s=\\/>\"']/);if(!name)return null;var end=parser.index;parser.allow_whitespace();var colon_index=name.indexOf(':');var type=colon_index!==-1&&get_directive_type(name.slice(0,colon_index));var value=true;if(parser.eat('=')){parser.allow_whitespace();value=read_attribute_value(parser);end=parser.index;}else if(parser.match_regex(/[\"']/)){parser.error(parser_errors.unexpected_token('='),parser.index);}if(type){var _name$slice$split=name.slice(colon_index+1).split('|'),_name$slice$split2=(0,_toArray2.default)(_name$slice$split),directive_name=_name$slice$split2[0],modifiers=_name$slice$split2.slice(1);if(directive_name===''){parser.error(parser_errors.empty_directive_name(type),start+colon_index+1);}if(type==='Binding'&&directive_name!=='this'){check_unique(directive_name);}else if(type!=='EventHandler'&&type!=='Action'){check_unique(name);}if(type==='Ref'){parser.error(parser_errors.invalid_ref_directive(directive_name),start);}if(type==='StyleDirective'){return{start:start,end:end,type:type,name:directive_name,value:value};}var first_value=value[0];var _expression4=null;if(first_value){var attribute_contains_text=value.length>1||first_value.type==='Text';if(attribute_contains_text){parser.error(parser_errors.invalid_directive_value,first_value.start);}else{_expression4=first_value.expression;}}var directive={start:start,end:end,type:type,name:directive_name,modifiers:modifiers,expression:_expression4};if(type==='Transition'){var direction=name.slice(0,colon_index);directive.intro=direction==='in'||direction==='transition';directive.outro=direction==='out'||direction==='transition';}// Directive name is expression, e.g. <p class:isRed />\nif(!directive.expression&&(type==='Binding'||type==='Class')){directive.expression={start:directive.start+colon_index+1,end:directive.end,type:'Identifier',name:directive.name};}return directive;}check_unique(name);return{start:start,end:end,type:'Attribute',name:name,value:value};}function get_directive_type(name){if(name==='use')return'Action';if(name==='animate')return'Animation';if(name==='bind')return'Binding';if(name==='class')return'Class';if(name==='style')return'StyleDirective';if(name==='on')return'EventHandler';if(name==='let')return'Let';if(name==='ref')return'Ref';if(name==='in'||name==='out'||name==='transition')return'Transition';}function read_attribute_value(parser){var quote_mark=parser.eat(\"'\")?\"'\":parser.eat('\"')?'\"':null;if(quote_mark&&parser.eat(quote_mark)){return[{start:parser.index-1,end:parser.index-1,type:'Text',raw:'',data:''}];}var regex=quote_mark===\"'\"?/'/:quote_mark==='\"'?/\"/:/(\\/>|[\\s\"'=<>`])/;var value;try{value=read_sequence(parser,function(){return!!parser.match_regex(regex);});}catch(error){if(error.code==='parse-error'){// if the attribute value didn't close + self-closing tag\n// eg: `<Component test={{a:1} />`\n// acorn may throw a `Unterminated regular expression` because of `/>`\nif(parser.template.slice(error.pos-1,error.pos+1)==='/>'){parser.index=error.pos;parser.error(parser_errors.unclosed_attribute_value(quote_mark||'}'));}}throw error;}if(value.length===0&&!quote_mark){parser.error(parser_errors.missing_attribute_value);}if(quote_mark)parser.index+=1;return value;}function read_sequence(parser,done){var current_chunk={start:parser.index,end:null,type:'Text',raw:'',data:null};var chunks=[];function flush(end){if(current_chunk.raw){current_chunk.data=decode_character_references(current_chunk.raw);current_chunk.end=end;chunks.push(current_chunk);}}while(parser.index<parser.template.length){var index=parser.index;if(done()){flush(parser.index);return chunks;}else if(parser.eat('{')){flush(parser.index-1);parser.allow_whitespace();var _expression5=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);chunks.push({start:index,end:parser.index,type:'MustacheTag',expression:_expression5});current_chunk={start:parser.index,end:null,type:'Text',raw:'',data:null};}else{current_chunk.raw+=parser.template[parser.index++];}}parser.error(parser_errors.unexpected_eof);}var SQUARE_BRACKET_OPEN='['.charCodeAt(0);var SQUARE_BRACKET_CLOSE=']'.charCodeAt(0);var CURLY_BRACKET_OPEN='{'.charCodeAt(0);var CURLY_BRACKET_CLOSE='}'.charCodeAt(0);function is_bracket_open(code){return code===SQUARE_BRACKET_OPEN||code===CURLY_BRACKET_OPEN;}function is_bracket_close(code){return code===SQUARE_BRACKET_CLOSE||code===CURLY_BRACKET_CLOSE;}function is_bracket_pair(open,close){return open===SQUARE_BRACKET_OPEN&&close===SQUARE_BRACKET_CLOSE||open===CURLY_BRACKET_OPEN&&close===CURLY_BRACKET_CLOSE;}function get_bracket_close(open){if(open===SQUARE_BRACKET_OPEN){return SQUARE_BRACKET_CLOSE;}if(open===CURLY_BRACKET_OPEN){return CURLY_BRACKET_CLOSE;}}function read_context(parser){var start=parser.index;var i=parser.index;var code=full_char_code_at(parser.template,i);if(isIdentifierStart(code,true)){return{type:'Identifier',name:parser.read_identifier(),start:start,end:parser.index};}if(!is_bracket_open(code)){parser.error(parser_errors.unexpected_token_destructure);}var bracket_stack=[code];i+=code<=0xffff?1:2;while(i<parser.template.length){var _code=full_char_code_at(parser.template,i);if(is_bracket_open(_code)){bracket_stack.push(_code);}else if(is_bracket_close(_code)){if(!is_bracket_pair(bracket_stack[bracket_stack.length-1],_code)){parser.error(parser_errors.unexpected_token(String.fromCharCode(get_bracket_close(bracket_stack[bracket_stack.length-1]))));}bracket_stack.pop();if(bracket_stack.length===0){i+=_code<=0xffff?1:2;break;}}i+=_code<=0xffff?1:2;}parser.index=i;var pattern_string=parser.template.slice(start,i);try{// the length of the `space_with_newline` has to be start - 1\n// because we added a `(` in front of the pattern_string,\n// which shifted the entire string to right by 1\n// so we offset it by removing 1 character in the `space_with_newline`\n// to achieve that, we remove the 1st space encountered,\n// so it will not affect the `column` of the node\nvar space_with_newline=parser.template.slice(0,start).replace(/[^\\n]/g,' ');var first_space=space_with_newline.indexOf(' ');space_with_newline=space_with_newline.slice(0,first_space)+space_with_newline.slice(first_space+1);return parse_expression_at(\"\".concat(space_with_newline,\"(\").concat(pattern_string,\" = 1)\"),start-1).left;}catch(error){parser.acorn_error(error);}}function trim_start(str){return str.replace(start_whitespace,'');}function trim_end(str){return str.replace(end_whitespace,'');}function to_string(node){switch(node.type){case'IfBlock':return'{#if} block';case'ThenBlock':return'{:then} block';case'ElseBlock':return'{:else} block';case'PendingBlock':case'AwaitBlock':return'{#await} block';case'CatchBlock':return'{:catch} block';case'EachBlock':return'{#each} block';case'RawMustacheTag':return'{@html} block';case'DebugTag':return'{@debug} block';case'ConstTag':return'{@const} tag';case'Element':case'InlineComponent':case'Slot':case'Title':return\"<\".concat(node.name,\"> tag\");default:return node.type;}}function trim_whitespace(block,trim_before,trim_after){if(!block.children||block.children.length===0)return;// AwaitBlock\nvar first_child=block.children[0];var last_child=block.children[block.children.length-1];if(first_child.type==='Text'&&trim_before){first_child.data=trim_start(first_child.data);if(!first_child.data)block.children.shift();}if(last_child.type==='Text'&&trim_after){last_child.data=trim_end(last_child.data);if(!last_child.data)block.children.pop();}if(block.else){trim_whitespace(block.else,trim_before,trim_after);}if(first_child.elseif){trim_whitespace(first_child,trim_before,trim_after);}}function mustache(parser){var start=parser.index;parser.index+=1;parser.allow_whitespace();// {/if}, {/each}, {/await} or {/key}\nif(parser.eat('/')){var block=parser.current();var expected;if(closing_tag_omitted(block.name)){block.end=start;parser.stack.pop();block=parser.current();}if(block.type==='ElseBlock'||block.type==='PendingBlock'||block.type==='ThenBlock'||block.type==='CatchBlock'){block.end=start;parser.stack.pop();block=parser.current();expected='await';}if(block.type==='IfBlock'){expected='if';}else if(block.type==='EachBlock'){expected='each';}else if(block.type==='AwaitBlock'){expected='await';}else if(block.type==='KeyBlock'){expected='key';}else{parser.error(parser_errors.unexpected_block_close);}parser.eat(expected,true);parser.allow_whitespace();parser.eat('}',true);while(block.elseif){block.end=parser.index;parser.stack.pop();block=parser.current();if(block.else){block.else.end=start;}}// strip leading/trailing whitespace as necessary\nvar char_before=parser.template[block.start-1];var char_after=parser.template[parser.index];var trim_before=!char_before||whitespace.test(char_before);var trim_after=!char_after||whitespace.test(char_after);trim_whitespace(block,trim_before,trim_after);block.end=parser.index;parser.stack.pop();}else if(parser.eat(':else')){if(parser.eat('if')){parser.error(parser_errors.invalid_elseif);}parser.allow_whitespace();// :else if\nif(parser.eat('if')){var _block2=parser.current();if(_block2.type!=='IfBlock'){parser.error(parser.stack.some(function(block){return block.type==='IfBlock';})?parser_errors.invalid_elseif_placement_unclosed_block(to_string(_block2)):parser_errors.invalid_elseif_placement_outside_if);}parser.require_whitespace();var _expression6=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);_block2.else={start:parser.index,end:null,type:'ElseBlock',children:[{start:parser.index,end:null,type:'IfBlock',elseif:true,expression:_expression6,children:[]}]};parser.stack.push(_block2.else.children[0]);}else{// :else\nvar _block3=parser.current();if(_block3.type!=='IfBlock'&&_block3.type!=='EachBlock'){parser.error(parser.stack.some(function(block){return block.type==='IfBlock'||block.type==='EachBlock';})?parser_errors.invalid_else_placement_unclosed_block(to_string(_block3)):parser_errors.invalid_else_placement_outside_if);}parser.allow_whitespace();parser.eat('}',true);_block3.else={start:parser.index,end:null,type:'ElseBlock',children:[]};parser.stack.push(_block3.else);}}else if(parser.match(':then')||parser.match(':catch')){var _block4=parser.current();var is_then=parser.eat(':then')||!parser.eat(':catch');if(is_then){if(_block4.type!=='PendingBlock'){parser.error(parser.stack.some(function(block){return block.type==='PendingBlock';})?parser_errors.invalid_then_placement_unclosed_block(to_string(_block4)):parser_errors.invalid_then_placement_without_await);}}else{if(_block4.type!=='ThenBlock'&&_block4.type!=='PendingBlock'){parser.error(parser.stack.some(function(block){return block.type==='ThenBlock'||block.type==='PendingBlock';})?parser_errors.invalid_catch_placement_unclosed_block(to_string(_block4)):parser_errors.invalid_catch_placement_without_await);}}_block4.end=start;parser.stack.pop();var await_block=parser.current();if(!parser.eat('}')){parser.require_whitespace();await_block[is_then?'value':'error']=read_context(parser);parser.allow_whitespace();parser.eat('}',true);}var new_block={start:start,end:null,type:is_then?'ThenBlock':'CatchBlock',children:[],skip:false};await_block[is_then?'then':'catch']=new_block;parser.stack.push(new_block);}else if(parser.eat('#')){// {#if foo}, {#each foo} or {#await foo}\nvar type;if(parser.eat('if')){type='IfBlock';}else if(parser.eat('each')){type='EachBlock';}else if(parser.eat('await')){type='AwaitBlock';}else if(parser.eat('key')){type='KeyBlock';}else{parser.error(parser_errors.expected_block_type);}parser.require_whitespace();var _expression7=read_expression(parser);var _block5=type==='AwaitBlock'?{start:start,end:null,type:type,expression:_expression7,value:null,error:null,pending:{start:null,end:null,type:'PendingBlock',children:[],skip:true},then:{start:null,end:null,type:'ThenBlock',children:[],skip:true},catch:{start:null,end:null,type:'CatchBlock',children:[],skip:true}}:{start:start,end:null,type:type,expression:_expression7,children:[]};parser.allow_whitespace();// {#each} blocks must declare a context – {#each list as item}\nif(type==='EachBlock'){parser.eat('as',true);parser.require_whitespace();_block5.context=read_context(parser);parser.allow_whitespace();if(parser.eat(',')){parser.allow_whitespace();_block5.index=parser.read_identifier();if(!_block5.index)parser.error(parser_errors.expected_name);parser.allow_whitespace();}if(parser.eat('(')){parser.allow_whitespace();_block5.key=read_expression(parser);parser.allow_whitespace();parser.eat(')',true);parser.allow_whitespace();}}var await_block_shorthand=type==='AwaitBlock'&&parser.eat('then');if(await_block_shorthand){if(parser.match_regex(/\\s*}/)){parser.allow_whitespace();}else{parser.require_whitespace();_block5.value=read_context(parser);parser.allow_whitespace();}}var await_block_catch_shorthand=!await_block_shorthand&&type==='AwaitBlock'&&parser.eat('catch');if(await_block_catch_shorthand){if(parser.match_regex(/\\s*}/)){parser.allow_whitespace();}else{parser.require_whitespace();_block5.error=read_context(parser);parser.allow_whitespace();}}parser.eat('}',true);parser.current().children.push(_block5);parser.stack.push(_block5);if(type==='AwaitBlock'){var child_block;if(await_block_shorthand){_block5.then.skip=false;child_block=_block5.then;}else if(await_block_catch_shorthand){_block5.catch.skip=false;child_block=_block5.catch;}else{_block5.pending.skip=false;child_block=_block5.pending;}child_block.start=parser.index;parser.stack.push(child_block);}}else if(parser.eat('@html')){// {@html content} tag\nparser.require_whitespace();var _expression8=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);parser.current().children.push({start:start,end:parser.index,type:'RawMustacheTag',expression:_expression8});}else if(parser.eat('@debug')){var identifiers;// Implies {@debug} which indicates \"debug all\"\nif(parser.read(/\\s*}/)){identifiers=[];}else{var _expression9=read_expression(parser);identifiers=_expression9.type==='SequenceExpression'?_expression9.expressions:[_expression9];identifiers.forEach(function(node){if(node.type!=='Identifier'){parser.error(parser_errors.invalid_debug_args,node.start);}});parser.allow_whitespace();parser.eat('}',true);}parser.current().children.push({start:start,end:parser.index,type:'DebugTag',identifiers:identifiers});}else if(parser.eat('@const')){// {@const a = b}\nparser.require_whitespace();var _expression10=read_expression(parser);if(!(_expression10.type==='AssignmentExpression'&&_expression10.operator==='=')){parser.error({code:'invalid-const-args',message:'{@const ...} must be an assignment.'},start);}parser.allow_whitespace();parser.eat('}',true);parser.current().children.push({start:start,end:parser.index,type:'ConstTag',expression:_expression10});}else{var _expression11=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);parser.current().children.push({start:start,end:parser.index,type:'MustacheTag',expression:_expression11});}}function text(parser){var start=parser.index;var data='';while(parser.index<parser.template.length&&!parser.match('<')&&!parser.match('{')){data+=parser.template[parser.index++];}var node={start:start,end:parser.index,type:'Text',raw:data,data:decode_character_references(data)};parser.current().children.push(node);}function fragment(parser){if(parser.match('<')){return tag;}if(parser.match('{')){return mustache;}return text;}function getLocator(source,options){if(options===void 0){options={};}var offsetLine=options.offsetLine||0;var offsetColumn=options.offsetColumn||0;var originalLines=source.split('\\n');var start=0;var lineRanges=originalLines.map(function(line,i){var end=start+line.length+1;var range={start:start,end:end,line:i};start=end;return range;});var i=0;function rangeContains(range,index){return range.start<=index&&index<range.end;}function getLocation(range,index){return{line:offsetLine+range.line,column:offsetColumn+index-range.start,character:index};}function locate(search,startIndex){if(typeof search==='string'){search=source.indexOf(search,startIndex||0);}var range=lineRanges[i];var d=search>=range.end?1:-1;while(range){if(rangeContains(range,search))return getLocation(range,search);i+=d;range=lineRanges[i];}}return locate;}function locate(source,search,options){if(typeof options==='number'){throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');}return getLocator(source,options)(search,options&&options.startIndex);}function tabs_to_spaces(str){return str.replace(/^\\t+/,function(match){return match.split('\\t').join('  ');});}function get_code_frame(source,line,column){var lines=source.split('\\n');var frame_start=Math.max(0,line-2);var frame_end=Math.min(line+3,lines.length);var digits=String(frame_end+1).length;return lines.slice(frame_start,frame_end).map(function(str,i){var isErrorLine=frame_start+i===line;var line_num=String(i+frame_start+1).padStart(digits,' ');if(isErrorLine){var indicator=' '.repeat(digits+2+tabs_to_spaces(str.slice(0,column)).length)+'^';return\"\".concat(line_num,\": \").concat(tabs_to_spaces(str),\"\\n\").concat(indicator);}return\"\".concat(line_num,\": \").concat(tabs_to_spaces(str));}).join('\\n');}var CompileError=/*#__PURE__*/function(_Error){(0,_inherits2.default)(CompileError,_Error);var _super2=_createSuper(CompileError);function CompileError(){(0,_classCallCheck2.default)(this,CompileError);return _super2.apply(this,arguments);}(0,_createClass2.default)(CompileError,[{key:\"toString\",value:function toString(){return\"\".concat(this.message,\" (\").concat(this.start.line,\":\").concat(this.start.column,\")\\n\").concat(this.frame);}}]);return CompileError;}(/*#__PURE__*/(0,_wrapNativeSuper2.default)(Error));function _error2(message,props){var error=new CompileError(message);error.name=props.name;var start=locate(props.source,props.start,{offsetLine:1});var end=locate(props.source,props.end||props.start,{offsetLine:1});error.code=props.code;error.start=start;error.end=end;error.pos=props.start;error.filename=props.filename;error.frame=get_code_frame(props.source,start.line-1,start.column);throw error;}var Parser$1=/*#__PURE__*/function(){function Parser$1(template,options){(0,_classCallCheck2.default)(this,Parser$1);this.index=0;this.stack=[];this.css=[];this.js=[];this.meta_tags={};if(typeof template!=='string'){throw new TypeError('Template must be a string');}this.template=template.replace(/\\s+$/,'');this.filename=options.filename;this.customElement=options.customElement;this.html={start:null,end:null,type:'Fragment',children:[]};this.stack.push(this.html);var state=fragment;while(this.index<this.template.length){state=state(this)||fragment;}if(this.stack.length>1){var current=this.current();var type=current.type==='Element'?\"<\".concat(current.name,\">\"):'Block';var slug=current.type==='Element'?'element':'block';this.error({code:\"unclosed-\".concat(slug),message:\"\".concat(type,\" was left open\")},current.start);}if(state!==fragment){this.error({code:'unexpected-eof',message:'Unexpected end of input'});}if(this.html.children.length){var start=this.html.children[0].start;while(whitespace.test(template[start])){start+=1;}var end=this.html.children[this.html.children.length-1].end;while(whitespace.test(template[end-1])){end-=1;}this.html.start=start;this.html.end=end;}else{this.html.start=this.html.end=null;}}(0,_createClass2.default)(Parser$1,[{key:\"current\",value:function current(){return this.stack[this.stack.length-1];}},{key:\"acorn_error\",value:function acorn_error(err){this.error({code:'parse-error',message:err.message.replace(/ \\(\\d+:\\d+\\)$/,'')},err.pos);}},{key:\"error\",value:function error(_ref2){var code=_ref2.code,message=_ref2.message;var index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.index;_error2(message,{name:'ParseError',code:code,source:this.template,start:index,filename:this.filename});}},{key:\"eat\",value:function eat(str,required,error){if(this.match(str)){this.index+=str.length;return true;}if(required){this.error(error||(this.index===this.template.length?parser_errors.unexpected_eof_token(str):parser_errors.unexpected_token(str)));}return false;}},{key:\"match\",value:function match(str){return this.template.slice(this.index,this.index+str.length)===str;}},{key:\"match_regex\",value:function match_regex(pattern){var match=pattern.exec(this.template.slice(this.index));if(!match||match.index!==0)return null;return match[0];}},{key:\"allow_whitespace\",value:function allow_whitespace(){while(this.index<this.template.length&&whitespace.test(this.template[this.index])){this.index++;}}},{key:\"read\",value:function read(pattern){var result=this.match_regex(pattern);if(result)this.index+=result.length;return result;}},{key:\"read_identifier\",value:function read_identifier(){var allow_reserved=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var start=this.index;var i=this.index;var code=full_char_code_at(this.template,i);if(!isIdentifierStart(code,true))return null;i+=code<=0xffff?1:2;while(i<this.template.length){var _code2=full_char_code_at(this.template,i);if(!isIdentifierChar(_code2,true))break;i+=_code2<=0xffff?1:2;}var identifier=this.template.slice(this.index,this.index=i);if(!allow_reserved&&reserved.has(identifier)){this.error({code:'unexpected-reserved-word',message:\"'\".concat(identifier,\"' is a reserved word in JavaScript and cannot be used here\")},start);}return identifier;}},{key:\"read_until\",value:function read_until(pattern,error_message){if(this.index>=this.template.length){this.error(error_message||{code:'unexpected-eof',message:'Unexpected end of input'});}var start=this.index;var match=pattern.exec(this.template.slice(start));if(match){this.index=start+match.index;return this.template.slice(start,this.index);}this.index=this.template.length;return this.template.slice(start);}},{key:\"require_whitespace\",value:function require_whitespace(){if(!whitespace.test(this.template[this.index])){this.error({code:'missing-whitespace',message:'Expected whitespace'});}this.allow_whitespace();}}]);return Parser$1;}();function parse$3(template){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var parser=new Parser$1(template,options);// TODO we may want to allow multiple <style> tags —\n// one scoped, one global. for now, only allow one\nif(parser.css.length>1){parser.error(parser_errors.duplicate_style,parser.css[1].start);}var instance_scripts=parser.js.filter(function(script){return script.context==='default';});var module_scripts=parser.js.filter(function(script){return script.context==='module';});if(instance_scripts.length>1){parser.error(parser_errors.invalid_script_instance,instance_scripts[1].start);}if(module_scripts.length>1){parser.error(parser_errors.invalid_script_module,module_scripts[1].start);}return{html:parser.html,css:parser.css[0],instance:instance_scripts[0],module:module_scripts[0]};}function is_head(node){return node&&node.type==='MemberExpression'&&node.object.name==='@_document'&&node.property.name==='head';}var Block$1=/*#__PURE__*/function(){function Block$1(options){(0,_classCallCheck2.default)(this,Block$1);this.dependencies=new Set();this.binding_group_initialised=new Set();this.event_listeners=[];this.variables=new Map();this.has_update_method=false;this.parent=options.parent;this.renderer=options.renderer;this.name=options.name;this.type=options.type;this.comment=options.comment;this.wrappers=[];// for keyed each blocks\nthis.key=options.key;this.first=null;this.bindings=options.bindings;this.chunks={declarations:[],init:[],create:[],claim:[],hydrate:[],mount:[],measure:[],fix:[],animate:[],intro:[],update:[],outro:[],destroy:[]};this.has_animation=false;this.has_intro_method=false;// a block could have an intro method but not intro transitions, e.g. if a sibling block has intros\nthis.has_outro_method=false;this.outros=0;this.get_unique_name=this.renderer.component.get_unique_name_maker();this.aliases=new Map();if(this.key)this.aliases.set('key',this.get_unique_name('key'));}(0,_createClass2.default)(Block$1,[{key:\"assign_variable_names\",value:function assign_variable_names(){var seen=new Set();var dupes=new Set();var i=this.wrappers.length;while(i--){var wrapper=this.wrappers[i];if(!wrapper.var)continue;if(seen.has(wrapper.var.name)){dupes.add(wrapper.var.name);}seen.add(wrapper.var.name);}var counts=new Map();i=this.wrappers.length;while(i--){var _wrapper=this.wrappers[i];if(!_wrapper.var)continue;var suffix='';if(dupes.has(_wrapper.var.name)){var _i31=counts.get(_wrapper.var.name)||0;counts.set(_wrapper.var.name,_i31+1);suffix=_i31;}_wrapper.var.name=this.get_unique_name(_wrapper.var.name+suffix).name;}}},{key:\"add_dependencies\",value:function add_dependencies(dependencies){var _this6=this;dependencies.forEach(function(dependency){_this6.dependencies.add(dependency);});this.has_update_method=true;if(this.parent){this.parent.add_dependencies(dependencies);}}},{key:\"add_element\",value:function add_element(id,render_statement,claim_statement,parent_node,no_detach){this.add_variable(id);this.chunks.create.push(b(_templateObject||(_templateObject=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"])),id,render_statement));if(this.renderer.options.hydratable){this.chunks.claim.push(b(_templateObject2||(_templateObject2=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"])),id,claim_statement||render_statement));}if(parent_node){this.chunks.mount.push(b(_templateObject3||(_templateObject3=(0,_taggedTemplateLiteral2.default)([\"@append(\",\", \",\");\"])),parent_node,id));if(is_head(parent_node)&&!no_detach)this.chunks.destroy.push(b(_templateObject4||(_templateObject4=(0,_taggedTemplateLiteral2.default)([\"@detach(\",\");\"])),id));}else{this.chunks.mount.push(b(_templateObject5||(_templateObject5=(0,_taggedTemplateLiteral2.default)([\"@insert(#target, \",\", #anchor);\"])),id));if(!no_detach)this.chunks.destroy.push(b(_templateObject6||(_templateObject6=(0,_taggedTemplateLiteral2.default)([\"if (detaching) @detach(\",\");\"])),id));}}},{key:\"add_intro\",value:function add_intro(local){this.has_intros=this.has_intro_method=true;if(!local&&this.parent)this.parent.add_intro();}},{key:\"add_outro\",value:function add_outro(local){this.has_outros=this.has_outro_method=true;this.outros+=1;if(!local&&this.parent)this.parent.add_outro();}},{key:\"add_animation\",value:function add_animation(){this.has_animation=true;}},{key:\"add_variable\",value:function add_variable(id,init){if(this.variables.has(id.name)){throw new Error(\"Variable '\".concat(id.name,\"' already initialised with a different value\"));}this.variables.set(id.name,{id:id,init:init});}},{key:\"alias\",value:function alias(name){if(!this.aliases.has(name)){this.aliases.set(name,this.get_unique_name(name));}return this.aliases.get(name);}},{key:\"child\",value:function child(options){return new Block$1(Object.assign({},this,{key:null},options,{parent:this}));}},{key:\"get_contents\",value:function get_contents(key){var dev=this.renderer.options.dev;if(this.has_outros){this.add_variable({type:'Identifier',name:'#current'});if(this.chunks.intro.length>0){this.chunks.intro.push(b(_templateObject7||(_templateObject7=(0,_taggedTemplateLiteral2.default)([\"#current = true;\"]))));this.chunks.mount.push(b(_templateObject8||(_templateObject8=(0,_taggedTemplateLiteral2.default)([\"#current = true;\"]))));}if(this.chunks.outro.length>0){this.chunks.outro.push(b(_templateObject9||(_templateObject9=(0,_taggedTemplateLiteral2.default)([\"#current = false;\"]))));}}if(this.autofocus){if(this.autofocus.condition_expression){this.chunks.mount.push(b(_templateObject10||(_templateObject10=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".focus();\"])),this.autofocus.condition_expression,this.autofocus.element_var));}else{this.chunks.mount.push(b(_templateObject11||(_templateObject11=(0,_taggedTemplateLiteral2.default)([\"\",\".focus();\"])),this.autofocus.element_var));}}this.render_listeners();var properties={};var noop=x(_templateObject12||(_templateObject12=(0,_taggedTemplateLiteral2.default)([\"@noop\"])));properties.key=key;if(this.first){properties.first=x(_templateObject13||(_templateObject13=(0,_taggedTemplateLiteral2.default)([\"null\"])));this.chunks.hydrate.push(b(_templateObject14||(_templateObject14=(0,_taggedTemplateLiteral2.default)([\"this.first = \",\";\"])),this.first));}if(this.chunks.create.length===0&&this.chunks.hydrate.length===0){properties.create=noop;}else{var hydrate=this.chunks.hydrate.length>0&&(this.renderer.options.hydratable?b(_templateObject15||(_templateObject15=(0,_taggedTemplateLiteral2.default)([\"this.h();\"]))):this.chunks.hydrate);properties.create=x(_templateObject16||(_templateObject16=(0,_taggedTemplateLiteral2.default)([\"function #create() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),this.chunks.create,hydrate);}if(this.renderer.options.hydratable||this.chunks.claim.length>0){if(this.chunks.claim.length===0&&this.chunks.hydrate.length===0){properties.claim=noop;}else{properties.claim=x(_templateObject17||(_templateObject17=(0,_taggedTemplateLiteral2.default)([\"function #claim(#nodes) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"])),this.chunks.claim,this.renderer.options.hydratable&&this.chunks.hydrate.length>0&&b(_templateObject18||(_templateObject18=(0,_taggedTemplateLiteral2.default)([\"this.h();\"]))));}}if(this.renderer.options.hydratable&&this.chunks.hydrate.length>0){properties.hydrate=x(_templateObject19||(_templateObject19=(0,_taggedTemplateLiteral2.default)([\"function #hydrate() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),this.chunks.hydrate);}if(this.chunks.mount.length===0){properties.mount=noop;}else if(this.event_listeners.length===0){properties.mount=x(_templateObject20||(_templateObject20=(0,_taggedTemplateLiteral2.default)([\"function #mount(#target, #anchor) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),this.chunks.mount);}else{properties.mount=x(_templateObject21||(_templateObject21=(0,_taggedTemplateLiteral2.default)([\"function #mount(#target, #anchor) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),this.chunks.mount);}if(this.has_update_method||this.maintain_context){if(this.chunks.update.length===0&&!this.maintain_context){properties.update=noop;}else{var ctx=this.maintain_context?x(_templateObject22||(_templateObject22=(0,_taggedTemplateLiteral2.default)([\"#new_ctx\"]))):x(_templateObject23||(_templateObject23=(0,_taggedTemplateLiteral2.default)([\"#ctx\"])));var dirty={type:'Identifier',name:'#dirty'};if(!this.renderer.context_overflow&&!this.parent){dirty={type:'ArrayPattern',elements:[dirty]};}properties.update=x(_templateObject24||(_templateObject24=(0,_taggedTemplateLiteral2.default)([\"function #update(\",\", \",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"])),ctx,dirty,this.maintain_context&&b(_templateObject25||(_templateObject25=(0,_taggedTemplateLiteral2.default)([\"#ctx = \",\";\"])),ctx),this.chunks.update);}}if(this.has_animation){properties.measure=x(_templateObject26||(_templateObject26=(0,_taggedTemplateLiteral2.default)([\"function #measure() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),this.chunks.measure);properties.fix=x(_templateObject27||(_templateObject27=(0,_taggedTemplateLiteral2.default)([\"function #fix() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),this.chunks.fix);properties.animate=x(_templateObject28||(_templateObject28=(0,_taggedTemplateLiteral2.default)([\"function #animate() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),this.chunks.animate);}if(this.has_intro_method||this.has_outro_method){if(this.chunks.intro.length===0){properties.intro=noop;}else{properties.intro=x(_templateObject29||(_templateObject29=(0,_taggedTemplateLiteral2.default)([\"function #intro(#local) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"])),this.has_outros&&b(_templateObject30||(_templateObject30=(0,_taggedTemplateLiteral2.default)([\"if (#current) return;\"]))),this.chunks.intro);}if(this.chunks.outro.length===0){properties.outro=noop;}else{properties.outro=x(_templateObject31||(_templateObject31=(0,_taggedTemplateLiteral2.default)([\"function #outro(#local) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"])),this.chunks.outro);}}if(this.chunks.destroy.length===0){properties.destroy=noop;}else{properties.destroy=x(_templateObject32||(_templateObject32=(0,_taggedTemplateLiteral2.default)([\"function #destroy(detaching) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),this.chunks.destroy);}if(!this.renderer.component.compile_options.dev){// allow shorthand names\nfor(var name in properties){var property=properties[name];if(property)property.id=null;}}var return_value=x(_templateObject33||(_templateObject33=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\tkey: \",\",\\n\\t\\t\\tfirst: \",\",\\n\\t\\t\\tc: \",\",\\n\\t\\t\\tl: \",\",\\n\\t\\t\\th: \",\",\\n\\t\\t\\tm: \",\",\\n\\t\\t\\tp: \",\",\\n\\t\\t\\tr: \",\",\\n\\t\\t\\tf: \",\",\\n\\t\\t\\ta: \",\",\\n\\t\\t\\ti: \",\",\\n\\t\\t\\to: \",\",\\n\\t\\t\\td: \",\"\\n\\t\\t}\"])),properties.key,properties.first,properties.create,properties.claim,properties.hydrate,properties.mount,properties.update,properties.measure,properties.fix,properties.animate,properties.intro,properties.outro,properties.destroy);var block=dev&&this.get_unique_name('block');var body=b(_templateObject34||(_templateObject34=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\t\",\"\\n\\t\\t\"])),this.chunks.declarations,Array.from(this.variables.values()).map(function(_ref3){var id=_ref3.id,init=_ref3.init;return init?b(_templateObject35||(_templateObject35=(0,_taggedTemplateLiteral2.default)([\"let \",\" = \",\"\"])),id,init):b(_templateObject36||(_templateObject36=(0,_taggedTemplateLiteral2.default)([\"let \",\"\"])),id);}),this.chunks.init,dev?b(_templateObject37||(_templateObject37=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tconst \",\" = \",\";\\n\\t\\t\\t\\t\\t@dispatch_dev(\\\"SvelteRegisterBlock\\\", {\\n\\t\\t\\t\\t\\t\\tblock: \",\",\\n\\t\\t\\t\\t\\t\\tid: \",\".name,\\n\\t\\t\\t\\t\\t\\ttype: \\\"\",\"\\\",\\n\\t\\t\\t\\t\\t\\tsource: \\\"\",\"\\\",\\n\\t\\t\\t\\t\\t\\tctx: #ctx\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\treturn \",\";\"])),block,return_value,block,this.name||'create_fragment',this.type,this.comment?this.comment.replace(/\"/g,'\\\\\"'):'',block):b(_templateObject38||(_templateObject38=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\treturn \",\";\"])),return_value));return body;}},{key:\"has_content\",value:function has_content(){return!!this.first||this.event_listeners.length>0||this.chunks.intro.length>0||this.chunks.outro.length>0||this.chunks.create.length>0||this.chunks.hydrate.length>0||this.chunks.claim.length>0||this.chunks.mount.length>0||this.chunks.update.length>0||this.chunks.destroy.length>0||this.has_animation;}},{key:\"render\",value:function render(){var key=this.key&&this.get_unique_name('key');var args=[x(_templateObject39||(_templateObject39=(0,_taggedTemplateLiteral2.default)([\"#ctx\"])))];if(key)args.unshift(key);var fn=b(_templateObject40||(_templateObject40=(0,_taggedTemplateLiteral2.default)([\"function \",\"(\",\") {\\n\\t\\t\\t\",\"\\n\\t\\t}\"])),this.name,args,this.get_contents(key));return this.comment?b(_templateObject41||(_templateObject41=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t// \",\"\\n\\t\\t\\t\\t\",\"\"])),this.comment,fn):fn;}},{key:\"render_listeners\",value:function render_listeners(){var chunk=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';if(this.event_listeners.length>0){this.add_variable({type:'Identifier',name:'#mounted'});this.chunks.destroy.push(b(_templateObject42||(_templateObject42=(0,_taggedTemplateLiteral2.default)([\"#mounted = false\"]))));var dispose={type:'Identifier',name:\"#dispose\".concat(chunk)};this.add_variable(dispose);if(this.event_listeners.length===1){this.chunks.mount.push(b(_templateObject43||(_templateObject43=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (!#mounted) {\\n\\t\\t\\t\\t\\t\\t\\t\",\" = \",\";\\n\\t\\t\\t\\t\\t\\t\\t#mounted = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"])),dispose,this.event_listeners[0]));this.chunks.destroy.push(b(_templateObject44||(_templateObject44=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"])),dispose));}else{this.chunks.mount.push(b(_templateObject45||(_templateObject45=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (!#mounted) {\\n\\t\\t\\t\\t\\t\\t\",\" = [\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t];\\n\\t\\t\\t\\t\\t\\t#mounted = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),dispose,this.event_listeners));this.chunks.destroy.push(b(_templateObject46||(_templateObject46=(0,_taggedTemplateLiteral2.default)([\"@run_all(\",\");\"])),dispose));}}}}]);return Block$1;}();var Wrapper=/*#__PURE__*/function(){function Wrapper(renderer,block,parent,node){(0,_classCallCheck2.default)(this,Wrapper);this.node=node;// make these non-enumerable so that they can be logged sensibly\n// (TODO in dev only?)\nObject.defineProperties(this,{renderer:{value:renderer},parent:{value:parent}});this.can_use_innerhtml=!renderer.options.hydratable;this.is_static_content=!renderer.options.hydratable;block.wrappers.push(this);}(0,_createClass2.default)(Wrapper,[{key:\"cannot_use_innerhtml\",value:function cannot_use_innerhtml(){this.can_use_innerhtml=false;if(this.parent)this.parent.cannot_use_innerhtml();}},{key:\"not_static_content\",value:function not_static_content(){this.is_static_content=false;if(this.parent)this.parent.not_static_content();}},{key:\"get_or_create_anchor\",value:function get_or_create_anchor(block,parent_node,parent_nodes){// TODO use this in EachBlock and IfBlock — tricky because\n// children need to be created first\nvar needs_anchor=this.next?!this.next.is_dom_node():!parent_node||!this.parent.is_dom_node();var anchor=needs_anchor?block.get_unique_name(\"\".concat(this.var.name,\"_anchor\")):this.next&&this.next.var||{type:'Identifier',name:'null'};if(needs_anchor){block.add_element(anchor,x(_templateObject47||(_templateObject47=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),parent_nodes&&x(_templateObject48||(_templateObject48=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),parent_node);}return anchor;}},{key:\"get_update_mount_node\",value:function get_update_mount_node(anchor){return this.parent&&this.parent.is_dom_node()?this.parent.var:x(_templateObject49||(_templateObject49=(0,_taggedTemplateLiteral2.default)([\"\",\".parentNode\"])),anchor);}},{key:\"is_dom_node\",value:function is_dom_node(){return this.node.type==='Element'||this.node.type==='Text'||this.node.type==='MustacheTag';}},{key:\"render\",value:function render(_block,_parent_node,_parent_nodes){throw Error('Wrapper class is not renderable');}}]);return Wrapper;}();function create_debugging_comment(node,component){var locate=component.locate,source=component.source;var c=node.start;if(node.type==='ElseBlock'){while(source[c-1]!=='{'){c-=1;}while(source[c-1]==='{'){c-=1;}}var d;if(node.type==='InlineComponent'||node.type==='Element'||node.type==='SlotTemplate'){if(node.children.length){d=node.children[0].start;while(source[d-1]!=='>'){d-=1;}}else{d=node.start;while(source[d]!=='>'){d+=1;}d+=1;}}else if(node.type==='Text'||node.type==='Comment'){d=node.end;}else{// @ts-ignore\nd=node.expression?node.expression.node.end:c;while(source[d]!=='}'&&d<=source.length){d+=1;}while(source[d]==='}'){d+=1;}}var start=locate(c);var loc=\"(\".concat(start.line,\":\").concat(start.column,\")\");return\"\".concat(loc,\" \").concat(source.slice(c,d)).replace(/\\s/g,' ');}var Node$1=/*#__PURE__*/function(){function Node$1(component,parent,_scope,info){(0,_classCallCheck2.default)(this,Node$1);this.start=info.start;this.end=info.end;this.type=info.type;// this makes properties non-enumerable, which makes logging\n// bearable. might have a performance cost. TODO remove in prod?\nObject.defineProperties(this,{component:{value:component},parent:{value:parent}});}(0,_createClass2.default)(Node$1,[{key:\"cannot_use_innerhtml\",value:function cannot_use_innerhtml(){if(this.can_use_innerhtml!==false){this.can_use_innerhtml=false;if(this.parent)this.parent.cannot_use_innerhtml();}}},{key:\"find_nearest\",value:function find_nearest(selector){if(selector.test(this.type))return this;if(this.parent)return this.parent.find_nearest(selector);}},{key:\"get_static_attribute_value\",value:function get_static_attribute_value(name){var attribute=this.attributes&&this.attributes.find(function(attr){return attr.type==='Attribute'&&attr.name.toLowerCase()===name;});if(!attribute)return null;if(attribute.is_true)return true;if(attribute.chunks.length===0)return'';if(attribute.chunks.length===1&&attribute.chunks[0].type==='Text'){return attribute.chunks[0].data;}return null;}},{key:\"has_ancestor\",value:function has_ancestor(type){return this.parent?this.parent.type===type||this.parent.has_ancestor(type):false;}}]);return Node$1;}();// All compiler warnings should be listed and accessed from here\n/**\n * @internal\n */var compiler_warnings={custom_element_no_tag:{code:'custom-element-no-tag',message:'No custom element \\'tag\\' option was specified. To automatically register a custom element, specify a name with a hyphen in it, e.g. <svelte:options tag=\"my-thing\"/>. To hide this warning, use <svelte:options tag={null}/>'},unused_export_let:function unused_export_let(component,property){return{code:'unused-export-let',message:\"\".concat(component,\" has unused export property '\").concat(property,\"'. If it is for external reference only, please consider using `export const \").concat(property,\"`\")};},module_script_reactive_declaration:{code:'module-script-reactive-declaration',message:'$: has no effect in a module script'},non_top_level_reactive_declaration:{code:'non-top-level-reactive-declaration',message:'$: has no effect outside of the top-level'},module_script_variable_reactive_declaration:function module_script_variable_reactive_declaration(names){return{code:'module-script-reactive-declaration',message:\"\".concat(names.map(function(name){return\"\\\"\".concat(name,\"\\\"\");}).join(', '),\" \").concat(names.length>1?'are':'is',\" declared in a module script and will not be reactive\")};},missing_declaration:function missing_declaration(name,has_script){return{code:'missing-declaration',message:\"'\".concat(name,\"' is not defined\")+(has_script?'':\". Consider adding a <script> block with 'export let \".concat(name,\"' to declare a prop\"))};},missing_custom_element_compile_options:{code:'missing-custom-element-compile-options',message:\"The 'tag' option is used when generating a custom element. Did you forget the 'customElement: true' compile option?\"},css_unused_selector:function css_unused_selector(selector){return{code:'css-unused-selector',message:\"Unused CSS selector \\\"\".concat(selector,\"\\\"\")};},empty_block:{code:'empty-block',message:'Empty block'},reactive_component:function reactive_component(name){return{code:'reactive-component',message:\"<\".concat(name,\"/> will not be reactive if \").concat(name,\" changes. Use <svelte:component this={\").concat(name,\"}/> if you want this reactivity.\")};},component_name_lowercase:function component_name_lowercase(name){return{code:'component-name-lowercase',message:\"<\".concat(name,\"> will be treated as an HTML element unless it begins with a capital letter\")};},avoid_is:{code:'avoid-is',message:'The \\'is\\' attribute is not supported cross-browser and should be avoided'},invalid_html_attribute:function invalid_html_attribute(name,suggestion){return{code:'invalid-html-attribute',message:\"'\".concat(name,\"' is not a valid HTML attribute. Did you mean '\").concat(suggestion,\"'?\")};},a11y_aria_attributes:function a11y_aria_attributes(name){return{code:'a11y-aria-attributes',message:\"A11y: <\".concat(name,\"> should not have aria-* attributes\")};},a11y_unknown_aria_attribute:function a11y_unknown_aria_attribute(attribute,suggestion){return{code:'a11y-unknown-aria-attribute',message:\"A11y: Unknown aria attribute 'aria-\".concat(attribute,\"'\")+(suggestion?\" (did you mean '\".concat(suggestion,\"'?)\"):'')};},a11y_hidden:function a11y_hidden(name){return{code:'a11y-hidden',message:\"A11y: <\".concat(name,\"> element should not be hidden\")};},a11y_misplaced_role:function a11y_misplaced_role(name){return{code:'a11y-misplaced-role',message:\"A11y: <\".concat(name,\"> should not have role attribute\")};},a11y_unknown_role:function a11y_unknown_role(role,suggestion){return{code:'a11y-unknown-role',message:\"A11y: Unknown role '\".concat(role,\"'\")+(suggestion?\" (did you mean '\".concat(suggestion,\"'?)\"):'')};},a11y_no_redundant_roles:function a11y_no_redundant_roles(role){return{code:'a11y-no-redundant-roles',message:\"A11y: Redundant role '\".concat(role,\"'\")};},a11y_accesskey:{code:'a11y-accesskey',message:'A11y: Avoid using accesskey'},a11y_autofocus:{code:'a11y-autofocus',message:'A11y: Avoid using autofocus'},a11y_misplaced_scope:{code:'a11y-misplaced-scope',message:'A11y: The scope attribute should only be used with <th> elements'},a11y_positive_tabindex:{code:'a11y-positive-tabindex',message:'A11y: avoid tabindex values above zero'},a11y_invalid_attribute:function a11y_invalid_attribute(href_attribute,href_value){return{code:'a11y-invalid-attribute',message:\"A11y: '\".concat(href_value,\"' is not a valid \").concat(href_attribute,\" attribute\")};},a11y_missing_attribute:function a11y_missing_attribute(name,article,sequence){return{code:'a11y-missing-attribute',message:\"A11y: <\".concat(name,\"> element should have \").concat(article,\" \").concat(sequence,\" attribute\")};},a11y_img_redundant_alt:{code:'a11y-img-redundant-alt',message:'A11y: Screenreaders already announce <img> elements as an image.'},a11y_label_has_associated_control:{code:'a11y-label-has-associated-control',message:'A11y: A form label must be associated with a control.'},a11y_media_has_caption:{code:'a11y-media-has-caption',message:'A11y: <video> elements must have a <track kind=\"captions\">'},a11y_distracting_elements:function a11y_distracting_elements(name){return{code:'a11y-distracting-elements',message:\"A11y: Avoid <\".concat(name,\"> elements\")};},a11y_structure_immediate:{code:'a11y-structure',message:'A11y: <figcaption> must be an immediate child of <figure>'},a11y_structure_first_or_last:{code:'a11y-structure',message:'A11y: <figcaption> must be first or last child of <figure>'},a11y_mouse_events_have_key_events:function a11y_mouse_events_have_key_events(event,accompanied_by){return{code:'a11y-mouse-events-have-key-events',message:\"A11y: on:\".concat(event,\" must be accompanied by on:\").concat(accompanied_by)};},a11y_missing_content:function a11y_missing_content(name){return{code:'a11y-missing-content',message:\"A11y: <\".concat(name,\"> element should have child content\")};},redundant_event_modifier_for_touch:{code:'redundant-event-modifier',message:'Touch event handlers that don\\'t use the \\'event\\' object are passive by default'},redundant_event_modifier_passive:{code:'redundant-event-modifier',message:'The passive modifier only works with wheel and touch events'}};var AbstractBlock=/*#__PURE__*/function(_Node$){(0,_inherits2.default)(AbstractBlock,_Node$);var _super3=_createSuper(AbstractBlock);function AbstractBlock(component,parent,scope,info){(0,_classCallCheck2.default)(this,AbstractBlock);return _super3.call(this,component,parent,scope,info);}(0,_createClass2.default)(AbstractBlock,[{key:\"warn_if_empty_block\",value:function warn_if_empty_block(){if(!this.children||this.children.length>1)return;var child=this.children[0];if(!child||child.type==='Text'&&!/[^ \\r\\n\\f\\v\\t]/.test(child.data)){this.component.warn(this,compiler_warnings.empty_block);}}}]);return AbstractBlock;}(Node$1);function flatten_reference(node){var nodes=[];var parts=[];while(node.type==='MemberExpression'){nodes.unshift(node.property);if(!node.computed){parts.unshift(node.property.name);}else{var computed_property=to_string$1(node.property);if(computed_property){parts.unshift(\"[\".concat(computed_property,\"]\"));}}node=node.object;}var name=node.type==='Identifier'?node.name:node.type==='ThisExpression'?'this':null;nodes.unshift(node);parts.unshift(name);return{name:name,nodes:nodes,parts:parts};}function to_string$1(node){switch(node.type){case'Literal':return String(node.value);case'Identifier':return node.name;}}function create_scopes(expression){return analyze(expression);}function get_object(node){while(node.type==='MemberExpression'){node=node.object;}return node;}var reserved_keywords=new Set(['$$props','$$restProps','$$slots']);function is_reserved_keyword(name){return reserved_keywords.has(name);}function is_dynamic(variable){if(variable){if(variable.mutated||variable.reassigned)return true;// dynamic internal state\nif(!variable.module&&variable.writable&&variable.export_name)return true;// writable props\nif(is_reserved_keyword(variable.name))return true;}return false;}function nodes_match(a,b){if(!!a!==!!b)return false;if(Array.isArray(a)!==Array.isArray(b))return false;if(a&&(0,_typeof2.default)(a)==='object'){if(Array.isArray(a)){if(a.length!==b.length)return false;return a.every(function(child,i){return nodes_match(child,b[i]);});}var a_keys=Object.keys(a).sort();var b_keys=Object.keys(b).sort();if(a_keys.length!==b_keys.length)return false;var _i32=a_keys.length;while(_i32--){var key=a_keys[_i32];if(b_keys[_i32]!==key)return false;if(key==='start'||key==='end')continue;if(!nodes_match(a[key],b[key])){return false;}}return true;}return a===b;}function invalidate(renderer,scope,node,names){var main_execution_context=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var component=renderer.component;var _Array$from$filter$ma=Array.from(names).filter(function(name){var owner=scope.find_owner(name);return!owner||owner===component.instance_scope;}).map(function(name){return component.var_lookup.get(name);}).filter(function(variable){return variable&&!variable.hoistable&&!variable.global&&!variable.module&&(variable.referenced||variable.subscribable||variable.is_reactive_dependency||variable.export_name||variable.name[0]==='$');}),_Array$from$filter$ma2=(0,_toArray2.default)(_Array$from$filter$ma),head=_Array$from$filter$ma2[0],tail=_Array$from$filter$ma2.slice(1);function get_invalidated(variable,node){if(main_execution_context&&!variable.subscribable&&variable.name[0]!=='$'){return node;}return renderer_invalidate(renderer,variable.name,undefined,main_execution_context);}if(!head){return node;}component.has_reactive_assignments=true;if(node.type==='AssignmentExpression'&&node.operator==='='&&nodes_match(node.left,node.right)&&tail.length===0){return get_invalidated(head,node);}var is_store_value=head.name[0]==='$'&&head.name[1]!=='$';var extra_args=tail.map(function(variable){return get_invalidated(variable);}).filter(Boolean);if(is_store_value){return x(_templateObject50||(_templateObject50=(0,_taggedTemplateLiteral2.default)([\"@set_store_value(\",\", \",\", \",\", \",\")\"])),head.name.slice(1),node,head.name,extra_args);}var invalidate;if(!main_execution_context){var pass_value=extra_args.length>0||node.type==='AssignmentExpression'&&node.left.type!=='Identifier'||node.type==='UpdateExpression'&&(!node.prefix||node.argument.type!=='Identifier');if(pass_value){extra_args.unshift({type:'Identifier',name:head.name});}invalidate=x(_templateObject51||(_templateObject51=(0,_taggedTemplateLiteral2.default)([\"$$invalidate(\",\", \",\", \",\")\"])),renderer.context_lookup.get(head.name).index,node,extra_args);}else{// skip `$$invalidate` if it is in the main execution context\ninvalidate=extra_args.length?[node].concat((0,_toConsumableArray2.default)(extra_args)):node;}if(head.subscribable&&head.reassigned){var subscribe=\"$$subscribe_\".concat(head.name);invalidate=x(_templateObject52||(_templateObject52=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\")\"])),subscribe,invalidate);}return invalidate;}function renderer_invalidate(renderer,name,value){var main_execution_context=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var variable=renderer.component.var_lookup.get(name);if(variable&&variable.subscribable&&(variable.reassigned||variable.export_name)){if(main_execution_context){return x(_templateObject53||(_templateObject53=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\")\"])),\"$$subscribe_\".concat(name),value||name);}else{var member=renderer.context_lookup.get(name);return x(_templateObject54||(_templateObject54=(0,_taggedTemplateLiteral2.default)([\"\",\"($$invalidate(\",\", \",\"))\"])),\"$$subscribe_\".concat(name),member.index,value||name);}}if(name[0]==='$'&&name[1]!=='$'){return x(_templateObject55||(_templateObject55=(0,_taggedTemplateLiteral2.default)([\"\",\".set(\",\")\"])),name.slice(1),value||name);}if(variable&&(variable.module||!variable.referenced&&!variable.is_reactive_dependency&&!variable.export_name&&!name.startsWith('$$'))){return value||name;}if(value){if(main_execution_context){return x(_templateObject56||(_templateObject56=(0,_taggedTemplateLiteral2.default)([\"\",\"\"])),value);}else{var _member=renderer.context_lookup.get(name);return x(_templateObject57||(_templateObject57=(0,_taggedTemplateLiteral2.default)([\"$$invalidate(\",\", \",\")\"])),_member.index,value);}}if(main_execution_context)return;// if this is a reactive declaration, invalidate dependencies recursively\nvar deps=new Set([name]);deps.forEach(function(name){var reactive_declarations=renderer.component.reactive_declarations.filter(function(x){return x.assignees.has(name);});reactive_declarations.forEach(function(declaration){declaration.dependencies.forEach(function(name){deps.add(name);});});});// TODO ideally globals etc wouldn't be here in the first place\nvar filtered=Array.from(deps).filter(function(n){return renderer.context_lookup.has(n);});if(!filtered.length)return null;return filtered.map(function(n){return x(_templateObject58||(_templateObject58=(0,_taggedTemplateLiteral2.default)([\"$$invalidate(\",\", \",\")\"])),renderer.context_lookup.get(n).index,n);}).reduce(function(lhs,rhs){return x(_templateObject59||(_templateObject59=(0,_taggedTemplateLiteral2.default)([\"\",\", \",\"\"])),lhs,rhs);});}function replace_object(node,replacement){if(node.type==='Identifier')return replacement;var ancestor=node;var parent;while(node.type==='MemberExpression'){parent=node;node=node.object;}parent.object=replacement;return ancestor;}function is_contextual(component,scope,name){if(is_reserved_keyword(name))return true;// if it's a name below root scope, it's contextual\nif(!scope.is_top_level(name))return true;var variable=component.var_lookup.get(name);// hoistables, module declarations, and imports are non-contextual\nif(!variable||variable.hoistable)return false;// assume contextual\nreturn true;}// adapted from klona v2.0.4 - https://github.com/lukeed/klona\n// (c) Luke Edwards, under MIT License\n// The sole modification is to skip function values in objects when cloning, so we don't break tests.\nfunction clone(val){var k,out,tmp;if(Array.isArray(val)){out=Array(k=val.length);while(k--){out[k]=(tmp=val[k])&&(0,_typeof2.default)(tmp)==='object'?clone(tmp):tmp;}return out;}if(Object.prototype.toString.call(val)==='[object Object]'){out={};// null\nfor(k in val){if(k==='__proto__'){Object.defineProperty(out,k,{value:clone(val[k]),configurable:true,enumerable:true,writable:true});}else if(typeof val[k]!=='function'){// MODIFICATION: skip functions\nout[k]=(tmp=val[k])&&(0,_typeof2.default)(tmp)==='object'?clone(tmp):tmp;}}return out;}return val;}// All compiler errors should be listed and accessed from here\n/**\n * @internal\n */var compiler_errors={invalid_binding_elements:function invalid_binding_elements(element,binding){return{code:'invalid-binding',message:\"'\".concat(binding,\"' is not a valid binding on <\").concat(element,\"> elements\")};},invalid_binding_element_with:function invalid_binding_element_with(elements,binding){return{code:'invalid-binding',message:\"'\".concat(binding,\"' binding can only be used with \").concat(elements)};},invalid_binding_on:function invalid_binding_on(binding,element,post){return{code:'invalid-binding',message:\"'\".concat(binding,\"' is not a valid binding on \").concat(element)+(post||'')};},invalid_binding_foreign:function invalid_binding_foreign(binding){return{code:'invalid-binding',message:\"'\".concat(binding,\"' is not a valid binding. Foreign elements only support bind:this\")};},invalid_binding_no_checkbox:function invalid_binding_no_checkbox(binding,is_radio){return{code:'invalid-binding',message:\"'\".concat(binding,\"' binding can only be used with <input type=\\\"checkbox\\\">\")+(is_radio?' — for <input type=\"radio\">, use \\'group\\' binding':'')};},invalid_binding:function invalid_binding(binding){return{code:'invalid-binding',message:\"'\".concat(binding,\"' is not a valid binding\")};},invalid_binding_window:function invalid_binding_window(parts){return{code:'invalid-binding',message:\"Bindings on <svelte:window> must be to top-level properties, e.g. '\".concat(parts[parts.length-1],\"' rather than '\").concat(parts.join('.'),\"'\")};},invalid_binding_let:{code:'invalid-binding',message:'Cannot bind to a variable declared with the let: directive'},invalid_binding_await:{code:'invalid-binding',message:'Cannot bind to a variable declared with {#await ... then} or {:catch} blocks'},invalid_binding_const:{code:'invalid-binding',message:'Cannot bind to a variable declared with {@const ...}'},invalid_binding_writibale:{code:'invalid-binding',message:'Cannot bind to a variable which is not writable'},binding_undeclared:function binding_undeclared(name){return{code:'binding-undeclared',message:\"\".concat(name,\" is not declared\")};},invalid_type:{code:'invalid-type',message:'\\'type\\' attribute cannot be dynamic if input uses two-way binding'},missing_type:{code:'missing-type',message:'\\'type\\' attribute must be specified'},dynamic_multiple_attribute:{code:'dynamic-multiple-attribute',message:'\\'multiple\\' attribute cannot be dynamic if select uses two-way binding'},missing_contenteditable_attribute:{code:'missing-contenteditable-attribute',message:'\\'contenteditable\\' attribute is required for textContent and innerHTML two-way bindings'},dynamic_contenteditable_attribute:{code:'dynamic-contenteditable-attribute',message:'\\'contenteditable\\' attribute cannot be dynamic if element uses two-way binding'},invalid_event_modifier_combination:function invalid_event_modifier_combination(modifier1,modifier2){return{code:'invalid-event-modifier',message:\"The '\".concat(modifier1,\"' and '\").concat(modifier2,\"' modifiers cannot be used together\")};},invalid_event_modifier_legacy:function invalid_event_modifier_legacy(modifier){return{code:'invalid-event-modifier',message:\"The '\".concat(modifier,\"' modifier cannot be used in legacy mode\")};},invalid_event_modifier:function invalid_event_modifier(valid){return{code:'invalid-event-modifier',message:\"Valid event modifiers are \".concat(valid)};},invalid_event_modifier_component:{code:'invalid-event-modifier',message:\"Event modifiers other than 'once' can only be used on DOM elements\"},textarea_duplicate_value:{code:'textarea-duplicate-value',message:'A <textarea> can have either a value attribute or (equivalently) child content, but not both'},illegal_attribute:function illegal_attribute(name){return{code:'illegal-attribute',message:\"'\".concat(name,\"' is not a valid attribute name\")};},invalid_slot_attribute:{code:'invalid-slot-attribute',message:'slot attribute cannot have a dynamic value'},duplicate_slot_attribute:function duplicate_slot_attribute(name){return{code:'duplicate-slot-attribute',message:\"Duplicate '\".concat(name,\"' slot\")};},invalid_slotted_content:{code:'invalid-slotted-content',message:'Element with a slot=\\'...\\' attribute must be a child of a component or a descendant of a custom element'},invalid_attribute_head:{code:'invalid-attribute',message:'<svelte:head> should not have any attributes or directives'},invalid_action:{code:'invalid-action',message:'Actions can only be applied to DOM elements, not components'},invalid_class:{code:'invalid-class',message:'Classes can only be applied to DOM elements, not components'},invalid_transition:{code:'invalid-transition',message:'Transitions can only be applied to DOM elements, not components'},invalid_let:{code:'invalid-let',message:'let directive value must be an identifier or an object/array pattern'},invalid_slot_directive:{code:'invalid-slot-directive',message:'<slot> cannot have directives'},dynamic_slot_name:{code:'dynamic-slot-name',message:'<slot> name cannot be dynamic'},invalid_slot_name:{code:'invalid-slot-name',message:'default is a reserved word — it cannot be used as a slot name'},invalid_slot_attribute_value_missing:{code:'invalid-slot-attribute',message:'slot attribute value is missing'},invalid_slotted_content_fragment:{code:'invalid-slotted-content',message:'<svelte:fragment> must be a child of a component'},illegal_attribute_title:{code:'illegal-attribute',message:'<title> cannot have attributes'},illegal_structure_title:{code:'illegal-structure',message:'<title> can only contain text and {tags}'},duplicate_transition:function duplicate_transition(directive,parent_directive){function describe(_directive){return _directive==='transition'?\"a 'transition'\":\"an '\".concat(_directive,\"'\");}var message=directive===parent_directive?\"An element can only have one '\".concat(directive,\"' directive\"):\"An element cannot have both \".concat(describe(parent_directive),\" directive and \").concat(describe(directive),\" directive\");return{code:'duplicate-transition',message:message};},contextual_store:{code:'contextual-store',message:'Stores must be declared at the top level of the component (this may change in a future version of Svelte)'},default_export:{code:'default-export',message:'A component cannot have a default export'},illegal_declaration:{code:'illegal-declaration',message:'The $ prefix is reserved, and cannot be used for variable and import names'},illegal_subscription:{code:'illegal-subscription',message:'Cannot reference store value inside <script context=\"module\">'},illegal_global:function illegal_global(name){return{code:'illegal-global',message:\"\".concat(name,\" is an illegal variable name\")};},cyclical_reactive_declaration:function cyclical_reactive_declaration(cycle){return{code:'cyclical-reactive-declaration',message:\"Cyclical dependency detected: \".concat(cycle.join(' → '))};},invalid_tag_property:{code:'invalid-tag-property',message:\"tag name must be two or more words joined by the '-' character\"},invalid_tag_attribute:{code:'invalid-tag-attribute',message:\"'tag' must be a string literal\"},invalid_namespace_property:function invalid_namespace_property(namespace,suggestion){return{code:'invalid-namespace-property',message:\"Invalid namespace '\".concat(namespace,\"'\")+(suggestion?\" (did you mean '\".concat(suggestion,\"'?)\"):'')};},invalid_namespace_attribute:{code:'invalid-namespace-attribute',message:\"The 'namespace' attribute must be a string literal representing a valid namespace\"},invalid_attribute_value:function invalid_attribute_value(name){return{code:\"invalid-\".concat(name,\"-value\"),message:\"\".concat(name,\" attribute must be true or false\")};},invalid_options_attribute_unknown:{code:'invalid-options-attribute',message:'<svelte:options> unknown attribute'},invalid_options_attribute:{code:'invalid-options-attribute',message:\"<svelte:options> can only have static 'tag', 'namespace', 'accessors', 'immutable' and 'preserveWhitespace' attributes\"},css_invalid_global:{code:'css-invalid-global',message:':global(...) can be at the start or end of a selector sequence, but not in the middle'},css_invalid_global_selector:{code:'css-invalid-global-selector',message:':global(...) must contain a single selector'},duplicate_animation:{code:'duplicate-animation',message:\"An element can only have one 'animate' directive\"},invalid_animation_immediate:{code:'invalid-animation',message:'An element that uses the animate directive must be the immediate child of a keyed each block'},invalid_animation_sole:{code:'invalid-animation',message:'An element that uses the animate directive must be the sole child of a keyed each block'},invalid_directive_value:{code:'invalid-directive-value',message:'Can only bind to an identifier (e.g. `foo`) or a member expression (e.g. `foo.bar` or `foo[baz]`)'},invalid_const_placement:{code:'invalid-const-placement',message:'{@const} must be the immediate child of {#each}, {:then}, {:catch}, <svelte:fragment> or <Component>'},invalid_const_declaration:function invalid_const_declaration(name){return{code:'invalid-const-declaration',message:\"'\".concat(name,\"' has already been declared\")};},invalid_const_update:function invalid_const_update(name){return{code:'invalid-const-update',message:\"'\".concat(name,\"' is declared using {@const ...} and is read-only\")};},cyclical_const_tags:function cyclical_const_tags(cycle){return{code:'cyclical-const-tags',message:\"Cyclical dependency detected: \".concat(cycle.join(' → '))};}};var Expression=/*#__PURE__*/function(){function Expression(component,owner,template_scope,info,lazy){(0,_classCallCheck2.default)(this,Expression);this.type='Expression';this.references=new Set();this.dependencies=new Set();this.contextual_dependencies=new Set();this.declarations=[];this.uses_context=false;// TODO revert to direct property access in prod?\nObject.defineProperties(this,{component:{value:component}});this.node=info;this.template_scope=template_scope;this.owner=owner;var dependencies=this.dependencies,contextual_dependencies=this.contextual_dependencies,references=this.references;var _create_scopes=create_scopes(info),map=_create_scopes.map,scope=_create_scopes.scope;this.scope=scope;this.scope_map=map;var expression=this;var function_expression;// discover dependencies, but don't change the code yet\nwalk(info,{enter:function enter(node,parent,key){// don't manipulate shorthand props twice\nif(key==='key'&&parent.shorthand)return;// don't manipulate `import.meta`, `new.target`\nif(node.type==='MetaProperty')return this.skip();if(map.has(node)){scope=map.get(node);}if(!function_expression&&/FunctionExpression/.test(node.type)){function_expression=node;}if(is_reference(node,parent)){var _flatten_reference=flatten_reference(node),name=_flatten_reference.name,nodes=_flatten_reference.nodes;references.add(name);if(scope.has(name))return;if(name[0]==='$'){var store_name=name.slice(1);if(template_scope.names.has(store_name)||scope.has(store_name)){return component.error(node,compiler_errors.contextual_store);}}if(template_scope.is_let(name)){if(!function_expression){// TODO should this be `!lazy` ?\ncontextual_dependencies.add(name);dependencies.add(name);}}else if(template_scope.names.has(name)){expression.uses_context=true;contextual_dependencies.add(name);var _owner=template_scope.get_owner(name);var is_index=_owner.type==='EachBlock'&&_owner.key&&name===_owner.index;if(!lazy||is_index){template_scope.dependencies_for_name.get(name).forEach(function(name){return dependencies.add(name);});}}else{if(!lazy){dependencies.add(name);}component.add_reference(name);component.warn_if_undefined(name,nodes[0],template_scope);}this.skip();}// track any assignments from template expressions as mutable\nvar names;var deep=false;if(function_expression){if(node.type==='AssignmentExpression'){deep=node.left.type==='MemberExpression';names=extract_names(deep?get_object(node.left):node.left);}else if(node.type==='UpdateExpression'){names=extract_names(get_object(node.argument));}}if(names){names.forEach(function(name){if(template_scope.names.has(name)){if(template_scope.is_const(name)){component.error(node,compiler_errors.invalid_const_update(name));}template_scope.dependencies_for_name.get(name).forEach(function(name){var variable=component.var_lookup.get(name);if(variable)variable[deep?'mutated':'reassigned']=true;});var each_block=template_scope.get_owner(name);each_block.has_binding=true;}else{component.add_reference(name);var variable=component.var_lookup.get(name);if(variable)variable[deep?'mutated':'reassigned']=true;}});}},leave:function leave(node){if(map.has(node)){scope=scope.parent;}if(node===function_expression){function_expression=null;}}});}(0,_createClass2.default)(Expression,[{key:\"dynamic_dependencies\",value:function dynamic_dependencies(){var _this7=this;return Array.from(this.dependencies).filter(function(name){if(_this7.template_scope.is_let(name))return true;if(is_reserved_keyword(name))return true;var variable=_this7.component.var_lookup.get(name);return is_dynamic(variable);});}// TODO move this into a render-dom wrapper?\n},{key:\"manipulate\",value:function manipulate(block,ctx){// TODO ideally we wouldn't end up calling this method\n// multiple times\nif(this.manipulated)return this.manipulated;var component=this.component,declarations=this.declarations,map=this.scope_map,template_scope=this.template_scope,owner=this.owner;var scope=this.scope;var function_expression;var dependencies;var contextual_dependencies;var node=walk(this.node,{enter:function enter(node,parent){if(node.type==='Property'&&node.shorthand){node.value=clone(node.value);node.shorthand=false;}if(map.has(node)){scope=map.get(node);}if(node.type==='Identifier'&&is_reference(node,parent)){var _flatten_reference2=flatten_reference(node),name=_flatten_reference2.name;if(scope.has(name))return;if(function_expression){if(template_scope.names.has(name)){contextual_dependencies.add(name);template_scope.dependencies_for_name.get(name).forEach(function(dependency){dependencies.add(dependency);});}else{dependencies.add(name);component.add_reference(name);// TODO is this redundant/misplaced?\n}}else if(is_contextual(component,template_scope,name)){var reference=block.renderer.reference(node,ctx);this.replace(reference);}this.skip();}if(!function_expression){if(node.type==='AssignmentExpression');if(node.type==='FunctionExpression'||node.type==='ArrowFunctionExpression'){function_expression=node;dependencies=new Set();contextual_dependencies=new Set();}}},leave:function leave(node,parent){if(map.has(node))scope=scope.parent;if(node===function_expression){var _id=component.get_unique_name(sanitize(get_function_name(node,owner)));var declaration=b(_templateObject60||(_templateObject60=(0,_taggedTemplateLiteral2.default)([\"const \",\" = \",\"\"])),_id,node);if(dependencies.size===0&&contextual_dependencies.size===0){// we can hoist this out of the component completely\ncomponent.fully_hoisted.push(declaration);this.replace(_id);component.add_var({name:_id.name,internal:true,hoistable:true,referenced:true});}else if(contextual_dependencies.size===0){// function can be hoisted inside the component init\ncomponent.partly_hoisted.push(declaration);block.renderer.add_to_context(_id.name);this.replace(block.renderer.reference(_id));}else{// we need a combo block/init recipe\nvar deps=Array.from(contextual_dependencies);var _function_expression=node;var has_args=_function_expression.params.length>0;_function_expression.params=[].concat((0,_toConsumableArray2.default)(deps.map(function(name){return{type:'Identifier',name:name};})),(0,_toConsumableArray2.default)(_function_expression.params));var context_args=deps.map(function(name){return block.renderer.reference(name);});component.partly_hoisted.push(declaration);block.renderer.add_to_context(_id.name);var callee=block.renderer.reference(_id);this.replace(_id);var func_declaration=has_args?b(_templateObject61||(_templateObject61=(0,_taggedTemplateLiteral2.default)([\"function \",\"(...args) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn \",\"(\",\", ...args);\\n\\t\\t\\t\\t\\t\\t\\t}\"])),_id,callee,context_args):b(_templateObject62||(_templateObject62=(0,_taggedTemplateLiteral2.default)([\"function \",\"() {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn \",\"(\",\");\\n\\t\\t\\t\\t\\t\\t\\t}\"])),_id,callee,context_args);if(owner.type==='Attribute'&&owner.parent.name==='slot'){var dep_scopes=new Set(deps.map(function(name){return template_scope.get_owner(name);}));// find the nearest scopes\nvar _node7=owner.parent;while(_node7&&!dep_scopes.has(_node7)){_node7=_node7.parent;}var func_expression=func_declaration[0];if(_node7.type==='InlineComponent'){// <Comp let:data />\nthis.replace(func_expression);}else{// {#each}, {#await}\nvar func_id=component.get_unique_name(_id.name+'_func');block.renderer.add_to_context(func_id.name,true);// rename #ctx -> child_ctx;\nwalk(func_expression,{enter:function enter(node){if(node.type==='Identifier'&&node.name==='#ctx'){node.name='child_ctx';}}});// add to get_xxx_context\n// child_ctx[x] = function () { ... }\ntemplate_scope.get_owner(deps[0]).contexts.push({key:func_id,modifier:function modifier(){return func_expression;},default_modifier:function default_modifier(node){return node;}});this.replace(block.renderer.reference(func_id));}}else{declarations.push(func_declaration);}}function_expression=null;dependencies=null;contextual_dependencies=null;if(parent&&parent.type==='Property'){parent.method=false;}}if(node.type==='AssignmentExpression'||node.type==='UpdateExpression'){var assignee=node.type==='AssignmentExpression'?node.left:node.argument;var object_name=get_object(assignee).name;if(scope.has(object_name))return;// normally (`a = 1`, `b.c = 2`), there'll be a single name\n// (a or b). In destructuring cases (`[d, e] = [e, d]`) there\n// may be more, in which case we need to tack the extra ones\n// onto the initial function call\nvar _names=new Set(extract_names(assignee));var traced=new Set();_names.forEach(function(name){var dependencies=template_scope.dependencies_for_name.get(name);if(dependencies){dependencies.forEach(function(name){return traced.add(name);});}else{traced.add(name);}});var context=block.bindings.get(object_name);if(context){// for `{#each array as item}`\n// replace `item = 1` to `each_array[each_index] = 1`, this allow us to mutate the array\n// rather than mutating the local `item` variable\nvar snippet=context.snippet,object=context.object,property=context.property;var replaced=replace_object(assignee,snippet);if(node.type==='AssignmentExpression'){node.left=replaced;}else{node.argument=replaced;}contextual_dependencies.add(object.name);contextual_dependencies.add(property.name);}this.replace(invalidate(block.renderer,scope,node,traced));}}});if(declarations.length>0){block.maintain_context=true;declarations.forEach(function(declaration){block.chunks.init.push(declaration);});}return this.manipulated=node;}}]);return Expression;}();function get_function_name(_node,parent){if(parent.type==='EventHandler'){return\"\".concat(parent.name,\"_handler\");}if(parent.type==='Action'){return\"\".concat(parent.name,\"_function\");}return'func';}function unpack_destructuring(_ref4){var contexts=_ref4.contexts,node=_ref4.node,_ref4$modifier=_ref4.modifier,_modifier=_ref4$modifier===void 0?function(node){return node;}:_ref4$modifier,_ref4$default_modifie=_ref4.default_modifier,default_modifier=_ref4$default_modifie===void 0?function(node){return node;}:_ref4$default_modifie,scope=_ref4.scope,component=_ref4.component;if(!node)return;if(node.type==='Identifier'){contexts.push({key:node,modifier:_modifier,default_modifier:default_modifier});}else if(node.type==='RestElement'){contexts.push({key:node.argument,modifier:_modifier,default_modifier:default_modifier});}else if(node.type==='ArrayPattern'){node.elements.forEach(function(element,i){if(element&&element.type==='RestElement'){unpack_destructuring({contexts:contexts,node:element,modifier:function modifier(node){return x(_templateObject63||(_templateObject63=(0,_taggedTemplateLiteral2.default)([\"\",\".slice(\",\")\"])),_modifier(node),i);},default_modifier:default_modifier,scope:scope,component:component});}else if(element&&element.type==='AssignmentPattern'){var _n=contexts.length;mark_referenced(element.right,scope,component);unpack_destructuring({contexts:contexts,node:element.left,modifier:function modifier(node){return x(_templateObject64||(_templateObject64=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),_modifier(node),i);},default_modifier:function default_modifier(node,to_ctx){return x(_templateObject65||(_templateObject65=(0,_taggedTemplateLiteral2.default)([\"\",\" !== undefined ? \",\" : \",\"\"])),node,node,update_reference(contexts,_n,element.right,to_ctx));},scope:scope,component:component});}else{unpack_destructuring({contexts:contexts,node:element,modifier:function modifier(node){return x(_templateObject66||(_templateObject66=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),_modifier(node),i);},default_modifier:default_modifier,scope:scope,component:component});}});}else if(node.type==='ObjectPattern'){var used_properties=[];node.properties.forEach(function(property){if(property.type==='RestElement'){unpack_destructuring({contexts:contexts,node:property.argument,modifier:function modifier(node){return x(_templateObject67||(_templateObject67=(0,_taggedTemplateLiteral2.default)([\"@object_without_properties(\",\", [\",\"])\"])),_modifier(node),used_properties);},default_modifier:default_modifier,scope:scope,component:component});}else{var key=property.key;var _value6=property.value;used_properties.push(x(_templateObject68||(_templateObject68=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"])),key.name));if(_value6.type==='AssignmentPattern'){var _n2=contexts.length;mark_referenced(_value6.right,scope,component);unpack_destructuring({contexts:contexts,node:_value6.left,modifier:function modifier(node){return x(_templateObject69||(_templateObject69=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"])),_modifier(node),key.name);},default_modifier:function default_modifier(node,to_ctx){return x(_templateObject70||(_templateObject70=(0,_taggedTemplateLiteral2.default)([\"\",\" !== undefined ? \",\" : \",\"\"])),node,node,update_reference(contexts,_n2,_value6.right,to_ctx));},scope:scope,component:component});}else{unpack_destructuring({contexts:contexts,node:_value6,modifier:function modifier(node){return x(_templateObject71||(_templateObject71=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"])),_modifier(node),key.name);},default_modifier:default_modifier,scope:scope,component:component});}}});}}function update_reference(contexts,n,expression,to_ctx){var find_from_context=function find_from_context(node){for(var _i33=n;_i33<contexts.length;_i33++){var key=contexts[_i33].key;if(node.name===key.name){throw new Error(\"Cannot access '\".concat(node.name,\"' before initialization\"));}}return to_ctx(node.name);};if(expression.type==='Identifier'){return find_from_context(expression);}// NOTE: avoid unnecessary deep clone?\nexpression=clone(expression);walk(expression,{enter:function enter(node,parent){if(is_reference(node,parent)){this.replace(find_from_context(node));this.skip();}}});return expression;}function mark_referenced(node,scope,component){walk(node,{enter:function enter(node,parent){if(is_reference(node,parent)){var _flatten_reference3=flatten_reference(node),name=_flatten_reference3.name;if(!scope.is_let(name)&&!scope.names.has(name)){component.add_reference(name);}}}});}var allowed_parents=new Set(['EachBlock','CatchBlock','ThenBlock','InlineComponent','SlotTemplate']);var ConstTag=/*#__PURE__*/function(_Node$2){(0,_inherits2.default)(ConstTag,_Node$2);var _super4=_createSuper(ConstTag);function ConstTag(component,parent,scope,info){var _this8;(0,_classCallCheck2.default)(this,ConstTag);_this8=_super4.call(this,component,parent,scope,info);_this8.contexts=[];_this8.assignees=new Set();_this8.dependencies=new Set();if(!allowed_parents.has(parent.type)){component.error(info,compiler_errors.invalid_const_placement);}_this8.node=info;_this8.scope=scope;var _assertThisInitialize=(0,_assertThisInitialized2.default)(_this8),assignees=_assertThisInitialize.assignees,dependencies=_assertThisInitialize.dependencies;extract_identifiers(info.expression.left).forEach(function(_ref5){var name=_ref5.name;assignees.add(name);var owner=_this8.scope.get_owner(name);if(owner===parent){component.error(info,compiler_errors.invalid_const_declaration(name));}});walk(info.expression.right,{enter:function enter(node,parent){if(is_reference(node,parent)){var identifier=get_object(node);var name=identifier.name;dependencies.add(name);}}});return _this8;}(0,_createClass2.default)(ConstTag,[{key:\"parse_expression\",value:function parse_expression(){var _this9=this;unpack_destructuring({contexts:this.contexts,node:this.node.expression.left,scope:this.scope,component:this.component});this.expression=new Expression(this.component,this,this.scope,this.node.expression.right);this.contexts.forEach(function(context){var owner=_this9.scope.get_owner(context.key.name);if(owner&&owner.type==='ConstTag'&&owner.parent===_this9.parent){_this9.component.error(_this9.node,compiler_errors.invalid_const_declaration(context.key.name));}_this9.scope.add(context.key.name,_this9.expression.dependencies,_this9);});}}]);return ConstTag;}(Node$1);var PendingBlock=/*#__PURE__*/function(_AbstractBlock){(0,_inherits2.default)(PendingBlock,_AbstractBlock);var _super5=_createSuper(PendingBlock);function PendingBlock(component,parent,scope,info){var _this10;(0,_classCallCheck2.default)(this,PendingBlock);_this10=_super5.call(this,component,parent,scope,info);_this10.children=map_children(component,parent,scope,info.children);if(!info.skip){_this10.warn_if_empty_block();}return _this10;}return(0,_createClass2.default)(PendingBlock);}(AbstractBlock);var CatchBlock=/*#__PURE__*/function(_AbstractBlock2){(0,_inherits2.default)(CatchBlock,_AbstractBlock2);var _super6=_createSuper(CatchBlock);function CatchBlock(component,parent,scope,info){var _this11;(0,_classCallCheck2.default)(this,CatchBlock);_this11=_super6.call(this,component,parent,scope,info);_this11.scope=scope.child();if(parent.catch_node){parent.catch_contexts.forEach(function(context){_this11.scope.add(context.key.name,parent.expression.dependencies,(0,_assertThisInitialized2.default)(_this11));});}var _get_const_tags=get_const_tags(info.children,component,(0,_assertThisInitialized2.default)(_this11),parent);var _get_const_tags2=(0,_slicedToArray2.default)(_get_const_tags,2);_this11.const_tags=_get_const_tags2[0];_this11.children=_get_const_tags2[1];if(!info.skip){_this11.warn_if_empty_block();}return _this11;}return(0,_createClass2.default)(CatchBlock);}(AbstractBlock);var AwaitBlock=/*#__PURE__*/function(_Node$3){(0,_inherits2.default)(AwaitBlock,_Node$3);var _super7=_createSuper(AwaitBlock);function AwaitBlock(component,parent,scope,info){var _this12;(0,_classCallCheck2.default)(this,AwaitBlock);_this12=_super7.call(this,component,parent,scope,info);_this12.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this12),scope,info.expression);_this12.then_node=info.value;_this12.catch_node=info.error;if(_this12.then_node){_this12.then_contexts=[];unpack_destructuring({contexts:_this12.then_contexts,node:info.value,scope:scope,component:component});}if(_this12.catch_node){_this12.catch_contexts=[];unpack_destructuring({contexts:_this12.catch_contexts,node:info.error,scope:scope,component:component});}_this12.pending=new PendingBlock(component,(0,_assertThisInitialized2.default)(_this12),scope,info.pending);_this12.then=new ThenBlock(component,(0,_assertThisInitialized2.default)(_this12),scope,info.then);_this12.catch=new CatchBlock(component,(0,_assertThisInitialized2.default)(_this12),scope,info.catch);return _this12;}return(0,_createClass2.default)(AwaitBlock);}(Node$1);var EventHandler=/*#__PURE__*/function(_Node$4){(0,_inherits2.default)(EventHandler,_Node$4);var _super8=_createSuper(EventHandler);function EventHandler(component,parent,template_scope,info){var _this13;(0,_classCallCheck2.default)(this,EventHandler);_this13=_super8.call(this,component,parent,template_scope,info);_this13.uses_context=false;_this13.can_make_passive=false;_this13.name=info.name;_this13.modifiers=new Set(info.modifiers);if(info.expression){_this13.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this13),template_scope,info.expression);_this13.uses_context=_this13.expression.uses_context;if(/FunctionExpression/.test(info.expression.type)&&info.expression.params.length===0){// TODO make this detection more accurate — if `event.preventDefault` isn't called, and\n// `event` is passed to another function, we can make it passive\n_this13.can_make_passive=true;}else if(info.expression.type==='Identifier'){var _node8=component.node_for_declaration.get(info.expression.name);if(_node8){if(_node8.type==='VariableDeclaration'){// for `const handleClick = () => {...}`, we want the [arrow] function expression node\nvar declarator=_node8.declarations.find(function(d){return d.id.name===info.expression.name;});_node8=declarator&&declarator.init;}if(_node8&&(_node8.type==='FunctionExpression'||_node8.type==='FunctionDeclaration'||_node8.type==='ArrowFunctionExpression')&&_node8.params.length===0){_this13.can_make_passive=true;}}}}else{_this13.handler_name=component.get_unique_name(\"\".concat(sanitize(_this13.name),\"_handler\"));}return _this13;}(0,_createClass2.default)(EventHandler,[{key:\"reassigned\",get:function get(){if(!this.expression){return false;}var node=this.expression.node;if(/FunctionExpression/.test(node.type)){return false;}return this.expression.dynamic_dependencies().length>0;}}]);return EventHandler;}(Node$1);var Action=/*#__PURE__*/function(_Node$5){(0,_inherits2.default)(Action,_Node$5);var _super9=_createSuper(Action);function Action(component,parent,scope,info){var _this14;(0,_classCallCheck2.default)(this,Action);_this14=_super9.call(this,component,parent,scope,info);var object=info.name.split('.')[0];component.warn_if_undefined(object,info,scope);_this14.name=info.name;component.add_reference(object);_this14.expression=info.expression?new Expression(component,(0,_assertThisInitialized2.default)(_this14),scope,info.expression):null;_this14.template_scope=scope;_this14.uses_context=_this14.expression&&_this14.expression.uses_context;return _this14;}return(0,_createClass2.default)(Action);}(Node$1);var Body=/*#__PURE__*/function(_Node$6){(0,_inherits2.default)(Body,_Node$6);var _super10=_createSuper(Body);function Body(component,parent,scope,info){var _this15;(0,_classCallCheck2.default)(this,Body);_this15=_super10.call(this,component,parent,scope,info);_this15.handlers=[];_this15.actions=[];info.attributes.forEach(function(node){if(node.type==='EventHandler'){_this15.handlers.push(new EventHandler(component,(0,_assertThisInitialized2.default)(_this15),scope,node));}else if(node.type==='Action'){_this15.actions.push(new Action(component,(0,_assertThisInitialized2.default)(_this15),scope,node));}});return _this15;}return(0,_createClass2.default)(Body);}(Node$1);var Comment$1=/*#__PURE__*/function(_Node$7){(0,_inherits2.default)(Comment$1,_Node$7);var _super11=_createSuper(Comment$1);function Comment$1(component,parent,scope,info){var _this16;(0,_classCallCheck2.default)(this,Comment$1);_this16=_super11.call(this,component,parent,scope,info);_this16.data=info.data;_this16.ignores=info.ignores;return _this16;}return(0,_createClass2.default)(Comment$1);}(Node$1);var ElseBlock=/*#__PURE__*/function(_AbstractBlock3){(0,_inherits2.default)(ElseBlock,_AbstractBlock3);var _super12=_createSuper(ElseBlock);function ElseBlock(component,parent,scope,info){var _this17;(0,_classCallCheck2.default)(this,ElseBlock);_this17=_super12.call(this,component,parent,scope,info);_this17.children=map_children(component,(0,_assertThisInitialized2.default)(_this17),scope,info.children);_this17.warn_if_empty_block();return _this17;}return(0,_createClass2.default)(ElseBlock);}(AbstractBlock);var EachBlock=/*#__PURE__*/function(_AbstractBlock4){(0,_inherits2.default)(EachBlock,_AbstractBlock4);var _super13=_createSuper(EachBlock);function EachBlock(component,parent,scope,info){var _this18;(0,_classCallCheck2.default)(this,EachBlock);_this18=_super13.call(this,component,parent,scope,info);_this18.has_binding=false;_this18.has_index_binding=false;_this18.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this18),scope,info.expression);_this18.context=info.context.name||'each';// TODO this is used to facilitate binding; currently fails with destructuring\n_this18.context_node=info.context;_this18.index=info.index;_this18.scope=scope.child();_this18.contexts=[];unpack_destructuring({contexts:_this18.contexts,node:info.context,scope:scope,component:component});_this18.contexts.forEach(function(context){_this18.scope.add(context.key.name,_this18.expression.dependencies,(0,_assertThisInitialized2.default)(_this18));});if(_this18.index){// index can only change if this is a keyed each block\nvar dependencies=info.key?_this18.expression.dependencies:new Set([]);_this18.scope.add(_this18.index,dependencies,(0,_assertThisInitialized2.default)(_this18));}_this18.key=info.key?new Expression(component,(0,_assertThisInitialized2.default)(_this18),_this18.scope,info.key):null;_this18.has_animation=false;var _get_const_tags3=get_const_tags(info.children,component,(0,_assertThisInitialized2.default)(_this18),(0,_assertThisInitialized2.default)(_this18));var _get_const_tags4=(0,_slicedToArray2.default)(_get_const_tags3,2);_this18.const_tags=_get_const_tags4[0];_this18.children=_get_const_tags4[1];if(_this18.has_animation){if(_this18.children.length!==1){var child=_this18.children.find(function(child){return!!child.animation;});component.error(child.animation,compiler_errors.invalid_animation_sole);return(0,_possibleConstructorReturn2.default)(_this18);}}_this18.warn_if_empty_block();_this18.else=info.else?new ElseBlock(component,(0,_assertThisInitialized2.default)(_this18),_this18.scope,info.else):null;return _this18;}return(0,_createClass2.default)(EachBlock);}(AbstractBlock);function string_literal(data){return{type:'Literal',value:data};}var escaped={'\"':'&quot;',\"'\":'&#39;','&':'&amp;','<':'&lt;','>':'&gt;'};function escape_html(html){return String(html).replace(/[\"'&<>]/g,function(match){return escaped[match];});}function escape_template(str){return str.replace(/(\\${|`|\\\\)/g,'\\\\$1');}function add_to_set(a,b){// @ts-ignore\nb.forEach(function(item){a.add(item);});}var Attribute=/*#__PURE__*/function(_Node$8){(0,_inherits2.default)(Attribute,_Node$8);var _super14=_createSuper(Attribute);function Attribute(component,parent,scope,info){var _this19;(0,_classCallCheck2.default)(this,Attribute);_this19=_super14.call(this,component,parent,scope,info);_this19.scope=scope;if(info.type==='Spread'){_this19.name=null;_this19.is_spread=true;_this19.is_true=false;_this19.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this19),scope,info.expression);_this19.dependencies=_this19.expression.dependencies;_this19.chunks=null;_this19.is_static=false;}else{_this19.name=info.name;_this19.is_true=info.value===true;_this19.is_static=true;_this19.dependencies=new Set();_this19.chunks=_this19.is_true?[]:info.value.map(function(node){if(node.type==='Text')return node;_this19.is_static=false;var expression=new Expression(component,(0,_assertThisInitialized2.default)(_this19),scope,node.expression);add_to_set(_this19.dependencies,expression.dependencies);return expression;});}return _this19;}(0,_createClass2.default)(Attribute,[{key:\"get_dependencies\",value:function get_dependencies(){if(this.is_spread)return this.expression.dynamic_dependencies();var dependencies=new Set();this.chunks.forEach(function(chunk){if(chunk.type==='Expression'){add_to_set(dependencies,chunk.dynamic_dependencies());}});return Array.from(dependencies);}},{key:\"get_value\",value:function get_value(block){if(this.is_true)return x(_templateObject72||(_templateObject72=(0,_taggedTemplateLiteral2.default)([\"true\"])));if(this.chunks.length===0)return x(_templateObject73||(_templateObject73=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"])));if(this.chunks.length===1){return this.chunks[0].type==='Text'?string_literal(this.chunks[0].data):this.chunks[0].manipulate(block);}var expression=this.chunks.map(function(chunk){return chunk.type==='Text'?string_literal(chunk.data):chunk.manipulate(block);}).reduce(function(lhs,rhs){return x(_templateObject74||(_templateObject74=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"])),lhs,rhs);});if(this.chunks[0].type!=='Text'){expression=x(_templateObject75||(_templateObject75=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\" + \",\"\"])),expression);}return expression;}},{key:\"get_static_value\",value:function get_static_value(){if(!this.is_static)return null;return this.is_true?true:this.chunks[0]// method should be called only when `is_static = true`\n?this.chunks[0].data:'';}},{key:\"should_cache\",value:function should_cache(){return this.is_static?false:this.chunks.length===1// @ts-ignore todo: probably error\n?this.chunks[0].node.type!=='Identifier'||this.scope.names.has(this.chunks[0].node.name):true;}}]);return Attribute;}(Node$1);// TODO this should live in a specific binding\nvar read_only_media_attributes=new Set(['duration','buffered','seekable','played','seeking','ended','videoHeight','videoWidth']);var Binding=/*#__PURE__*/function(_Node$9){(0,_inherits2.default)(Binding,_Node$9);var _super15=_createSuper(Binding);function Binding(component,parent,scope,info){var _this20;(0,_classCallCheck2.default)(this,Binding);_this20=_super15.call(this,component,parent,scope,info);if(info.expression.type!=='Identifier'&&info.expression.type!=='MemberExpression'){component.error(info,compiler_errors.invalid_directive_value);return(0,_possibleConstructorReturn2.default)(_this20);}_this20.name=info.name;_this20.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this20),scope,info.expression);_this20.raw_expression=clone(info.expression);var _get_object=get_object(_this20.expression.node),name=_get_object.name;_this20.is_contextual=Array.from(_this20.expression.references).some(function(name){return scope.names.has(name);});// make sure we track this as a mutable ref\nif(scope.is_let(name)){component.error((0,_assertThisInitialized2.default)(_this20),compiler_errors.invalid_binding_let);return(0,_possibleConstructorReturn2.default)(_this20);}else if(scope.names.has(name)){if(scope.is_await(name)){component.error((0,_assertThisInitialized2.default)(_this20),compiler_errors.invalid_binding_await);return(0,_possibleConstructorReturn2.default)(_this20);}if(scope.is_const(name)){component.error((0,_assertThisInitialized2.default)(_this20),compiler_errors.invalid_binding_const);}scope.dependencies_for_name.get(name).forEach(function(name){var variable=component.var_lookup.get(name);if(variable){variable.mutated=true;}});}else{var variable=component.var_lookup.get(name);if(!variable||variable.global){component.error(_this20.expression.node,compiler_errors.binding_undeclared(name));return(0,_possibleConstructorReturn2.default)(_this20);}variable[_this20.expression.node.type==='MemberExpression'?'mutated':'reassigned']=true;if(info.expression.type==='Identifier'&&!variable.writable){component.error(_this20.expression.node,compiler_errors.invalid_binding_writibale);return(0,_possibleConstructorReturn2.default)(_this20);}}var type=parent.get_static_attribute_value('type');_this20.is_readonly=dimensions.test(_this20.name)||isElement(parent)&&(parent.is_media_node()&&read_only_media_attributes.has(_this20.name)||parent.name==='input'&&type==='file')/* TODO others? */;return _this20;}(0,_createClass2.default)(Binding,[{key:\"is_readonly_media_attribute\",value:function is_readonly_media_attribute(){return read_only_media_attributes.has(this.name);}}]);return Binding;}(Node$1);function isElement(node){return!!node.is_media_node;}var Transition=/*#__PURE__*/function(_Node$10){(0,_inherits2.default)(Transition,_Node$10);var _super16=_createSuper(Transition);function Transition(component,parent,scope,info){var _this21;(0,_classCallCheck2.default)(this,Transition);_this21=_super16.call(this,component,parent,scope,info);component.warn_if_undefined(info.name,info,scope);_this21.name=info.name;component.add_reference(info.name.split('.')[0]);_this21.directive=info.intro&&info.outro?'transition':info.intro?'in':'out';_this21.is_local=info.modifiers.includes('local');if(info.intro&&parent.intro||info.outro&&parent.outro){var parent_transition=parent.intro||parent.outro;component.error(info,compiler_errors.duplicate_transition(_this21.directive,parent_transition.directive));return(0,_possibleConstructorReturn2.default)(_this21);}_this21.expression=info.expression?new Expression(component,(0,_assertThisInitialized2.default)(_this21),scope,info.expression):null;return _this21;}return(0,_createClass2.default)(Transition);}(Node$1);var Animation=/*#__PURE__*/function(_Node$11){(0,_inherits2.default)(Animation,_Node$11);var _super17=_createSuper(Animation);function Animation(component,parent,scope,info){var _this22;(0,_classCallCheck2.default)(this,Animation);_this22=_super17.call(this,component,parent,scope,info);component.warn_if_undefined(info.name,info,scope);_this22.name=info.name;component.add_reference(info.name.split('.')[0]);if(parent.animation){component.error((0,_assertThisInitialized2.default)(_this22),compiler_errors.duplicate_animation);return(0,_possibleConstructorReturn2.default)(_this22);}var block=parent.parent;if(!block||block.type!=='EachBlock'||!block.key){// TODO can we relax the 'immediate child' rule?\ncomponent.error((0,_assertThisInitialized2.default)(_this22),compiler_errors.invalid_animation_immediate);return(0,_possibleConstructorReturn2.default)(_this22);}block.has_animation=true;_this22.expression=info.expression?new Expression(component,(0,_assertThisInitialized2.default)(_this22),scope,info.expression,true):null;return _this22;}return(0,_createClass2.default)(Animation);}(Node$1);var Class=/*#__PURE__*/function(_Node$12){(0,_inherits2.default)(Class,_Node$12);var _super18=_createSuper(Class);function Class(component,parent,scope,info){var _this23;(0,_classCallCheck2.default)(this,Class);_this23=_super18.call(this,component,parent,scope,info);_this23.name=info.name;_this23.expression=info.expression?new Expression(component,(0,_assertThisInitialized2.default)(_this23),scope,info.expression):null;return _this23;}return(0,_createClass2.default)(Class);}(Node$1);/**\n * Transforms a list of Text and MustacheTags into a TemplateLiteral expression.\n * Start/End positions on the elements of the expression are not set.\n */function nodes_to_template_literal(value){var literal={type:'TemplateLiteral',expressions:[],quasis:[]};var quasi={type:'TemplateElement',value:{raw:'',cooked:null},tail:false};value.forEach(function(node){if(node.type==='Text'){quasi.value.raw+=node.raw;}else if(node.type==='MustacheTag'){literal.quasis.push(quasi);literal.expressions.push(node.expression);quasi={type:'TemplateElement',value:{raw:'',cooked:null},tail:false};}});quasi.tail=true;literal.quasis.push(quasi);return literal;}var StyleDirective=/*#__PURE__*/function(_Node$13){(0,_inherits2.default)(StyleDirective,_Node$13);var _super19=_createSuper(StyleDirective);function StyleDirective(component,parent,scope,info){var _this24;(0,_classCallCheck2.default)(this,StyleDirective);_this24=_super19.call(this,component,parent,scope,info);_this24.name=info.name;// Convert the value array to an expression so it's easier to handle\n// the StyleDirective going forward.\nif(info.value===true||info.value.length===1&&info.value[0].type==='MustacheTag'){var identifier=info.value===true?{type:'Identifier',start:info.end-info.name.length,end:info.end,name:info.name}:info.value[0].expression;_this24.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this24),scope,identifier);_this24.should_cache=false;}else{var raw_expression=nodes_to_template_literal(info.value);_this24.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this24),scope,raw_expression);_this24.should_cache=raw_expression.expressions.length>0;}return _this24;}return(0,_createClass2.default)(StyleDirective);}(Node$1);// Whitespace inside one of these elements will not result in\n// a whitespace node being created in any circumstances. (This\n// list is almost certainly very incomplete)\nvar elements_without_text=new Set(['audio','datalist','dl','optgroup','select','video']);var Text=/*#__PURE__*/function(_Node$14){(0,_inherits2.default)(Text,_Node$14);var _super20=_createSuper(Text);function Text(component,parent,scope,info){var _this25;(0,_classCallCheck2.default)(this,Text);_this25=_super20.call(this,component,parent,scope,info);_this25.data=info.data;_this25.synthetic=info.synthetic||false;return _this25;}(0,_createClass2.default)(Text,[{key:\"should_skip\",value:function should_skip(){if(/\\S/.test(this.data))return false;var parent_element=this.find_nearest(/(?:Element|InlineComponent|SlotTemplate|Head)/);if(!parent_element)return false;if(parent_element.type==='Head')return true;if(parent_element.type==='InlineComponent')return parent_element.children.length===1&&this===parent_element.children[0];// svg namespace exclusions\nif(/svg$/.test(parent_element.namespace)){if(this.prev&&this.prev.type==='Element'&&this.prev.name==='tspan')return false;}return parent_element.namespace||elements_without_text.has(parent_element.name);}}]);return Text;}(Node$1);// The `foreign` namespace covers all DOM implementations that aren't HTML5.\n// It opts out of HTML5-specific a11y checks and case-insensitive attribute names.\nvar foreign='https://svelte.dev/docs#template-syntax-svelte-options';var html='http://www.w3.org/1999/xhtml';var mathml='http://www.w3.org/1998/Math/MathML';var svg='http://www.w3.org/2000/svg';var xlink='http://www.w3.org/1999/xlink';var xml='http://www.w3.org/XML/1998/namespace';var xmlns='http://www.w3.org/2000/xmlns';var valid_namespaces=['foreign','html','mathml','svg','xlink','xml','xmlns',foreign,html,mathml,svg,xlink,xml,xmlns];var namespaces={foreign:foreign,html:html,mathml:mathml,svg:svg,xlink:xlink,xml:xml,xmlns:xmlns};var applicable=new Set(['Identifier','ObjectExpression','ArrayExpression','Property']);var Let=/*#__PURE__*/function(_Node$15){(0,_inherits2.default)(Let,_Node$15);var _super21=_createSuper(Let);function Let(component,parent,scope,info){var _this26;(0,_classCallCheck2.default)(this,Let);_this26=_super21.call(this,component,parent,scope,info);_this26.names=[];_this26.name={type:'Identifier',name:info.name};var _assertThisInitialize2=(0,_assertThisInitialized2.default)(_this26),names=_assertThisInitialize2.names;if(info.expression){_this26.value=info.expression;walk(info.expression,{enter:function enter(node){if(!applicable.has(node.type)){return component.error(node,compiler_errors.invalid_let);}if(node.type==='Identifier'){names.push(node.name);}// slightly unfortunate hack\nif(node.type==='ArrayExpression'){node.type='ArrayPattern';}if(node.type==='ObjectExpression'){node.type='ObjectPattern';}}});}else{names.push(_this26.name.name);}return _this26;}return(0,_createClass2.default)(Let);}(Node$1);var svg$1=/^(?:altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform|circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix|feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting|feSpotLight|feTile|feTurbulence|filter|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern|image|line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata|missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor|stop|svg|switch|symbol|text|textPath|tref|tspan|unknown|use|view|vkern)$/;var aria_attributes='activedescendant atomic autocomplete busy checked colcount colindex colspan controls current describedby details disabled dropeffect errormessage expanded flowto grabbed haspopup hidden invalid keyshortcuts label labelledby level live modal multiline multiselectable orientation owns placeholder posinset pressed readonly relevant required roledescription rowcount rowindex rowspan selected setsize sort valuemax valuemin valuenow valuetext'.split(' ');var aria_attribute_set=new Set(aria_attributes);var aria_roles='alert alertdialog application article banner blockquote button caption cell checkbox code columnheader combobox complementary contentinfo definition deletion dialog directory document emphasis feed figure form generic graphics-document graphics-object graphics-symbol grid gridcell group heading img link list listbox listitem log main marquee math meter menu menubar menuitem menuitemcheckbox menuitemradio navigation none note option paragraph presentation progressbar radio radiogroup region row rowgroup rowheader scrollbar search searchbox separator slider spinbutton status strong subscript superscript switch tab table tablist tabpanel term textbox time timer toolbar tooltip tree treegrid treeitem'.split(' ');var aria_role_set=new Set(aria_roles);var a11y_required_attributes={a:['href'],area:['alt','aria-label','aria-labelledby'],// html-has-lang\nhtml:['lang'],// iframe-has-title\niframe:['title'],img:['alt'],object:['title','aria-label','aria-labelledby']};var a11y_distracting_elements=new Set(['blink','marquee']);var a11y_required_content=new Set([// anchor-has-content\n'a',// heading-has-content\n'h1','h2','h3','h4','h5','h6']);var a11y_labelable=new Set(['button','input','keygen','meter','output','progress','select','textarea']);var a11y_nested_implicit_semantics=new Map([['header','banner'],['footer','contentinfo']]);var a11y_implicit_semantics=new Map([['a','link'],['aside','complementary'],['body','document'],['datalist','listbox'],['dd','definition'],['dfn','term'],['details','group'],['dt','term'],['fieldset','group'],['form','form'],['h1','heading'],['h2','heading'],['h3','heading'],['h4','heading'],['h5','heading'],['h6','heading'],['hr','separator'],['li','listitem'],['menu','list'],['nav','navigation'],['ol','list'],['optgroup','group'],['output','status'],['progress','progressbar'],['section','region'],['summary','button'],['tbody','rowgroup'],['textarea','textbox'],['tfoot','rowgroup'],['thead','rowgroup'],['tr','row'],['ul','list']]);var invisible_elements=new Set(['meta','html','script','style']);var valid_modifiers=new Set(['preventDefault','stopPropagation','capture','once','passive','nonpassive','self','trusted']);var passive_events=new Set(['wheel','touchstart','touchmove','touchend','touchcancel']);var react_attributes=new Map([['className','class'],['htmlFor','for']]);var attributes_to_compact_whitespace=['class','style'];function is_parent(parent,elements){var check=false;while(parent){var parent_name=parent.name;if(elements.includes(parent_name)){check=true;break;}if(parent.type==='Element'){break;}parent=parent.parent;}return check;}function get_namespace(parent,element,explicit_namespace){var parent_element=parent.find_nearest(/^Element/);if(!parent_element){return explicit_namespace||(svg$1.test(element.name)?namespaces.svg:null);}if(parent_element.namespace!==namespaces.foreign){if(svg$1.test(element.name.toLowerCase()))return namespaces.svg;if(parent_element.name.toLowerCase()==='foreignobject')return null;}return parent_element.namespace;}var Element=/*#__PURE__*/function(_Node$16){(0,_inherits2.default)(Element,_Node$16);var _super22=_createSuper(Element);function Element(component,parent,scope,info){var _this27;(0,_classCallCheck2.default)(this,Element);_this27=_super22.call(this,component,parent,scope,info);_this27.attributes=[];_this27.actions=[];_this27.bindings=[];_this27.classes=[];_this27.styles=[];_this27.handlers=[];_this27.lets=[];_this27.intro=null;_this27.outro=null;_this27.animation=null;_this27.name=info.name;_this27.namespace=get_namespace(parent,(0,_assertThisInitialized2.default)(_this27),component.namespace);if(_this27.namespace!==namespaces.foreign){if(_this27.name==='textarea'){if(info.children.length>0){var value_attribute=info.attributes.find(function(node){return node.name==='value';});if(value_attribute){component.error(value_attribute,compiler_errors.textarea_duplicate_value);return(0,_possibleConstructorReturn2.default)(_this27);}// this is an egregious hack, but it's the easiest way to get <textarea>\n// children treated the same way as a value attribute\ninfo.attributes.push({type:'Attribute',name:'value',value:info.children});info.children=[];}}if(_this27.name==='option'){// Special case — treat these the same way:\n//   <option>{foo}</option>\n//   <option value={foo}>{foo}</option>\nvar _value_attribute=info.attributes.find(function(attribute){return attribute.name==='value';});if(!_value_attribute){info.attributes.push({type:'Attribute',name:'value',value:info.children,synthetic:true});}}}var has_let=info.attributes.some(function(node){return node.type==='Let';});if(has_let){scope=scope.child();}// Binding relies on Attribute, defer its evaluation\nvar order=['Binding'];// everything else is -1\ninfo.attributes.sort(function(a,b){return order.indexOf(a.type)-order.indexOf(b.type);});info.attributes.forEach(function(node){switch(node.type){case'Action':_this27.actions.push(new Action(component,(0,_assertThisInitialized2.default)(_this27),scope,node));break;case'Attribute':case'Spread':// special case\nif(node.name==='xmlns')_this27.namespace=node.value[0].data;_this27.attributes.push(new Attribute(component,(0,_assertThisInitialized2.default)(_this27),scope,node));break;case'Binding':_this27.bindings.push(new Binding(component,(0,_assertThisInitialized2.default)(_this27),scope,node));break;case'Class':_this27.classes.push(new Class(component,(0,_assertThisInitialized2.default)(_this27),scope,node));break;case'StyleDirective':_this27.styles.push(new StyleDirective(component,(0,_assertThisInitialized2.default)(_this27),scope,node));break;case'EventHandler':_this27.handlers.push(new EventHandler(component,(0,_assertThisInitialized2.default)(_this27),scope,node));break;case'Let':{var l=new Let(component,(0,_assertThisInitialized2.default)(_this27),scope,node);_this27.lets.push(l);var dependencies=new Set([l.name.name]);l.names.forEach(function(name){scope.add(name,dependencies,(0,_assertThisInitialized2.default)(_this27));});break;}case'Transition':{var transition=new Transition(component,(0,_assertThisInitialized2.default)(_this27),scope,node);if(node.intro)_this27.intro=transition;if(node.outro)_this27.outro=transition;break;}case'Animation':_this27.animation=new Animation(component,(0,_assertThisInitialized2.default)(_this27),scope,node);break;default:throw new Error(\"Not implemented: \".concat(node.type));}});_this27.scope=scope;_this27.children=map_children(component,(0,_assertThisInitialized2.default)(_this27),_this27.scope,info.children);_this27.validate();_this27.optimise();component.apply_stylesheet((0,_assertThisInitialized2.default)(_this27));return _this27;}(0,_createClass2.default)(Element,[{key:\"validate\",value:function validate(){if(this.component.var_lookup.has(this.name)&&this.component.var_lookup.get(this.name).imported){this.component.warn(this,compiler_warnings.component_name_lowercase(this.name));}this.validate_attributes();this.validate_event_handlers();if(this.namespace===namespaces.foreign){this.validate_bindings_foreign();}else{this.validate_attributes_a11y();this.validate_special_cases();this.validate_bindings();this.validate_content();}}},{key:\"validate_attributes\",value:function validate_attributes(){var _this28=this;var component=this.component,parent=this.parent;this.attributes.forEach(function(attribute){if(attribute.is_spread)return;var name=attribute.name.toLowerCase();// Errors\nif(/(^[0-9-.])|[\\^$@%&#?!|()[\\]{}^*+~;]/.test(name)){return component.error(attribute,compiler_errors.illegal_attribute(name));}if(name==='slot'){if(!attribute.is_static){return component.error(attribute,compiler_errors.invalid_slot_attribute);}if(component.slot_outlets.has(name)){return component.error(attribute,compiler_errors.duplicate_slot_attribute(name));// this code was unreachable. Still needed?\n// component.slot_outlets.add(name);\n}if(!(parent.type==='SlotTemplate'||within_custom_element(parent))){return component.error(attribute,compiler_errors.invalid_slotted_content);}}// Warnings\nif(_this28.namespace!==namespaces.foreign){if(name==='is'){component.warn(attribute,compiler_warnings.avoid_is);}if(react_attributes.has(attribute.name)){component.warn(attribute,compiler_warnings.invalid_html_attribute(attribute.name,react_attributes.get(attribute.name)));}}});}},{key:\"validate_attributes_a11y\",value:function validate_attributes_a11y(){var _this29=this;var component=this.component;this.attributes.forEach(function(attribute){if(attribute.is_spread)return;var name=attribute.name.toLowerCase();// aria-props\nif(name.startsWith('aria-')){if(invisible_elements.has(_this29.name)){// aria-unsupported-elements\ncomponent.warn(attribute,compiler_warnings.a11y_aria_attributes(_this29.name));}var type=name.slice(5);if(!aria_attribute_set.has(type)){var match=fuzzymatch(type,aria_attributes);component.warn(attribute,compiler_warnings.a11y_unknown_aria_attribute(type,match));}if(name==='aria-hidden'&&/^h[1-6]$/.test(_this29.name)){component.warn(attribute,compiler_warnings.a11y_hidden(_this29.name));}}// aria-role\nif(name==='role'){if(invisible_elements.has(_this29.name)){// aria-unsupported-elements\ncomponent.warn(attribute,compiler_warnings.a11y_misplaced_role(_this29.name));}var _value7=attribute.get_static_value();// @ts-ignore\nif(_value7&&!aria_role_set.has(_value7)){// @ts-ignore\nvar _match=fuzzymatch(_value7,aria_roles);component.warn(attribute,compiler_warnings.a11y_unknown_role(_value7,_match));}// no-redundant-roles\nvar has_redundant_role=_value7===a11y_implicit_semantics.get(_this29.name);if(_this29.name===_value7||has_redundant_role){component.warn(attribute,compiler_warnings.a11y_no_redundant_roles(_value7));}// Footers and headers are special cases, and should not have redundant roles unless they are the children of sections or articles.\nvar is_parent_section_or_article=is_parent(_this29.parent,['section','article']);if(!is_parent_section_or_article){var has_nested_redundant_role=_value7===a11y_nested_implicit_semantics.get(_this29.name);if(has_nested_redundant_role){component.warn(attribute,compiler_warnings.a11y_no_redundant_roles(_value7));}}}// no-access-key\nif(name==='accesskey'){component.warn(attribute,compiler_warnings.a11y_accesskey);}// no-autofocus\nif(name==='autofocus'){component.warn(attribute,compiler_warnings.a11y_autofocus);}// scope\nif(name==='scope'&&_this29.name!=='th'){component.warn(attribute,compiler_warnings.a11y_misplaced_scope);}// tabindex-no-positive\nif(name==='tabindex'){var _value8=attribute.get_static_value();// @ts-ignore todo is tabindex=true correct case?\nif(!isNaN(_value8)&&+_value8>0){component.warn(attribute,compiler_warnings.a11y_positive_tabindex);}}});}},{key:\"validate_special_cases\",value:function validate_special_cases(){var component=this.component,attributes=this.attributes,handlers=this.handlers;var attribute_map=new Map();var handlers_map=new Map();attributes.forEach(function(attribute){return attribute_map.set(attribute.name,attribute);});handlers.forEach(function(handler){return handlers_map.set(handler.name,handler);});if(this.name==='a'){var href_attribute=attribute_map.get('href')||attribute_map.get('xlink:href');var id_attribute=attribute_map.get('id');var name_attribute=attribute_map.get('name');if(href_attribute){var href_value=href_attribute.get_static_value();if(href_value===''||href_value==='#'||/^\\W*javascript:/i.test(href_value)){component.warn(href_attribute,compiler_warnings.a11y_invalid_attribute(href_attribute.name,href_value));}}else{var id_attribute_valid=id_attribute&&id_attribute.get_static_value()!=='';var name_attribute_valid=name_attribute&&name_attribute.get_static_value()!=='';if(!id_attribute_valid&&!name_attribute_valid){component.warn(this,compiler_warnings.a11y_missing_attribute('a','an','href'));}}}else{var required_attributes=a11y_required_attributes[this.name];if(required_attributes){var has_attribute=required_attributes.some(function(name){return attribute_map.has(name);});if(!has_attribute){should_have_attribute(this,required_attributes);}}}if(this.name==='input'){var type=attribute_map.get('type');if(type&&type.get_static_value()==='image'){var _required_attributes=['alt','aria-label','aria-labelledby'];var _has_attribute=_required_attributes.some(function(name){return attribute_map.has(name);});if(!_has_attribute){should_have_attribute(this,_required_attributes,'input type=\"image\"');}}}if(this.name==='img'){var alt_attribute=attribute_map.get('alt');var aria_hidden_attribute=attribute_map.get('aria-hidden');var aria_hidden_exist=aria_hidden_attribute&&aria_hidden_attribute.get_static_value();if(alt_attribute&&!aria_hidden_exist){var alt_value=alt_attribute.get_static_value();if(/\\b(image|picture|photo)\\b/i.test(alt_value)){component.warn(this,compiler_warnings.a11y_img_redundant_alt);}}}if(this.name==='label'){var has_input_child=this.children.some(function(i){return i instanceof Element&&a11y_labelable.has(i.name);});if(!attribute_map.has('for')&&!has_input_child){component.warn(this,compiler_warnings.a11y_label_has_associated_control);}}if(this.name==='video'){if(attribute_map.has('muted')){return;}var has_caption;var track=this.children.find(function(i){return i.name==='track';});if(track){has_caption=track.attributes.find(function(a){return a.name==='kind'&&a.get_static_value()==='captions';});}if(!has_caption){component.warn(this,compiler_warnings.a11y_media_has_caption);}}if(a11y_distracting_elements.has(this.name)){// no-distracting-elements\ncomponent.warn(this,compiler_warnings.a11y_distracting_elements(this.name));}if(this.name==='figcaption'){var parent=this.parent;var is_figure_parent=false;while(parent){if(parent.name==='figure'){is_figure_parent=true;break;}if(parent.type==='Element'){break;}parent=parent.parent;}if(!is_figure_parent){component.warn(this,compiler_warnings.a11y_structure_immediate);}}if(this.name==='figure'){var children=this.children.filter(function(node){if(node.type==='Comment')return false;if(node.type==='Text')return /\\S/.test(node.data);return true;});var index=children.findIndex(function(child){return child.name==='figcaption';});if(index!==-1&&index!==0&&index!==children.length-1){component.warn(children[index],compiler_warnings.a11y_structure_first_or_last);}}if(handlers_map.has('mouseover')&&!handlers_map.has('focus')){component.warn(this,compiler_warnings.a11y_mouse_events_have_key_events('mouseover','focus'));}if(handlers_map.has('mouseout')&&!handlers_map.has('blur')){component.warn(this,compiler_warnings.a11y_mouse_events_have_key_events('mouseout','blur'));}}},{key:\"validate_bindings_foreign\",value:function validate_bindings_foreign(){var _this30=this;this.bindings.forEach(function(binding){if(binding.name!=='this'){return _this30.component.error(binding,compiler_errors.invalid_binding_foreign(binding.name));}});}},{key:\"validate_bindings\",value:function validate_bindings(){var _this31=this;var component=this.component;var check_type_attribute=function check_type_attribute(){var attribute=_this31.attributes.find(function(attribute){return attribute.name==='type';});if(!attribute)return null;if(!attribute.is_static){return component.error(attribute,compiler_errors.invalid_type);}var value=attribute.get_static_value();if(value===true){return component.error(attribute,compiler_errors.missing_type);}return value;};this.bindings.forEach(function(binding){var name=binding.name;if(name==='value'){if(_this31.name!=='input'&&_this31.name!=='textarea'&&_this31.name!=='select'){return component.error(binding,compiler_errors.invalid_binding_elements(_this31.name,'value'));}if(_this31.name==='select'){var attribute=_this31.attributes.find(function(attribute){return attribute.name==='multiple';});if(attribute&&!attribute.is_static){return component.error(attribute,compiler_errors.dynamic_multiple_attribute);}}else{check_type_attribute();}}else if(name==='checked'||name==='indeterminate'){if(_this31.name!=='input'){return component.error(binding,compiler_errors.invalid_binding_elements(_this31.name,name));}var type=check_type_attribute();if(type!=='checkbox'){return component.error(binding,compiler_errors.invalid_binding_no_checkbox(name,type==='radio'));}}else if(name==='group'){if(_this31.name!=='input'){return component.error(binding,compiler_errors.invalid_binding_elements(_this31.name,'group'));}var _type=check_type_attribute();if(_type!=='checkbox'&&_type!=='radio'){return component.error(binding,compiler_errors.invalid_binding_element_with('<input type=\"checkbox\"> or <input type=\"radio\">','group'));}}else if(name==='files'){if(_this31.name!=='input'){return component.error(binding,compiler_errors.invalid_binding_elements(_this31.name,'files'));}var _type2=check_type_attribute();if(_type2!=='file'){return component.error(binding,compiler_errors.invalid_binding_element_with('<input type=\"file\">','files'));}}else if(name==='open'){if(_this31.name!=='details'){return component.error(binding,compiler_errors.invalid_binding_element_with('<details>',name));}}else if(name==='currentTime'||name==='duration'||name==='paused'||name==='buffered'||name==='seekable'||name==='played'||name==='volume'||name==='muted'||name==='playbackRate'||name==='seeking'||name==='ended'){if(_this31.name!=='audio'&&_this31.name!=='video'){return component.error(binding,compiler_errors.invalid_binding_element_with('audio> or <video>',name));}}else if(name==='videoHeight'||name==='videoWidth'){if(_this31.name!=='video'){return component.error(binding,compiler_errors.invalid_binding_element_with('<video>',name));}}else if(dimensions.test(name)){if(_this31.name==='svg'&&(name==='offsetWidth'||name==='offsetHeight')){return component.error(binding,compiler_errors.invalid_binding_on(binding.name,\"<svg>. Use '\".concat(name.replace('offset','client'),\"' instead\")));}else if(svg$1.test(_this31.name)){return component.error(binding,compiler_errors.invalid_binding_on(binding.name,'SVG elements'));}else if(is_void(_this31.name)){return component.error(binding,compiler_errors.invalid_binding_on(binding.name,\"void elements like <\".concat(_this31.name,\">. Use a wrapper element instead\")));}}else if(name==='textContent'||name==='innerHTML'){var contenteditable=_this31.attributes.find(function(attribute){return attribute.name==='contenteditable';});if(!contenteditable){return component.error(binding,compiler_errors.missing_contenteditable_attribute);}else if(contenteditable&&!contenteditable.is_static){return component.error(contenteditable,compiler_errors.dynamic_contenteditable_attribute);}}else if(name!=='this'){return component.error(binding,compiler_errors.invalid_binding(binding.name));}});}},{key:\"validate_content\",value:function validate_content(){if(!a11y_required_content.has(this.name))return;if(this.bindings.some(function(binding){return['textContent','innerHTML'].includes(binding.name);}))return;if(this.children.length===0){this.component.warn(this,compiler_warnings.a11y_missing_content(this.name));}}},{key:\"validate_event_handlers\",value:function validate_event_handlers(){var component=this.component;this.handlers.forEach(function(handler){if(handler.modifiers.has('passive')&&handler.modifiers.has('preventDefault')){return component.error(handler,compiler_errors.invalid_event_modifier_combination('passive','preventDefault'));}if(handler.modifiers.has('passive')&&handler.modifiers.has('nonpassive')){return component.error(handler,compiler_errors.invalid_event_modifier_combination('passive','nonpassive'));}handler.modifiers.forEach(function(modifier){if(!valid_modifiers.has(modifier)){return component.error(handler,compiler_errors.invalid_event_modifier(list(Array.from(valid_modifiers))));}if(modifier==='passive'){if(passive_events.has(handler.name)){if(handler.can_make_passive){component.warn(handler,compiler_warnings.redundant_event_modifier_for_touch);}}else{component.warn(handler,compiler_warnings.redundant_event_modifier_passive);}}if(component.compile_options.legacy&&(modifier==='once'||modifier==='passive')){// TODO this could be supported, but it would need a few changes to\n// how event listeners work\nreturn component.error(handler,compiler_errors.invalid_event_modifier_legacy(modifier));}});if(passive_events.has(handler.name)&&handler.can_make_passive&&!handler.modifiers.has('preventDefault')&&!handler.modifiers.has('nonpassive')){// touch/wheel events should be passive by default\nhandler.modifiers.add('passive');}});}},{key:\"is_media_node\",value:function is_media_node(){return this.name==='audio'||this.name==='video';}},{key:\"add_css_class\",value:function add_css_class(){if(this.attributes.some(function(attr){return attr.is_spread;})){this.needs_manual_style_scoping=true;return;}var id=this.component.stylesheet.id;var class_attribute=this.attributes.find(function(a){return a.name==='class';});if(class_attribute&&!class_attribute.is_true){if(class_attribute.chunks.length===1&&class_attribute.chunks[0].type==='Text'){class_attribute.chunks[0].data+=\" \".concat(id);}else{class_attribute.chunks.push(new Text(this.component,this,this.scope,{type:'Text',data:\" \".concat(id),synthetic:true}));}}else{this.attributes.push(new Attribute(this.component,this,this.scope,{type:'Attribute',name:'class',value:[{type:'Text',data:id,synthetic:true}]}));}}},{key:\"slot_template_name\",get:function get(){return this.attributes.find(function(attribute){return attribute.name==='slot';}).get_static_value();}},{key:\"optimise\",value:function optimise(){var _this32=this;attributes_to_compact_whitespace.forEach(function(attribute_name){var attribute=_this32.attributes.find(function(a){return a.name===attribute_name;});if(attribute&&!attribute.is_true){attribute.chunks.forEach(function(chunk,index){if(chunk.type==='Text'){var _data3=chunk.data.replace(/[\\s\\n\\t]+/g,' ');if(index===0){_data3=_data3.trimLeft();}else if(index===attribute.chunks.length-1){_data3=_data3.trimRight();}chunk.data=_data3;}});}});}}]);return Element;}(Node$1);function should_have_attribute(node,attributes){var name=arguments.length>2&&arguments[2]!==undefined?arguments[2]:node.name;var article=/^[aeiou]/.test(attributes[0])?'an':'a';var sequence=attributes.length>1?attributes.slice(0,-1).join(', ')+\" or \".concat(attributes[attributes.length-1]):attributes[0];node.component.warn(node,compiler_warnings.a11y_missing_attribute(name,article,sequence));}function within_custom_element(parent){while(parent){if(parent.type==='InlineComponent')return false;if(parent.type==='Element'&&/-/.test(parent.name))return true;parent=parent.parent;}return false;}// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str){str=str.replace(/\\r/g,'');var hash=5381;var i=str.length;while(i--){hash=(hash<<5)-hash^str.charCodeAt(i);}return(hash>>>0).toString(36);}var Head=/*#__PURE__*/function(_Node$17){(0,_inherits2.default)(Head,_Node$17);var _super23=_createSuper(Head);function Head(component,parent,scope,info){var _this33;(0,_classCallCheck2.default)(this,Head);_this33=_super23.call(this,component,parent,scope,info);if(info.attributes.length){component.error(info.attributes[0],compiler_errors.invalid_attribute_head);return(0,_possibleConstructorReturn2.default)(_this33);}_this33.children=map_children(component,parent,scope,info.children.filter(function(child){return child.type!=='Text'||/\\S/.test(child.data);}));if(_this33.children.length>0){_this33.id=\"svelte-\".concat(hash(_this33.component.source.slice(_this33.start,_this33.end)));}return _this33;}return(0,_createClass2.default)(Head);}(Node$1);var IfBlock=/*#__PURE__*/function(_AbstractBlock5){(0,_inherits2.default)(IfBlock,_AbstractBlock5);var _super24=_createSuper(IfBlock);function IfBlock(component,parent,scope,info){var _this34;(0,_classCallCheck2.default)(this,IfBlock);_this34=_super24.call(this,component,parent,scope,info);_this34.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this34),scope,info.expression);_this34.children=map_children(component,(0,_assertThisInitialized2.default)(_this34),scope,info.children);_this34.else=info.else?new ElseBlock(component,(0,_assertThisInitialized2.default)(_this34),scope,info.else):null;_this34.warn_if_empty_block();return _this34;}return(0,_createClass2.default)(IfBlock);}(AbstractBlock);var InlineComponent=/*#__PURE__*/function(_Node$18){(0,_inherits2.default)(InlineComponent,_Node$18);var _super25=_createSuper(InlineComponent);function InlineComponent(component,parent,scope,info){var _this35;(0,_classCallCheck2.default)(this,InlineComponent);_this35=_super25.call(this,component,parent,scope,info);_this35.attributes=[];_this35.bindings=[];_this35.handlers=[];_this35.lets=[];_this35.css_custom_properties=[];if(info.name!=='svelte:component'&&info.name!=='svelte:self'){var name=info.name.split('.')[0];// accommodate namespaces\ncomponent.warn_if_undefined(name,info,scope);component.add_reference(name);}_this35.name=info.name;_this35.expression=_this35.name==='svelte:component'?new Expression(component,(0,_assertThisInitialized2.default)(_this35),scope,info.expression):null;info.attributes.forEach(function(node){/* eslint-disable no-fallthrough */switch(node.type){case'Action':return component.error(node,compiler_errors.invalid_action);case'Attribute':if(node.name.startsWith('--')){_this35.css_custom_properties.push(new Attribute(component,(0,_assertThisInitialized2.default)(_this35),scope,node));break;}// fallthrough\ncase'Spread':_this35.attributes.push(new Attribute(component,(0,_assertThisInitialized2.default)(_this35),scope,node));break;case'Binding':_this35.bindings.push(new Binding(component,(0,_assertThisInitialized2.default)(_this35),scope,node));break;case'Class':return component.error(node,compiler_errors.invalid_class);case'EventHandler':_this35.handlers.push(new EventHandler(component,(0,_assertThisInitialized2.default)(_this35),scope,node));break;case'Let':_this35.lets.push(new Let(component,(0,_assertThisInitialized2.default)(_this35),scope,node));break;case'Transition':return component.error(node,compiler_errors.invalid_transition);default:throw new Error(\"Not implemented: \".concat(node.type));}/* eslint-enable no-fallthrough */});if(_this35.lets.length>0){_this35.scope=scope.child();_this35.lets.forEach(function(l){var dependencies=new Set([l.name.name]);l.names.forEach(function(name){_this35.scope.add(name,dependencies,(0,_assertThisInitialized2.default)(_this35));});});}else{_this35.scope=scope;}_this35.handlers.forEach(function(handler){handler.modifiers.forEach(function(modifier){if(modifier!=='once'){return component.error(handler,compiler_errors.invalid_event_modifier_component);}});});var children=[];for(var _i34=info.children.length-1;_i34>=0;_i34--){var child=info.children[_i34];if(child.type==='SlotTemplate'){children.push(child);info.children.splice(_i34,1);}else if((child.type==='Element'||child.type==='InlineComponent'||child.type==='Slot')&&child.attributes.find(function(attribute){return attribute.name==='slot';})){var slot_template={start:child.start,end:child.end,type:'SlotTemplate',name:'svelte:fragment',attributes:[],children:[child]};// transfer attributes\nfor(var _i35=child.attributes.length-1;_i35>=0;_i35--){var attribute=child.attributes[_i35];if(attribute.type==='Let'){slot_template.attributes.push(attribute);child.attributes.splice(_i35,1);}else if(attribute.type==='Attribute'&&attribute.name==='slot'){slot_template.attributes.push(attribute);}}// transfer const\nfor(var _i36=child.children.length-1;_i36>=0;_i36--){var child_child=child.children[_i36];if(child_child.type==='ConstTag'){slot_template.children.push(child_child);child.children.splice(_i36,1);}}children.push(slot_template);info.children.splice(_i34,1);}}if(info.children.some(function(node){return not_whitespace_text(node);})){children.push({start:info.start,end:info.end,type:'SlotTemplate',name:'svelte:fragment',attributes:[],children:info.children});}_this35.children=map_children(component,(0,_assertThisInitialized2.default)(_this35),_this35.scope,children);return _this35;}(0,_createClass2.default)(InlineComponent,[{key:\"slot_template_name\",get:function get(){return this.attributes.find(function(attribute){return attribute.name==='slot';}).get_static_value();}}]);return InlineComponent;}(Node$1);function not_whitespace_text(node){return!(node.type==='Text'&&/^\\s+$/.test(node.data));}var KeyBlock=/*#__PURE__*/function(_AbstractBlock6){(0,_inherits2.default)(KeyBlock,_AbstractBlock6);var _super26=_createSuper(KeyBlock);function KeyBlock(component,parent,scope,info){var _this36;(0,_classCallCheck2.default)(this,KeyBlock);_this36=_super26.call(this,component,parent,scope,info);_this36.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this36),scope,info.expression);_this36.children=map_children(component,(0,_assertThisInitialized2.default)(_this36),scope,info.children);_this36.warn_if_empty_block();return _this36;}return(0,_createClass2.default)(KeyBlock);}(AbstractBlock);var Tag=/*#__PURE__*/function(_Node$19){(0,_inherits2.default)(Tag,_Node$19);var _super27=_createSuper(Tag);function Tag(component,parent,scope,info){var _this37;(0,_classCallCheck2.default)(this,Tag);_this37=_super27.call(this,component,parent,scope,info);_this37.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this37),scope,info.expression);_this37.should_cache=info.expression.type!=='Identifier'||_this37.expression.dependencies.size&&scope.names.has(info.expression.name);return _this37;}return(0,_createClass2.default)(Tag);}(Node$1);var MustacheTag=/*#__PURE__*/function(_Tag){(0,_inherits2.default)(MustacheTag,_Tag);var _super28=_createSuper(MustacheTag);function MustacheTag(){(0,_classCallCheck2.default)(this,MustacheTag);return _super28.apply(this,arguments);}return(0,_createClass2.default)(MustacheTag);}(Tag);var Options=/*#__PURE__*/function(_Node$20){(0,_inherits2.default)(Options,_Node$20);var _super29=_createSuper(Options);function Options(){(0,_classCallCheck2.default)(this,Options);return _super29.apply(this,arguments);}return(0,_createClass2.default)(Options);}(Node$1);var RawMustacheTag=/*#__PURE__*/function(_Tag2){(0,_inherits2.default)(RawMustacheTag,_Tag2);var _super30=_createSuper(RawMustacheTag);function RawMustacheTag(){(0,_classCallCheck2.default)(this,RawMustacheTag);return _super30.apply(this,arguments);}return(0,_createClass2.default)(RawMustacheTag);}(Tag);var DebugTag=/*#__PURE__*/function(_Node$21){(0,_inherits2.default)(DebugTag,_Node$21);var _super31=_createSuper(DebugTag);function DebugTag(component,parent,scope,info){var _this38;(0,_classCallCheck2.default)(this,DebugTag);_this38=_super31.call(this,component,parent,scope,info);_this38.expressions=info.identifiers.map(function(node){return new Expression(component,parent,scope,node);});return _this38;}return(0,_createClass2.default)(DebugTag);}(Node$1);var Slot=/*#__PURE__*/function(_Element){(0,_inherits2.default)(Slot,_Element);var _super32=_createSuper(Slot);function Slot(component,parent,scope,info){var _this39;(0,_classCallCheck2.default)(this,Slot);_this39=_super32.call(this,component,parent,scope,info);_this39.values=new Map();info.attributes.forEach(function(attr){if(attr.type!=='Attribute'&&attr.type!=='Spread'){return component.error(attr,compiler_errors.invalid_slot_directive);}if(attr.name==='name'){if(attr.value.length!==1||attr.value[0].type!=='Text'){return component.error(attr,compiler_errors.dynamic_slot_name);}_this39.slot_name=attr.value[0].data;if(_this39.slot_name==='default'){return component.error(attr,compiler_errors.invalid_slot_name);}}_this39.values.set(attr.name,new Attribute(component,(0,_assertThisInitialized2.default)(_this39),scope,attr));});if(!_this39.slot_name)_this39.slot_name='default';if(_this39.slot_name==='default'){// if this is the default slot, add our dependencies to any\n// other slots (which inherit our slot values) that were\n// previously encountered\ncomponent.slots.forEach(function(slot){_this39.values.forEach(function(attribute,name){if(!slot.values.has(name)){slot.values.set(name,attribute);}});});}else if(component.slots.has('default')){// otherwise, go the other way — inherit values from\n// a previously encountered default slot\nvar default_slot=component.slots.get('default');default_slot.values.forEach(function(attribute,name){if(!_this39.values.has(name)){_this39.values.set(name,attribute);}});}component.slots.set(_this39.slot_name,(0,_assertThisInitialized2.default)(_this39));return _this39;}return(0,_createClass2.default)(Slot);}(Element);var SlotTemplate=/*#__PURE__*/function(_Node$22){(0,_inherits2.default)(SlotTemplate,_Node$22);var _super33=_createSuper(SlotTemplate);function SlotTemplate(component,parent,scope,info){var _this40;(0,_classCallCheck2.default)(this,SlotTemplate);_this40=_super33.call(this,component,parent,scope,info);_this40.lets=[];_this40.slot_template_name='default';_this40.validate_slot_template_placement();var has_let=info.attributes.some(function(node){return node.type==='Let';});if(has_let){scope=scope.child();}info.attributes.forEach(function(node){switch(node.type){case'Let':{var l=new Let(component,(0,_assertThisInitialized2.default)(_this40),scope,node);_this40.lets.push(l);var dependencies=new Set([l.name.name]);l.names.forEach(function(name){scope.add(name,dependencies,(0,_assertThisInitialized2.default)(_this40));});break;}case'Attribute':{if(node.name==='slot'){_this40.slot_attribute=new Attribute(component,(0,_assertThisInitialized2.default)(_this40),scope,node);if(!_this40.slot_attribute.is_static){return component.error(node,compiler_errors.invalid_slot_attribute);}var _value9=_this40.slot_attribute.get_static_value();if(typeof _value9==='boolean'){return component.error(node,compiler_errors.invalid_slot_attribute_value_missing);}_this40.slot_template_name=_value9;break;}throw new Error(\"Invalid attribute '\".concat(node.name,\"' in <svelte:fragment>\"));}default:throw new Error(\"Not implemented: \".concat(node.type));}});_this40.scope=scope;var _get_const_tags5=get_const_tags(info.children,component,(0,_assertThisInitialized2.default)(_this40),(0,_assertThisInitialized2.default)(_this40));var _get_const_tags6=(0,_slicedToArray2.default)(_get_const_tags5,2);_this40.const_tags=_get_const_tags6[0];_this40.children=_get_const_tags6[1];return _this40;}(0,_createClass2.default)(SlotTemplate,[{key:\"validate_slot_template_placement\",value:function validate_slot_template_placement(){if(this.parent.type!=='InlineComponent'){return this.component.error(this,compiler_errors.invalid_slotted_content_fragment);}}}]);return SlotTemplate;}(Node$1);var Title=/*#__PURE__*/function(_Node$23){(0,_inherits2.default)(Title,_Node$23);var _super34=_createSuper(Title);function Title(component,parent,scope,info){var _this41;(0,_classCallCheck2.default)(this,Title);_this41=_super34.call(this,component,parent,scope,info);_this41.children=map_children(component,parent,scope,info.children);if(info.attributes.length>0){component.error(info.attributes[0],compiler_errors.illegal_attribute_title);return(0,_possibleConstructorReturn2.default)(_this41);}info.children.forEach(function(child){if(child.type!=='Text'&&child.type!=='MustacheTag'){return component.error(child,compiler_errors.illegal_structure_title);}});_this41.should_cache=info.children.length===1?info.children[0].type!=='Identifier'||scope.names.has(info.children[0].name):true;return _this41;}return(0,_createClass2.default)(Title);}(Node$1);var valid_bindings=['innerWidth','innerHeight','outerWidth','outerHeight','scrollX','scrollY','online'];var Window=/*#__PURE__*/function(_Node$24){(0,_inherits2.default)(Window,_Node$24);var _super35=_createSuper(Window);function Window(component,parent,scope,info){var _this42;(0,_classCallCheck2.default)(this,Window);_this42=_super35.call(this,component,parent,scope,info);_this42.handlers=[];_this42.bindings=[];_this42.actions=[];info.attributes.forEach(function(node){if(node.type==='EventHandler'){_this42.handlers.push(new EventHandler(component,(0,_assertThisInitialized2.default)(_this42),scope,node));}else if(node.type==='Binding'){if(node.expression.type!=='Identifier'){var _flatten_reference4=flatten_reference(node.expression),parts=_flatten_reference4.parts;// TODO is this constraint necessary?\nreturn component.error(node.expression,compiler_errors.invalid_binding_window(parts));}if(!~valid_bindings.indexOf(node.name)){var match=node.name==='width'?'innerWidth':node.name==='height'?'innerHeight':fuzzymatch(node.name,valid_bindings);if(match){return component.error(node,compiler_errors.invalid_binding_on(node.name,'<svelte:window>',\" (did you mean '\".concat(match,\"'?)\")));}else{return component.error(node,compiler_errors.invalid_binding_on(node.name,'<svelte:window>',\" \\u2014 valid bindings are \".concat(list(valid_bindings))));}}_this42.bindings.push(new Binding(component,(0,_assertThisInitialized2.default)(_this42),scope,node));}else if(node.type==='Action'){_this42.actions.push(new Action(component,(0,_assertThisInitialized2.default)(_this42),scope,node));}});return _this42;}return(0,_createClass2.default)(Window);}(Node$1);function get_constructor(type){switch(type){case'AwaitBlock':return AwaitBlock;case'Body':return Body;case'Comment':return Comment$1;case'ConstTag':return ConstTag;case'EachBlock':return EachBlock;case'Element':return Element;case'Head':return Head;case'IfBlock':return IfBlock;case'InlineComponent':return InlineComponent;case'KeyBlock':return KeyBlock;case'MustacheTag':return MustacheTag;case'Options':return Options;case'RawMustacheTag':return RawMustacheTag;case'DebugTag':return DebugTag;case'Slot':return Slot;case'SlotTemplate':return SlotTemplate;case'Text':return Text;case'Title':return Title;case'Window':return Window;default:throw new Error(\"Not implemented: \".concat(type));}}function map_children(component,parent,scope,children){var last=null;var ignores=[];return children.map(function(child){var constructor=get_constructor(child.type);var use_ignores=child.type!=='Text'&&child.type!=='Comment'&&ignores.length;if(use_ignores)component.push_ignores(ignores);var node=new constructor(component,parent,scope,child);if(use_ignores)component.pop_ignores(),ignores=[];if(node.type==='Comment'&&node.ignores.length){var _ignores;(_ignores=ignores).push.apply(_ignores,(0,_toConsumableArray2.default)(node.ignores));}if(last)last.next=node;node.prev=last;last=node;return node;});}function check_graph_for_cycles(edges){var graph=edges.reduce(function(g,edge){var _edge=(0,_slicedToArray2.default)(edge,2),u=_edge[0],v=_edge[1];if(!g.has(u))g.set(u,[]);if(!g.has(v))g.set(v,[]);g.get(u).push(v);return g;},new Map());var visited=new Set();var on_stack=new Set();var cycles=[];function visit(v){visited.add(v);on_stack.add(v);graph.get(v).forEach(function(w){if(!visited.has(w)){visit(w);}else if(on_stack.has(w)){cycles.push([].concat((0,_toConsumableArray2.default)(on_stack),[w]));}});on_stack.delete(v);}graph.forEach(function(_,v){if(!visited.has(v)){visit(v);}});return cycles[0];}function get_const_tags(children,component,node,parent){var const_tags=[];var others=[];var _iterator=_createForOfIteratorHelper(children),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var child=_step.value;if(child.type==='ConstTag'){const_tags.push(child);}else{others.push(child);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}var consts_nodes=const_tags.map(function(tag){return new ConstTag(component,node,node.scope,tag);});var sorted_consts_nodes=sort_consts_nodes(consts_nodes,component);sorted_consts_nodes.forEach(function(node){return node.parse_expression();});var children_nodes=map_children(component,parent,node.scope,others);return[sorted_consts_nodes,children_nodes];}function sort_consts_nodes(consts_nodes,component){var sorted_consts_nodes=[];var unsorted_consts_nodes=consts_nodes.map(function(node){return{assignees:node.assignees,dependencies:node.dependencies,node:node};});var lookup=new Map();unsorted_consts_nodes.forEach(function(node){node.assignees.forEach(function(name){if(!lookup.has(name)){lookup.set(name,[]);}lookup.get(name).push(node);});});var cycle=check_graph_for_cycles(unsorted_consts_nodes.reduce(function(acc,node){node.assignees.forEach(function(v){node.dependencies.forEach(function(w){if(!node.assignees.has(w)){acc.push([v,w]);}});});return acc;},[]));if(cycle&&cycle.length){var nodeList=lookup.get(cycle[0]);var _node9=nodeList[0];component.error(_node9.node,compiler_errors.cyclical_const_tags(cycle));}var add_node=function add_node(node){if(sorted_consts_nodes.includes(node))return;node.dependencies.forEach(function(name){if(node.assignees.has(name))return;var earlier_nodes=lookup.get(name);if(earlier_nodes){earlier_nodes.forEach(add_node);}});sorted_consts_nodes.push(node);};unsorted_consts_nodes.forEach(add_node);return sorted_consts_nodes.map(function(node){return node.node;});}var ThenBlock=/*#__PURE__*/function(_AbstractBlock7){(0,_inherits2.default)(ThenBlock,_AbstractBlock7);var _super36=_createSuper(ThenBlock);function ThenBlock(component,parent,scope,info){var _this43;(0,_classCallCheck2.default)(this,ThenBlock);_this43=_super36.call(this,component,parent,scope,info);_this43.scope=scope.child();if(parent.then_node){parent.then_contexts.forEach(function(context){_this43.scope.add(context.key.name,parent.expression.dependencies,(0,_assertThisInitialized2.default)(_this43));});}var _get_const_tags7=get_const_tags(info.children,component,(0,_assertThisInitialized2.default)(_this43),parent);var _get_const_tags8=(0,_slicedToArray2.default)(_get_const_tags7,2);_this43.const_tags=_get_const_tags8[0];_this43.children=_get_const_tags8[1];if(!info.skip){_this43.warn_if_empty_block();}return _this43;}return(0,_createClass2.default)(ThenBlock);}(AbstractBlock);function add_const_tags(block,const_tags,ctx){var const_tags_props=[];const_tags.forEach(function(const_tag,i){var name=\"#constants_\".concat(i);const_tags_props.push(b(_templateObject76||(_templateObject76=(0,_taggedTemplateLiteral2.default)([\"const \",\" = \",\"\"])),name,const_tag.expression.manipulate(block,ctx)));const_tag.contexts.forEach(function(context){const_tags_props.push(b(_templateObject77||(_templateObject77=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"] = \",\";\"])),ctx,block.renderer.context_lookup.get(context.key.name).index,context.default_modifier(context.modifier({type:'Identifier',name:name}),function(name){return block.renderer.context_lookup.has(name)?x(_templateObject78||(_templateObject78=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),ctx,block.renderer.context_lookup.get(name).index):{type:'Identifier',name:name};})));});});return const_tags_props;}function add_const_tags_context(renderer,const_tags){const_tags.forEach(function(const_tag){const_tag.contexts.forEach(function(context){renderer.add_to_context(context.key.name,true);});});}var AwaitBlockBranch=/*#__PURE__*/function(_Wrapper){(0,_inherits2.default)(AwaitBlockBranch,_Wrapper);var _super37=_createSuper(AwaitBlockBranch);function AwaitBlockBranch(status,renderer,block,parent,node,strip_whitespace,next_sibling){var _this44;(0,_classCallCheck2.default)(this,AwaitBlockBranch);_this44=_super37.call(this,renderer,block,parent,node);_this44.var=null;_this44.status=status;_this44.block=block.child({comment:create_debugging_comment(node,_this44.renderer.component),name:_this44.renderer.component.get_unique_name(\"create_\".concat(status,\"_block\")),type:status});_this44.add_context(parent.node[status+'_node'],parent.node[status+'_contexts']);_this44.fragment=new FragmentWrapper(renderer,_this44.block,_this44.node.children,parent,strip_whitespace,next_sibling);_this44.is_dynamic=_this44.block.dependencies.size>0;return _this44;}(0,_createClass2.default)(AwaitBlockBranch,[{key:\"add_context\",value:function add_context(node,contexts){var _this45=this;if(!node)return;if(node.type==='Identifier'){this.value=node.name;this.renderer.add_to_context(this.value,true);}else{contexts.forEach(function(context){_this45.renderer.add_to_context(context.key.name,true);});this.value=this.block.parent.get_unique_name('value').name;this.value_contexts=contexts;this.renderer.add_to_context(this.value,true);this.is_destructured=true;}this.value_index=this.renderer.context_lookup.get(this.value).index;if(this.has_consts(this.node)){add_const_tags_context(this.renderer,this.node.const_tags);}}},{key:\"has_consts\",value:function has_consts(node){return node instanceof ThenBlock||node instanceof CatchBlock;}},{key:\"render\",value:function render(block,parent_node,parent_nodes){this.fragment.render(block,parent_node,parent_nodes);if(this.is_destructured||this.has_consts(this.node)&&this.node.const_tags.length>0){this.render_get_context();}}},{key:\"render_get_context\",value:function render_get_context(){var _this46=this;var props=this.is_destructured?this.value_contexts.map(function(prop){return b(_templateObject79||(_templateObject79=(0,_taggedTemplateLiteral2.default)([\"#ctx[\",\"] = \",\";\"])),_this46.block.renderer.context_lookup.get(prop.key.name).index,prop.default_modifier(prop.modifier(x(_templateObject80||(_templateObject80=(0,_taggedTemplateLiteral2.default)([\"#ctx[\",\"]\"])),_this46.value_index)),function(name){return _this46.renderer.reference(name);}));}):null;var const_tags_props=this.has_consts(this.node)?add_const_tags(this.block,this.node.const_tags,'#ctx'):null;var get_context=this.block.renderer.component.get_unique_name(\"get_\".concat(this.status,\"_context\"));this.block.renderer.blocks.push(b(_templateObject81||(_templateObject81=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(#ctx) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\\n\\t\\t\"])),get_context,props,const_tags_props));this.block.chunks.declarations.push(b(_templateObject82||(_templateObject82=(0,_taggedTemplateLiteral2.default)([\"\",\"(#ctx)\"])),get_context));if(this.block.has_update_method){this.block.chunks.update.unshift(b(_templateObject83||(_templateObject83=(0,_taggedTemplateLiteral2.default)([\"\",\"(#ctx)\"])),get_context));}}}]);return AwaitBlockBranch;}(Wrapper);var AwaitBlockWrapper=/*#__PURE__*/function(_Wrapper2){(0,_inherits2.default)(AwaitBlockWrapper,_Wrapper2);var _super38=_createSuper(AwaitBlockWrapper);function AwaitBlockWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this47;(0,_classCallCheck2.default)(this,AwaitBlockWrapper);_this47=_super38.call(this,renderer,block,parent,node);_this47.var={type:'Identifier',name:'await_block'};_this47.cannot_use_innerhtml();_this47.not_static_content();block.add_dependencies(_this47.node.expression.dependencies);var is_dynamic=false;var has_intros=false;var has_outros=false;['pending','then','catch'].forEach(function(status){var child=_this47.node[status];var branch=new AwaitBlockBranch(status,renderer,block,(0,_assertThisInitialized2.default)(_this47),child,strip_whitespace,next_sibling);renderer.blocks.push(branch.block);if(branch.is_dynamic){is_dynamic=true;// TODO should blocks update their own parents?\nblock.add_dependencies(branch.block.dependencies);}if(branch.block.has_intros)has_intros=true;if(branch.block.has_outros)has_outros=true;_this47[status]=branch;});['pending','then','catch'].forEach(function(status){_this47[status].block.has_update_method=is_dynamic;_this47[status].block.has_intro_method=has_intros;_this47[status].block.has_outro_method=has_outros;});if(has_outros){block.add_outro();}return _this47;}(0,_createClass2.default)(AwaitBlockWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var anchor=this.get_or_create_anchor(block,parent_node,parent_nodes);var update_mount_node=this.get_update_mount_node(anchor);var snippet=this.node.expression.manipulate(block);var info=block.get_unique_name('info');var promise=block.get_unique_name('promise');block.add_variable(promise);block.maintain_context=true;var info_props=x(_templateObject84||(_templateObject84=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\tctx: #ctx,\\n\\t\\t\\tcurrent: null,\\n\\t\\t\\ttoken: null,\\n\\t\\t\\thasCatch: \",\",\\n\\t\\t\\tpending: \",\",\\n\\t\\t\\tthen: \",\",\\n\\t\\t\\tcatch: \",\",\\n\\t\\t\\tvalue: \",\",\\n\\t\\t\\terror: \",\",\\n\\t\\t\\tblocks: \",\"\\n\\t\\t}\"])),this.catch.node.start!==null?'true':'false',this.pending.block.name,this.then.block.name,this.catch.block.name,this.then.value_index,this.catch.value_index,this.pending.block.has_outro_method&&x(_templateObject85||(_templateObject85=(0,_taggedTemplateLiteral2.default)([\"[,,,]\"]))));block.chunks.init.push(b(_templateObject86||(_templateObject86=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = \",\";\\n\\t\\t\"])),info,info_props));block.chunks.init.push(b(_templateObject87||(_templateObject87=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t@handle_promise(\",\" = \",\", \",\");\\n\\t\\t\"])),promise,snippet,info));block.chunks.create.push(b(_templateObject88||(_templateObject88=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\".block.c();\\n\\t\\t\"])),info));if(parent_nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject89||(_templateObject89=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\".block.l(\",\");\\n\\t\\t\\t\"])),info,parent_nodes));}var initial_mount_node=parent_node||'#target';var anchor_node=parent_node?'null':'#anchor';var has_transitions=this.pending.block.has_intro_method||this.pending.block.has_outro_method;block.chunks.mount.push(b(_templateObject90||(_templateObject90=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\".block.m(\",\", \",\".anchor = \",\");\\n\\t\\t\\t\",\".mount = () => \",\";\\n\\t\\t\\t\",\".anchor = \",\";\\n\\t\\t\"])),info,initial_mount_node,info,anchor_node,info,update_mount_node,info,anchor));if(has_transitions){block.chunks.intro.push(b(_templateObject91||(_templateObject91=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\".block);\"])),info));}var dependencies=this.node.expression.dynamic_dependencies();var update_await_block_branch=b(_templateObject92||(_templateObject92=(0,_taggedTemplateLiteral2.default)([\"@update_await_block_branch(\",\", #ctx, #dirty)\"])),info);if(dependencies.length>0){var condition=x(_templateObject93||(_templateObject93=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" &&\\n\\t\\t\\t\\t\",\" !== (\",\" = \",\") &&\\n\\t\\t\\t\\t@handle_promise(\",\", \",\")\"])),block.renderer.dirty(dependencies),promise,promise,snippet,promise,info);block.chunks.update.push(b(_templateObject94||(_templateObject94=(0,_taggedTemplateLiteral2.default)([\"\",\".ctx = #ctx;\"])),info));if(this.pending.block.has_update_method){block.chunks.update.push(b(_templateObject95||(_templateObject95=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),condition,update_await_block_branch));}else{block.chunks.update.push(b(_templateObject96||(_templateObject96=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"])),condition));}}else{if(this.pending.block.has_update_method){block.chunks.update.push(b(_templateObject97||(_templateObject97=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"])),update_await_block_branch));}}if(this.pending.block.has_outro_method){block.chunks.outro.push(b(_templateObject98||(_templateObject98=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < 3; #i += 1) {\\n\\t\\t\\t\\t\\tconst block = \",\".blocks[#i];\\n\\t\\t\\t\\t\\t@transition_out(block);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),info));}block.chunks.destroy.push(b(_templateObject99||(_templateObject99=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\".block.d(\",\");\\n\\t\\t\\t\",\".token = null;\\n\\t\\t\\t\",\" = null;\\n\\t\\t\"])),info,parent_node?null:'detaching',info,info));[this.pending,this.then,this.catch].forEach(function(branch){branch.render(branch.block,null,x(_templateObject100||(_templateObject100=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]))));});}}]);return AwaitBlockWrapper;}(Wrapper);var TRUE=x(_templateObject101||(_templateObject101=(0,_taggedTemplateLiteral2.default)([\"true\"])));var FALSE=x(_templateObject102||(_templateObject102=(0,_taggedTemplateLiteral2.default)([\"false\"])));var EventHandlerWrapper=/*#__PURE__*/function(){function EventHandlerWrapper(node,parent){(0,_classCallCheck2.default)(this,EventHandlerWrapper);this.node=node;this.parent=parent;if(!node.expression){this.parent.renderer.add_to_context(node.handler_name.name);this.parent.renderer.component.partly_hoisted.push(b(_templateObject103||(_templateObject103=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"(event) {\\n\\t\\t\\t\\t\\t@bubble.call(this, $$self, event);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),node.handler_name.name));}}(0,_createClass2.default)(EventHandlerWrapper,[{key:\"get_snippet\",value:function get_snippet(block){var snippet=this.node.expression?this.node.expression.manipulate(block):block.renderer.reference(this.node.handler_name);if(this.node.reassigned){block.maintain_context=true;return x(_templateObject104||(_templateObject104=(0,_taggedTemplateLiteral2.default)([\"function () { if (@is_function(\",\")) \",\".apply(this, arguments); }\"])),snippet,snippet);}return snippet;}},{key:\"render\",value:function render(block,target){var _this48=this;var snippet=this.get_snippet(block);if(this.node.modifiers.has('preventDefault'))snippet=x(_templateObject105||(_templateObject105=(0,_taggedTemplateLiteral2.default)([\"@prevent_default(\",\")\"])),snippet);if(this.node.modifiers.has('stopPropagation'))snippet=x(_templateObject106||(_templateObject106=(0,_taggedTemplateLiteral2.default)([\"@stop_propagation(\",\")\"])),snippet);if(this.node.modifiers.has('self'))snippet=x(_templateObject107||(_templateObject107=(0,_taggedTemplateLiteral2.default)([\"@self(\",\")\"])),snippet);if(this.node.modifiers.has('trusted'))snippet=x(_templateObject108||(_templateObject108=(0,_taggedTemplateLiteral2.default)([\"@trusted(\",\")\"])),snippet);var args=[];var opts=['nonpassive','passive','once','capture'].filter(function(mod){return _this48.node.modifiers.has(mod);});if(opts.length){if(opts.length===1&&opts[0]==='capture'){args.push(TRUE);}else{args.push(x(_templateObject109||(_templateObject109=(0,_taggedTemplateLiteral2.default)([\"{ \",\" }\"])),opts.map(function(opt){return opt==='nonpassive'?p(_templateObject110||(_templateObject110=(0,_taggedTemplateLiteral2.default)([\"passive: false\"]))):p(_templateObject111||(_templateObject111=(0,_taggedTemplateLiteral2.default)([\"\",\": true\"])),opt);})));}}else if(block.renderer.options.dev){args.push(FALSE);}if(block.renderer.options.dev){args.push(this.node.modifiers.has('preventDefault')?TRUE:FALSE);args.push(this.node.modifiers.has('stopPropagation')?TRUE:FALSE);}block.event_listeners.push(x(_templateObject112||(_templateObject112=(0,_taggedTemplateLiteral2.default)([\"@listen(\",\", \\\"\",\"\\\", \",\", \",\")\"])),target,this.node.name,snippet,args));}}]);return EventHandlerWrapper;}();function add_event_handlers(block,target,handlers){handlers.forEach(function(handler){return add_event_handler(block,target,handler);});}function add_event_handler(block,target,handler){handler.render(block,target);}function add_actions(block,target,actions){actions.forEach(function(action){return add_action(block,target,action);});}function add_action(block,target,action){var expression=action.expression,template_scope=action.template_scope;var snippet;var dependencies;if(expression){snippet=expression.manipulate(block);dependencies=expression.dynamic_dependencies();}var id=block.get_unique_name(\"\".concat(action.name.replace(/[^a-zA-Z0-9_$]/g,'_'),\"_action\"));block.add_variable(id);var _action$name$split=action.name.split('.'),_action$name$split2=(0,_toArray2.default)(_action$name$split),obj=_action$name$split2[0],properties=_action$name$split2.slice(1);var fn=is_contextual(action.component,template_scope,obj)?block.renderer.reference(obj):obj;if(properties.length){var member_expression=properties.reduce(function(lhs,rhs){return x(_templateObject113||(_templateObject113=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"])),lhs,rhs);},fn);block.event_listeners.push(x(_templateObject114||(_templateObject114=(0,_taggedTemplateLiteral2.default)([\"@action_destroyer(\",\" = \",\"(\",\", \",\"))\"])),id,member_expression,target,snippet));}else{block.event_listeners.push(x(_templateObject115||(_templateObject115=(0,_taggedTemplateLiteral2.default)([\"@action_destroyer(\",\" = \",\".call(null, \",\", \",\"))\"])),id,fn,target,snippet));}if(dependencies&&dependencies.length>0){var condition=x(_templateObject116||(_templateObject116=(0,_taggedTemplateLiteral2.default)([\"\",\" && @is_function(\",\".update)\"])),id,id);if(dependencies.length>0){condition=x(_templateObject117||(_templateObject117=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"])),condition,block.renderer.dirty(dependencies));}block.chunks.update.push(b(_templateObject118||(_templateObject118=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".update.call(null, \",\");\"])),condition,id,snippet));}}var BodyWrapper=/*#__PURE__*/function(_Wrapper3){(0,_inherits2.default)(BodyWrapper,_Wrapper3);var _super39=_createSuper(BodyWrapper);function BodyWrapper(renderer,block,parent,node){var _this49;(0,_classCallCheck2.default)(this,BodyWrapper);_this49=_super39.call(this,renderer,block,parent,node);_this49.handlers=_this49.node.handlers.map(function(handler){return new EventHandlerWrapper(handler,(0,_assertThisInitialized2.default)(_this49));});return _this49;}(0,_createClass2.default)(BodyWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){add_event_handlers(block,x(_templateObject119||(_templateObject119=(0,_taggedTemplateLiteral2.default)([\"@_document.body\"]))),this.handlers);add_actions(block,x(_templateObject120||(_templateObject120=(0,_taggedTemplateLiteral2.default)([\"@_document.body\"]))),this.node.actions);}}]);return BodyWrapper;}(Wrapper);var DebugTagWrapper=/*#__PURE__*/function(_Wrapper4){(0,_inherits2.default)(DebugTagWrapper,_Wrapper4);var _super40=_createSuper(DebugTagWrapper);function DebugTagWrapper(renderer,block,parent,node,_strip_whitespace,_next_sibling){(0,_classCallCheck2.default)(this,DebugTagWrapper);return _super40.call(this,renderer,block,parent,node);}(0,_createClass2.default)(DebugTagWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){var renderer=this.renderer;var component=renderer.component;if(!renderer.options.dev)return;var var_lookup=component.var_lookup;var start=component.locate(this.node.start+1);var end={line:start.line,column:start.column+6};var loc={start:start,end:end};var debug={type:'DebuggerStatement',loc:loc};if(this.node.expressions.length===0){// Debug all\nblock.chunks.create.push(debug);block.chunks.update.push(debug);}else{var log={type:'Identifier',name:'log',loc:loc};var dependencies=new Set();this.node.expressions.forEach(function(expression){add_to_set(dependencies,expression.dependencies);});var contextual_identifiers=this.node.expressions.filter(function(e){var variable=var_lookup.get(e.node.name);return!(variable&&variable.hoistable);}).map(function(e){return e.node.name;});var logged_identifiers=this.node.expressions.map(function(e){return p(_templateObject121||(_templateObject121=(0,_taggedTemplateLiteral2.default)([\"\",\"\"])),e.node.name);});var debug_statements=b(_templateObject122||(_templateObject122=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t@_console.\",\"({ \",\" });\\n\\t\\t\\t\\tdebugger;\"])),contextual_identifiers.map(function(name){return b(_templateObject123||(_templateObject123=(0,_taggedTemplateLiteral2.default)([\"const \",\" = \",\";\"])),name,renderer.reference(name));}),log,logged_identifiers);if(dependencies.size){var condition=renderer.dirty(Array.from(dependencies));block.chunks.update.push(b(_templateObject124||(_templateObject124=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),condition,debug_statements));}block.chunks.create.push(b(_templateObject125||(_templateObject125=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),debug_statements));}}}]);return DebugTagWrapper;}(Wrapper);var ElseBlockWrapper=/*#__PURE__*/function(_Wrapper5){(0,_inherits2.default)(ElseBlockWrapper,_Wrapper5);var _super41=_createSuper(ElseBlockWrapper);function ElseBlockWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this50;(0,_classCallCheck2.default)(this,ElseBlockWrapper);_this50=_super41.call(this,renderer,block,parent,node);_this50.var=null;_this50.block=block.child({comment:create_debugging_comment(node,_this50.renderer.component),name:_this50.renderer.component.get_unique_name('create_else_block'),type:'else'});_this50.fragment=new FragmentWrapper(renderer,_this50.block,_this50.node.children,parent,strip_whitespace,next_sibling);_this50.is_dynamic=_this50.block.dependencies.size>0;return _this50;}return(0,_createClass2.default)(ElseBlockWrapper);}(Wrapper);var EachBlockWrapper=/*#__PURE__*/function(_Wrapper6){(0,_inherits2.default)(EachBlockWrapper,_Wrapper6);var _super42=_createSuper(EachBlockWrapper);function EachBlockWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this51;(0,_classCallCheck2.default)(this,EachBlockWrapper);_this51=_super42.call(this,renderer,block,parent,node);_this51.updates=[];_this51.var={type:'Identifier',name:'each'};_this51.cannot_use_innerhtml();_this51.not_static_content();var dependencies=node.expression.dependencies;block.add_dependencies(dependencies);_this51.node.contexts.forEach(function(context){renderer.add_to_context(context.key.name,true);});add_const_tags_context(renderer,_this51.node.const_tags);_this51.block=block.child({comment:create_debugging_comment(_this51.node,_this51.renderer.component),name:renderer.component.get_unique_name('create_each_block'),type:'each',// @ts-ignore todo: probably error\nkey:node.key,bindings:new Map(block.bindings)});// TODO this seems messy\n_this51.block.has_animation=_this51.node.has_animation;_this51.index_name=_this51.node.index?{type:'Identifier',name:_this51.node.index}:renderer.component.get_unique_name(\"\".concat(_this51.node.context,\"_index\"));var fixed_length=node.expression.node.type==='ArrayExpression'&&node.expression.node.elements.every(function(element){return element.type!=='SpreadElement';})?node.expression.node.elements.length:null;// hack the sourcemap, so that if data is missing the bug\n// is easy to find\nvar c=_this51.node.start+2;while(renderer.component.source[c]!=='e'){c+=1;}var start=renderer.component.locate(c);var end={line:start.line,column:start.column+4};var length={type:'Identifier',name:'length',loc:{start:start,end:end}};var each_block_value=renderer.component.get_unique_name(\"\".concat(_this51.var.name,\"_value\"));var iterations=block.get_unique_name(\"\".concat(_this51.var.name,\"_blocks\"));renderer.add_to_context(each_block_value.name,true);renderer.add_to_context(_this51.index_name.name,true);_this51.vars={create_each_block:_this51.block.name,each_block_value:each_block_value,get_each_context:renderer.component.get_unique_name(\"get_\".concat(_this51.var.name,\"_context\")),iterations:iterations,// optimisation for array literal\nfixed_length:fixed_length,data_length:fixed_length===null?x(_templateObject126||(_templateObject126=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"])),each_block_value,length):fixed_length,view_length:fixed_length===null?x(_templateObject127||(_templateObject127=(0,_taggedTemplateLiteral2.default)([\"\",\".length\"])),iterations):fixed_length};var object=get_object(node.expression.node);var store=object.type==='Identifier'&&object.name[0]==='$'?object.name.slice(1):null;node.contexts.forEach(function(prop){_this51.block.bindings.set(prop.key.name,{object:_this51.vars.each_block_value,property:_this51.index_name,modifier:prop.modifier,snippet:prop.modifier(x(_templateObject128||(_templateObject128=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),_this51.vars.each_block_value,_this51.index_name)),store:store});});if(_this51.node.index){_this51.block.get_unique_name(_this51.node.index);// this prevents name collisions (#1254)\n}renderer.blocks.push(_this51.block);_this51.fragment=new FragmentWrapper(renderer,_this51.block,node.children,(0,_assertThisInitialized2.default)(_this51),strip_whitespace,next_sibling);if(_this51.node.else){_this51.else=new ElseBlockWrapper(renderer,block,(0,_assertThisInitialized2.default)(_this51),_this51.node.else,strip_whitespace,next_sibling);renderer.blocks.push(_this51.else.block);if(_this51.else.is_dynamic){_this51.block.add_dependencies(_this51.else.block.dependencies);}}block.add_dependencies(_this51.block.dependencies);if(_this51.block.has_outros||_this51.else&&_this51.else.block.has_outros){block.add_outro();}return _this51;}(0,_createClass2.default)(EachBlockWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){if(this.fragment.nodes.length===0)return;var renderer=this.renderer;var component=renderer.component;var needs_anchor=this.next?!this.next.is_dom_node():!parent_node||!this.parent.is_dom_node();var snippet=this.node.expression.manipulate(block);block.chunks.init.push(b(_templateObject129||(_templateObject129=(0,_taggedTemplateLiteral2.default)([\"let \",\" = \",\";\"])),this.vars.each_block_value,snippet));if(this.renderer.options.dev){block.chunks.init.push(b(_templateObject130||(_templateObject130=(0,_taggedTemplateLiteral2.default)([\"@validate_each_argument(\",\");\"])),this.vars.each_block_value));}var initial_anchor_node={type:'Identifier',name:parent_node?'null':'#anchor'};var initial_mount_node=parent_node||{type:'Identifier',name:'#target'};var update_anchor_node=needs_anchor?block.get_unique_name(\"\".concat(this.var.name,\"_anchor\")):this.next&&this.next.var||{type:'Identifier',name:'null'};var update_mount_node=this.get_update_mount_node(update_anchor_node);var args={block:block,parent_node:parent_node,parent_nodes:parent_nodes,snippet:snippet,initial_anchor_node:initial_anchor_node,initial_mount_node:initial_mount_node,update_anchor_node:update_anchor_node,update_mount_node:update_mount_node};var all_dependencies=new Set(this.block.dependencies);// TODO should be dynamic deps only\nthis.node.expression.dynamic_dependencies().forEach(function(dependency){all_dependencies.add(dependency);});if(this.node.key){this.node.key.dynamic_dependencies().forEach(function(dependency){all_dependencies.add(dependency);});}this.dependencies=all_dependencies;if(this.node.key){this.render_keyed(args);}else{this.render_unkeyed(args);}if(this.block.has_intro_method||this.block.has_outro_method){block.chunks.intro.push(b(_templateObject131||(_templateObject131=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t@transition_in(\",\"[#i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),this.vars.data_length,this.vars.iterations));}if(needs_anchor){block.add_element(update_anchor_node,x(_templateObject132||(_templateObject132=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),parent_nodes&&x(_templateObject133||(_templateObject133=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),parent_node);}if(this.else){var each_block_else=component.get_unique_name(\"\".concat(this.var.name,\"_else\"));block.chunks.init.push(b(_templateObject134||(_templateObject134=(0,_taggedTemplateLiteral2.default)([\"let \",\" = null;\"])),each_block_else));// TODO neaten this up... will end up with an empty line in the block\nblock.chunks.init.push(b(_templateObject135||(_templateObject135=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (!\",\") {\\n\\t\\t\\t\\t\\t\",\" = \",\"(#ctx);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),this.vars.data_length,each_block_else,this.else.block.name));block.chunks.create.push(b(_templateObject136||(_templateObject136=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),each_block_else,each_block_else));if(this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject137||(_templateObject137=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\".l(\",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),each_block_else,each_block_else,parent_nodes));}block.chunks.mount.push(b(_templateObject138||(_templateObject138=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),each_block_else,each_block_else,initial_mount_node,initial_anchor_node));var has_transitions=!!(this.else.block.has_intro_method||this.else.block.has_outro_method);var destroy_block_else=this.else.block.has_outro_method?b(_templateObject139||(_templateObject139=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t\\t@transition_out(\",\", 1, 1, () => {\\n\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t@check_outros();\"])),each_block_else,each_block_else):b(_templateObject140||(_templateObject140=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\".d(1);\\n\\t\\t\\t\\t\\t\",\" = null;\"])),each_block_else,each_block_else);if(this.else.block.has_update_method){this.updates.push(b(_templateObject141||(_templateObject141=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (!\",\" && \",\") {\\n\\t\\t\\t\\t\\t\\t\",\".p(#ctx, #dirty);\\n\\t\\t\\t\\t\\t} else if (!\",\") {\\n\\t\\t\\t\\t\\t\\t\",\" = \",\"(#ctx);\\n\\t\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t\\t} else if (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),this.vars.data_length,each_block_else,each_block_else,this.vars.data_length,each_block_else,this.else.block.name,each_block_else,has_transitions&&b(_templateObject142||(_templateObject142=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"])),each_block_else),each_block_else,update_mount_node,update_anchor_node,each_block_else,destroy_block_else));}else{this.updates.push(b(_templateObject143||(_templateObject143=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\\t\",\";\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} else if (!\",\") {\\n\\t\\t\\t\\t\\t\\t\",\" = \",\"(#ctx);\\n\\t\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),this.vars.data_length,each_block_else,destroy_block_else,each_block_else,each_block_else,this.else.block.name,each_block_else,has_transitions&&b(_templateObject144||(_templateObject144=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"])),each_block_else),each_block_else,update_mount_node,update_anchor_node));}block.chunks.destroy.push(b(_templateObject145||(_templateObject145=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") \",\".d(\",\");\\n\\t\\t\\t\"])),each_block_else,each_block_else,parent_node?'':'detaching'));}if(this.updates.length){block.chunks.update.push(b(_templateObject146||(_templateObject146=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),block.renderer.dirty(Array.from(all_dependencies)),this.updates));}this.fragment.render(this.block,null,x(_templateObject147||(_templateObject147=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]))));if(this.else){this.else.fragment.render(this.else.block,null,x(_templateObject148||(_templateObject148=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]))));}this.context_props=this.node.contexts.map(function(prop){return b(_templateObject149||(_templateObject149=(0,_taggedTemplateLiteral2.default)([\"child_ctx[\",\"] = \",\";\"])),renderer.context_lookup.get(prop.key.name).index,prop.default_modifier(prop.modifier(x(_templateObject150||(_templateObject150=(0,_taggedTemplateLiteral2.default)([\"list[i]\"])))),function(name){return renderer.context_lookup.has(name)?x(_templateObject151||(_templateObject151=(0,_taggedTemplateLiteral2.default)([\"child_ctx[\",\"]\"])),renderer.context_lookup.get(name).index):{type:'Identifier',name:name};}));});if(this.node.has_binding)this.context_props.push(b(_templateObject152||(_templateObject152=(0,_taggedTemplateLiteral2.default)([\"child_ctx[\",\"] = list;\"])),renderer.context_lookup.get(this.vars.each_block_value.name).index));if(this.node.has_binding||this.node.has_index_binding||this.node.index)this.context_props.push(b(_templateObject153||(_templateObject153=(0,_taggedTemplateLiteral2.default)([\"child_ctx[\",\"] = i;\"])),renderer.context_lookup.get(this.index_name.name).index));// TODO which is better — Object.create(array) or array.slice()?\nrenderer.blocks.push(b(_templateObject154||(_templateObject154=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(#ctx, list, i) {\\n\\t\\t\\t\\tconst child_ctx = #ctx.slice();\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\treturn child_ctx;\\n\\t\\t\\t}\\n\\t\\t\"])),this.vars.get_each_context,this.context_props,add_const_tags(this.block,this.node.const_tags,'child_ctx')));}},{key:\"render_keyed\",value:function render_keyed(_ref6){var block=_ref6.block,parent_node=_ref6.parent_node,parent_nodes=_ref6.parent_nodes,snippet=_ref6.snippet,initial_anchor_node=_ref6.initial_anchor_node,initial_mount_node=_ref6.initial_mount_node,update_anchor_node=_ref6.update_anchor_node,update_mount_node=_ref6.update_mount_node;var _this$vars=this.vars,create_each_block=_this$vars.create_each_block,iterations=_this$vars.iterations,data_length=_this$vars.data_length,view_length=_this$vars.view_length;var get_key=block.get_unique_name('get_key');var lookup=block.get_unique_name(\"\".concat(this.var.name,\"_lookup\"));block.add_variable(iterations,x(_templateObject155||(_templateObject155=(0,_taggedTemplateLiteral2.default)([\"[]\"]))));block.add_variable(lookup,x(_templateObject156||(_templateObject156=(0,_taggedTemplateLiteral2.default)([\"new @_Map()\"]))));if(this.fragment.nodes[0].is_dom_node()){this.block.first=this.fragment.nodes[0].var;}else{this.block.first=this.block.get_unique_name('first');this.block.add_element(this.block.first,x(_templateObject157||(_templateObject157=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),parent_nodes&&x(_templateObject158||(_templateObject158=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),null);}block.chunks.init.push(b(_templateObject159||(_templateObject159=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tconst \",\" = #ctx => \",\";\\n\\n\\t\\t\\t\",\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\tlet child_ctx = \",\"(#ctx, \",\", #i);\\n\\t\\t\\t\\tlet key = \",\"(child_ctx);\\n\\t\\t\\t\\t\",\".set(key, \",\"[#i] = \",\"(key, child_ctx));\\n\\t\\t\\t}\\n\\t\\t\"])),get_key,this.node.key.manipulate(block),this.renderer.options.dev&&b(_templateObject160||(_templateObject160=(0,_taggedTemplateLiteral2.default)([\"@validate_each_keys(#ctx, \",\", \",\", \",\");\"])),this.vars.each_block_value,this.vars.get_each_context,get_key),data_length,this.vars.get_each_context,this.vars.each_block_value,get_key,lookup,iterations,create_each_block));block.chunks.create.push(b(_templateObject161||(_templateObject161=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t}\\n\\t\\t\"])),view_length,iterations));if(parent_nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject162||(_templateObject162=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t\",\"[#i].l(\",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),view_length,iterations,parent_nodes));}block.chunks.mount.push(b(_templateObject163||(_templateObject163=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t}\\n\\t\\t\"])),view_length,iterations,initial_mount_node,initial_anchor_node));var dynamic=this.block.has_update_method;var destroy=this.node.has_animation?this.block.has_outros?'@fix_and_outro_and_destroy_block':'@fix_and_destroy_block':this.block.has_outros?'@outro_and_destroy_block':'@destroy_block';if(this.dependencies.size){this.block.maintain_context=true;this.updates.push(b(_templateObject164||(_templateObject164=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" = \",\";\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\" = @update_keyed_each(\",\", #dirty, \",\", \",\", #ctx, \",\", \",\", \",\", \",\", \",\", \",\", \",\");\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"])),this.vars.each_block_value,snippet,this.renderer.options.dev&&b(_templateObject165||(_templateObject165=(0,_taggedTemplateLiteral2.default)([\"@validate_each_argument(\",\");\"])),this.vars.each_block_value),this.block.has_outros&&b(_templateObject166||(_templateObject166=(0,_taggedTemplateLiteral2.default)([\"@group_outros();\"]))),this.node.has_animation&&b(_templateObject167||(_templateObject167=(0,_taggedTemplateLiteral2.default)([\"for (let #i = 0; #i < \",\"; #i += 1) \",\"[#i].r();\"])),view_length,iterations),this.renderer.options.dev&&b(_templateObject168||(_templateObject168=(0,_taggedTemplateLiteral2.default)([\"@validate_each_keys(#ctx, \",\", \",\", \",\");\"])),this.vars.each_block_value,this.vars.get_each_context,get_key),iterations,iterations,get_key,dynamic?1:0,this.vars.each_block_value,lookup,update_mount_node,destroy,create_each_block,update_anchor_node,this.vars.get_each_context,this.node.has_animation&&b(_templateObject169||(_templateObject169=(0,_taggedTemplateLiteral2.default)([\"for (let #i = 0; #i < \",\"; #i += 1) \",\"[#i].a();\"])),view_length,iterations),this.block.has_outros&&b(_templateObject170||(_templateObject170=(0,_taggedTemplateLiteral2.default)([\"@check_outros();\"])))));}if(this.block.has_outros){block.chunks.outro.push(b(_templateObject171||(_templateObject171=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t@transition_out(\",\"[#i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),view_length,iterations));}block.chunks.destroy.push(b(_templateObject172||(_templateObject172=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].d(\",\");\\n\\t\\t\\t}\\n\\t\\t\"])),view_length,iterations,parent_node?null:'detaching'));}},{key:\"render_unkeyed\",value:function render_unkeyed(_ref7){var block=_ref7.block,parent_nodes=_ref7.parent_nodes,snippet=_ref7.snippet,initial_anchor_node=_ref7.initial_anchor_node,initial_mount_node=_ref7.initial_mount_node,update_anchor_node=_ref7.update_anchor_node,update_mount_node=_ref7.update_mount_node;var _this$vars2=this.vars,create_each_block=_this$vars2.create_each_block,iterations=_this$vars2.iterations,fixed_length=_this$vars2.fixed_length,data_length=_this$vars2.data_length,view_length=_this$vars2.view_length;block.chunks.init.push(b(_templateObject173||(_templateObject173=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = [];\\n\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i] = \",\"(\",\"(#ctx, \",\", #i));\\n\\t\\t\\t}\\n\\t\\t\"])),iterations,data_length,iterations,create_each_block,this.vars.get_each_context,this.vars.each_block_value));block.chunks.create.push(b(_templateObject174||(_templateObject174=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t}\\n\\t\\t\"])),view_length,iterations));if(parent_nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject175||(_templateObject175=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t\",\"[#i].l(\",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),view_length,iterations,parent_nodes));}block.chunks.mount.push(b(_templateObject176||(_templateObject176=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t}\\n\\t\\t\"])),view_length,iterations,initial_mount_node,initial_anchor_node));if(this.dependencies.size){var has_transitions=!!(this.block.has_intro_method||this.block.has_outro_method);var for_loop_body=this.block.has_update_method?b(_templateObject177||(_templateObject177=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\"[#i]) {\\n\\t\\t\\t\\t\\t\\t\",\"[#i].p(child_ctx, #dirty);\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\"[#i] = \",\"(child_ctx);\\n\\t\\t\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),iterations,iterations,has_transitions&&b(_templateObject178||(_templateObject178=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\"[#i], 1);\"])),this.vars.iterations),iterations,create_each_block,iterations,has_transitions&&b(_templateObject179||(_templateObject179=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\"[#i], 1);\"])),this.vars.iterations),iterations,update_mount_node,update_anchor_node):has_transitions?b(_templateObject180||(_templateObject180=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (\",\"[#i]) {\\n\\t\\t\\t\\t\\t\\t\\t@transition_in(\",\"[#i], 1);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i] = \",\"(child_ctx);\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t\\t\\t\\t\\t@transition_in(\",\"[#i], 1);\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"])),iterations,this.vars.iterations,iterations,create_each_block,iterations,this.vars.iterations,iterations,update_mount_node,update_anchor_node):b(_templateObject181||(_templateObject181=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (!\",\"[#i]) {\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i] = \",\"(child_ctx);\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"])),iterations,iterations,create_each_block,iterations,iterations,update_mount_node,update_anchor_node);var start=this.block.has_update_method?0:'#old_length';var remove_old_blocks;if(this.block.has_outros){var out=block.get_unique_name('out');block.chunks.init.push(b(_templateObject182||(_templateObject182=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tconst \",\" = i => @transition_out(\",\"[i], 1, 1, () => {\\n\\t\\t\\t\\t\\t\\t\",\"[i] = null;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\"])),out,iterations,iterations));remove_old_blocks=b(_templateObject183||(_templateObject183=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t\\tfor (#i = \",\"; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t\\t\",\"(#i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t@check_outros();\\n\\t\\t\\t\\t\"])),data_length,view_length,out);}else{remove_old_blocks=b(_templateObject184||(_templateObject184=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfor (\",\"; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t\\t\",\"[#i].d(1);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"])),this.block.has_update_method?null:x(_templateObject185||(_templateObject185=(0,_taggedTemplateLiteral2.default)([\"#i = \",\"\"])),data_length),this.block.has_update_method?view_length:'#old_length',iterations,!fixed_length&&b(_templateObject186||(_templateObject186=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"])),view_length,data_length));}// We declare `i` as block scoped here, as the `remove_old_blocks` code\n// may rely on continuing where this iteration stopped.\nvar update=b(_templateObject187||(_templateObject187=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\" = \",\";\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\tlet #i;\\n\\t\\t\\t\\tfor (#i = \",\"; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\tconst child_ctx = \",\"(#ctx, \",\", #i);\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"])),!this.block.has_update_method&&b(_templateObject188||(_templateObject188=(0,_taggedTemplateLiteral2.default)([\"const #old_length = \",\".length;\"])),this.vars.each_block_value),this.vars.each_block_value,snippet,this.renderer.options.dev&&b(_templateObject189||(_templateObject189=(0,_taggedTemplateLiteral2.default)([\"@validate_each_argument(\",\");\"])),this.vars.each_block_value),start,data_length,this.vars.get_each_context,this.vars.each_block_value,for_loop_body,remove_old_blocks);this.updates.push(update);}if(this.block.has_outros){block.chunks.outro.push(b(_templateObject190||(_templateObject190=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" = \",\".filter(@_Boolean);\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t@transition_out(\",\"[#i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),iterations,iterations,view_length,iterations));}block.chunks.destroy.push(b(_templateObject191||(_templateObject191=(0,_taggedTemplateLiteral2.default)([\"@destroy_each(\",\", detaching);\"])),iterations));}}]);return EachBlockWrapper;}(Wrapper);var TextWrapper=/*#__PURE__*/function(_Wrapper7){(0,_inherits2.default)(TextWrapper,_Wrapper7);var _super43=_createSuper(TextWrapper);function TextWrapper(renderer,block,parent,node,data){var _this52;(0,_classCallCheck2.default)(this,TextWrapper);_this52=_super43.call(this,renderer,block,parent,node);_this52.skip=_this52.node.should_skip();_this52.data=data;_this52.var=_this52.skip?null:x(_templateObject192||(_templateObject192=(0,_taggedTemplateLiteral2.default)([\"t\"])));return _this52;}(0,_createClass2.default)(TextWrapper,[{key:\"use_space\",value:function use_space(){if(this.renderer.component.component_options.preserveWhitespace)return false;if(/[\\S\\u00A0]/.test(this.data))return false;var node=this.parent&&this.parent.node;while(node){if(node.type==='Element'&&node.name==='pre'){return false;}node=node.parent;}return true;}},{key:\"render\",value:function render(block,parent_node,parent_nodes){if(this.skip)return;var use_space=this.use_space();var string_literal={type:'Literal',value:this.data,loc:{start:this.renderer.locate(this.node.start),end:this.renderer.locate(this.node.end)}};block.add_element(this.var,use_space?x(_templateObject193||(_templateObject193=(0,_taggedTemplateLiteral2.default)([\"@space()\"]))):x(_templateObject194||(_templateObject194=(0,_taggedTemplateLiteral2.default)([\"@text(\",\")\"])),string_literal),parent_nodes&&(use_space?x(_templateObject195||(_templateObject195=(0,_taggedTemplateLiteral2.default)([\"@claim_space(\",\")\"])),parent_nodes):x(_templateObject196||(_templateObject196=(0,_taggedTemplateLiteral2.default)([\"@claim_text(\",\", \",\")\"])),parent_nodes,string_literal)),parent_node);}}]);return TextWrapper;}(Wrapper);var svg_attributes='accent-height accumulate additive alignment-baseline allowReorder alphabetic amplitude arabic-form ascent attributeName attributeType autoReverse azimuth baseFrequency baseline-shift baseProfile bbox begin bias by calcMode cap-height class clip clipPathUnits clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominant-baseline dur dx dy edgeMode elevation enable-background end exponent externalResourcesRequired fill fill-opacity fill-rule filter filterRes filterUnits flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight format from fr fx fy g1 g2 glyph-name glyph-orientation-horizontal glyph-orientation-vertical glyphRef gradientTransform gradientUnits hanging height href horiz-adv-x horiz-origin-x id ideographic image-rendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lang lengthAdjust letter-spacing lighting-color limitingConeAngle local marker-end marker-mid marker-start markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical max media method min mode name numOctaves offset onabort onactivate onbegin onclick onend onerror onfocusin onfocusout onload onmousedown onmousemove onmouseout onmouseover onmouseup onrepeat onresize onscroll onunload opacity operator order orient orientation origin overflow overline-position overline-thickness panose-1 paint-order pathLength patternContentUnits patternTransform patternUnits pointer-events points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shape-rendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stop-color stop-opacity strikethrough-position strikethrough-thickness string stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width style surfaceScale systemLanguage tabindex tableValues target targetX targetY text-anchor text-decoration text-rendering textLength to transform type u1 u2 underline-position underline-thickness unicode unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical values version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget visibility width widths word-spacing writing-mode x x-height x1 x2 xChannelSelector xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space y y1 y2 yChannelSelector z zoomAndPan'.split(' ');var svg_attribute_lookup=new Map();svg_attributes.forEach(function(name){svg_attribute_lookup.set(name.toLowerCase(),name);});function fix_attribute_casing(name){name=name.toLowerCase();return svg_attribute_lookup.get(name)||name;}function handle_select_value_binding(attr,dependencies){var parent=attr.parent;if(parent.node.name==='select'){parent.select_binding_dependencies=dependencies;dependencies.forEach(function(prop){parent.renderer.component.indirect_dependencies.set(prop,new Set());});}}var non_textlike_input_types=new Set(['button','checkbox','color','date','datetime-local','file','hidden','image','radio','range','reset','submit']);var BaseAttributeWrapper=/*#__PURE__*/function(){function BaseAttributeWrapper(parent,block,node){(0,_classCallCheck2.default)(this,BaseAttributeWrapper);this.node=node;this.parent=parent;if(node.dependencies.size>0){parent.cannot_use_innerhtml();parent.not_static_content();block.add_dependencies(node.dependencies);}}(0,_createClass2.default)(BaseAttributeWrapper,[{key:\"render\",value:function render(_block){}}]);return BaseAttributeWrapper;}();var AttributeWrapper=/*#__PURE__*/function(_BaseAttributeWrapper){(0,_inherits2.default)(AttributeWrapper,_BaseAttributeWrapper);var _super44=_createSuper(AttributeWrapper);function AttributeWrapper(parent,block,node){var _this53;(0,_classCallCheck2.default)(this,AttributeWrapper);_this53=_super44.call(this,parent,block,node);if(node.dependencies.size>0){// special case — <option value={foo}> — see below\nif(_this53.parent.node.name==='option'&&node.name==='value'){var select=_this53.parent;while(select&&(select.node.type!=='Element'||select.node.name!=='select')){// @ts-ignore todo: doublecheck this, but looks to be correct\nselect=select.parent;}if(select&&select.select_binding_dependencies){select.select_binding_dependencies.forEach(function(prop){_this53.node.dependencies.forEach(function(dependency){_this53.parent.renderer.component.indirect_dependencies.get(prop).add(dependency);});});}}if(node.name==='value'){handle_select_value_binding((0,_assertThisInitialized2.default)(_this53),node.dependencies);}}if(_this53.parent.node.namespace==namespaces.foreign){// leave attribute case alone for elements in the \"foreign\" namespace\n_this53.name=_this53.node.name;_this53.metadata=_this53.get_metadata();_this53.is_indirectly_bound_value=false;_this53.property_name=null;_this53.is_select_value_attribute=false;_this53.is_input_value=false;}else{_this53.name=fix_attribute_casing(_this53.node.name);_this53.metadata=_this53.get_metadata();_this53.is_indirectly_bound_value=is_indirectly_bound_value((0,_assertThisInitialized2.default)(_this53));_this53.property_name=_this53.is_indirectly_bound_value?'__value':_this53.metadata&&_this53.metadata.property_name;_this53.is_select_value_attribute=_this53.name==='value'&&_this53.parent.node.name==='select';_this53.is_input_value=_this53.name==='value'&&_this53.parent.node.name==='input';}// TODO retire this exception in favour of https://github.com/sveltejs/svelte/issues/3750\n_this53.is_src=_this53.name==='src'&&(!_this53.parent.node.namespace||_this53.parent.node.namespace===namespaces.html);_this53.should_cache=should_cache((0,_assertThisInitialized2.default)(_this53));return _this53;}(0,_createClass2.default)(AttributeWrapper,[{key:\"render\",value:function render(block){var element=this.parent;var name=this.name,property_name=this.property_name,should_cache=this.should_cache,is_indirectly_bound_value=this.is_indirectly_bound_value;// xlink is a special case... we could maybe extend this to generic\n// namespaced attributes but I'm not sure that's applicable in\n// HTML5?\nvar method=/-/.test(element.node.name)?'@set_custom_element_data':name.slice(0,6)==='xlink:'?'@xlink_attr':'@attr';var is_legacy_input_type=element.renderer.component.compile_options.legacy&&name==='type'&&this.parent.node.name==='input';var dependencies=this.get_dependencies();var value=this.get_value(block);var updater;var init=this.get_init(block,value);if(is_legacy_input_type){block.chunks.hydrate.push(b(_templateObject197||(_templateObject197=(0,_taggedTemplateLiteral2.default)([\"@set_input_type(\",\", \",\");\"])),element.var,init));updater=b(_templateObject198||(_templateObject198=(0,_taggedTemplateLiteral2.default)([\"@set_input_type(\",\", \",\");\"])),element.var,should_cache?this.last:value);}else if(this.is_select_value_attribute){// annoying special case\nvar is_multiple_select=element.node.get_static_attribute_value('multiple');if(is_multiple_select){updater=b(_templateObject199||(_templateObject199=(0,_taggedTemplateLiteral2.default)([\"@select_options(\",\", \",\");\"])),element.var,value);}else{updater=b(_templateObject200||(_templateObject200=(0,_taggedTemplateLiteral2.default)([\"@select_option(\",\", \",\");\"])),element.var,value);}block.chunks.mount.push(b(_templateObject201||(_templateObject201=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"])),updater));}else if(this.is_src){block.chunks.hydrate.push(b(_templateObject202||(_templateObject202=(0,_taggedTemplateLiteral2.default)([\"if (!@src_url_equal(\",\".src, \",\")) \",\"(\",\", \\\"\",\"\\\", \",\");\"])),element.var,init,method,element.var,name,this.last));updater=b(_templateObject203||(_templateObject203=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\", \\\"\",\"\\\", \",\");\"])),method,element.var,name,should_cache?this.last:value);}else if(property_name){block.chunks.hydrate.push(b(_templateObject204||(_templateObject204=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" = \",\";\"])),element.var,property_name,init));updater=block.renderer.options.dev?b(_templateObject205||(_templateObject205=(0,_taggedTemplateLiteral2.default)([\"@prop_dev(\",\", \\\"\",\"\\\", \",\");\"])),element.var,property_name,should_cache?this.last:value):b(_templateObject206||(_templateObject206=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" = \",\";\"])),element.var,property_name,should_cache?this.last:value);}else{block.chunks.hydrate.push(b(_templateObject207||(_templateObject207=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\", \\\"\",\"\\\", \",\");\"])),method,element.var,name,init));updater=b(_templateObject208||(_templateObject208=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\", \\\"\",\"\\\", \",\");\"])),method,element.var,name,should_cache?this.last:value);}if(is_indirectly_bound_value){var update_value=b(_templateObject209||(_templateObject209=(0,_taggedTemplateLiteral2.default)([\"\",\".value = \",\".__value;\"])),element.var,element.var);block.chunks.hydrate.push(update_value);updater=b(_templateObject210||(_templateObject210=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\";\\n\\t\\t\\t\"])),updater,update_value);}if(dependencies.length>0){var condition=this.get_dom_update_conditions(block,block.renderer.dirty(dependencies));block.chunks.update.push(b(_templateObject211||(_templateObject211=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"])),condition,updater));}// special case – autofocus. has to be handled in a bit of a weird way\nif(name==='autofocus'){block.autofocus={element_var:element.var,condition_expression:this.node.is_true?undefined:value};}}},{key:\"get_init\",value:function get_init(block,value){this.last=this.should_cache&&block.get_unique_name(\"\".concat(this.parent.var.name,\"_\").concat(this.name.replace(/[^a-zA-Z_$]/g,'_'),\"_value\"));if(this.should_cache)block.add_variable(this.last);return this.should_cache?x(_templateObject212||(_templateObject212=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\"\"])),this.last,value):value;}},{key:\"get_dom_update_conditions\",value:function get_dom_update_conditions(block,dependency_condition){var property_name=this.property_name,should_cache=this.should_cache,last=this.last;var element=this.parent;var value=this.get_value(block);var condition=dependency_condition;if(should_cache){condition=this.is_src?x(_templateObject213||(_templateObject213=(0,_taggedTemplateLiteral2.default)([\"\",\" && (!@src_url_equal(\",\".src, (\",\" = \",\")))\"])),condition,element.var,last,value):x(_templateObject214||(_templateObject214=(0,_taggedTemplateLiteral2.default)([\"\",\" && (\",\" !== (\",\" = \",\"))\"])),condition,last,last,value);}if(this.is_input_value){var type=element.node.get_static_attribute_value('type');if(type!==true&&!non_textlike_input_types.has(type)){condition=x(_templateObject215||(_templateObject215=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\".\",\" !== \",\"\"])),condition,element.var,property_name,should_cache?last:value);}}if(block.has_outros){condition=x(_templateObject216||(_templateObject216=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"])),condition);}return condition;}},{key:\"get_dependencies\",value:function get_dependencies(){var _this54=this;var node_dependencies=this.node.get_dependencies();var dependencies=new Set(node_dependencies);node_dependencies.forEach(function(prop){var indirect_dependencies=_this54.parent.renderer.component.indirect_dependencies.get(prop);if(indirect_dependencies){indirect_dependencies.forEach(function(indirect_dependency){dependencies.add(indirect_dependency);});}});return Array.from(dependencies);}},{key:\"get_metadata\",value:function get_metadata(){if(this.parent.node.namespace)return null;var metadata=attribute_lookup[this.name];if(metadata&&metadata.applies_to&&!metadata.applies_to.includes(this.parent.node.name))return null;return metadata;}},{key:\"get_value\",value:function get_value(block){if(this.node.is_true){if(this.metadata&&boolean_attribute.has(this.metadata.property_name.toLowerCase())){return x(_templateObject217||(_templateObject217=(0,_taggedTemplateLiteral2.default)([\"true\"])));}return x(_templateObject218||(_templateObject218=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"])));}if(this.node.chunks.length===0)return x(_templateObject219||(_templateObject219=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"])));// TODO some of this code is repeated in Tag.ts — would be good to\n// DRY it out if that's possible without introducing crazy indirection\nif(this.node.chunks.length===1){return this.node.chunks[0].type==='Text'?string_literal(this.node.chunks[0].data):this.node.chunks[0].manipulate(block);}var value=this.node.name==='class'?this.get_class_name_text(block):this.render_chunks(block).reduce(function(lhs,rhs){return x(_templateObject220||(_templateObject220=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"])),lhs,rhs);});// '{foo} {bar}' — treat as string concatenation\nif(this.node.chunks[0].type!=='Text'){value=x(_templateObject221||(_templateObject221=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\" + \",\"\"])),value);}return value;}},{key:\"get_class_name_text\",value:function get_class_name_text(block){var scoped_css=this.node.chunks.some(function(chunk){return chunk.synthetic;});var rendered=this.render_chunks(block);if(scoped_css&&rendered.length===2){// we have a situation like class={possiblyUndefined}\nrendered[0]=x(_templateObject222||(_templateObject222=(0,_taggedTemplateLiteral2.default)([\"@null_to_empty(\",\")\"])),rendered[0]);}return rendered.reduce(function(lhs,rhs){return x(_templateObject223||(_templateObject223=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"])),lhs,rhs);});}},{key:\"render_chunks\",value:function render_chunks(block){return this.node.chunks.map(function(chunk){if(chunk.type==='Text'){return string_literal(chunk.data);}return chunk.manipulate(block);});}},{key:\"stringify\",value:function stringify(){if(this.node.is_true)return'';var value=this.node.chunks;if(value.length===0)return'=\"\"';return\"=\\\"\".concat(value.map(function(chunk){return chunk.type==='Text'?chunk.data.replace(/\"/g,'\\\\\"'):\"${\".concat(chunk.manipulate(),\"}\");}).join(''),\"\\\"\");}}]);return AttributeWrapper;}(BaseAttributeWrapper);// source: https://html.spec.whatwg.org/multipage/indices.html\nvar attribute_lookup={allowfullscreen:{property_name:'allowFullscreen',applies_to:['iframe']},allowpaymentrequest:{property_name:'allowPaymentRequest',applies_to:['iframe']},async:{applies_to:['script']},autofocus:{applies_to:['button','input','keygen','select','textarea']},autoplay:{applies_to:['audio','video']},checked:{applies_to:['input']},controls:{applies_to:['audio','video']},default:{applies_to:['track']},defer:{applies_to:['script']},disabled:{applies_to:['button','fieldset','input','keygen','optgroup','option','select','textarea']},formnovalidate:{property_name:'formNoValidate',applies_to:['button','input']},hidden:{},indeterminate:{applies_to:['input']},ismap:{property_name:'isMap',applies_to:['img']},loop:{applies_to:['audio','bgsound','video']},multiple:{applies_to:['input','select']},muted:{applies_to:['audio','video']},nomodule:{property_name:'noModule',applies_to:['script']},novalidate:{property_name:'noValidate',applies_to:['form']},open:{applies_to:['details','dialog']},playsinline:{property_name:'playsInline',applies_to:['video']},readonly:{property_name:'readOnly',applies_to:['input','textarea']},required:{applies_to:['input','select','textarea']},reversed:{applies_to:['ol']},selected:{applies_to:['option']},value:{applies_to:['button','option','input','li','meter','progress','param','select','textarea']}};Object.keys(attribute_lookup).forEach(function(name){var metadata=attribute_lookup[name];if(!metadata.property_name)metadata.property_name=name;});// source: https://html.spec.whatwg.org/multipage/indices.html\nvar boolean_attribute=new Set(['allowfullscreen','allowpaymentrequest','async','autofocus','autoplay','checked','controls','default','defer','disabled','formnovalidate','hidden','ismap','itemscope','loop','multiple','muted','nomodule','novalidate','open','playsinline','readonly','required','reversed','selected']);function should_cache(attribute){return attribute.is_src||attribute.node.should_cache();}function is_indirectly_bound_value(attribute){var element=attribute.parent;return attribute.name==='value'&&(element.node.name==='option'||// TODO check it's actually bound\nelement.node.name==='input'&&element.node.bindings.some(function(binding){return /checked|group/.test(binding.name);}));}var StyleAttributeWrapper=/*#__PURE__*/function(_AttributeWrapper){(0,_inherits2.default)(StyleAttributeWrapper,_AttributeWrapper);var _super45=_createSuper(StyleAttributeWrapper);function StyleAttributeWrapper(){(0,_classCallCheck2.default)(this,StyleAttributeWrapper);return _super45.apply(this,arguments);}(0,_createClass2.default)(StyleAttributeWrapper,[{key:\"render\",value:function render(block){var _this55=this;var style_props=optimize_style(this.node.chunks);if(!style_props)return(0,_get2.default)((0,_getPrototypeOf2.default)(StyleAttributeWrapper.prototype),\"render\",this).call(this,block);style_props.forEach(function(prop){var value;if(is_dynamic$1(prop.value)){var prop_dependencies=new Set();value=prop.value.map(function(chunk){if(chunk.type==='Text'){return string_literal(chunk.data);}else{add_to_set(prop_dependencies,chunk.dynamic_dependencies());return chunk.manipulate(block);}}).reduce(function(lhs,rhs){return x(_templateObject224||(_templateObject224=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"])),lhs,rhs);});// TODO is this necessary? style.setProperty always treats value as string, no?\n// if (prop.value.length === 1 || prop.value[0].type !== 'Text') {\n// \tvalue = x`\"\" + ${value}`;\n// }\nif(prop_dependencies.size){var condition=block.renderer.dirty(Array.from(prop_dependencies));if(block.has_outros){condition=x(_templateObject225||(_templateObject225=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"])),condition);}var update=b(_templateObject226||(_templateObject226=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\\t@set_style(\",\", \\\"\",\"\\\", \",\", \",\");\\n\\t\\t\\t\\t\\t\\t}\"])),condition,_this55.parent.var,prop.key,value,prop.important?1:null);block.chunks.update.push(update);}}else{value=string_literal(prop.value[0].data);}block.chunks.hydrate.push(b(_templateObject227||(_templateObject227=(0,_taggedTemplateLiteral2.default)([\"@set_style(\",\", \\\"\",\"\\\", \",\", \",\");\"])),_this55.parent.var,prop.key,value,prop.important?1:null));});}}]);return StyleAttributeWrapper;}(AttributeWrapper);function optimize_style(value){var props=[];var chunks=value.slice();while(chunks.length){var chunk=chunks[0];if(chunk.type!=='Text')return null;var key_match=/^\\s*([\\w-]+):\\s*/.exec(chunk.data);if(!key_match)return null;var key=key_match[1];var offset=key_match.index+key_match[0].length;var remaining_data=chunk.data.slice(offset);if(remaining_data){chunks[0]={start:chunk.start+offset,end:chunk.end,type:'Text',data:remaining_data};}else{chunks.shift();}var result=get_style_value(chunks);props.push({key:key,value:result.value,important:result.important});chunks=result.chunks;}return props;}function get_style_value(chunks){var value=[];var in_url=false;var quote_mark=null;var escaped=false;var closed=false;while(chunks.length&&!closed){var chunk=chunks.shift();if(chunk.type==='Text'){var _c=0;while(_c<chunk.data.length){var char=chunk.data[_c];if(escaped){escaped=false;}else if(char==='\\\\'){escaped=true;}else if(char===quote_mark){quote_mark=null;}else if(char==='\"'||char===\"'\"){quote_mark=char;}else if(char===')'&&in_url){in_url=false;}else if(char==='u'&&chunk.data.slice(_c,_c+4)==='url('){in_url=true;}else if(char===';'&&!in_url&&!quote_mark){closed=true;break;}_c+=1;}if(_c>0){value.push({type:'Text',start:chunk.start,end:chunk.start+_c,data:chunk.data.slice(0,_c)});}while(/[;\\s]/.test(chunk.data[_c])){_c+=1;}var remaining_data=chunk.data.slice(_c);if(remaining_data){chunks.unshift({start:chunk.start+_c,end:chunk.end,type:'Text',data:remaining_data});break;}}else{value.push(chunk);}}var important=false;var last_chunk=value[value.length-1];if(last_chunk&&last_chunk.type==='Text'&&/\\s*!important\\s*$/.test(last_chunk.data)){important=true;last_chunk.data=last_chunk.data.replace(/\\s*!important\\s*$/,'');if(!last_chunk.data)value.pop();}return{chunks:chunks,value:value,important:important};}function is_dynamic$1(value){return value.length>1||value[0].type!=='Text';}var SpreadAttributeWrapper=/*#__PURE__*/function(_BaseAttributeWrapper2){(0,_inherits2.default)(SpreadAttributeWrapper,_BaseAttributeWrapper2);var _super46=_createSuper(SpreadAttributeWrapper);function SpreadAttributeWrapper(){(0,_classCallCheck2.default)(this,SpreadAttributeWrapper);return _super46.apply(this,arguments);}return(0,_createClass2.default)(SpreadAttributeWrapper);}(BaseAttributeWrapper);function mark_each_block_bindings(parent,binding){// we need to ensure that the each block creates a context including\n// the list and the index, if they're not otherwise referenced\nbinding.expression.references.forEach(function(name){var each_block=parent.node.scope.get_owner(name);if(each_block){each_block.has_binding=true;}});if(binding.name==='group'){var add_index_binding=function add_index_binding(name){var each_block=parent.node.scope.get_owner(name);if(each_block.type==='EachBlock'){each_block.has_index_binding=true;var _iterator2=_createForOfIteratorHelper(each_block.expression.contextual_dependencies),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var dep=_step2.value;add_index_binding(dep);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}};// for `<input bind:group={} >`, we make sure that all the each blocks creates context with `index`\nvar _iterator3=_createForOfIteratorHelper(binding.expression.contextual_dependencies),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var name=_step3.value;add_index_binding(name);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}}var BindingWrapper=/*#__PURE__*/function(){function BindingWrapper(block,node,parent){(0,_classCallCheck2.default)(this,BindingWrapper);this.node=node;this.parent=parent;var dependencies=this.node.expression.dependencies;block.add_dependencies(dependencies);// TODO does this also apply to e.g. `<input type='checkbox' bind:group='foo'>`?\nhandle_select_value_binding(this,dependencies);if(node.is_contextual){mark_each_block_bindings(this.parent,this.node);}this.object=get_object(this.node.expression.node).name;// view to model\nthis.handler=get_event_handler(this,parent.renderer,block,this.object,this.node.raw_expression);this.snippet=this.node.expression.manipulate(block);this.is_readonly=this.node.is_readonly;this.needs_lock=this.node.name==='currentTime';// TODO others?\n}(0,_createClass2.default)(BindingWrapper,[{key:\"get_dependencies\",value:function get_dependencies(){var _this56=this;var dependencies=new Set(this.node.expression.dependencies);this.node.expression.dependencies.forEach(function(prop){var indirect_dependencies=_this56.parent.renderer.component.indirect_dependencies.get(prop);if(indirect_dependencies){indirect_dependencies.forEach(function(indirect_dependency){dependencies.add(indirect_dependency);});}});return dependencies;}},{key:\"get_update_dependencies\",value:function get_update_dependencies(){var _this57=this;var object=this.object;var dependencies=new Set();if(this.node.expression.template_scope.names.has(object)){this.node.expression.template_scope.dependencies_for_name.get(object).forEach(function(name){return dependencies.add(name);});}else{dependencies.add(object);}var result=new Set(dependencies);dependencies.forEach(function(dependency){var indirect_dependencies=_this57.parent.renderer.component.indirect_dependencies.get(dependency);if(indirect_dependencies){indirect_dependencies.forEach(function(indirect_dependency){result.add(indirect_dependency);});}});return result;}},{key:\"is_readonly_media_attribute\",value:function is_readonly_media_attribute(){return this.node.is_readonly_media_attribute();}},{key:\"render\",value:function render(block,lock){if(this.is_readonly)return;var parent=this.parent;var update_conditions=this.needs_lock?[x(_templateObject228||(_templateObject228=(0,_taggedTemplateLiteral2.default)([\"!\",\"\"])),lock)]:[];var mount_conditions=[];var dependency_array=Array.from(this.get_dependencies());if(dependency_array.length>0){update_conditions.push(block.renderer.dirty(dependency_array));}if(parent.node.name==='input'){var type=parent.node.get_static_attribute_value('type');if(type===null||type===''||type==='text'||type==='email'||type==='password'){update_conditions.push(x(_templateObject229||(_templateObject229=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" !== \",\"\"])),parent.var,this.node.name,this.snippet));}else if(type==='number'){update_conditions.push(x(_templateObject230||(_templateObject230=(0,_taggedTemplateLiteral2.default)([\"@to_number(\",\".\",\") !== \",\"\"])),parent.var,this.node.name,this.snippet));}}// model to view\nvar update_dom=get_dom_updater(parent,this);var mount_dom=update_dom;// special cases\nswitch(this.node.name){case'group':{var _get_binding_group=get_binding_group(parent.renderer,this.node,block),binding_group=_get_binding_group.binding_group,is_context=_get_binding_group.is_context,contexts=_get_binding_group.contexts,index=_get_binding_group.index,keypath=_get_binding_group.keypath;block.renderer.add_to_context('$$binding_groups');if(is_context&&!block.binding_group_initialised.has(keypath)){if(contexts.length>1){var _binding_group=x(_templateObject231||(_templateObject231=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),block.renderer.reference('$$binding_groups'),index);var _iterator4=_createForOfIteratorHelper(contexts.slice(0,-1)),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var name=_step4.value;_binding_group=x(_templateObject232||(_templateObject232=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),_binding_group,block.renderer.reference(name));block.chunks.init.push(b(_templateObject233||(_templateObject233=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\" || [];\"])),_binding_group,_binding_group));}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}}block.chunks.init.push(b(_templateObject234||(_templateObject234=(0,_taggedTemplateLiteral2.default)([\"\",\" = [];\"])),binding_group(true)));block.binding_group_initialised.add(keypath);}block.chunks.hydrate.push(b(_templateObject235||(_templateObject235=(0,_taggedTemplateLiteral2.default)([\"\",\".push(\",\");\"])),binding_group(true),parent.var));block.chunks.destroy.push(b(_templateObject236||(_templateObject236=(0,_taggedTemplateLiteral2.default)([\"\",\".splice(\",\".indexOf(\",\"), 1);\"])),binding_group(true),binding_group(true),parent.var));break;}case'textContent':update_conditions.push(x(_templateObject237||(_templateObject237=(0,_taggedTemplateLiteral2.default)([\"\",\" !== \",\".textContent\"])),this.snippet,parent.var));mount_conditions.push(x(_templateObject238||(_templateObject238=(0,_taggedTemplateLiteral2.default)([\"\",\" !== void 0\"])),this.snippet));break;case'innerHTML':update_conditions.push(x(_templateObject239||(_templateObject239=(0,_taggedTemplateLiteral2.default)([\"\",\" !== \",\".innerHTML\"])),this.snippet,parent.var));mount_conditions.push(x(_templateObject240||(_templateObject240=(0,_taggedTemplateLiteral2.default)([\"\",\" !== void 0\"])),this.snippet));break;case'currentTime':update_conditions.push(x(_templateObject241||(_templateObject241=(0,_taggedTemplateLiteral2.default)([\"!@_isNaN(\",\")\"])),this.snippet));mount_dom=null;break;case'playbackRate':case'volume':update_conditions.push(x(_templateObject242||(_templateObject242=(0,_taggedTemplateLiteral2.default)([\"!@_isNaN(\",\")\"])),this.snippet));mount_conditions.push(x(_templateObject243||(_templateObject243=(0,_taggedTemplateLiteral2.default)([\"!@_isNaN(\",\")\"])),this.snippet));break;case'paused':{// this is necessary to prevent audio restarting by itself\nvar last=block.get_unique_name(\"\".concat(parent.var.name,\"_is_paused\"));block.add_variable(last,x(_templateObject244||(_templateObject244=(0,_taggedTemplateLiteral2.default)([\"true\"]))));update_conditions.push(x(_templateObject245||(_templateObject245=(0,_taggedTemplateLiteral2.default)([\"\",\" !== (\",\" = \",\")\"])),last,last,this.snippet));update_dom=b(_templateObject246||(_templateObject246=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\" ? \\\"pause\\\" : \\\"play\\\"]();\"])),parent.var,last);mount_dom=null;break;}case'value':if(parent.node.get_static_attribute_value('type')==='file'){update_dom=null;mount_dom=null;}}if(update_dom){if(update_conditions.length>0){var condition=update_conditions.reduce(function(lhs,rhs){return x(_templateObject247||(_templateObject247=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"])),lhs,rhs);});block.chunks.update.push(b(_templateObject248||(_templateObject248=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),condition,update_dom));}else{block.chunks.update.push(update_dom);}}if(mount_dom){if(mount_conditions.length>0){var _condition=mount_conditions.reduce(function(lhs,rhs){return x(_templateObject249||(_templateObject249=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"])),lhs,rhs);});block.chunks.mount.push(b(_templateObject250||(_templateObject250=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),_condition,mount_dom));}else{block.chunks.mount.push(mount_dom);}}}}]);return BindingWrapper;}();function get_dom_updater(element,binding){var node=element.node;if(binding.is_readonly_media_attribute()){return null;}if(binding.node.name==='this'){return null;}if(node.name==='select'){return node.get_static_attribute_value('multiple')===true?b(_templateObject251||(_templateObject251=(0,_taggedTemplateLiteral2.default)([\"@select_options(\",\", \",\")\"])),element.var,binding.snippet):b(_templateObject252||(_templateObject252=(0,_taggedTemplateLiteral2.default)([\"@select_option(\",\", \",\")\"])),element.var,binding.snippet);}if(binding.node.name==='group'){var type=node.get_static_attribute_value('type');var condition=type==='checkbox'?x(_templateObject253||(_templateObject253=(0,_taggedTemplateLiteral2.default)([\"~\",\".indexOf(\",\".__value)\"])),binding.snippet,element.var):x(_templateObject254||(_templateObject254=(0,_taggedTemplateLiteral2.default)([\"\",\".__value === \",\"\"])),element.var,binding.snippet);return b(_templateObject255||(_templateObject255=(0,_taggedTemplateLiteral2.default)([\"\",\".checked = \",\";\"])),element.var,condition);}if(binding.node.name==='value'){return b(_templateObject256||(_templateObject256=(0,_taggedTemplateLiteral2.default)([\"@set_input_value(\",\", \",\");\"])),element.var,binding.snippet);}return b(_templateObject257||(_templateObject257=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" = \",\";\"])),element.var,binding.node.name,binding.snippet);}function get_binding_group(renderer,value,block){var _flatten_reference5=flatten_reference(value.raw_expression),parts=_flatten_reference5.parts;var keypath=parts.join('.');var contexts=[];var contextual_dependencies=new Set();var template_scope=value.expression.template_scope;var add_contextual_dependency=function add_contextual_dependency(dep){contextual_dependencies.add(dep);var owner=template_scope.get_owner(dep);if(owner.type==='EachBlock'){var _iterator5=_createForOfIteratorHelper(owner.expression.contextual_dependencies),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _dep=_step5.value;add_contextual_dependency(_dep);}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}}};var _iterator6=_createForOfIteratorHelper(value.expression.contextual_dependencies),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var dep=_step6.value;add_contextual_dependency(dep);}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}var _iterator7=_createForOfIteratorHelper(contextual_dependencies),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var _dep2=_step7.value;var context=block.bindings.get(_dep2);var key=void 0;var name=void 0;if(context){key=context.object.name;name=context.property.name;}else{key=_dep2;name=_dep2;}keypath=\"\".concat(key,\"@\").concat(keypath);contexts.push(name);}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}if(!renderer.binding_groups.has(keypath)){var index=renderer.binding_groups.size;contexts.forEach(function(context){renderer.add_to_context(context,true);});renderer.binding_groups.set(keypath,{binding_group:function binding_group(){var to_reference=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var binding_group='$$binding_groups';var _secondary_indexes=contexts;if(to_reference){binding_group=block.renderer.reference(binding_group);_secondary_indexes=_secondary_indexes.map(function(name){return block.renderer.reference(name);});}if(_secondary_indexes.length>0){var obj=x(_templateObject258||(_templateObject258=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),binding_group,index);_secondary_indexes.forEach(function(secondary_index){obj=x(_templateObject259||(_templateObject259=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),obj,secondary_index);});return obj;}else{return x(_templateObject260||(_templateObject260=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),binding_group,index);}},is_context:contexts.length>0,contexts:contexts,index:index,keypath:keypath});}return renderer.binding_groups.get(keypath);}function get_event_handler(binding,renderer,block,name,lhs){var contextual_dependencies=new Set(binding.node.expression.contextual_dependencies);var context=block.bindings.get(name);var set_store;if(context){var object=context.object,property=context.property,store=context.store,snippet=context.snippet;lhs=replace_object(lhs,snippet);contextual_dependencies.add(object.name);contextual_dependencies.add(property.name);contextual_dependencies.delete(name);if(store){set_store=b(_templateObject261||(_templateObject261=(0,_taggedTemplateLiteral2.default)([\"\",\".set(\",\");\"])),store,\"$\".concat(store));}}else{var _object=get_object(lhs);if(_object.name[0]==='$'){var _store=_object.name.slice(1);set_store=b(_templateObject262||(_templateObject262=(0,_taggedTemplateLiteral2.default)([\"\",\".set(\",\");\"])),_store,_object.name);}}var value=get_value_from_dom(renderer,binding.parent,binding,block,contextual_dependencies);var mutation=b(_templateObject263||(_templateObject263=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\",\" = \",\";\\n\\t\\t\",\"\\n\\t\"])),lhs,value,set_store);return{uses_context:binding.node.is_contextual||binding.node.expression.uses_context,mutation:mutation,contextual_dependencies:contextual_dependencies,lhs:lhs};}function get_value_from_dom(renderer,element,binding,block,contextual_dependencies){var node=element.node;var name=binding.node.name;if(name==='this'){return x(_templateObject264||(_templateObject264=(0,_taggedTemplateLiteral2.default)([\"$$value\"])));}// <select bind:value='selected>\nif(node.name==='select'){return node.get_static_attribute_value('multiple')===true?x(_templateObject265||(_templateObject265=(0,_taggedTemplateLiteral2.default)([\"@select_multiple_value(this)\"]))):x(_templateObject266||(_templateObject266=(0,_taggedTemplateLiteral2.default)([\"@select_value(this)\"])));}var type=node.get_static_attribute_value('type');// <input type='checkbox' bind:group='foo'>\nif(name==='group'){if(type==='checkbox'){var _get_binding_group2=get_binding_group(renderer,binding.node,block),binding_group=_get_binding_group2.binding_group,contexts=_get_binding_group2.contexts;add_to_set(contextual_dependencies,contexts);return x(_templateObject267||(_templateObject267=(0,_taggedTemplateLiteral2.default)([\"@get_binding_group_value(\",\", this.__value, this.checked)\"])),binding_group());}return x(_templateObject268||(_templateObject268=(0,_taggedTemplateLiteral2.default)([\"this.__value\"])));}// <input type='range|number' bind:value>\nif(type==='range'||type==='number'){return x(_templateObject269||(_templateObject269=(0,_taggedTemplateLiteral2.default)([\"@to_number(this.\",\")\"])),name);}if(name==='buffered'||name==='seekable'||name==='played'){return x(_templateObject270||(_templateObject270=(0,_taggedTemplateLiteral2.default)([\"@time_ranges_to_array(this.\",\")\"])),name);}// everything else\nreturn x(_templateObject271||(_templateObject271=(0,_taggedTemplateLiteral2.default)([\"this.\",\"\"])),name);}function compare_node(a,b){if(a===b)return true;if(!a||!b)return false;if(a.type!==b.type)return false;switch(a.type){case'Identifier':return a.name===b.name;case'MemberExpression':return compare_node(a.object,b.object)&&compare_node(a.property,b.property)&&a.computed===b.computed;case'Literal':return a.value===b.value;}}function bind_this(component,block,binding,variable){var fn=component.get_unique_name(\"\".concat(variable.name,\"_binding\"));block.renderer.add_to_context(fn.name);var callee=block.renderer.reference(fn.name);var _binding$handler=binding.handler,contextual_dependencies=_binding$handler.contextual_dependencies,mutation=_binding$handler.mutation;var dependencies=binding.get_update_dependencies();var body=b(_templateObject272||(_templateObject272=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\t\"])),mutation,Array.from(dependencies).filter(function(dep){return dep[0]!=='$';}).filter(function(dep){return!contextual_dependencies.has(dep);}).map(function(dep){return b(_templateObject273||(_templateObject273=(0,_taggedTemplateLiteral2.default)([\"\",\";\"])),block.renderer.invalidate(dep));}));if(contextual_dependencies.size){var params=Array.from(contextual_dependencies).map(function(name){return{type:'Identifier',name:name};});component.partly_hoisted.push(b(_templateObject274||(_templateObject274=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"($$value, \",\") {\\n\\t\\t\\t\\t@binding_callbacks[$$value ? 'unshift' : 'push'](() => {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t\"])),fn,params,body));var alias_map=new Map();var args=[];var _iterator8=_createForOfIteratorHelper(params),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var _id2=_step8.value;var _value10=block.renderer.reference(_id2.name);var found=false;if(block.variables.has(_id2.name)){var alias=_id2.name;for(var _i37=1;block.variables.has(alias)&&!compare_node(block.variables.get(alias).init,_value10);alias=\"\".concat(_id2.name,\"_\").concat(_i37++)){;}alias_map.set(alias,_id2.name);_id2={type:'Identifier',name:alias};found=block.variables.has(alias);}args.push(_id2);if(!found){block.add_variable(_id2,_value10);}}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}var assign=block.get_unique_name(\"assign_\".concat(variable.name));var unassign=block.get_unique_name(\"unassign_\".concat(variable.name));block.chunks.init.push(b(_templateObject275||(_templateObject275=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tconst \",\" = () => \",\"(\",\", \",\");\\n\\t\\t\\tconst \",\" = () => \",\"(null, \",\");\\n\\t\\t\"])),assign,callee,variable,args,unassign,callee,args));var condition=Array.from(args).map(function(name){return x(_templateObject276||(_templateObject276=(0,_taggedTemplateLiteral2.default)([\"\",\" !== \",\"\"])),name,block.renderer.reference(alias_map.get(name.name)||name.name));}).reduce(function(lhs,rhs){return x(_templateObject277||(_templateObject277=(0,_taggedTemplateLiteral2.default)([\"\",\" || \",\"\"])),lhs,rhs);});// we push unassign and unshift assign so that references are\n// nulled out before they're created, to avoid glitches\n// with shifting indices\nblock.chunks.update.push(b(_templateObject278||(_templateObject278=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\",\"();\\n\\t\\t\\t\\t\",\";\\n\\t\\t\\t\\t\",\"();\\n\\t\\t\\t}\"])),condition,unassign,args.map(function(a){return b(_templateObject279||(_templateObject279=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\"\"])),a,block.renderer.reference(alias_map.get(a.name)||a.name));}),assign));block.chunks.destroy.push(b(_templateObject280||(_templateObject280=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"])),unassign));return b(_templateObject281||(_templateObject281=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"])),assign);}component.partly_hoisted.push(b(_templateObject282||(_templateObject282=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\tfunction \",\"($$value) {\\n\\t\\t\\t@binding_callbacks[$$value ? 'unshift' : 'push'](() => {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\"])),fn,body));block.chunks.destroy.push(b(_templateObject283||(_templateObject283=(0,_taggedTemplateLiteral2.default)([\"\",\"(null);\"])),callee));return b(_templateObject284||(_templateObject284=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\");\"])),callee,variable);}var Tag$1=/*#__PURE__*/function(_Wrapper8){(0,_inherits2.default)(Tag$1,_Wrapper8);var _super47=_createSuper(Tag$1);function Tag$1(renderer,block,parent,node){var _this58;(0,_classCallCheck2.default)(this,Tag$1);_this58=_super47.call(this,renderer,block,parent,node);_this58.cannot_use_innerhtml();if(!_this58.is_dependencies_static()){_this58.not_static_content();}block.add_dependencies(node.expression.dependencies);return _this58;}(0,_createClass2.default)(Tag$1,[{key:\"is_dependencies_static\",value:function is_dependencies_static(){return this.node.expression.contextual_dependencies.size===0&&this.node.expression.dynamic_dependencies().length===0;}},{key:\"rename_this_method\",value:function rename_this_method(block,update){var dependencies=this.node.expression.dynamic_dependencies();var snippet=this.node.expression.manipulate(block);var value=this.node.should_cache&&block.get_unique_name(\"\".concat(this.var.name,\"_value\"));var content=this.node.should_cache?value:snippet;snippet=x(_templateObject285||(_templateObject285=(0,_taggedTemplateLiteral2.default)([\"\",\" + \\\"\\\"\"])),snippet);if(this.node.should_cache)block.add_variable(value,snippet);// TODO may need to coerce snippet to string\nif(dependencies.length>0){var condition=block.renderer.dirty(dependencies);if(block.has_outros){condition=x(_templateObject286||(_templateObject286=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"])),condition);}var update_cached_value=x(_templateObject287||(_templateObject287=(0,_taggedTemplateLiteral2.default)([\"\",\" !== (\",\" = \",\")\"])),value,value,snippet);if(this.node.should_cache){condition=x(_templateObject288||(_templateObject288=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"])),condition,update_cached_value);}block.chunks.update.push(b(_templateObject289||(_templateObject289=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\"\"])),condition,update(content)));}return{init:content};}}]);return Tag$1;}(Wrapper);var MustacheTagWrapper=/*#__PURE__*/function(_Tag$){(0,_inherits2.default)(MustacheTagWrapper,_Tag$);var _super48=_createSuper(MustacheTagWrapper);function MustacheTagWrapper(renderer,block,parent,node){var _this59;(0,_classCallCheck2.default)(this,MustacheTagWrapper);_this59=_super48.call(this,renderer,block,parent,node);_this59.var={type:'Identifier',name:'t'};return _this59;}(0,_createClass2.default)(MustacheTagWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var _this60=this;var _this$rename_this_met=this.rename_this_method(block,function(value){return x(_templateObject290||(_templateObject290=(0,_taggedTemplateLiteral2.default)([\"@set_data(\",\", \",\")\"])),_this60.var,value);}),init=_this$rename_this_met.init;block.add_element(this.var,x(_templateObject291||(_templateObject291=(0,_taggedTemplateLiteral2.default)([\"@text(\",\")\"])),init),parent_nodes&&x(_templateObject292||(_templateObject292=(0,_taggedTemplateLiteral2.default)([\"@claim_text(\",\", \",\")\"])),parent_nodes,init),parent_node);}}]);return MustacheTagWrapper;}(Tag$1);var RawMustacheTagWrapper=/*#__PURE__*/function(_Tag$2){(0,_inherits2.default)(RawMustacheTagWrapper,_Tag$2);var _super49=_createSuper(RawMustacheTagWrapper);function RawMustacheTagWrapper(renderer,block,parent,node){var _this61;(0,_classCallCheck2.default)(this,RawMustacheTagWrapper);_this61=_super49.call(this,renderer,block,parent,node);_this61.var={type:'Identifier',name:'raw'};_this61.cannot_use_innerhtml();_this61.not_static_content();return _this61;}(0,_createClass2.default)(RawMustacheTagWrapper,[{key:\"render\",value:function render(block,parent_node,_parent_nodes){var in_head=is_head(parent_node);var can_use_innerhtml=!in_head&&parent_node&&!this.prev&&!this.next;if(can_use_innerhtml){var insert=function insert(content){return b(_templateObject293||(_templateObject293=(0,_taggedTemplateLiteral2.default)([\"\",\".innerHTML = \",\";\"])),parent_node,content)[0];};var _this$rename_this_met2=this.rename_this_method(block,function(content){return insert(content);}),init=_this$rename_this_met2.init;block.chunks.mount.push(insert(init));}else{var needs_anchor=in_head||(this.next?!this.next.is_dom_node():!this.parent||!this.parent.is_dom_node());var html_tag=block.get_unique_name('html_tag');var html_anchor=needs_anchor&&block.get_unique_name('html_anchor');block.add_variable(html_tag);var _this$rename_this_met3=this.rename_this_method(block,function(content){return x(_templateObject294||(_templateObject294=(0,_taggedTemplateLiteral2.default)([\"\",\".p(\",\")\"])),html_tag,content);}),_init=_this$rename_this_met3.init;var update_anchor=needs_anchor?html_anchor:this.next?this.next.var:'null';block.chunks.create.push(b(_templateObject295||(_templateObject295=(0,_taggedTemplateLiteral2.default)([\"\",\" = new @HtmlTag();\"])),html_tag));if(this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject296||(_templateObject296=(0,_taggedTemplateLiteral2.default)([\"\",\" = @claim_html_tag(\",\");\"])),html_tag,_parent_nodes));}block.chunks.hydrate.push(b(_templateObject297||(_templateObject297=(0,_taggedTemplateLiteral2.default)([\"\",\".a = \",\";\"])),html_tag,update_anchor));block.chunks.mount.push(b(_templateObject298||(_templateObject298=(0,_taggedTemplateLiteral2.default)([\"\",\".m(\",\", \",\", \",\");\"])),html_tag,_init,parent_node||'#target',parent_node?null:'#anchor'));if(needs_anchor){block.add_element(html_anchor,x(_templateObject299||(_templateObject299=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),x(_templateObject300||(_templateObject300=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),parent_node);}if(!parent_node||in_head){block.chunks.destroy.push(b(_templateObject301||(_templateObject301=(0,_taggedTemplateLiteral2.default)([\"if (detaching) \",\".d();\"])),html_tag));}}}}]);return RawMustacheTagWrapper;}(Tag$1);var events=[{event_names:['input'],filter:function filter(node,_name){return node.name==='textarea'||node.name==='input'&&!/radio|checkbox|range|file/.test(node.get_static_attribute_value('type'));}},{event_names:['input'],filter:function filter(node,name){return(name==='textContent'||name==='innerHTML')&&node.attributes.some(function(attribute){return attribute.name==='contenteditable';});}},{event_names:['change'],filter:function filter(node,_name){return node.name==='select'||node.name==='input'&&/radio|checkbox|file/.test(node.get_static_attribute_value('type'));}},{event_names:['change','input'],filter:function filter(node,_name){return node.name==='input'&&node.get_static_attribute_value('type')==='range';}},{event_names:['elementresize'],filter:function filter(_node,name){return dimensions.test(name);}},// media events\n{event_names:['timeupdate'],filter:function filter(node,name){return node.is_media_node()&&(name==='currentTime'||name==='played'||name==='ended');}},{event_names:['durationchange'],filter:function filter(node,name){return node.is_media_node()&&name==='duration';}},{event_names:['play','pause'],filter:function filter(node,name){return node.is_media_node()&&name==='paused';}},{event_names:['progress'],filter:function filter(node,name){return node.is_media_node()&&name==='buffered';}},{event_names:['loadedmetadata'],filter:function filter(node,name){return node.is_media_node()&&(name==='buffered'||name==='seekable');}},{event_names:['volumechange'],filter:function filter(node,name){return node.is_media_node()&&(name==='volume'||name==='muted');}},{event_names:['ratechange'],filter:function filter(node,name){return node.is_media_node()&&name==='playbackRate';}},{event_names:['seeking','seeked'],filter:function filter(node,name){return node.is_media_node()&&name==='seeking';}},{event_names:['ended'],filter:function filter(node,name){return node.is_media_node()&&name==='ended';}},{event_names:['resize'],filter:function filter(node,name){return node.is_media_node()&&(name==='videoHeight'||name==='videoWidth');}},// details event\n{event_names:['toggle'],filter:function filter(node,_name){return node.name==='details';}}];var ElementWrapper=/*#__PURE__*/function(_Wrapper9){(0,_inherits2.default)(ElementWrapper,_Wrapper9);var _super50=_createSuper(ElementWrapper);function ElementWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this62;(0,_classCallCheck2.default)(this,ElementWrapper);_this62=_super50.call(this,renderer,block,parent,node);_this62.var={type:'Identifier',name:node.name.replace(/[^a-zA-Z0-9_$]/g,'_')};_this62.void=is_void(node.name);_this62.class_dependencies=[];if(_this62.node.children.length){_this62.node.lets.forEach(function(l){extract_names(l.value||l.name).forEach(function(name){renderer.add_to_context(name,true);});});}_this62.attributes=_this62.node.attributes.map(function(attribute){if(attribute.name==='style'){return new StyleAttributeWrapper((0,_assertThisInitialized2.default)(_this62),block,attribute);}if(attribute.type==='Spread'){return new SpreadAttributeWrapper((0,_assertThisInitialized2.default)(_this62),block,attribute);}return new AttributeWrapper((0,_assertThisInitialized2.default)(_this62),block,attribute);});// ordinarily, there'll only be one... but we need to handle\n// the rare case where an element can have multiple bindings,\n// e.g. <audio bind:paused bind:currentTime>\n_this62.bindings=_this62.node.bindings.map(function(binding){return new BindingWrapper(block,binding,(0,_assertThisInitialized2.default)(_this62));});_this62.event_handlers=_this62.node.handlers.map(function(event_handler){return new EventHandlerWrapper(event_handler,(0,_assertThisInitialized2.default)(_this62));});if(node.intro||node.outro){if(node.intro)block.add_intro(node.intro.is_local);if(node.outro)block.add_outro(node.outro.is_local);}if(node.animation){block.add_animation();}// add directive and handler dependencies\n[node.animation,node.outro].concat((0,_toConsumableArray2.default)(node.actions),(0,_toConsumableArray2.default)(node.classes),(0,_toConsumableArray2.default)(node.styles)).forEach(function(directive){if(directive&&directive.expression){block.add_dependencies(directive.expression.dependencies);}});node.handlers.forEach(function(handler){if(handler.expression){block.add_dependencies(handler.expression.dependencies);}});if(_this62.parent){if(node.actions.length>0||node.animation||node.bindings.length>0||node.classes.length>0||node.intro||node.outro||node.handlers.length>0||_this62.node.name==='option'||renderer.options.dev){_this62.parent.cannot_use_innerhtml();// need to use add_location\n_this62.parent.not_static_content();}}_this62.fragment=new FragmentWrapper(renderer,block,node.children,(0,_assertThisInitialized2.default)(_this62),strip_whitespace,next_sibling);return _this62;}(0,_createClass2.default)(ElementWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var _this63=this;var renderer=this.renderer;if(this.node.name==='noscript')return;var node=this.var;var nodes=parent_nodes&&block.get_unique_name(\"\".concat(this.var.name,\"_nodes\"));// if we're in unclaimable territory, i.e. <head>, parent_nodes is null\nvar children=x(_templateObject302||(_templateObject302=(0,_taggedTemplateLiteral2.default)([\"@children(\",\")\"])),this.node.name==='template'?x(_templateObject303||(_templateObject303=(0,_taggedTemplateLiteral2.default)([\"\",\".content\"])),node):node);block.add_variable(node);var render_statement=this.get_render_statement(block);block.chunks.create.push(b(_templateObject304||(_templateObject304=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"])),node,render_statement));if(renderer.options.hydratable){if(parent_nodes){block.chunks.claim.push(b(_templateObject305||(_templateObject305=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\" = \",\";\\n\\t\\t\\t\\t\"])),node,this.get_claim_statement(parent_nodes)));if(!this.void&&this.node.children.length>0){block.chunks.claim.push(b(_templateObject306||(_templateObject306=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tvar \",\" = \",\";\\n\\t\\t\\t\\t\\t\"])),nodes,children));}}else{block.chunks.claim.push(b(_templateObject307||(_templateObject307=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"])),node,render_statement));}}if(parent_node){var append=b(_templateObject308||(_templateObject308=(0,_taggedTemplateLiteral2.default)([\"@append(\",\", \",\");\"])),parent_node,node);append[0].expression.callee.loc={start:this.renderer.locate(this.node.start),end:this.renderer.locate(this.node.end)};block.chunks.mount.push(append);if(is_head(parent_node)){block.chunks.destroy.push(b(_templateObject309||(_templateObject309=(0,_taggedTemplateLiteral2.default)([\"@detach(\",\");\"])),node));}}else{var insert=b(_templateObject310||(_templateObject310=(0,_taggedTemplateLiteral2.default)([\"@insert(#target, \",\", #anchor);\"])),node);insert[0].expression.callee.loc={start:this.renderer.locate(this.node.start),end:this.renderer.locate(this.node.end)};block.chunks.mount.push(insert);// TODO we eventually need to consider what happens to elements\n// that belong to the same outgroup as an outroing element...\nblock.chunks.destroy.push(b(_templateObject311||(_templateObject311=(0,_taggedTemplateLiteral2.default)([\"if (detaching) @detach(\",\");\"])),node));}// insert static children with textContent or innerHTML\nvar can_use_textcontent=this.can_use_textcontent();if(!this.node.namespace&&(this.can_use_innerhtml||can_use_textcontent)&&this.fragment.nodes.length>0){if(this.fragment.nodes.length===1&&this.fragment.nodes[0].node.type==='Text'){block.chunks.create.push(b(_templateObject312||(_templateObject312=(0,_taggedTemplateLiteral2.default)([\"\",\".textContent = \",\";\"])),node,string_literal(this.fragment.nodes[0].data)));}else{var state={quasi:{type:'TemplateElement',value:{raw:''}}};var _literal={type:'TemplateLiteral',expressions:[],quasis:[]};var can_use_raw_text=!this.can_use_innerhtml&&can_use_textcontent;to_html(this.fragment.nodes,block,_literal,state,can_use_raw_text);_literal.quasis.push(state.quasi);block.chunks.create.push(b(_templateObject313||(_templateObject313=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" = \",\";\"])),node,this.can_use_innerhtml?'innerHTML':'textContent',_literal));}}else{this.fragment.nodes.forEach(function(child){child.render(block,_this63.node.name==='template'?x(_templateObject314||(_templateObject314=(0,_taggedTemplateLiteral2.default)([\"\",\".content\"])),node):node,nodes);});}var event_handler_or_binding_uses_context=this.bindings.some(function(binding){return binding.handler.uses_context;})||this.node.handlers.some(function(handler){return handler.uses_context;})||this.node.actions.some(function(action){return action.uses_context;});if(event_handler_or_binding_uses_context){block.maintain_context=true;}this.add_attributes(block);this.add_directives_in_order(block);this.add_transitions(block);this.add_animation(block);this.add_classes(block);this.add_styles(block);this.add_manual_style_scoping(block);if(nodes&&this.renderer.options.hydratable&&!this.void){block.chunks.claim.push(b(_templateObject315||(_templateObject315=(0,_taggedTemplateLiteral2.default)([\"\",\".forEach(@detach);\"])),this.node.children.length>0?nodes:children));}if(renderer.options.dev){var loc=renderer.locate(this.node.start);block.chunks.hydrate.push(b(_templateObject316||(_templateObject316=(0,_taggedTemplateLiteral2.default)([\"@add_location(\",\", \",\", \",\", \",\", \",\");\"])),this.var,renderer.file_var,loc.line-1,loc.column,this.node.start));}}},{key:\"can_use_textcontent\",value:function can_use_textcontent(){return this.is_static_content&&this.fragment.nodes.every(function(node){return node.node.type==='Text'||node.node.type==='MustacheTag';});}},{key:\"get_render_statement\",value:function get_render_statement(block){var _this$node=this.node,name=_this$node.name,namespace=_this$node.namespace;if(namespace===namespaces.svg){return x(_templateObject317||(_templateObject317=(0,_taggedTemplateLiteral2.default)([\"@svg_element(\\\"\",\"\\\")\"])),name);}if(namespace){return x(_templateObject318||(_templateObject318=(0,_taggedTemplateLiteral2.default)([\"@_document.createElementNS(\\\"\",\"\\\", \\\"\",\"\\\")\"])),namespace,name);}var is=this.attributes.find(function(attr){return attr.node.name==='is';});if(is){return x(_templateObject319||(_templateObject319=(0,_taggedTemplateLiteral2.default)([\"@element_is(\\\"\",\"\\\", \",\")\"])),name,is.render_chunks(block).reduce(function(lhs,rhs){return x(_templateObject320||(_templateObject320=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"])),lhs,rhs);}));}return x(_templateObject321||(_templateObject321=(0,_taggedTemplateLiteral2.default)([\"@element(\\\"\",\"\\\")\"])),name);}},{key:\"get_claim_statement\",value:function get_claim_statement(nodes){var attributes=this.attributes.filter(function(attr){return!(attr instanceof SpreadAttributeWrapper)&&!attr.property_name;}).map(function(attr){return p(_templateObject322||(_templateObject322=(0,_taggedTemplateLiteral2.default)([\"\",\": true\"])),attr.name);});var name=this.node.namespace?this.node.name:this.node.name.toUpperCase();if(this.node.namespace===namespaces.svg){return x(_templateObject323||(_templateObject323=(0,_taggedTemplateLiteral2.default)([\"@claim_svg_element(\",\", \\\"\",\"\\\", { \",\" })\"])),nodes,name,attributes);}else{return x(_templateObject324||(_templateObject324=(0,_taggedTemplateLiteral2.default)([\"@claim_element(\",\", \\\"\",\"\\\", { \",\" })\"])),nodes,name,attributes);}}},{key:\"add_directives_in_order\",value:function add_directives_in_order(block){var _this64=this;var binding_groups=events.map(function(event){return{events:event.event_names,bindings:_this64.bindings.filter(function(binding){return binding.node.name!=='this';}).filter(function(binding){return event.filter(_this64.node,binding.node.name);})};}).filter(function(group){return group.bindings.length;});var this_binding=this.bindings.find(function(b){return b.node.name==='this';});function getOrder(item){if(item instanceof EventHandlerWrapper){return item.node.start;}else if(item instanceof BindingWrapper){return item.node.start;}else if(item instanceof Action){return item.start;}else{return item.bindings[0].node.start;}}[].concat((0,_toConsumableArray2.default)(binding_groups),(0,_toConsumableArray2.default)(this.event_handlers),[this_binding],(0,_toConsumableArray2.default)(this.node.actions)).filter(Boolean).sort(function(a,b){return getOrder(a)-getOrder(b);}).forEach(function(item){if(item instanceof EventHandlerWrapper){add_event_handler(block,_this64.var,item);}else if(item instanceof BindingWrapper){_this64.add_this_binding(block,item);}else if(item instanceof Action){add_action(block,_this64.var,item);}else{_this64.add_bindings(block,item);}});}},{key:\"add_bindings\",value:function add_bindings(block,binding_group){var _this65=this;var renderer=this.renderer;if(binding_group.bindings.length===0)return;renderer.component.has_reactive_assignments=true;var lock=binding_group.bindings.some(function(binding){return binding.needs_lock;})?block.get_unique_name(\"\".concat(this.var.name,\"_updating\")):null;if(lock)block.add_variable(lock,x(_templateObject325||(_templateObject325=(0,_taggedTemplateLiteral2.default)([\"false\"]))));var handler=renderer.component.get_unique_name(\"\".concat(this.var.name,\"_\").concat(binding_group.events.join('_'),\"_handler\"));renderer.add_to_context(handler.name);// TODO figure out how to handle locks\nvar needs_lock=binding_group.bindings.some(function(binding){return binding.needs_lock;});var dependencies=new Set();var contextual_dependencies=new Set();binding_group.bindings.forEach(function(binding){// TODO this is a mess\nadd_to_set(dependencies,binding.get_update_dependencies());add_to_set(contextual_dependencies,binding.handler.contextual_dependencies);binding.render(block,lock);});// media bindings — awkward special case. The native timeupdate events\n// fire too infrequently, so we need to take matters into our\n// own hands\nvar animation_frame;if(binding_group.events[0]==='timeupdate'){animation_frame=block.get_unique_name(\"\".concat(this.var.name,\"_animationframe\"));block.add_variable(animation_frame);}var has_local_function=contextual_dependencies.size>0||needs_lock||animation_frame;var callee=renderer.reference(handler);// TODO dry this out — similar code for event handlers and component bindings\nif(has_local_function){var args=Array.from(contextual_dependencies).map(function(name){return renderer.reference(name);});// need to create a block-local function that calls an instance-level function\nif(animation_frame){block.chunks.init.push(b(_templateObject326||(_templateObject326=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\t\\t\\t@_cancelAnimationFrame(\",\");\\n\\t\\t\\t\\t\\t\\tif (!\",\".paused) {\\n\\t\\t\\t\\t\\t\\t\\t\",\" = @raf(\",\");\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\",\".call(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),handler,animation_frame,this.var,animation_frame,handler,needs_lock&&b(_templateObject327||(_templateObject327=(0,_taggedTemplateLiteral2.default)([\"\",\" = true;\"])),lock),callee,this.var,args));}else{block.chunks.init.push(b(_templateObject328||(_templateObject328=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\".call(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),handler,needs_lock&&b(_templateObject329||(_templateObject329=(0,_taggedTemplateLiteral2.default)([\"\",\" = true;\"])),lock),callee,this.var,args));}callee=handler;}var params=Array.from(contextual_dependencies).map(function(name){return{type:'Identifier',name:name};});this.renderer.component.partly_hoisted.push(b(_templateObject330||(_templateObject330=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(\",\") {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\\n\\t\\t\"])),handler,params,binding_group.bindings.map(function(b){return b.handler.mutation;}),Array.from(dependencies).filter(function(dep){return dep[0]!=='$';}).filter(function(dep){return!contextual_dependencies.has(dep);}).map(function(dep){return b(_templateObject331||(_templateObject331=(0,_taggedTemplateLiteral2.default)([\"\",\";\"])),_this65.renderer.invalidate(dep));})));binding_group.events.forEach(function(name){if(name==='elementresize'){// special case\nvar resize_listener=block.get_unique_name(\"\".concat(_this65.var.name,\"_resize_listener\"));block.add_variable(resize_listener);block.chunks.mount.push(b(_templateObject332||(_templateObject332=(0,_taggedTemplateLiteral2.default)([\"\",\" = @add_resize_listener(\",\", \",\".bind(\",\"));\"])),resize_listener,_this65.var,callee,_this65.var));block.chunks.destroy.push(b(_templateObject333||(_templateObject333=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"])),resize_listener));}else{block.event_listeners.push(x(_templateObject334||(_templateObject334=(0,_taggedTemplateLiteral2.default)([\"@listen(\",\", \\\"\",\"\\\", \",\")\"])),_this65.var,name,callee));}});var some_initial_state_is_undefined=binding_group.bindings.map(function(binding){return x(_templateObject335||(_templateObject335=(0,_taggedTemplateLiteral2.default)([\"\",\" === void 0\"])),binding.snippet);}).reduce(function(lhs,rhs){return x(_templateObject336||(_templateObject336=(0,_taggedTemplateLiteral2.default)([\"\",\" || \",\"\"])),lhs,rhs);});var should_initialise=this.node.name==='select'||binding_group.bindings.find(function(binding){return binding.node.name==='indeterminate'||binding.node.name==='textContent'||binding.node.name==='innerHTML'||binding.is_readonly_media_attribute();});if(should_initialise){var callback=has_local_function?handler:x(_templateObject337||(_templateObject337=(0,_taggedTemplateLiteral2.default)([\"() => \",\".call(\",\")\"])),callee,this.var);block.chunks.hydrate.push(b(_templateObject338||(_templateObject338=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @add_render_callback(\",\");\"])),some_initial_state_is_undefined,callback));}if(binding_group.events[0]==='elementresize'){block.chunks.hydrate.push(b(_templateObject339||(_templateObject339=(0,_taggedTemplateLiteral2.default)([\"@add_render_callback(() => \",\".call(\",\"));\"])),callee,this.var));}if(lock){block.chunks.update.push(b(_templateObject340||(_templateObject340=(0,_taggedTemplateLiteral2.default)([\"\",\" = false;\"])),lock));}}},{key:\"add_this_binding\",value:function add_this_binding(block,this_binding){var renderer=this.renderer;renderer.component.has_reactive_assignments=true;var binding_callback=bind_this(renderer.component,block,this_binding,this.var);block.chunks.mount.push(binding_callback);}},{key:\"add_attributes\",value:function add_attributes(block){var _this66=this;// Get all the class dependencies first\nthis.attributes.forEach(function(attribute){if(attribute.node.name==='class'){var _this66$class_depende;var dependencies=attribute.node.get_dependencies();(_this66$class_depende=_this66.class_dependencies).push.apply(_this66$class_depende,(0,_toConsumableArray2.default)(dependencies));}});if(this.node.attributes.some(function(attr){return attr.is_spread;})){this.add_spread_attributes(block);return;}this.attributes.forEach(function(attribute){attribute.render(block);});}},{key:\"add_spread_attributes\",value:function add_spread_attributes(block){var levels=block.get_unique_name(\"\".concat(this.var.name,\"_levels\"));var data=block.get_unique_name(\"\".concat(this.var.name,\"_data\"));var initial_props=[];var updates=[];this.attributes.forEach(function(attr){var dependencies=attr.node.get_dependencies();var condition=dependencies.length>0?block.renderer.dirty(dependencies):null;if(attr instanceof SpreadAttributeWrapper){var snippet=attr.node.expression.manipulate(block);initial_props.push(snippet);updates.push(condition?x(_templateObject341||(_templateObject341=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"])),condition,snippet):snippet);}else{var name=attr.property_name||attr.name;initial_props.push(x(_templateObject342||(_templateObject342=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"])),name,attr.get_init(block,attr.get_value(block))));var _snippet=x(_templateObject343||(_templateObject343=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"])),name,attr.should_cache?attr.last:attr.get_value(block));updates.push(condition?x(_templateObject344||(_templateObject344=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"])),attr.get_dom_update_conditions(block,condition),_snippet):_snippet);}});block.chunks.init.push(b(_templateObject345||(_templateObject345=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = [\",\"];\\n\\n\\t\\t\\tlet \",\" = {};\\n\\t\\t\\tfor (let #i = 0; #i < \",\".length; #i += 1) {\\n\\t\\t\\t\\t\",\" = @assign(\",\", \",\"[#i]);\\n\\t\\t\\t}\\n\\t\\t\"])),levels,initial_props,data,levels,data,data,levels));var fn=this.node.namespace===namespaces.svg?x(_templateObject346||(_templateObject346=(0,_taggedTemplateLiteral2.default)([\"@set_svg_attributes\"]))):x(_templateObject347||(_templateObject347=(0,_taggedTemplateLiteral2.default)([\"@set_attributes\"])));block.chunks.hydrate.push(b(_templateObject348||(_templateObject348=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\", \",\");\"])),fn,this.var,data));block.chunks.update.push(b(_templateObject349||(_templateObject349=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"(\",\", \",\" = @get_spread_update(\",\", [\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t]));\\n\\t\\t\"])),fn,this.var,data,levels,updates));// handle edge cases for elements\nif(this.node.name==='select'){var dependencies=new Set();var _iterator9=_createForOfIteratorHelper(this.attributes),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var attr=_step9.value;var _iterator10=_createForOfIteratorHelper(attr.node.dependencies),_step10;try{for(_iterator10.s();!(_step10=_iterator10.n()).done;){var dep=_step10.value;dependencies.add(dep);}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}block.chunks.mount.push(b(_templateObject350||(_templateObject350=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t(\",\".multiple ? @select_options : @select_option)(\",\", \",\".value);\\n\\t\\t\\t\"])),data,this.var,data));block.chunks.update.push(b(_templateObject351||(_templateObject351=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" && 'value' in \",\") (\",\".multiple ? @select_options : @select_option)(\",\", \",\".value);;\\n\\t\\t\\t\"])),block.renderer.dirty(Array.from(dependencies)),data,data,this.var,data));}else if(this.node.name==='input'&&this.attributes.find(function(attr){return attr.node.name==='value';})){var type=this.node.get_static_attribute_value('type');if(type===null||type===''||type==='text'||type==='email'||type==='password'){block.chunks.mount.push(b(_templateObject352||(_templateObject352=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\".value = \",\".value;\\n\\t\\t\\t\\t\"])),this.var,data));block.chunks.update.push(b(_templateObject353||(_templateObject353=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif ('value' in \",\") {\\n\\t\\t\\t\\t\\t\\t\",\".value = \",\".value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),data,this.var,data));}}if(['button','input','keygen','select','textarea'].includes(this.node.name)){block.chunks.mount.push(b(_templateObject354||(_templateObject354=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\".autofocus) \",\".focus();\\n\\t\\t\\t\"])),this.var,this.var));}}},{key:\"add_transitions\",value:function add_transitions(block){var _this$node2=this.node,intro=_this$node2.intro,outro=_this$node2.outro;if(!intro&&!outro)return;if(intro===outro){// bidirectional transition\nvar name=block.get_unique_name(\"\".concat(this.var.name,\"_transition\"));var snippet=intro.expression?intro.expression.manipulate(block):x(_templateObject355||(_templateObject355=(0,_taggedTemplateLiteral2.default)([\"{}\"])));block.add_variable(name);var fn=this.renderer.reference(intro.name);var intro_block=b(_templateObject356||(_templateObject356=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@add_render_callback(() => {\\n\\t\\t\\t\\t\\tif (!\",\") \",\" = @create_bidirectional_transition(\",\", \",\", \",\", true);\\n\\t\\t\\t\\t\\t\",\".run(1);\\n\\t\\t\\t\\t});\\n\\t\\t\\t\"])),name,name,this.var,fn,snippet,name);var outro_block=b(_templateObject357||(_templateObject357=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (!\",\") \",\" = @create_bidirectional_transition(\",\", \",\", \",\", false);\\n\\t\\t\\t\\t\",\".run(0);\\n\\t\\t\\t\"])),name,name,this.var,fn,snippet,name);if(intro.is_local){block.chunks.intro.push(b(_templateObject358||(_templateObject358=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (#local) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),intro_block));block.chunks.outro.push(b(_templateObject359||(_templateObject359=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (#local) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),outro_block));}else{block.chunks.intro.push(intro_block);block.chunks.outro.push(outro_block);}block.chunks.destroy.push(b(_templateObject360||(_templateObject360=(0,_taggedTemplateLiteral2.default)([\"if (detaching && \",\") \",\".end();\"])),name,name));}else{var intro_name=intro&&block.get_unique_name(\"\".concat(this.var.name,\"_intro\"));var outro_name=outro&&block.get_unique_name(\"\".concat(this.var.name,\"_outro\"));if(intro){block.add_variable(intro_name);var _snippet2=intro.expression?intro.expression.manipulate(block):x(_templateObject361||(_templateObject361=(0,_taggedTemplateLiteral2.default)([\"{}\"])));var _fn=this.renderer.reference(intro.name);var _intro_block;if(outro){_intro_block=b(_templateObject362||(_templateObject362=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t@add_render_callback(() => {\\n\\t\\t\\t\\t\\t\\t\\tif (\",\") \",\".end(1);\\n\\t\\t\\t\\t\\t\\t\\t\",\" = @create_in_transition(\",\", \",\", \",\");\\n\\t\\t\\t\\t\\t\\t\\t\",\".start();\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\"])),outro_name,outro_name,intro_name,this.var,_fn,_snippet2,intro_name);block.chunks.outro.push(b(_templateObject363||(_templateObject363=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".invalidate();\"])),intro_name,intro_name));}else{_intro_block=b(_templateObject364||(_templateObject364=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (!\",\") {\\n\\t\\t\\t\\t\\t\\t\\t@add_render_callback(() => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\",\" = @create_in_transition(\",\", \",\", \",\");\\n\\t\\t\\t\\t\\t\\t\\t\\t\",\".start();\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"])),intro_name,intro_name,this.var,_fn,_snippet2,intro_name);}if(intro.is_local){_intro_block=b(_templateObject365||(_templateObject365=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (#local) {\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"])),_intro_block);}block.chunks.intro.push(_intro_block);}if(outro){block.add_variable(outro_name);var _snippet3=outro.expression?outro.expression.manipulate(block):x(_templateObject366||(_templateObject366=(0,_taggedTemplateLiteral2.default)([\"{}\"])));var _fn2=this.renderer.reference(outro.name);if(!intro){block.chunks.intro.push(b(_templateObject367||(_templateObject367=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (\",\") \",\".end(1);\\n\\t\\t\\t\\t\\t\"])),outro_name,outro_name));}// TODO hide elements that have outro'd (unless they belong to a still-outroing\n// group) prior to their removal from the DOM\nvar _outro_block=b(_templateObject368||(_templateObject368=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\" = @create_out_transition(\",\", \",\", \",\");\\n\\t\\t\\t\\t\"])),outro_name,this.var,_fn2,_snippet3);if(outro.is_local){_outro_block=b(_templateObject369||(_templateObject369=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (#local) {\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"])),_outro_block);}block.chunks.outro.push(_outro_block);block.chunks.destroy.push(b(_templateObject370||(_templateObject370=(0,_taggedTemplateLiteral2.default)([\"if (detaching && \",\") \",\".end();\"])),outro_name,outro_name));}}if(intro&&intro.expression&&intro.expression.dependencies.size||outro&&outro.expression&&outro.expression.dependencies.size){block.maintain_context=true;}}},{key:\"add_animation\",value:function add_animation(block){if(!this.node.animation)return;var outro=this.node.outro;var rect=block.get_unique_name('rect');var stop_animation=block.get_unique_name('stop_animation');block.add_variable(rect);block.add_variable(stop_animation,x(_templateObject371||(_templateObject371=(0,_taggedTemplateLiteral2.default)([\"@noop\"]))));block.chunks.measure.push(b(_templateObject372||(_templateObject372=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\" = \",\".getBoundingClientRect();\\n\\t\\t\"])),rect,this.var));block.chunks.fix.push(b(_templateObject373||(_templateObject373=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t@fix_position(\",\");\\n\\t\\t\\t\",\"();\\n\\t\\t\\t\",\"\\n\\t\\t\"])),this.var,stop_animation,outro&&b(_templateObject374||(_templateObject374=(0,_taggedTemplateLiteral2.default)([\"@add_transform(\",\", \",\");\"])),this.var,rect)));var params;if(this.node.animation.expression){params=this.node.animation.expression.manipulate(block);if(this.node.animation.expression.dynamic_dependencies().length){// if `params` is dynamic, calculate params ahead of time in the `.r()` method\nvar params_var=block.get_unique_name('params');block.add_variable(params_var);block.chunks.measure.push(b(_templateObject375||(_templateObject375=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"])),params_var,params));params=params_var;}}else{params=x(_templateObject376||(_templateObject376=(0,_taggedTemplateLiteral2.default)([\"{}\"])));}var name=this.renderer.reference(this.node.animation.name);block.chunks.animate.push(b(_templateObject377||(_templateObject377=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"();\\n\\t\\t\\t\",\" = @create_animation(\",\", \",\", \",\", \",\");\\n\\t\\t\"])),stop_animation,stop_animation,this.var,rect,name,params));}},{key:\"add_classes\",value:function add_classes(block){var _this67=this;var has_spread=this.node.attributes.some(function(attr){return attr.is_spread;});this.node.classes.forEach(function(class_directive){var expression=class_directive.expression,name=class_directive.name;var snippet;var dependencies;if(expression){snippet=expression.manipulate(block);dependencies=expression.dependencies;}else{snippet=name;dependencies=new Set([name]);}var updater=b(_templateObject378||(_templateObject378=(0,_taggedTemplateLiteral2.default)([\"@toggle_class(\",\", \\\"\",\"\\\", \",\");\"])),_this67.var,name,snippet);block.chunks.hydrate.push(updater);if(has_spread){block.chunks.update.push(updater);}else if(dependencies&&dependencies.size>0||_this67.class_dependencies.length){var _this67$class_depende;var all_dependencies=(_this67$class_depende=_this67.class_dependencies).concat.apply(_this67$class_depende,(0,_toConsumableArray2.default)(dependencies));var condition=block.renderer.dirty(all_dependencies);// If all of the dependencies are non-dynamic (don't get updated) then there is no reason\n// to add an updater for this.\nvar any_dynamic_dependencies=all_dependencies.some(function(dep){var variable=_this67.renderer.component.var_lookup.get(dep);return!variable||is_dynamic(variable);});if(any_dynamic_dependencies){block.chunks.update.push(b(_templateObject379||(_templateObject379=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"])),condition,updater));}}});}},{key:\"add_styles\",value:function add_styles(block){var _this68=this;var has_spread=this.node.attributes.some(function(attr){return attr.is_spread;});this.node.styles.forEach(function(style_directive){var name=style_directive.name,expression=style_directive.expression,should_cache=style_directive.should_cache;var snippet=expression.manipulate(block);var cached_snippet;if(should_cache){cached_snippet=block.get_unique_name(\"style_\".concat(name.replace(/-/g,'_')));block.add_variable(cached_snippet,snippet);}var updater=b(_templateObject380||(_templateObject380=(0,_taggedTemplateLiteral2.default)([\"@set_style(\",\", \\\"\",\"\\\", \",\", false)\"])),_this68.var,name,should_cache?cached_snippet:snippet);block.chunks.hydrate.push(updater);var dependencies=expression.dynamic_dependencies();if(has_spread){block.chunks.update.push(updater);}else if(dependencies.length>0){if(should_cache){block.chunks.update.push(b(_templateObject381||(_templateObject381=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\\tif (\",\" && (\",\" !== (\",\" = \",\"))) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\",\"\\t\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"])),block.renderer.dirty(dependencies),cached_snippet,cached_snippet,snippet,updater));}else{block.chunks.update.push(b(_templateObject382||(_templateObject382=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"])),block.renderer.dirty(dependencies),updater));}}});}},{key:\"add_manual_style_scoping\",value:function add_manual_style_scoping(block){if(this.node.needs_manual_style_scoping){var updater=b(_templateObject383||(_templateObject383=(0,_taggedTemplateLiteral2.default)([\"@toggle_class(\",\", \\\"\",\"\\\", true);\"])),this.var,this.node.component.stylesheet.id);block.chunks.hydrate.push(updater);block.chunks.update.push(updater);}}}]);return ElementWrapper;}(Wrapper);function to_html(wrappers,block,literal,state,can_use_raw_text){wrappers.forEach(function(wrapper){if(wrapper instanceof TextWrapper){if(wrapper.use_space())state.quasi.value.raw+=' ';var parent=wrapper.node.parent;var raw=parent&&(parent.name==='script'||parent.name==='style'||can_use_raw_text);state.quasi.value.raw+=(raw?wrapper.data:escape_html(wrapper.data)).replace(/\\\\/g,'\\\\\\\\').replace(/`/g,'\\\\`').replace(/\\$/g,'\\\\$');}else if(wrapper instanceof MustacheTagWrapper||wrapper instanceof RawMustacheTagWrapper){literal.quasis.push(state.quasi);literal.expressions.push(wrapper.node.expression.manipulate(block));state.quasi={type:'TemplateElement',value:{raw:''}};}else if(wrapper.node.name==='noscript');else{// element\nstate.quasi.value.raw+=\"<\".concat(wrapper.node.name);wrapper.attributes.forEach(function(attr){state.quasi.value.raw+=\" \".concat(fix_attribute_casing(attr.node.name),\"=\\\"\");attr.node.chunks.forEach(function(chunk){if(chunk.type==='Text'){state.quasi.value.raw+=escape_html(chunk.data);}else{literal.quasis.push(state.quasi);literal.expressions.push(chunk.manipulate(block));state.quasi={type:'TemplateElement',value:{raw:''}};}});state.quasi.value.raw+='\"';});if(!wrapper.void){state.quasi.value.raw+='>';to_html(wrapper.fragment.nodes,block,literal,state);state.quasi.value.raw+=\"</\".concat(wrapper.node.name,\">\");}else{state.quasi.value.raw+='/>';}}});}var HeadWrapper=/*#__PURE__*/function(_Wrapper10){(0,_inherits2.default)(HeadWrapper,_Wrapper10);var _super51=_createSuper(HeadWrapper);function HeadWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this69;(0,_classCallCheck2.default)(this,HeadWrapper);_this69=_super51.call(this,renderer,block,parent,node);_this69.can_use_innerhtml=false;_this69.fragment=new FragmentWrapper(renderer,block,node.children,(0,_assertThisInitialized2.default)(_this69),strip_whitespace,next_sibling);return _this69;}(0,_createClass2.default)(HeadWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){var nodes;if(this.renderer.options.hydratable&&this.fragment.nodes.length){nodes=block.get_unique_name('head_nodes');block.chunks.claim.push(b(_templateObject384||(_templateObject384=(0,_taggedTemplateLiteral2.default)([\"const \",\" = @query_selector_all('[data-svelte=\\\"\",\"\\\"]', @_document.head);\"])),nodes,this.node.id));}this.fragment.render(block,x(_templateObject385||(_templateObject385=(0,_taggedTemplateLiteral2.default)([\"@_document.head\"]))),nodes);if(nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject386||(_templateObject386=(0,_taggedTemplateLiteral2.default)([\"\",\".forEach(@detach);\"])),nodes));}}}]);return HeadWrapper;}(Wrapper);function is_else_if(node){return node&&node.children.length===1&&node.children[0].type==='IfBlock';}var IfBlockBranch=/*#__PURE__*/function(_Wrapper11){(0,_inherits2.default)(IfBlockBranch,_Wrapper11);var _super52=_createSuper(IfBlockBranch);function IfBlockBranch(renderer,block,parent,node,strip_whitespace,next_sibling){var _this70;(0,_classCallCheck2.default)(this,IfBlockBranch);_this70=_super52.call(this,renderer,block,parent,node);_this70.var=null;var expression=node.expression;var is_else=!expression;if(expression){_this70.dependencies=expression.dynamic_dependencies();// TODO is this the right rule? or should any non-reference count?\n// const should_cache = !is_reference(expression.node, null) && dependencies.length > 0;\nvar _should_cache=false;walk(expression.node,{enter:function enter(node){if(node.type==='CallExpression'||node.type==='NewExpression'){_should_cache=true;}}});if(_should_cache){_this70.condition=block.get_unique_name('show_if');_this70.snippet=expression.manipulate(block);}else{_this70.condition=expression.manipulate(block);}}_this70.block=block.child({comment:create_debugging_comment(node,parent.renderer.component),name:parent.renderer.component.get_unique_name(is_else?'create_else_block':'create_if_block'),type:node.expression?'if':'else'});_this70.fragment=new FragmentWrapper(renderer,_this70.block,node.children,parent,strip_whitespace,next_sibling);_this70.is_dynamic=_this70.block.dependencies.size>0;return _this70;}return(0,_createClass2.default)(IfBlockBranch);}(Wrapper);var IfBlockWrapper=/*#__PURE__*/function(_Wrapper12){(0,_inherits2.default)(IfBlockWrapper,_Wrapper12);var _super53=_createSuper(IfBlockWrapper);function IfBlockWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _renderer$blocks;var _this71;(0,_classCallCheck2.default)(this,IfBlockWrapper);_this71=_super53.call(this,renderer,block,parent,node);_this71.needs_update=false;_this71.var={type:'Identifier',name:'if_block'};_this71.cannot_use_innerhtml();_this71.not_static_content();_this71.branches=[];var blocks=[];var is_dynamic=false;var has_intros=false;var has_outros=false;var create_branches=function create_branches(node){var branch=new IfBlockBranch(renderer,block,(0,_assertThisInitialized2.default)(_this71),node,strip_whitespace,next_sibling);_this71.branches.push(branch);blocks.push(branch.block);block.add_dependencies(node.expression.dependencies);if(branch.block.dependencies.size>0){// the condition, or its contents, is dynamic\nis_dynamic=true;block.add_dependencies(branch.block.dependencies);}if(branch.dependencies&&branch.dependencies.length>0){// the condition itself is dynamic\n_this71.needs_update=true;}if(branch.block.has_intros)has_intros=true;if(branch.block.has_outros)has_outros=true;if(is_else_if(node.else)){create_branches(node.else.children[0]);}else if(node.else){var _branch=new IfBlockBranch(renderer,block,(0,_assertThisInitialized2.default)(_this71),node.else,strip_whitespace,next_sibling);_this71.branches.push(_branch);blocks.push(_branch.block);if(_branch.block.dependencies.size>0){is_dynamic=true;block.add_dependencies(_branch.block.dependencies);}if(_branch.block.has_intros)has_intros=true;if(_branch.block.has_outros)has_outros=true;}};create_branches(_this71.node);blocks.forEach(function(block){block.has_update_method=is_dynamic;block.has_intro_method=has_intros;block.has_outro_method=has_outros;});(_renderer$blocks=renderer.blocks).push.apply(_renderer$blocks,blocks);return _this71;}(0,_createClass2.default)(IfBlockWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var name=this.var;var needs_anchor=this.next?!this.next.is_dom_node():!parent_node||!this.parent.is_dom_node();var anchor=needs_anchor?block.get_unique_name(\"\".concat(this.var.name,\"_anchor\")):this.next&&this.next.var||'null';var has_else=!this.branches[this.branches.length-1].condition;var if_exists_condition=has_else?null:name;var dynamic=this.branches[0].block.has_update_method;// can use [0] as proxy for all, since they necessarily have the same value\nvar has_intros=this.branches[0].block.has_intro_method;var has_outros=this.branches[0].block.has_outro_method;var has_transitions=has_intros||has_outros;var vars={name:name,anchor:anchor,if_exists_condition:if_exists_condition,has_else:has_else,has_transitions:has_transitions};var detaching=parent_node&&!is_head(parent_node)?null:'detaching';if(this.node.else){this.branches.forEach(function(branch){if(branch.snippet)block.add_variable(branch.condition);});if(has_outros){this.render_compound_with_outros(block,parent_node,parent_nodes,dynamic,vars,detaching);block.chunks.outro.push(b(_templateObject387||(_templateObject387=(0,_taggedTemplateLiteral2.default)([\"@transition_out(\",\");\"])),name));}else{this.render_compound(block,parent_node,parent_nodes,dynamic,vars,detaching);}}else{this.render_simple(block,parent_node,parent_nodes,dynamic,vars,detaching);if(has_outros){block.chunks.outro.push(b(_templateObject388||(_templateObject388=(0,_taggedTemplateLiteral2.default)([\"@transition_out(\",\");\"])),name));}}if(if_exists_condition){block.chunks.create.push(b(_templateObject389||(_templateObject389=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".c();\"])),if_exists_condition,name));}else{block.chunks.create.push(b(_templateObject390||(_templateObject390=(0,_taggedTemplateLiteral2.default)([\"\",\".c();\"])),name));}if(parent_nodes&&this.renderer.options.hydratable){if(if_exists_condition){block.chunks.claim.push(b(_templateObject391||(_templateObject391=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".l(\",\");\"])),if_exists_condition,name,parent_nodes));}else{block.chunks.claim.push(b(_templateObject392||(_templateObject392=(0,_taggedTemplateLiteral2.default)([\"\",\".l(\",\");\"])),name,parent_nodes));}}if(has_intros||has_outros){block.chunks.intro.push(b(_templateObject393||(_templateObject393=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\");\"])),name));}if(needs_anchor){block.add_element(anchor,x(_templateObject394||(_templateObject394=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),parent_nodes&&x(_templateObject395||(_templateObject395=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]))),parent_node);}this.branches.forEach(function(branch){branch.fragment.render(branch.block,null,x(_templateObject396||(_templateObject396=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]))));});}},{key:\"render_compound\",value:function render_compound(block,parent_node,_parent_nodes,dynamic,_ref8,detaching){var name=_ref8.name,anchor=_ref8.anchor,has_else=_ref8.has_else,if_exists_condition=_ref8.if_exists_condition,has_transitions=_ref8.has_transitions;var select_block_type=this.renderer.component.get_unique_name('select_block_type');var current_block_type=block.get_unique_name('current_block_type');var get_block=has_else?x(_templateObject397||(_templateObject397=(0,_taggedTemplateLiteral2.default)([\"\",\"(#ctx)\"])),current_block_type):x(_templateObject398||(_templateObject398=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"(#ctx)\"])),current_block_type,current_block_type);if(this.needs_update){block.chunks.init.push(b(_templateObject399||(_templateObject399=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"(#ctx, #dirty) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),select_block_type,this.branches.map(function(_ref9){var dependencies=_ref9.dependencies,condition=_ref9.condition,snippet=_ref9.snippet;return b(_templateObject400||(_templateObject400=(0,_taggedTemplateLiteral2.default)([\"\",\"\"])),snippet&&dependencies.length>0?b(_templateObject401||(_templateObject401=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\" = null;\"])),block.renderer.dirty(dependencies),condition):null);}),this.branches.map(function(_ref10){var condition=_ref10.condition,snippet=_ref10.snippet,block=_ref10.block;return condition?b(_templateObject402||(_templateObject402=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\tif (\",\") return \",\";\"])),snippet&&b(_templateObject403||(_templateObject403=(0,_taggedTemplateLiteral2.default)([\"if (\",\" == null) \",\" = !!\",\"\"])),condition,condition,snippet),condition,block.name):b(_templateObject404||(_templateObject404=(0,_taggedTemplateLiteral2.default)([\"return \",\";\"])),block.name);})));}else{block.chunks.init.push(b(_templateObject405||(_templateObject405=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"(#ctx, #dirty) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),select_block_type,this.branches.map(function(_ref11){var condition=_ref11.condition,snippet=_ref11.snippet,block=_ref11.block;return condition?b(_templateObject406||(_templateObject406=(0,_taggedTemplateLiteral2.default)([\"if (\",\") return \",\";\"])),snippet||condition,block.name):b(_templateObject407||(_templateObject407=(0,_taggedTemplateLiteral2.default)([\"return \",\";\"])),block.name);})));}block.chunks.init.push(b(_templateObject408||(_templateObject408=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = \",\"(#ctx, \",\");\\n\\t\\t\\tlet \",\" = \",\";\\n\\t\\t\"])),current_block_type,select_block_type,this.renderer.get_initial_dirty(),name,get_block));var initial_mount_node=parent_node||'#target';var anchor_node=parent_node?'null':'#anchor';if(if_exists_condition){block.chunks.mount.push(b(_templateObject409||(_templateObject409=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".m(\",\", \",\");\"])),if_exists_condition,name,initial_mount_node,anchor_node));}else{block.chunks.mount.push(b(_templateObject410||(_templateObject410=(0,_taggedTemplateLiteral2.default)([\"\",\".m(\",\", \",\");\"])),name,initial_mount_node,anchor_node));}if(this.needs_update){var update_mount_node=this.get_update_mount_node(anchor);var change_block=b(_templateObject411||(_templateObject411=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\";\\n\\t\\t\\t\\t\",\" = \",\";\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),if_exists_condition?b(_templateObject412||(_templateObject412=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".d(1)\"])),if_exists_condition,name):b(_templateObject413||(_templateObject413=(0,_taggedTemplateLiteral2.default)([\"\",\".d(1)\"])),name),name,get_block,name,name,has_transitions&&b(_templateObject414||(_templateObject414=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"])),name),name,update_mount_node,anchor);if(dynamic){block.chunks.update.push(b(_templateObject415||(_templateObject415=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\" === (\",\" = \",\"(#ctx, #dirty)) && \",\") {\\n\\t\\t\\t\\t\\t\\t\",\".p(#ctx, #dirty);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),current_block_type,current_block_type,select_block_type,name,name,change_block));}else{block.chunks.update.push(b(_templateObject416||(_templateObject416=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\" !== (\",\" = \",\"(#ctx, #dirty))) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),current_block_type,current_block_type,select_block_type,change_block));}}else if(dynamic){if(if_exists_condition){block.chunks.update.push(b(_templateObject417||(_templateObject417=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".p(#ctx, #dirty);\"])),if_exists_condition,name));}else{block.chunks.update.push(b(_templateObject418||(_templateObject418=(0,_taggedTemplateLiteral2.default)([\"\",\".p(#ctx, #dirty);\"])),name));}}if(if_exists_condition){block.chunks.destroy.push(b(_templateObject419||(_templateObject419=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".d(\",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),if_exists_condition,name,detaching));}else{block.chunks.destroy.push(b(_templateObject420||(_templateObject420=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\".d(\",\");\\n\\t\\t\\t\"])),name,detaching));}}// if any of the siblings have outros, we need to keep references to the blocks\n// (TODO does this only apply to bidi transitions?)\n},{key:\"render_compound_with_outros\",value:function render_compound_with_outros(block,parent_node,_parent_nodes,dynamic,_ref12,detaching){var name=_ref12.name,anchor=_ref12.anchor,has_else=_ref12.has_else,has_transitions=_ref12.has_transitions,if_exists_condition=_ref12.if_exists_condition;var select_block_type=this.renderer.component.get_unique_name('select_block_type');var current_block_type_index=block.get_unique_name('current_block_type_index');var previous_block_index=block.get_unique_name('previous_block_index');var if_block_creators=block.get_unique_name('if_block_creators');var if_blocks=block.get_unique_name('if_blocks');var if_current_block_type_index=has_else?function(nodes){return nodes;}:function(nodes){return b(_templateObject421||(_templateObject421=(0,_taggedTemplateLiteral2.default)([\"if (~\",\") { \",\" }\"])),current_block_type_index,nodes);};block.add_variable(current_block_type_index);block.add_variable(name);block.chunks.init.push(b(_templateObject422||(_templateObject422=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tconst \",\" = [\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t];\\n\\n\\t\\t\\tconst \",\" = [];\\n\\n\\t\\t\\t\",\"\\n\\t\\t\"])),if_block_creators,this.branches.map(function(branch){return branch.block.name;}),if_blocks,this.needs_update?b(_templateObject423||(_templateObject423=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"(#ctx, #dirty) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),select_block_type,this.branches.map(function(_ref13){var dependencies=_ref13.dependencies,condition=_ref13.condition,snippet=_ref13.snippet;return b(_templateObject424||(_templateObject424=(0,_taggedTemplateLiteral2.default)([\"\",\"\"])),snippet&&dependencies.length>0?b(_templateObject425||(_templateObject425=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\" = null;\"])),block.renderer.dirty(dependencies),condition):null);}),this.branches.map(function(_ref14,i){var condition=_ref14.condition,snippet=_ref14.snippet;return condition?b(_templateObject426||(_templateObject426=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\tif (\",\") return \",\";\"])),snippet&&b(_templateObject427||(_templateObject427=(0,_taggedTemplateLiteral2.default)([\"if (\",\" == null) \",\" = !!\",\"\"])),condition,condition,snippet),condition,i):b(_templateObject428||(_templateObject428=(0,_taggedTemplateLiteral2.default)([\"return \",\";\"])),i);}),!has_else&&b(_templateObject429||(_templateObject429=(0,_taggedTemplateLiteral2.default)([\"return -1;\"])))):b(_templateObject430||(_templateObject430=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"(#ctx, #dirty) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),select_block_type,this.branches.map(function(_ref15,i){var condition=_ref15.condition,snippet=_ref15.snippet;return condition?b(_templateObject431||(_templateObject431=(0,_taggedTemplateLiteral2.default)([\"if (\",\") return \",\";\"])),snippet||condition,i):b(_templateObject432||(_templateObject432=(0,_taggedTemplateLiteral2.default)([\"return \",\";\"])),i);}),!has_else&&b(_templateObject433||(_templateObject433=(0,_taggedTemplateLiteral2.default)([\"return -1;\"]))))));if(has_else){block.chunks.init.push(b(_templateObject434||(_templateObject434=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" = \",\"(#ctx, \",\");\\n\\t\\t\\t\\t\",\" = \",\"[\",\"] = \",\"[\",\"](#ctx);\\n\\t\\t\\t\"])),current_block_type_index,select_block_type,this.renderer.get_initial_dirty(),name,if_blocks,current_block_type_index,if_block_creators,current_block_type_index));}else{block.chunks.init.push(b(_templateObject435||(_templateObject435=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (~(\",\" = \",\"(#ctx, \",\"))) {\\n\\t\\t\\t\\t\\t\",\" = \",\"[\",\"] = \",\"[\",\"](#ctx);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),current_block_type_index,select_block_type,this.renderer.get_initial_dirty(),name,if_blocks,current_block_type_index,if_block_creators,current_block_type_index));}var initial_mount_node=parent_node||'#target';var anchor_node=parent_node?'null':'#anchor';block.chunks.mount.push(if_current_block_type_index(b(_templateObject436||(_templateObject436=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"].m(\",\", \",\");\"])),if_blocks,current_block_type_index,initial_mount_node,anchor_node)));if(this.needs_update){var update_mount_node=this.get_update_mount_node(anchor);var destroy_old_block=b(_templateObject437||(_templateObject437=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t@transition_out(\",\"[\",\"], 1, 1, () => {\\n\\t\\t\\t\\t\\t\",\"[\",\"] = null;\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\t@check_outros();\\n\\t\\t\\t\"])),if_blocks,previous_block_index,if_blocks,previous_block_index);var create_new_block=b(_templateObject438||(_templateObject438=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" = \",\"[\",\"];\\n\\t\\t\\t\\tif (!\",\") {\\n\\t\\t\\t\\t\\t\",\" = \",\"[\",\"] = \",\"[\",\"](#ctx);\\n\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\"])),name,if_blocks,current_block_type_index,name,name,if_blocks,current_block_type_index,if_block_creators,current_block_type_index,name,dynamic&&b(_templateObject439||(_templateObject439=(0,_taggedTemplateLiteral2.default)([\"\",\".p(#ctx, #dirty);\"])),name),has_transitions&&b(_templateObject440||(_templateObject440=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"])),name),name,update_mount_node,anchor);var change_block=has_else?b(_templateObject441||(_templateObject441=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"])),destroy_old_block,create_new_block):b(_templateObject442||(_templateObject442=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (~\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),name,destroy_old_block,current_block_type_index,create_new_block,name);block.chunks.update.push(b(_templateObject443||(_templateObject443=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tlet \",\" = \",\";\\n\\t\\t\\t\\t\",\" = \",\"(#ctx, #dirty);\\n\\t\\t\\t\"])),previous_block_index,current_block_type_index,current_block_type_index,select_block_type));if(dynamic){block.chunks.update.push(b(_templateObject444||(_templateObject444=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\" === \",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),current_block_type_index,previous_block_index,if_current_block_type_index(b(_templateObject445||(_templateObject445=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"].p(#ctx, #dirty);\"])),if_blocks,current_block_type_index)),change_block));}else{block.chunks.update.push(b(_templateObject446||(_templateObject446=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\" !== \",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),current_block_type_index,previous_block_index,change_block));}}else if(dynamic){if(if_exists_condition){block.chunks.update.push(b(_templateObject447||(_templateObject447=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".p(#ctx, #dirty);\"])),if_exists_condition,name));}else{block.chunks.update.push(b(_templateObject448||(_templateObject448=(0,_taggedTemplateLiteral2.default)([\"\",\".p(#ctx, #dirty);\"])),name));}}block.chunks.destroy.push(if_current_block_type_index(b(_templateObject449||(_templateObject449=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"].d(\",\");\"])),if_blocks,current_block_type_index,detaching)));}},{key:\"render_simple\",value:function render_simple(block,parent_node,_parent_nodes,dynamic,_ref16,detaching){var name=_ref16.name,anchor=_ref16.anchor,if_exists_condition=_ref16.if_exists_condition,has_transitions=_ref16.has_transitions;var branch=this.branches[0];if(branch.snippet)block.add_variable(branch.condition,branch.snippet);block.chunks.init.push(b(_templateObject450||(_templateObject450=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = \",\" && \",\"(#ctx);\\n\\t\\t\"])),name,branch.condition,branch.block.name));var initial_mount_node=parent_node||'#target';var anchor_node=parent_node?'null':'#anchor';block.chunks.mount.push(b(_templateObject451||(_templateObject451=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".m(\",\", \",\");\"])),name,name,initial_mount_node,anchor_node));if(branch.dependencies.length>0){var update_mount_node=this.get_update_mount_node(anchor);var enter=b(_templateObject452||(_templateObject452=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\",\" = \",\"(#ctx);\\n\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),name,dynamic&&b(_templateObject453||(_templateObject453=(0,_taggedTemplateLiteral2.default)([\"\",\".p(#ctx, #dirty);\"])),name),has_transitions&&b(_templateObject454||(_templateObject454=(0,_taggedTemplateLiteral2.default)([\"if (\",\") {\\n\\t\\t\\t\\t\\t\\t\\t@transition_in(\",\", 1);\\n\\t\\t\\t\\t\\t\\t}\"])),block.renderer.dirty(branch.dependencies),name),name,branch.block.name,name,has_transitions&&b(_templateObject455||(_templateObject455=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"])),name),name,update_mount_node,anchor);if(branch.snippet){block.chunks.update.push(b(_templateObject456||(_templateObject456=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\" = \",\"\"])),block.renderer.dirty(branch.dependencies),branch.condition,branch.snippet));}// no `p()` here — we don't want to update outroing nodes,\n// as that will typically result in glitching\nif(branch.block.has_outro_method){block.chunks.update.push(b(_templateObject457||(_templateObject457=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else if (\",\") {\\n\\t\\t\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t\\t\\t@transition_out(\",\", 1, 1, () => {\\n\\t\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t@check_outros();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),branch.condition,enter,name,name,name));}else{block.chunks.update.push(b(_templateObject458||(_templateObject458=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else if (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\".d(1);\\n\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),branch.condition,enter,name,name,name));}}else if(dynamic){block.chunks.update.push(b(_templateObject459||(_templateObject459=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") \",\".p(#ctx, #dirty);\\n\\t\\t\\t\"])),branch.condition,name));}if(if_exists_condition){block.chunks.destroy.push(b(_templateObject460||(_templateObject460=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") \",\".d(\",\");\\n\\t\\t\\t\"])),if_exists_condition,name,detaching));}else{block.chunks.destroy.push(b(_templateObject461||(_templateObject461=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\".d(\",\");\\n\\t\\t\\t\"])),name,detaching));}}}]);return IfBlockWrapper;}(Wrapper);var KeyBlockWrapper=/*#__PURE__*/function(_Wrapper13){(0,_inherits2.default)(KeyBlockWrapper,_Wrapper13);var _super54=_createSuper(KeyBlockWrapper);function KeyBlockWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this72;(0,_classCallCheck2.default)(this,KeyBlockWrapper);_this72=_super54.call(this,renderer,block,parent,node);_this72.var={type:'Identifier',name:'key_block'};_this72.cannot_use_innerhtml();_this72.not_static_content();_this72.dependencies=node.expression.dynamic_dependencies();if(_this72.dependencies.length){block=block.child({comment:create_debugging_comment(node,renderer.component),name:renderer.component.get_unique_name('create_key_block'),type:'key'});renderer.blocks.push(block);}_this72.block=block;_this72.fragment=new FragmentWrapper(renderer,_this72.block,node.children,(0,_assertThisInitialized2.default)(_this72),strip_whitespace,next_sibling);return _this72;}(0,_createClass2.default)(KeyBlockWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){if(this.dependencies.length===0){this.render_static_key(block,parent_node,parent_nodes);}else{this.render_dynamic_key(block,parent_node,parent_nodes);}}},{key:\"render_static_key\",value:function render_static_key(_block,parent_node,parent_nodes){this.fragment.render(this.block,parent_node,parent_nodes);}},{key:\"render_dynamic_key\",value:function render_dynamic_key(block,parent_node,parent_nodes){this.fragment.render(this.block,null,x(_templateObject462||(_templateObject462=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]))));var has_transitions=!!(this.block.has_intro_method||this.block.has_outro_method);var dynamic=this.block.has_update_method;var previous_key=block.get_unique_name('previous_key');var snippet=this.node.expression.manipulate(block);block.add_variable(previous_key,snippet);var not_equal=this.renderer.component.component_options.immutable?x(_templateObject463||(_templateObject463=(0,_taggedTemplateLiteral2.default)([\"@not_equal\"]))):x(_templateObject464||(_templateObject464=(0,_taggedTemplateLiteral2.default)([\"@safe_not_equal\"])));var condition=x(_templateObject465||(_templateObject465=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"(\",\", \",\" = \",\")\"])),this.renderer.dirty(this.dependencies),not_equal,previous_key,previous_key,snippet);block.chunks.init.push(b(_templateObject466||(_templateObject466=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = \",\"(#ctx);\\n\\t\\t\"])),this.var,this.block.name));block.chunks.create.push(b(_templateObject467||(_templateObject467=(0,_taggedTemplateLiteral2.default)([\"\",\".c();\"])),this.var));if(this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject468||(_templateObject468=(0,_taggedTemplateLiteral2.default)([\"\",\".l(\",\");\"])),this.var,parent_nodes));}block.chunks.mount.push(b(_templateObject469||(_templateObject469=(0,_taggedTemplateLiteral2.default)([\"\",\".m(\",\", \",\");\"])),this.var,parent_node||'#target',parent_node?'null':'#anchor'));var anchor=this.get_or_create_anchor(block,parent_node,parent_nodes);var body=b(_templateObject470||(_templateObject470=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"\\n\\t\\t\\t\",\" = \",\"(#ctx);\\n\\t\\t\\t\",\".c();\\n\\t\\t\\t\",\"\\n\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\"])),has_transitions?b(_templateObject471||(_templateObject471=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t\\t\\t@transition_out(\",\", 1, 1, @noop);\\n\\t\\t\\t\\t\\t\\t@check_outros();\\n\\t\\t\\t\\t\\t\"])),this.var):b(_templateObject472||(_templateObject472=(0,_taggedTemplateLiteral2.default)([\"\",\".d(1);\"])),this.var),this.var,this.block.name,this.var,has_transitions&&b(_templateObject473||(_templateObject473=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\")\"])),this.var),this.var,this.get_update_mount_node(anchor),anchor);if(dynamic){block.chunks.update.push(b(_templateObject474||(_templateObject474=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\",\".p(#ctx, #dirty);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),condition,body,this.var));}else{block.chunks.update.push(b(_templateObject475||(_templateObject475=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),condition,body));}if(has_transitions){block.chunks.intro.push(b(_templateObject476||(_templateObject476=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\")\"])),this.var));block.chunks.outro.push(b(_templateObject477||(_templateObject477=(0,_taggedTemplateLiteral2.default)([\"@transition_out(\",\")\"])),this.var));}block.chunks.destroy.push(b(_templateObject478||(_templateObject478=(0,_taggedTemplateLiteral2.default)([\"\",\".d(detaching)\"])),this.var));}}]);return KeyBlockWrapper;}(Wrapper);function get_slot_definition(block,scope,lets){if(lets.length===0)return{block:block,scope:scope};var context_input={type:'ObjectPattern',properties:lets.map(function(l){return{type:'Property',kind:'init',key:l.name,value:l.value||l.name};})};var properties=[];var value_map=new Map();lets.forEach(function(l){var value;if(l.names.length>1){// more than one, probably destructuring\nvar unique_name=block.get_unique_name(l.names.join('_')).name;value_map.set(l.value,unique_name);value={type:'Identifier',name:unique_name};}else{value=l.value||l.name;}properties.push({type:'Property',kind:'init',key:l.name,value:value});});var changes_input={type:'ObjectPattern',properties:properties};var names=new Set();var names_lookup=new Map();lets.forEach(function(l){l.names.forEach(function(name){names.add(name);if(value_map.has(l.value)){names_lookup.set(name,value_map.get(l.value));}});});var context={type:'ObjectExpression',properties:Array.from(names).map(function(name){return p(_templateObject479||(_templateObject479=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"])),block.renderer.context_lookup.get(name).index,name);})};var context_lookup=block.renderer.context_lookup;// i am well aware that this code is gross\n// TODO: context-overflow make it less gross\nvar changes={type:'ParenthesizedExpression',get expression(){if(block.renderer.context_overflow){var grouped=[];Array.from(names).forEach(function(name){var i=context_lookup.get(name).index.value;var g=Math.floor(i/31);var lookup_name=names_lookup.has(name)?names_lookup.get(name):name;if(!grouped[g])grouped[g]=[];grouped[g].push({name:lookup_name,n:i%31});});var elements=[];for(var g=0;g<grouped.length;g+=1){elements[g]=grouped[g]?grouped[g].map(function(_ref17){var name=_ref17.name,n=_ref17.n;return x(_templateObject480||(_templateObject480=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \",\" : 0\"])),name,1<<n);}).reduce(function(lhs,rhs){return x(_templateObject481||(_templateObject481=(0,_taggedTemplateLiteral2.default)([\"\",\" | \",\"\"])),lhs,rhs);}):x(_templateObject482||(_templateObject482=(0,_taggedTemplateLiteral2.default)([\"0\"])));}return{type:'ArrayExpression',elements:elements};}return Array.from(names).map(function(name){var lookup_name=names_lookup.has(name)?names_lookup.get(name):name;var i=context_lookup.get(name).index.value;return x(_templateObject483||(_templateObject483=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \",\" : 0\"])),lookup_name,1<<i);}).reduce(function(lhs,rhs){return x(_templateObject484||(_templateObject484=(0,_taggedTemplateLiteral2.default)([\"\",\" | \",\"\"])),lhs,rhs);});}};return{block:block,scope:scope,get_context:x(_templateObject485||(_templateObject485=(0,_taggedTemplateLiteral2.default)([\"\",\" => \",\"\"])),context_input,context),get_changes:x(_templateObject486||(_templateObject486=(0,_taggedTemplateLiteral2.default)([\"\",\" => \",\"\"])),changes_input,changes)};}var SlotTemplateWrapper=/*#__PURE__*/function(_Wrapper14){(0,_inherits2.default)(SlotTemplateWrapper,_Wrapper14);var _super55=_createSuper(SlotTemplateWrapper);function SlotTemplateWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this73;(0,_classCallCheck2.default)(this,SlotTemplateWrapper);_this73=_super55.call(this,renderer,block,parent,node);var _this73$node=_this73.node,scope=_this73$node.scope,lets=_this73$node.lets,const_tags=_this73$node.const_tags,slot_template_name=_this73$node.slot_template_name;lets.forEach(function(l){extract_names(l.value||l.name).forEach(function(name){renderer.add_to_context(name,true);});});add_const_tags_context(renderer,const_tags);_this73.block=block.child({comment:create_debugging_comment(_this73.node,_this73.renderer.component),name:_this73.renderer.component.get_unique_name(\"create_\".concat(sanitize(slot_template_name),\"_slot\")),type:'slot'});_this73.renderer.blocks.push(_this73.block);var seen=new Set(lets.map(function(l){return l.name.name;}));_this73.parent.node.lets.forEach(function(l){if(!seen.has(l.name.name))lets.push(l);});_this73.parent.set_slot(slot_template_name,get_slot_definition(_this73.block,scope,lets));_this73.fragment=new FragmentWrapper(renderer,_this73.block,node.type==='SlotTemplate'?node.children:[node],(0,_assertThisInitialized2.default)(_this73),strip_whitespace,next_sibling);_this73.block.parent.add_dependencies(_this73.block.dependencies);return _this73;}(0,_createClass2.default)(SlotTemplateWrapper,[{key:\"render\",value:function render(){this.fragment.render(this.block,null,x(_templateObject487||(_templateObject487=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]))));if(this.node.const_tags.length>0){this.render_get_context();}}},{key:\"render_get_context\",value:function render_get_context(){var get_context=this.block.renderer.component.get_unique_name('get_context');this.block.renderer.blocks.push(b(_templateObject488||(_templateObject488=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(#ctx) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\\n\\t\\t\"])),get_context,add_const_tags(this.block,this.node.const_tags,'#ctx')));this.block.chunks.declarations.push(b(_templateObject489||(_templateObject489=(0,_taggedTemplateLiteral2.default)([\"\",\"(#ctx)\"])),get_context));if(this.block.has_update_method){this.block.chunks.update.unshift(b(_templateObject490||(_templateObject490=(0,_taggedTemplateLiteral2.default)([\"\",\"(#ctx)\"])),get_context));}}}]);return SlotTemplateWrapper;}(Wrapper);function string_to_member_expression(name){var parts=name.split('.');var node={type:'Identifier',name:parts[0]};for(var _i38=1;_i38<parts.length;_i38++){node={type:'MemberExpression',object:node,property:{type:'Identifier',name:parts[_i38]}};}return node;}var InlineComponentWrapper=/*#__PURE__*/function(_Wrapper15){(0,_inherits2.default)(InlineComponentWrapper,_Wrapper15);var _super56=_createSuper(InlineComponentWrapper);function InlineComponentWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this74;(0,_classCallCheck2.default)(this,InlineComponentWrapper);_this74=_super56.call(this,renderer,block,parent,node);_this74.slots=new Map();_this74.children=[];_this74.cannot_use_innerhtml();_this74.not_static_content();if(_this74.node.expression){block.add_dependencies(_this74.node.expression.dependencies);}_this74.node.attributes.forEach(function(attr){block.add_dependencies(attr.dependencies);});_this74.node.bindings.forEach(function(binding){if(binding.is_contextual){mark_each_block_bindings((0,_assertThisInitialized2.default)(_this74),binding);}block.add_dependencies(binding.expression.dependencies);});_this74.node.handlers.forEach(function(handler){if(handler.expression){block.add_dependencies(handler.expression.dependencies);}});_this74.node.css_custom_properties.forEach(function(attr){block.add_dependencies(attr.dependencies);});_this74.var={type:'Identifier',name:(_this74.node.name==='svelte:self'?renderer.component.name.name:_this74.node.name==='svelte:component'?'switch_instance':sanitize(_this74.node.name)).toLowerCase()};if(_this74.node.children.length){_this74.node.lets.forEach(function(l){extract_names(l.value||l.name).forEach(function(name){renderer.add_to_context(name,true);});});_this74.children=_this74.node.children.map(function(child){return new SlotTemplateWrapper(renderer,block,(0,_assertThisInitialized2.default)(_this74),child,strip_whitespace,next_sibling);});}block.add_outro();return _this74;}(0,_createClass2.default)(InlineComponentWrapper,[{key:\"set_slot\",value:function set_slot(name,slot_definition){if(this.slots.has(name)){if(name==='default'){throw new Error('Found elements without slot attribute when using slot=\"default\"');}throw new Error(\"Duplicate slot name \\\"\".concat(name,\"\\\" in <\").concat(this.node.name,\">\"));}this.slots.set(name,slot_definition);}},{key:\"warn_if_reactive\",value:function warn_if_reactive(){var name=this.node.name;var variable=this.renderer.component.var_lookup.get(name);if(!variable){return;}if(variable.reassigned||variable.export_name||variable.is_reactive_dependency){this.renderer.component.warn(this.node,compiler_warnings.reactive_component(name));}}},{key:\"render\",value:function render(block,parent_node,parent_nodes){var _this75=this;this.warn_if_reactive();var renderer=this.renderer;var component=renderer.component;var name=this.var;block.add_variable(name);var component_opts=x(_templateObject491||(_templateObject491=(0,_taggedTemplateLiteral2.default)([\"{}\"])));var statements=[];var updates=[];this.children.forEach(function(child){_this75.renderer.add_to_context('$$scope',true);child.render(block,null,x(_templateObject492||(_templateObject492=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]))));});var props;var name_changes=block.get_unique_name(\"\".concat(name.name,\"_changes\"));var uses_spread=!!this.node.attributes.find(function(a){return a.is_spread;});// removing empty slot\nvar _iterator11=_createForOfIteratorHelper(this.slots.keys()),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var slot=_step11.value;if(!this.slots.get(slot).block.has_content()){this.renderer.remove_block(this.slots.get(slot).block);this.slots.delete(slot);}}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}var has_css_custom_properties=this.node.css_custom_properties.length>0;var css_custom_properties_wrapper=has_css_custom_properties?block.get_unique_name('div'):null;if(has_css_custom_properties){block.add_variable(css_custom_properties_wrapper);}var initial_props=this.slots.size>0?[p(_templateObject493||(_templateObject493=(0,_taggedTemplateLiteral2.default)([\"$$slots: {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"])),Array.from(this.slots).map(function(_ref18){var _ref19=(0,_slicedToArray2.default)(_ref18,2),name=_ref19[0],slot=_ref19[1];return p(_templateObject494||(_templateObject494=(0,_taggedTemplateLiteral2.default)([\"\",\": [\",\", \",\", \",\"]\"])),name,slot.block.name,slot.get_context||null,slot.get_changes||null);})),p(_templateObject495||(_templateObject495=(0,_taggedTemplateLiteral2.default)([\"$$scope: {\\n\\t\\t\\t\\t\\tctx: #ctx\\n\\t\\t\\t\\t}\"])))]:[];var attribute_object=uses_spread?x(_templateObject496||(_templateObject496=(0,_taggedTemplateLiteral2.default)([\"{ \",\" }\"])),initial_props):x(_templateObject497||(_templateObject497=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\t\\t\",\",\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"])),this.node.attributes.map(function(attr){return p(_templateObject498||(_templateObject498=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"])),attr.name,attr.get_value(block));}),initial_props);if(this.node.attributes.length||this.node.bindings.length||initial_props.length){if(!uses_spread&&this.node.bindings.length===0){component_opts.properties.push(p(_templateObject499||(_templateObject499=(0,_taggedTemplateLiteral2.default)([\"props: \",\"\"])),attribute_object));}else{props=block.get_unique_name(\"\".concat(name.name,\"_props\"));component_opts.properties.push(p(_templateObject500||(_templateObject500=(0,_taggedTemplateLiteral2.default)([\"props: \",\"\"])),props));}}if(component.compile_options.dev){// TODO this is a terrible hack, but without it the component\n// will complain that options.target is missing. This would\n// work better if components had separate public and private\n// APIs\ncomponent_opts.properties.push(p(_templateObject501||(_templateObject501=(0,_taggedTemplateLiteral2.default)([\"$$inline: true\"]))));}var fragment_dependencies=new Set(this.slots.size?['$$scope']:[]);this.slots.forEach(function(slot){slot.block.dependencies.forEach(function(name){var is_let=slot.scope.is_let(name);var variable=renderer.component.var_lookup.get(name);if(is_let||is_dynamic(variable))fragment_dependencies.add(name);});});var dynamic_attributes=this.node.attributes.filter(function(a){return a.get_dependencies().length>0;});if(!uses_spread&&(dynamic_attributes.length>0||this.node.bindings.length>0||fragment_dependencies.size>0)){updates.push(b(_templateObject502||(_templateObject502=(0,_taggedTemplateLiteral2.default)([\"const \",\" = {};\"])),name_changes));}if(this.node.attributes.length){if(uses_spread){var levels=block.get_unique_name(\"\".concat(this.var.name,\"_spread_levels\"));var _initial_props=[];var changes=[];var all_dependencies=new Set();this.node.attributes.forEach(function(attr){add_to_set(all_dependencies,attr.dependencies);});this.node.attributes.forEach(function(attr,i){var name=attr.name,dependencies=attr.dependencies;var condition=dependencies.size>0&&dependencies.size!==all_dependencies.size?renderer.dirty(Array.from(dependencies)):null;var unchanged=dependencies.size===0;var change_object;if(attr.is_spread){var _value11=attr.expression.manipulate(block);_initial_props.push(_value11);var value_object=_value11;if(attr.expression.node.type!=='ObjectExpression'){value_object=x(_templateObject503||(_templateObject503=(0,_taggedTemplateLiteral2.default)([\"@get_spread_object(\",\")\"])),_value11);}change_object=value_object;}else{var obj=x(_templateObject504||(_templateObject504=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"])),name,attr.get_value(block));_initial_props.push(obj);change_object=obj;}changes.push(unchanged?x(_templateObject505||(_templateObject505=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"])),levels,i):condition?x(_templateObject506||(_templateObject506=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"])),condition,change_object):change_object);});block.chunks.init.push(b(_templateObject507||(_templateObject507=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tconst \",\" = [\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t];\\n\\t\\t\\t\\t\"])),levels,_initial_props));statements.push(b(_templateObject508||(_templateObject508=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfor (let #i = 0; #i < \",\".length; #i += 1) {\\n\\t\\t\\t\\t\\t\\t\",\" = @assign(\",\", \",\"[#i]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),levels,props,props,levels));if(all_dependencies.size){var condition=renderer.dirty(Array.from(all_dependencies));updates.push(b(_templateObject509||(_templateObject509=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tconst \",\" = \",\" ? @get_spread_update(\",\", [\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t]) : {}\\n\\t\\t\\t\\t\\t\"])),name_changes,condition,levels,changes));}else{updates.push(b(_templateObject510||(_templateObject510=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tconst \",\" = {};\\n\\t\\t\\t\\t\\t\"])),name_changes));}}else{dynamic_attributes.forEach(function(attribute){var dependencies=attribute.get_dependencies();if(dependencies.length>0){var _condition2=renderer.dirty(dependencies);updates.push(b(_templateObject511||(_templateObject511=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\\tif (\",\") \",\".\",\" = \",\";\\n\\t\\t\\t\\t\\t\\t\"])),_condition2,name_changes,attribute.name,attribute.get_value(block)));}});}}if(fragment_dependencies.size>0){updates.push(b(_templateObject512||(_templateObject512=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".$$scope = { dirty: #dirty, ctx: #ctx };\\n\\t\\t\\t\\t}\"])),renderer.dirty(Array.from(fragment_dependencies)),name_changes));}var munged_bindings=this.node.bindings.map(function(binding){component.has_reactive_assignments=true;if(binding.name==='this'){return bind_this(component,block,new BindingWrapper(block,binding,_this75),_this75.var);}var id=component.get_unique_name(\"\".concat(_this75.var.name,\"_\").concat(binding.name,\"_binding\"));renderer.add_to_context(id.name);var callee=renderer.reference(id);var updating=block.get_unique_name(\"updating_\".concat(binding.name));block.add_variable(updating);var snippet=binding.expression.manipulate(block);statements.push(b(_templateObject513||(_templateObject513=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" !== void 0) {\\n\\t\\t\\t\\t\\t\",\".\",\" = \",\";\\n\\t\\t\\t\\t}\"])),snippet,props,binding.name,snippet));updates.push(b(_templateObject514||(_templateObject514=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (!\",\" && \",\") {\\n\\t\\t\\t\\t\\t\",\" = true;\\n\\t\\t\\t\\t\\t\",\".\",\" = \",\";\\n\\t\\t\\t\\t\\t@add_flush_callback(() => \",\" = false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),updating,renderer.dirty(Array.from(binding.expression.dependencies)),updating,name_changes,binding.name,snippet,updating));var contextual_dependencies=Array.from(binding.expression.contextual_dependencies);var dependencies=Array.from(binding.expression.dependencies);var lhs=binding.raw_expression;if(binding.is_contextual&&binding.expression.node.type==='Identifier'){// bind:x={y} — we can't just do `y = x`, we need to\n// to `array[index] = x;\nvar _name3=binding.expression.node.name;var _block$bindings$get=block.bindings.get(_name3),object=_block$bindings$get.object,property=_block$bindings$get.property,_snippet4=_block$bindings$get.snippet;lhs=_snippet4;contextual_dependencies.push(object.name,property.name);}var params=[x(_templateObject515||(_templateObject515=(0,_taggedTemplateLiteral2.default)([\"#value\"])))];var args=[x(_templateObject516||(_templateObject516=(0,_taggedTemplateLiteral2.default)([\"#value\"])))];if(contextual_dependencies.length>0){contextual_dependencies.forEach(function(name){params.push({type:'Identifier',name:name});renderer.add_to_context(name,true);args.push(renderer.reference(name));});block.maintain_context=true;// TODO put this somewhere more logical\n}block.chunks.init.push(b(_templateObject517||(_templateObject517=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"(#value) {\\n\\t\\t\\t\\t\\t\",\"(\",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),id,callee,args));var invalidate_binding=b(_templateObject518||(_templateObject518=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" = #value;\\n\\t\\t\\t\\t\",\";\\n\\t\\t\\t\"])),lhs,renderer.invalidate(dependencies[0]));if(binding.expression.node.type==='MemberExpression'){invalidate_binding=b(_templateObject519||(_templateObject519=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif ($$self.$$.not_equal(\",\", #value)) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"])),lhs,invalidate_binding);}var body=b(_templateObject520||(_templateObject520=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"(\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),id,params,invalidate_binding);component.partly_hoisted.push(body);return b(_templateObject521||(_templateObject521=(0,_taggedTemplateLiteral2.default)([\"@binding_callbacks.push(() => @bind(\",\", '\",\"', \",\"));\"])),_this75.var,binding.name,id);});var munged_handlers=this.node.handlers.map(function(handler){var event_handler=new EventHandlerWrapper(handler,_this75);var snippet=event_handler.get_snippet(block);if(handler.modifiers.has('once'))snippet=x(_templateObject522||(_templateObject522=(0,_taggedTemplateLiteral2.default)([\"@once(\",\")\"])),snippet);return b(_templateObject523||(_templateObject523=(0,_taggedTemplateLiteral2.default)([\"\",\".$on(\\\"\",\"\\\", \",\");\"])),name,handler.name,snippet);});if(this.node.name==='svelte:component'){var switch_value=block.get_unique_name('switch_value');var switch_props=block.get_unique_name('switch_props');var snippet=this.node.expression.manipulate(block);block.chunks.init.push(b(_templateObject524||(_templateObject524=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tvar \",\" = \",\";\\n\\n\\t\\t\\t\\tfunction \",\"(#ctx) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\treturn \",\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\" = new \",\"(\",\"(#ctx));\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),switch_value,snippet,switch_props,(this.node.attributes.length>0||this.node.bindings.length>0)&&b(_templateObject525||(_templateObject525=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\"])),props&&b(_templateObject526||(_templateObject526=(0,_taggedTemplateLiteral2.default)([\"let \",\" = \",\";\"])),props,attribute_object)),statements,component_opts,switch_value,name,switch_value,switch_props,munged_bindings,munged_handlers));block.chunks.create.push(b(_templateObject527||(_templateObject527=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @create_component(\",\".$$.fragment);\"])),name,name));if(parent_nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject528||(_templateObject528=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @claim_component(\",\".$$.fragment, \",\");\"])),name,name,parent_nodes));}block.chunks.mount.push(b(_templateObject529||(_templateObject529=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t@mount_component(\",\", \",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),name,name,parent_node||'#target',parent_node?'null':'#anchor'));var anchor=this.get_or_create_anchor(block,parent_node,parent_nodes);var update_mount_node=this.get_update_mount_node(anchor);if(updates.length){block.chunks.update.push(b(_templateObject530||(_templateObject530=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"])),updates));}block.chunks.update.push(b(_templateObject531||(_templateObject531=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" !== (\",\" = \",\")) {\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t\\t\\tconst old_component = \",\";\\n\\t\\t\\t\\t\\t\\t@transition_out(old_component.$$.fragment, 1, 0, () => {\\n\\t\\t\\t\\t\\t\\t\\t@destroy_component(old_component, 1);\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t@check_outros();\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\" = new \",\"(\",\"(#ctx));\\n\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\t\\t@create_component(\",\".$$.fragment);\\n\\t\\t\\t\\t\\t\\t@transition_in(\",\".$$.fragment, 1);\\n\\t\\t\\t\\t\\t\\t@mount_component(\",\", \",\", \",\");\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else if (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),switch_value,switch_value,snippet,name,name,switch_value,name,switch_value,switch_props,munged_bindings,munged_handlers,name,name,name,update_mount_node,anchor,name,switch_value,updates.length>0&&b(_templateObject532||(_templateObject532=(0,_taggedTemplateLiteral2.default)([\"\",\".$set(\",\");\"])),name,name_changes)));block.chunks.intro.push(b(_templateObject533||(_templateObject533=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") @transition_in(\",\".$$.fragment, #local);\\n\\t\\t\\t\"])),name,name));block.chunks.outro.push(b(_templateObject534||(_templateObject534=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @transition_out(\",\".$$.fragment, #local);\"])),name,name));block.chunks.destroy.push(b(_templateObject535||(_templateObject535=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @destroy_component(\",\", \",\");\"])),name,name,parent_node?null:'detaching'));}else{var _expression12=this.node.name==='svelte:self'?component.name:this.renderer.reference(string_to_member_expression(this.node.name));block.chunks.init.push(b(_templateObject536||(_templateObject536=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\" = new \",\"(\",\");\\n\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"])),(this.node.attributes.length>0||this.node.bindings.length>0)&&b(_templateObject537||(_templateObject537=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\"])),props&&b(_templateObject538||(_templateObject538=(0,_taggedTemplateLiteral2.default)([\"let \",\" = \",\";\"])),props,attribute_object)),statements,name,_expression12,component_opts,munged_bindings,munged_handlers));if(has_css_custom_properties){block.chunks.create.push(b(_templateObject539||(_templateObject539=(0,_taggedTemplateLiteral2.default)([\"\",\" = @element(\\\"div\\\");\"])),css_custom_properties_wrapper));block.chunks.hydrate.push(b(_templateObject540||(_templateObject540=(0,_taggedTemplateLiteral2.default)([\"@set_style(\",\", \\\"display\\\", \\\"contents\\\");\"])),css_custom_properties_wrapper));this.node.css_custom_properties.forEach(function(attr){var dependencies=attr.get_dependencies();var should_cache=attr.should_cache();var last=should_cache&&block.get_unique_name(\"\".concat(attr.name.replace(/[^a-zA-Z_$]/g,'_'),\"_last\"));if(should_cache)block.add_variable(last);var value=attr.get_value(block);var init=should_cache?x(_templateObject541||(_templateObject541=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\"\"])),last,value):value;block.chunks.hydrate.push(b(_templateObject542||(_templateObject542=(0,_taggedTemplateLiteral2.default)([\"@set_style(\",\", \\\"\",\"\\\", \",\");\"])),css_custom_properties_wrapper,attr.name,init));if(dependencies.length>0){var _condition3=block.renderer.dirty(dependencies);if(should_cache)_condition3=x(_templateObject543||(_templateObject543=(0,_taggedTemplateLiteral2.default)([\"\",\" && (\",\" !== (\",\" = \",\"))\"])),_condition3,last,last,value);block.chunks.update.push(b(_templateObject544||(_templateObject544=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\\t\\t@set_style(\",\", \\\"\",\"\\\", \",\");\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\"])),_condition3,css_custom_properties_wrapper,attr.name,should_cache?last:value));}});}block.chunks.create.push(b(_templateObject545||(_templateObject545=(0,_taggedTemplateLiteral2.default)([\"@create_component(\",\".$$.fragment);\"])),name));if(parent_nodes&&this.renderer.options.hydratable){var nodes=parent_nodes;if(has_css_custom_properties){nodes=block.get_unique_name(\"\".concat(css_custom_properties_wrapper.name,\"_nodes\"));block.chunks.claim.push(b(_templateObject546||(_templateObject546=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\",\" = @claim_element(\",\", \\\"DIV\\\", { style: true })\\n\\t\\t\\t\\t\\t\\tvar \",\" = @children(\",\");\\n\\t\\t\\t\\t\\t\"])),css_custom_properties_wrapper,parent_nodes,nodes,css_custom_properties_wrapper));}block.chunks.claim.push(b(_templateObject547||(_templateObject547=(0,_taggedTemplateLiteral2.default)([\"@claim_component(\",\".$$.fragment, \",\");\"])),name,nodes));}if(has_css_custom_properties){if(parent_node){block.chunks.mount.push(b(_templateObject548||(_templateObject548=(0,_taggedTemplateLiteral2.default)([\"@append(\",\", \",\")\"])),parent_node,css_custom_properties_wrapper));if(is_head(parent_node)){block.chunks.destroy.push(b(_templateObject549||(_templateObject549=(0,_taggedTemplateLiteral2.default)([\"@detach(\",\");\"])),css_custom_properties_wrapper));}}else{block.chunks.mount.push(b(_templateObject550||(_templateObject550=(0,_taggedTemplateLiteral2.default)([\"@insert(#target, \",\", #anchor);\"])),css_custom_properties_wrapper));// TODO we eventually need to consider what happens to elements\n// that belong to the same outgroup as an outroing element...\nblock.chunks.destroy.push(b(_templateObject551||(_templateObject551=(0,_taggedTemplateLiteral2.default)([\"if (detaching) @detach(\",\");\"])),css_custom_properties_wrapper));}block.chunks.mount.push(b(_templateObject552||(_templateObject552=(0,_taggedTemplateLiteral2.default)([\"@mount_component(\",\", \",\", null);\"])),name,css_custom_properties_wrapper));}else{block.chunks.mount.push(b(_templateObject553||(_templateObject553=(0,_taggedTemplateLiteral2.default)([\"@mount_component(\",\", \",\", \",\");\"])),name,parent_node||'#target',parent_node?'null':'#anchor'));}block.chunks.intro.push(b(_templateObject554||(_templateObject554=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@transition_in(\",\".$$.fragment, #local);\\n\\t\\t\\t\"])),name));if(updates.length){block.chunks.update.push(b(_templateObject555||(_templateObject555=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\".$set(\",\");\\n\\t\\t\\t\\t\"])),updates,name,name_changes));}block.chunks.destroy.push(b(_templateObject556||(_templateObject556=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@destroy_component(\",\", \",\");\\n\\t\\t\\t\"])),name,parent_node?null:'detaching'));block.chunks.outro.push(b(_templateObject557||(_templateObject557=(0,_taggedTemplateLiteral2.default)([\"@transition_out(\",\".$$.fragment, #local);\"])),name));}}}]);return InlineComponentWrapper;}(Wrapper);function get_slot_data(values){var block=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return{type:'ObjectExpression',properties:Array.from(values.values()).filter(function(attribute){return attribute.name!=='name';}).map(function(attribute){if(attribute.is_spread){var argument=get_spread_value(block,attribute);return{type:'SpreadElement',argument:argument};}var value=get_value(block,attribute);return p(_templateObject558||(_templateObject558=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"])),attribute.name,value);})};}function get_value(block,attribute){if(attribute.is_true)return x(_templateObject559||(_templateObject559=(0,_taggedTemplateLiteral2.default)([\"true\"])));if(attribute.chunks.length===0)return x(_templateObject560||(_templateObject560=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"])));var value=attribute.chunks.map(function(chunk){return chunk.type==='Text'?string_literal(chunk.data):block?chunk.manipulate(block):chunk.node;}).reduce(function(lhs,rhs){return x(_templateObject561||(_templateObject561=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"])),lhs,rhs);});if(attribute.chunks.length>1&&attribute.chunks[0].type!=='Text'){value=x(_templateObject562||(_templateObject562=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\" + \",\"\"])),value);}return value;}function get_spread_value(block,attribute){return block?attribute.expression.manipulate(block):attribute.expression.node;}var SlotWrapper=/*#__PURE__*/function(_Wrapper16){(0,_inherits2.default)(SlotWrapper,_Wrapper16);var _super57=_createSuper(SlotWrapper);function SlotWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this76;(0,_classCallCheck2.default)(this,SlotWrapper);_this76=_super57.call(this,renderer,block,parent,node);_this76.fallback=null;_this76.var={type:'Identifier',name:'slot'};_this76.dependencies=new Set(['$$scope']);_this76.cannot_use_innerhtml();_this76.not_static_content();if(_this76.node.children.length){_this76.fallback=block.child({comment:create_debugging_comment(_this76.node.children[0],_this76.renderer.component),name:_this76.renderer.component.get_unique_name('fallback_block'),type:'fallback'});renderer.blocks.push(_this76.fallback);}_this76.fragment=new FragmentWrapper(renderer,_this76.fallback,node.children,(0,_assertThisInitialized2.default)(_this76),strip_whitespace,next_sibling);_this76.node.values.forEach(function(attribute){add_to_set(_this76.dependencies,attribute.dependencies);});block.add_dependencies(_this76.dependencies);// we have to do this, just in case\nblock.add_intro();block.add_outro();return _this76;}(0,_createClass2.default)(SlotWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var _this77=this;var renderer=this.renderer;var slot_name=this.node.slot_name;if(this.slot_block){block=this.slot_block;}var get_slot_changes_fn;var get_slot_spread_changes_fn;var get_slot_context_fn;if(this.node.values.size>0){get_slot_changes_fn=renderer.component.get_unique_name(\"get_\".concat(sanitize(slot_name),\"_slot_changes\"));get_slot_context_fn=renderer.component.get_unique_name(\"get_\".concat(sanitize(slot_name),\"_slot_context\"));var changes=x(_templateObject563||(_templateObject563=(0,_taggedTemplateLiteral2.default)([\"{}\"])));var spread_dynamic_dependencies=new Set();this.node.values.forEach(function(attribute){if(attribute.type==='Spread'){add_to_set(spread_dynamic_dependencies,Array.from(attribute.dependencies).filter(function(name){return _this77.is_dependency_dynamic(name);}));}else{var _dynamic_dependencies=Array.from(attribute.dependencies).filter(function(name){return _this77.is_dependency_dynamic(name);});if(_dynamic_dependencies.length>0){changes.properties.push(p(_templateObject564||(_templateObject564=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"])),attribute.name,renderer.dirty(_dynamic_dependencies)));}}});renderer.blocks.push(b(_templateObject565||(_templateObject565=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tconst \",\" = #dirty => \",\";\\n\\t\\t\\t\\tconst \",\" = #ctx => \",\";\\n\\t\\t\\t\"])),get_slot_changes_fn,changes,get_slot_context_fn,get_slot_data(this.node.values,block)));if(spread_dynamic_dependencies.size){get_slot_spread_changes_fn=renderer.component.get_unique_name(\"get_\".concat(sanitize(slot_name),\"_slot_spread_changes\"));renderer.blocks.push(b(_templateObject566||(_templateObject566=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tconst \",\" = #dirty => \",\";\\n\\t\\t\\t\\t\"])),get_slot_spread_changes_fn,renderer.dirty(Array.from(spread_dynamic_dependencies))));}}else{get_slot_changes_fn='null';get_slot_context_fn='null';}var has_fallback=!!this.fallback;if(this.fallback){this.fragment.render(this.fallback,null,x(_templateObject567||(_templateObject567=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]))));has_fallback=this.fallback.has_content();if(!has_fallback){renderer.remove_block(this.fallback);}}var slot=block.get_unique_name(\"\".concat(sanitize(slot_name),\"_slot\"));var slot_definition=block.get_unique_name(\"\".concat(sanitize(slot_name),\"_slot_template\"));var slot_or_fallback=has_fallback?block.get_unique_name(\"\".concat(sanitize(slot_name),\"_slot_or_fallback\")):slot;block.chunks.init.push(b(_templateObject568||(_templateObject568=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tconst \",\" = \",\".\",\";\\n\\t\\t\\tconst \",\" = @create_slot(\",\", #ctx, \",\", \",\");\\n\\t\\t\\t\",\"\\n\\t\\t\"])),slot_definition,renderer.reference('#slots'),slot_name,slot,slot_definition,renderer.reference('$$scope'),get_slot_context_fn,has_fallback?b(_templateObject569||(_templateObject569=(0,_taggedTemplateLiteral2.default)([\"const \",\" = \",\" || \",\"(#ctx);\"])),slot_or_fallback,slot,this.fallback.name):null));block.chunks.create.push(b(_templateObject570||(_templateObject570=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".c();\"])),slot_or_fallback,slot_or_fallback));if(renderer.options.hydratable){block.chunks.claim.push(b(_templateObject571||(_templateObject571=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".l(\",\");\"])),slot_or_fallback,slot_or_fallback,parent_nodes));}block.chunks.mount.push(b(_templateObject572||(_templateObject572=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t}\\n\\t\\t\"])),slot_or_fallback,slot_or_fallback,parent_node||'#target',parent_node?'null':'#anchor'));block.chunks.intro.push(b(_templateObject573||(_templateObject573=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", #local);\"])),slot_or_fallback));block.chunks.outro.push(b(_templateObject574||(_templateObject574=(0,_taggedTemplateLiteral2.default)([\"@transition_out(\",\", #local);\"])),slot_or_fallback));var dynamic_dependencies=Array.from(this.dependencies).filter(function(name){return _this77.is_dependency_dynamic(name);});var fallback_dynamic_dependencies=has_fallback?Array.from(this.fallback.dependencies).filter(function(name){return _this77.is_dependency_dynamic(name);}):[];var condition=renderer.dirty(dynamic_dependencies);if(block.has_outros){condition=x(_templateObject575||(_templateObject575=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"])),condition);}// conditions to treat everything as dirty\nvar all_dirty_conditions=[get_slot_spread_changes_fn?x(_templateObject576||(_templateObject576=(0,_taggedTemplateLiteral2.default)([\"\",\"(#dirty)\"])),get_slot_spread_changes_fn):null,block.has_outros?x(_templateObject577||(_templateObject577=(0,_taggedTemplateLiteral2.default)([\"!#current\"]))):null].filter(Boolean);var all_dirty_condition=all_dirty_conditions.length?all_dirty_conditions.reduce(function(condition1,condition2){return x(_templateObject578||(_templateObject578=(0,_taggedTemplateLiteral2.default)([\"\",\" || \",\"\"])),condition1,condition2);}):null;var slot_update;if(all_dirty_condition){var dirty=x(_templateObject579||(_templateObject579=(0,_taggedTemplateLiteral2.default)([\"\",\" ? @get_all_dirty_from_scope(\",\") : @get_slot_changes(\",\", \",\", #dirty, \",\")\"])),all_dirty_condition,renderer.reference('$$scope'),slot_definition,renderer.reference('$$scope'),get_slot_changes_fn);slot_update=b(_templateObject580||(_templateObject580=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\".p && \",\") {\\n\\t\\t\\t\\t\\t@update_slot_base(\",\", \",\", #ctx, \",\", \",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),slot,condition,slot,slot_definition,renderer.reference('$$scope'),dirty,get_slot_context_fn);}else{slot_update=b(_templateObject581||(_templateObject581=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\".p && \",\") {\\n\\t\\t\\t\\t\\t@update_slot(\",\", \",\", #ctx, \",\", #dirty, \",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),slot,condition,slot,slot_definition,renderer.reference('$$scope'),get_slot_changes_fn,get_slot_context_fn);}var fallback_condition=renderer.dirty(fallback_dynamic_dependencies);var fallback_dirty=x(_templateObject582||(_templateObject582=(0,_taggedTemplateLiteral2.default)([\"#dirty\"])));if(block.has_outros){fallback_condition=x(_templateObject583||(_templateObject583=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"])),fallback_condition);fallback_dirty=x(_templateObject584||(_templateObject584=(0,_taggedTemplateLiteral2.default)([\"!#current ? \",\" : \",\"\"])),renderer.get_initial_dirty(),fallback_dirty);}var fallback_update=has_fallback&&fallback_dynamic_dependencies.length>0&&b(_templateObject585||(_templateObject585=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tif (\",\" && \",\".p && \",\") {\\n\\t\\t\\t\\t\",\".p(#ctx, \",\");\\n\\t\\t\\t}\\n\\t\\t\"])),slot_or_fallback,slot_or_fallback,fallback_condition,slot_or_fallback,fallback_dirty);if(fallback_update){block.chunks.update.push(b(_templateObject586||(_templateObject586=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),slot,slot_update,fallback_update));}else{block.chunks.update.push(b(_templateObject587||(_templateObject587=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),slot,slot_update));}block.chunks.destroy.push(b(_templateObject588||(_templateObject588=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".d(detaching);\"])),slot_or_fallback,slot_or_fallback));}},{key:\"is_dependency_dynamic\",value:function is_dependency_dynamic(name){if(name==='$$scope')return true;if(this.node.scope.is_let(name))return true;if(is_reserved_keyword(name))return true;var variable=this.renderer.component.var_lookup.get(name);return is_dynamic(variable);}}]);return SlotWrapper;}(Wrapper);var TitleWrapper=/*#__PURE__*/function(_Wrapper17){(0,_inherits2.default)(TitleWrapper,_Wrapper17);var _super58=_createSuper(TitleWrapper);function TitleWrapper(renderer,block,parent,node,_strip_whitespace,_next_sibling){(0,_classCallCheck2.default)(this,TitleWrapper);return _super58.call(this,renderer,block,parent,node);}(0,_createClass2.default)(TitleWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){var is_dynamic=!!this.node.children.find(function(node){return node.type!=='Text';});if(is_dynamic){var _value12;var all_dependencies=new Set();// TODO some of this code is repeated in Tag.ts — would be good to\n// DRY it out if that's possible without introducing crazy indirection\nif(this.node.children.length===1){// single {tag} — may be a non-string\n// @ts-ignore todo: check this\nvar _expression13=this.node.children[0].expression;_value12=_expression13.manipulate(block);add_to_set(all_dependencies,_expression13.dependencies);}else{// '{foo} {bar}' — treat as string concatenation\n_value12=this.node.children.map(function(chunk){if(chunk.type==='Text')return string_literal(chunk.data);chunk.expression.dependencies.forEach(function(d){all_dependencies.add(d);});return chunk.expression.manipulate(block);}).reduce(function(lhs,rhs){return x(_templateObject589||(_templateObject589=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"])),lhs,rhs);});if(this.node.children[0].type!=='Text'){_value12=x(_templateObject590||(_templateObject590=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\" + \",\"\"])),_value12);}}var last=this.node.should_cache&&block.get_unique_name('title_value');if(this.node.should_cache)block.add_variable(last);var init=this.node.should_cache?x(_templateObject591||(_templateObject591=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\"\"])),last,_value12):_value12;block.chunks.init.push(b(_templateObject592||(_templateObject592=(0,_taggedTemplateLiteral2.default)([\"@_document.title = \",\";\"])),init));var updater=b(_templateObject593||(_templateObject593=(0,_taggedTemplateLiteral2.default)([\"@_document.title = \",\";\"])),this.node.should_cache?last:_value12);if(all_dependencies.size){var dependencies=Array.from(all_dependencies);var condition=block.renderer.dirty(dependencies);if(block.has_outros){condition=x(_templateObject594||(_templateObject594=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"])),condition);}if(this.node.should_cache){condition=x(_templateObject595||(_templateObject595=(0,_taggedTemplateLiteral2.default)([\"\",\" && (\",\" !== (\",\" = \",\"))\"])),condition,last,last,_value12);}block.chunks.update.push(b(_templateObject596||(_templateObject596=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\"])),condition,updater));}}else{var _value13=this.node.children.length>0?string_literal(this.node.children[0].data):x(_templateObject597||(_templateObject597=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"])));block.chunks.hydrate.push(b(_templateObject598||(_templateObject598=(0,_taggedTemplateLiteral2.default)([\"@_document.title = \",\";\"])),_value13));}}}]);return TitleWrapper;}(Wrapper);var associated_events={innerWidth:'resize',innerHeight:'resize',outerWidth:'resize',outerHeight:'resize',scrollX:'scroll',scrollY:'scroll'};var properties$1={scrollX:'pageXOffset',scrollY:'pageYOffset'};var readonly=new Set(['innerWidth','innerHeight','outerWidth','outerHeight','online']);var WindowWrapper=/*#__PURE__*/function(_Wrapper18){(0,_inherits2.default)(WindowWrapper,_Wrapper18);var _super59=_createSuper(WindowWrapper);function WindowWrapper(renderer,block,parent,node){var _this78;(0,_classCallCheck2.default)(this,WindowWrapper);_this78=_super59.call(this,renderer,block,parent,node);_this78.handlers=_this78.node.handlers.map(function(handler){return new EventHandlerWrapper(handler,(0,_assertThisInitialized2.default)(_this78));});return _this78;}(0,_createClass2.default)(WindowWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){var renderer=this.renderer;var component=renderer.component;var events={};var bindings={};add_actions(block,'@_window',this.node.actions);add_event_handlers(block,'@_window',this.handlers);this.node.bindings.forEach(function(binding){// TODO: what if it's a MemberExpression?\nvar binding_name=binding.expression.node.name;// in dev mode, throw if read-only values are written to\nif(readonly.has(binding.name)){renderer.readonly.add(binding_name);}bindings[binding.name]=binding_name;// bind:online is a special case, we need to listen for two separate events\nif(binding.name==='online')return;var associated_event=associated_events[binding.name];var property=properties$1[binding.name]||binding.name;if(!events[associated_event])events[associated_event]=[];events[associated_event].push({name:binding_name,value:property});});var scrolling=block.get_unique_name('scrolling');var clear_scrolling=block.get_unique_name('clear_scrolling');var scrolling_timeout=block.get_unique_name('scrolling_timeout');Object.keys(events).forEach(function(event){var id=block.get_unique_name(\"onwindow\".concat(event));var props=events[event];renderer.add_to_context(id.name);var fn=renderer.reference(id.name);if(event==='scroll'){// TODO other bidirectional bindings...\nblock.add_variable(scrolling,x(_templateObject599||(_templateObject599=(0,_taggedTemplateLiteral2.default)([\"false\"]))));block.add_variable(clear_scrolling,x(_templateObject600||(_templateObject600=(0,_taggedTemplateLiteral2.default)([\"() => { \",\" = false }\"])),scrolling));block.add_variable(scrolling_timeout);var condition=bindings.scrollX&&bindings.scrollY?x(_templateObject601||(_templateObject601=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\" in this._state || \\\"\",\"\\\" in this._state\"])),bindings.scrollX,bindings.scrollY):x(_templateObject602||(_templateObject602=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\" in this._state\"])),bindings.scrollX||bindings.scrollY);var scrollX=bindings.scrollX&&x(_templateObject603||(_templateObject603=(0,_taggedTemplateLiteral2.default)([\"this._state.\",\"\"])),bindings.scrollX);var scrollY=bindings.scrollY&&x(_templateObject604||(_templateObject604=(0,_taggedTemplateLiteral2.default)([\"this._state.\",\"\"])),bindings.scrollY);renderer.meta_bindings.push(b(_templateObject605||(_templateObject605=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t@_scrollTo(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"])),condition,scrollX||'@_window.pageXOffset',scrollY||'@_window.pageYOffset',scrollX&&\"\".concat(scrollX,\" = @_window.pageXOffset;\"),scrollY&&\"\".concat(scrollY,\" = @_window.pageYOffset;\")));block.event_listeners.push(x(_templateObject606||(_templateObject606=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t@listen(@_window, \\\"\",\"\\\", () => {\\n\\t\\t\\t\\t\\t\\t\",\" = true;\\n\\t\\t\\t\\t\\t\\t@_clearTimeout(\",\");\\n\\t\\t\\t\\t\\t\\t\",\" = @_setTimeout(\",\", 100);\\n\\t\\t\\t\\t\\t\\t\",\"();\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\"])),event,scrolling,scrolling_timeout,scrolling_timeout,clear_scrolling,fn));}else{props.forEach(function(prop){renderer.meta_bindings.push(b(_templateObject607||(_templateObject607=(0,_taggedTemplateLiteral2.default)([\"this._state.\",\" = @_window.\",\";\"])),prop.name,prop.value));});block.event_listeners.push(x(_templateObject608||(_templateObject608=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t@listen(@_window, \\\"\",\"\\\", \",\")\\n\\t\\t\\t\\t\"])),event,fn));}component.partly_hoisted.push(b(_templateObject609||(_templateObject609=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),id,props.map(function(prop){return renderer.invalidate(prop.name,x(_templateObject610||(_templateObject610=(0,_taggedTemplateLiteral2.default)([\"\",\" = @_window.\",\"\"])),prop.name,prop.value));})));block.chunks.init.push(b(_templateObject611||(_templateObject611=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@add_render_callback(\",\");\\n\\t\\t\\t\"])),fn));component.has_reactive_assignments=true;});// special case... might need to abstract this out if we add more special cases\nif(bindings.scrollX||bindings.scrollY){var condition=renderer.dirty([bindings.scrollX,bindings.scrollY].filter(Boolean));var scrollX=bindings.scrollX?renderer.reference(bindings.scrollX):x(_templateObject612||(_templateObject612=(0,_taggedTemplateLiteral2.default)([\"@_window.pageXOffset\"])));var scrollY=bindings.scrollY?renderer.reference(bindings.scrollY):x(_templateObject613||(_templateObject613=(0,_taggedTemplateLiteral2.default)([\"@_window.pageYOffset\"])));block.chunks.update.push(b(_templateObject614||(_templateObject614=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" && !\",\") {\\n\\t\\t\\t\\t\\t\",\" = true;\\n\\t\\t\\t\\t\\t@_clearTimeout(\",\");\\n\\t\\t\\t\\t\\t@_scrollTo(\",\", \",\");\\n\\t\\t\\t\\t\\t\",\" = @_setTimeout(\",\", 100);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),condition,scrolling,scrolling,scrolling_timeout,scrollX,scrollY,scrolling_timeout,clear_scrolling));}// another special case. (I'm starting to think these are all special cases.)\nif(bindings.online){var _id3=block.get_unique_name('onlinestatuschanged');var name=bindings.online;renderer.add_to_context(_id3.name);var reference=renderer.reference(_id3.name);component.partly_hoisted.push(b(_templateObject615||(_templateObject615=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),_id3,renderer.invalidate(name,x(_templateObject616||(_templateObject616=(0,_taggedTemplateLiteral2.default)([\"\",\" = @_navigator.onLine\"])),name))));block.chunks.init.push(b(_templateObject617||(_templateObject617=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@add_render_callback(\",\");\\n\\t\\t\\t\"])),reference));block.event_listeners.push(x(_templateObject618||(_templateObject618=(0,_taggedTemplateLiteral2.default)([\"@listen(@_window, \\\"online\\\", \",\")\"])),reference),x(_templateObject619||(_templateObject619=(0,_taggedTemplateLiteral2.default)([\"@listen(@_window, \\\"offline\\\", \",\")\"])),reference));component.has_reactive_assignments=true;}}}]);return WindowWrapper;}(Wrapper);function link(next,prev){prev.next=next;if(next)next.prev=prev;}var wrappers={AwaitBlock:AwaitBlockWrapper,Body:BodyWrapper,Comment:null,DebugTag:DebugTagWrapper,EachBlock:EachBlockWrapper,Element:ElementWrapper,Head:HeadWrapper,IfBlock:IfBlockWrapper,InlineComponent:InlineComponentWrapper,KeyBlock:KeyBlockWrapper,MustacheTag:MustacheTagWrapper,Options:null,RawMustacheTag:RawMustacheTagWrapper,Slot:SlotWrapper,SlotTemplate:SlotTemplateWrapper,Text:TextWrapper,Title:TitleWrapper,Window:WindowWrapper};function trimmable_at(child,next_sibling){// Whitespace is trimmable if one of the following is true:\n// The child and its sibling share a common nearest each block (not at an each block boundary)\n// The next sibling's previous node is an each block\nreturn next_sibling.node.find_nearest(/EachBlock/)===child.find_nearest(/EachBlock/)||next_sibling.node.prev.type==='EachBlock';}var FragmentWrapper=/*#__PURE__*/function(){function FragmentWrapper(renderer,block,nodes,parent,strip_whitespace,next_sibling){(0,_classCallCheck2.default)(this,FragmentWrapper);this.nodes=[];var last_child;var window_wrapper;var i=nodes.length;while(i--){var child=nodes[i];if(!child.type){throw new Error('missing type');}if(!(child.type in wrappers)){throw new Error(\"TODO implement \".concat(child.type));}// special case — this is an easy way to remove whitespace surrounding\n// <svelte:window/>. lil hacky but it works\nif(child.type==='Window'){window_wrapper=new WindowWrapper(renderer,block,parent,child);continue;}if(child.type==='Text'){var _data4=child.data;// We want to remove trailing whitespace inside an element/component/block,\n// *unless* there is no whitespace between this node and its next sibling\nif(this.nodes.length===0){var should_trim=next_sibling?next_sibling.node.type==='Text'&&/^\\s/.test(next_sibling.node.data)&&trimmable_at(child,next_sibling):!child.has_ancestor('EachBlock');if(should_trim){_data4=trim_end(_data4);if(!_data4)continue;}}// glue text nodes (which could e.g. be separated by comments) together\nif(last_child&&last_child.node.type==='Text'){last_child.data=_data4+last_child.data;continue;}var wrapper=new TextWrapper(renderer,block,parent,child,_data4);if(wrapper.skip)continue;this.nodes.unshift(wrapper);link(last_child,last_child=wrapper);}else{var _Wrapper19=wrappers[child.type];if(!_Wrapper19)continue;var _wrapper2=new _Wrapper19(renderer,block,parent,child,strip_whitespace,last_child||next_sibling);this.nodes.unshift(_wrapper2);link(last_child,last_child=_wrapper2);}}if(strip_whitespace){var first=this.nodes[0];if(first&&first.node.type==='Text'){first.data=trim_start(first.data);if(!first.data){first.var=null;this.nodes.shift();if(this.nodes[0]){this.nodes[0].prev=null;}}}}if(window_wrapper){this.nodes.unshift(window_wrapper);link(last_child,window_wrapper);}}(0,_createClass2.default)(FragmentWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){for(var _i39=0;_i39<this.nodes.length;_i39+=1){this.nodes[_i39].render(block,parent_node,parent_nodes);}}}]);return FragmentWrapper;}();var Renderer=/*#__PURE__*/function(){function Renderer(component,options){var _this79=this;(0,_classCallCheck2.default)(this,Renderer);this.context=[];this.initial_context=[];this.context_lookup=new Map();this.blocks=[];this.readonly=new Set();this.meta_bindings=[];// initial values for e.g. window.innerWidth, if there's a <svelte:window> meta tag\nthis.binding_groups=new Map();this.component=component;this.options=options;this.locate=component.locate;// TODO messy\nthis.file_var=options.dev&&this.component.get_unique_name('file');component.vars.filter(function(v){return!v.hoistable||v.export_name&&!v.module;}).forEach(function(v){return _this79.add_to_context(v.name);});// ensure store values are included in context\ncomponent.vars.filter(function(v){return v.subscribable;}).forEach(function(v){return _this79.add_to_context(\"$\".concat(v.name));});reserved_keywords.forEach(function(keyword){if(component.var_lookup.has(keyword)){_this79.add_to_context(keyword);}});if(component.slots.size>0){this.add_to_context('$$scope');this.add_to_context('#slots');}if(this.binding_groups.size>0){this.add_to_context('$$binding_groups');}// main block\nthis.block=new Block$1({renderer:this,name:null,type:'component',key:null,bindings:new Map(),dependencies:new Set()});this.block.has_update_method=true;this.fragment=new FragmentWrapper(this,this.block,component.fragment.children,null,true,null);// TODO messy\nthis.blocks.forEach(function(block){if(block instanceof Block$1){block.assign_variable_names();}});this.block.assign_variable_names();this.fragment.render(this.block,null,x(_templateObject620||(_templateObject620=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]))));this.context_overflow=this.context.length>31;this.context.forEach(function(member){var variable=member.variable;if(variable){member.priority+=2;if(variable.mutated||variable.reassigned)member.priority+=4;// these determine whether variable is included in initial context\n// array, so must have the highest priority\nif(variable.is_reactive_dependency&&(variable.mutated||variable.reassigned))member.priority+=16;if(variable.export_name)member.priority+=32;if(variable.referenced)member.priority+=64;}else if(member.is_non_contextual){// determine whether variable is included in initial context\n// array, so must have the highest priority\nmember.priority+=8;}if(!member.is_contextual){member.priority+=1;}});this.context.sort(function(a,b){return b.priority-a.priority||a.index.value-b.index.value;});this.context.forEach(function(member,i){return member.index.value=i;});var i=this.context.length;while(i--){var member=this.context[i];if(member.variable){if(member.variable.referenced||member.variable.export_name||member.variable.is_reactive_dependency&&(member.variable.mutated||member.variable.reassigned))break;}else if(member.is_non_contextual){break;}}this.initial_context=this.context.slice(0,i+1);}(0,_createClass2.default)(Renderer,[{key:\"add_to_context\",value:function add_to_context(name){var contextual=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!this.context_lookup.has(name)){var _member2={name:name,index:{type:'Literal',value:this.context.length},is_contextual:false,is_non_contextual:false,variable:null,priority:0};this.context_lookup.set(name,_member2);this.context.push(_member2);}var member=this.context_lookup.get(name);if(contextual){member.is_contextual=true;}else{member.is_non_contextual=true;member.variable=this.component.var_lookup.get(name);}return member;}},{key:\"invalidate\",value:function invalidate(name,value){var main_execution_context=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return renderer_invalidate(this,name,value,main_execution_context);}},{key:\"dirty\",value:function dirty(names){var is_reactive_declaration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var renderer=this;var dirty=is_reactive_declaration?x(_templateObject621||(_templateObject621=(0,_taggedTemplateLiteral2.default)([\"$$self.$$.dirty\"]))):x(_templateObject622||(_templateObject622=(0,_taggedTemplateLiteral2.default)([\"#dirty\"])));var get_bitmask=function get_bitmask(){var bitmask=[];names.forEach(function(name){var member=renderer.context_lookup.get(name);if(!member)return;if(member.index.value===-1){throw new Error('unset index');}var value=member.index.value;var i=value/31|0;var n=1<<value%31;if(!bitmask[i])bitmask[i]={n:0,names:[]};bitmask[i].n|=n;bitmask[i].names.push(name);});return bitmask;};// TODO: context-overflow make it less gross\nreturn{// Using a ParenthesizedExpression allows us to create\n// the expression lazily. TODO would be better if\n// context was determined before rendering, so that\n// this indirection was unnecessary\ntype:'ParenthesizedExpression',get expression(){var bitmask=get_bitmask();if(!bitmask.length){return x(_templateObject623||(_templateObject623=(0,_taggedTemplateLiteral2.default)([\"\",\" & /*\",\"*/ 0\"])),dirty,names.join(', '));}if(renderer.context_overflow){return bitmask.map(function(b,i){return{b:b,i:i};}).filter(function(_ref20){var b=_ref20.b;return b;}).map(function(_ref21){var b=_ref21.b,i=_ref21.i;return x(_templateObject624||(_templateObject624=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"] & /*\",\"*/ \",\"\"])),dirty,i,b.names.join(', '),b.n);}).reduce(function(lhs,rhs){return x(_templateObject625||(_templateObject625=(0,_taggedTemplateLiteral2.default)([\"\",\" | \",\"\"])),lhs,rhs);});}return x(_templateObject626||(_templateObject626=(0,_taggedTemplateLiteral2.default)([\"\",\" & /*\",\"*/ \",\"\"])),dirty,names.join(', '),bitmask[0].n);}};}// NOTE: this method may be called before this.context_overflow / this.context is fully defined\n// therefore, they can only be evaluated later in a getter function\n},{key:\"get_initial_dirty\",value:function get_initial_dirty(){var _this=this;// TODO: context-overflow make it less gross\nvar val=x(_templateObject627||(_templateObject627=(0,_taggedTemplateLiteral2.default)([\"-1\"])));return{get type(){return _this.context_overflow?'ArrayExpression':'UnaryExpression';},// as [-1]\nget elements(){var elements=[];for(var _i40=0;_i40<_this.context.length;_i40+=31){elements.push(val);}return elements;},// as -1\noperator:val.operator,prefix:val.prefix,argument:val.argument};}},{key:\"reference\",value:function reference(node){var ctx=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'#ctx';if(typeof node==='string'){node={type:'Identifier',name:node};}var _flatten_reference6=flatten_reference(node),name=_flatten_reference6.name,nodes=_flatten_reference6.nodes;var member=this.context_lookup.get(name);// TODO is this correct?\nif(this.component.var_lookup.get(name)){this.component.add_reference(name);}if(member!==undefined){var replacement=x(_templateObject628||(_templateObject628=(0,_taggedTemplateLiteral2.default)([\"/*\",\"*/ \",\"[\",\"]\"])),member.name,ctx,member.index);if(nodes[0].loc)replacement.object.loc=nodes[0].loc;nodes[0]=replacement;return nodes.reduce(function(lhs,rhs){return x(_templateObject629||(_templateObject629=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"])),lhs,rhs);});}return node;}},{key:\"remove_block\",value:function remove_block(block){this.blocks.splice(this.blocks.indexOf(block),1);}}]);return Renderer;}();var charToInteger$1={};var chars$1='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';for(var i$2=0;i$2<chars$1.length;i$2++){charToInteger$1[chars$1.charCodeAt(i$2)]=i$2;}function decode$1(mappings){var decoded=[];var line=[];var segment=[0,0,0,0,0];var j=0;for(var i=0,shift=0,value=0;i<mappings.length;i++){var c=mappings.charCodeAt(i);if(c===44){// \",\"\nsegmentify$1(line,segment,j);j=0;}else if(c===59){// \";\"\nsegmentify$1(line,segment,j);j=0;decoded.push(line);line=[];segment[0]=0;}else{var integer=charToInteger$1[c];if(integer===undefined){throw new Error('Invalid character ('+String.fromCharCode(c)+')');}var hasContinuationBit=integer&32;integer&=31;value+=integer<<shift;if(hasContinuationBit){shift+=5;}else{var shouldNegate=value&1;value>>>=1;if(shouldNegate){value=value===0?-0x80000000:-value;}segment[j]+=value;j++;value=shift=0;// reset\n}}}segmentify$1(line,segment,j);decoded.push(line);return decoded;}function segmentify$1(line,segment,j){// This looks ugly, but we're creating specialized arrays with a specific\n// length. This is much faster than creating a new array (which v8 expands to\n// a capacity of 17 after pushing the first item), or slicing out a subarray\n// (which is slow). Length 4 is assumed to be the most frequent, followed by\n// length 5 (since not everything will have an associated name), followed by\n// length 1 (it's probably rare for a source substring to not have an\n// associated segment data).\nif(j===4)line.push([segment[0],segment[1],segment[2],segment[3]]);else if(j===5)line.push([segment[0],segment[1],segment[2],segment[3],segment[4]]);else if(j===1)line.push([segment[0]]);}function encode$1(decoded){var sourceFileIndex=0;// second field\nvar sourceCodeLine=0;// third field\nvar sourceCodeColumn=0;// fourth field\nvar nameIndex=0;// fifth field\nvar mappings='';for(var i=0;i<decoded.length;i++){var line=decoded[i];if(i>0)mappings+=';';if(line.length===0)continue;var generatedCodeColumn=0;// first field\nvar lineMappings=[];for(var _i=0,line_1=line;_i<line_1.length;_i++){var segment=line_1[_i];var segmentMappings=encodeInteger$1(segment[0]-generatedCodeColumn);generatedCodeColumn=segment[0];if(segment.length>1){segmentMappings+=encodeInteger$1(segment[1]-sourceFileIndex)+encodeInteger$1(segment[2]-sourceCodeLine)+encodeInteger$1(segment[3]-sourceCodeColumn);sourceFileIndex=segment[1];sourceCodeLine=segment[2];sourceCodeColumn=segment[3];}if(segment.length===5){segmentMappings+=encodeInteger$1(segment[4]-nameIndex);nameIndex=segment[4];}lineMappings.push(segmentMappings);}mappings+=lineMappings.join(',');}return mappings;}function encodeInteger$1(num){var result='';num=num<0?-num<<1|1:num<<1;do{var clamped=num&31;num>>>=5;if(num>0){clamped|=32;}result+=chars$1[clamped];}while(num>0);return result;}/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Creates a brand new (prototype-less) object with the enumerable-own\n * properties of `target`. Any enumerable-own properties from `source` which\n * are not present on `target` will be copied as well.\n */function defaults(target,source){return Object.assign(Object.create(null),source,target);}/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Decodes an input sourcemap into a `DecodedSourceMap` sourcemap object.\n *\n * Valid input maps include a `DecodedSourceMap`, a `RawSourceMap`, or JSON\n * representations of either type.\n */function decodeSourceMap(map){if(typeof map==='string'){map=JSON.parse(map);}var _map=map,mappings=_map.mappings;if(typeof mappings==='string'){mappings=decode$1(mappings);}else{// Clone the Line so that we can sort it. We don't want to mutate an array\n// that we don't own directly.\nmappings=mappings.map(cloneSegmentLine);}// Sort each Line's segments. There's no guarantee that segments are sorted for us,\n// and even Chrome's implementation sorts:\n// https://cs.chromium.org/chromium/src/third_party/devtools-frontend/src/front_end/sdk/SourceMap.js?l=507-508&rcl=109232bcf479c8f4ef8ead3cf56c49eb25f8c2f0\nmappings.forEach(sortSegments);return defaults({mappings:mappings},map);}function cloneSegmentLine(segments){return segments.slice();}function sortSegments(segments){segments.sort(segmentComparator);}function segmentComparator(a,b){return a[0]-b[0];}/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * A \"leaf\" node in the sourcemap tree, representing an original, unmodified\n * source file. Recursive segment tracing ends at the `OriginalSource`.\n */var OriginalSource=/*#__PURE__*/function(){function OriginalSource(filename,content){(0,_classCallCheck2.default)(this,OriginalSource);this.filename=filename;this.content=content;}/**\n     * Tracing a `SourceMapSegment` ends when we get to an `OriginalSource`,\n     * meaning this line/column location originated from this source file.\n     */(0,_createClass2.default)(OriginalSource,[{key:\"traceSegment\",value:function traceSegment(line,column,name){return{column:column,line:line,name:name,source:this};}}]);return OriginalSource;}();/* istanbul ignore next */var Url$1=typeof URL!=='undefined'?URL:__webpack_require__(/*! url */ \"./node_modules/url/url.js\").URL;// Matches \"..\", which must be preceeded by \"/\" or the start of the string, and\n// must be followed by a \"/\". We do not eat the following \"/\", so that the next\n// iteration can match on it.\nvar parentRegex=/(^|\\/)\\.\\.(?=\\/|$)/g;function isAbsoluteUrl(url){try{return!!new Url$1(url);}catch(e){return false;}}/**\n * Creates a directory name that is guaranteed to not be in `str`.\n */function uniqInStr(str){var uniq=String(Math.random()).slice(2);while(str.indexOf(uniq)>-1){/* istanbul ignore next */uniq+=uniq;}return uniq;}/**\n * Removes the filename from the path (everything trailing the last \"/\"). This\n * is only safe to call on a path, never call with an absolute or protocol\n * relative URL.\n */function stripPathFilename(path){path=normalizePath(path);var index=path.lastIndexOf('/');return path.slice(0,index+1);}/**\n * Normalizes a protocol-relative URL, but keeps it protocol relative by\n * stripping out the protocl before returning it.\n */function normalizeProtocolRelative(input,absoluteBase){var _Url$=new Url$1(input,absoluteBase),href=_Url$.href,protocol=_Url$.protocol;return href.slice(protocol.length);}/**\n * Normalizes a simple path (one that has no \"..\"s, or is absolute so \"..\"s can\n * be normalized absolutely).\n */function normalizeSimplePath(input){var _Url$2=new Url$1(input,'https://foo.com/'),href=_Url$2.href;return href.slice('https://foo.com/'.length);}/**\n * Normalizes a path, ensuring that excess \"..\"s are preserved for relative\n * paths in the output.\n *\n * If the input is absolute, this will return an absolutey normalized path, but\n * it will not have a leading \"/\".\n *\n * If the input has a leading \"..\", the output will have a leading \"..\".\n *\n * If the input has a leading \".\", the output will not have a leading \".\"\n * unless there are too many \"..\"s, in which case there will be a leading \"..\".\n */function normalizePath(input){// If there are no \"..\"s, we can treat this as if it were an absolute path.\n// The return won't be an absolute path, so it's easy.\nif(!parentRegex.test(input))return normalizeSimplePath(input);// We already found one \"..\". Let's see how many there are.\nvar total=1;while(parentRegex.test(input)){total++;}// If there are \"..\"s, we need to prefix the the path with the same number of\n// unique directories. This is to ensure that we \"remember\" how many parent\n// directories we are accessing. Eg, \"../../..\" must keep 3, and \"foo/../..\"\n// must keep 1.\nvar uniqDirectory=\"z\".concat(uniqInStr(input),\"/\");// uniqDirectory is just a \"z\", followed by numbers, followed by a \"/\". So\n// generating a runtime regex from it is safe. We'll use this search regex to\n// strip out our uniq directory names and insert any needed \"..\"s.\nvar search=new RegExp(\"^(?:\".concat(uniqDirectory,\")*\"));// Now we can resolve the total path. If there are excess \"..\"s, they will\n// eliminate one or more of the unique directories we prefix with.\nvar relative=normalizeSimplePath(uniqDirectory.repeat(total)+input);// We can now count the number of unique directories that were eliminated. If\n// there were 3, and 1 was eliminated, we know we only need to add 1 \"..\". If\n// 2 were eliminated, we need to insert 2 \"..\"s. If all 3 were eliminated,\n// then we need 3, etc. This replace is guranteed to match (it may match 0 or\n// more times), and we can count the total match to see how many were eliminated.\nreturn relative.replace(search,function(all){var leftover=all.length/uniqDirectory.length;return'../'.repeat(total-leftover);});}/**\n * Attempts to resolve `input` URL relative to `base`.\n */function resolve(input,base){if(!base)base='';// Absolute URLs are very easy to resolve right.\nif(isAbsoluteUrl(input))return new Url$1(input).href;if(base){// Absolute URLs are easy...\nif(isAbsoluteUrl(base))return new Url$1(input,base).href;// If base is protocol relative, we'll resolve with it but keep the result\n// protocol relative.\nif(base.startsWith('//'))return normalizeProtocolRelative(input,\"https:\".concat(base));}// Normalize input, but keep it protocol relative. We know base doesn't supply\n// a protocol, because that would have been handled above.\nif(input.startsWith('//'))return normalizeProtocolRelative(input,'https://foo.com/');// We now know that base (if there is one) and input are paths. We've handled\n// both absolute and protocol-relative variations above.\n// Absolute paths don't need any special handling, because they cannot have\n// extra \".\" or \"..\"s. That'll all be stripped away. Input takes priority here,\n// because if input is an absolute path, base path won't affect it in any way.\nif(input.startsWith('/'))return'/'+normalizeSimplePath(input);// Since input and base are paths, we need to join them to do any further\n// processing. Paths are joined at the directory level, so we need to remove\n// the base's filename before joining. We also know that input does not have a\n// leading slash, and that the stripped base will have a trailing slash if\n// there are any directories (or it'll be empty).\nvar joined=stripPathFilename(base)+input;// If base is an absolute path, then input will be relative to it.\nif(base.startsWith('/'))return'/'+normalizeSimplePath(joined);// We now know both base (if there is one) and input are relative paths.\nvar relative=normalizePath(joined);// If base started with a leading \".\", or there is no base and input started\n// with a \".\", then we need to ensure that the relative path starts with a\n// \".\". We don't know if relative starts with a \"..\", though, so check before\n// prepending.\nif((base||input).startsWith('.')&&!relative.startsWith('.')){return'./'+relative;}return relative;}/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */function resolve$1(input,base){// The base is always treated as a directory, if it's not empty.\n// https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n// https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\nif(base&&!base.endsWith('/'))base+='/';return resolve(input,base);}/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * A binary search implementation that returns the index if a match is found,\n * or the negated index of where the `needle` should be inserted.\n *\n * The `comparator` callback receives both the `item` under comparison and the\n * needle we are searching for. It must return `0` if the `item` is a match,\n * any negative number if `item` is too small (and we must search after it), or\n * any positive number if the `item` is too large (and we must search before\n * it).\n *\n * If no match is found, a negated index of where to insert the `needle` is\n * returned. This negated index is guaranteed to be less than 0. To insert an\n * item, negate it (again) and splice:\n *\n * ```js\n * const array = [1, 3];\n * const needle = 2;\n * const index = binarySearch(array, needle, (item, needle) => item - needle);\n *\n * assert.equal(index, -2);\n * assert.equal(~index, 1);\n * array.splice(~index, 0, needle);\n * assert.deepEqual(array, [1, 2, 3]);\n * ```\n */function binarySearch(haystack,needle,comparator){var low=0;var high=haystack.length-1;while(low<=high){var mid=low+(high-low>>1);var cmp=comparator(haystack[mid],needle);if(cmp===0){return mid;}if(cmp<0){low=mid+1;}else{high=mid-1;}}return~low;}/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * FastStringArray acts like a `Set` (allowing only one occurrence of a string\n * `key`), but provides the index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of\n * the backing array, like how `sourcesContent[i]` is the source content\n * associated with `source[i]`, and there are never duplicates.\n */var FastStringArray=/*#__PURE__*/function(){function FastStringArray(){(0,_classCallCheck2.default)(this,FastStringArray);this.indexes=Object.create(null);this.array=[];}/**\n     * Puts `key` into the backing array, if it is not already present. Returns\n     * the index of the `key` in the backing array.\n     */(0,_createClass2.default)(FastStringArray,[{key:\"put\",value:function put(key){var array=this.array,indexes=this.indexes;// The key may or may not be present. If it is present, it's a number.\nvar index=indexes[key];// If it's not yet present, we need to insert it and track the index in the\n// indexes.\nif(index===undefined){index=indexes[key]=array.length;array.push(key);}return index;}}]);return FastStringArray;}();/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * SourceMapTree represents a single sourcemap, with the ability to trace\n * mappings into its child nodes (which may themselves be SourceMapTrees).\n */var SourceMapTree=/*#__PURE__*/function(){function SourceMapTree(map,sources){(0,_classCallCheck2.default)(this,SourceMapTree);this.map=map;this.sources=sources;}/**\n     * traceMappings is only called on the root level SourceMapTree, and begins\n     * the process of resolving each mapping in terms of the original source\n     * files.\n     */(0,_createClass2.default)(SourceMapTree,[{key:\"traceMappings\",value:function traceMappings(){var mappings=[];var names=new FastStringArray();var sources=new FastStringArray();var sourcesContent=[];var _this$map=this.map,rootMappings=_this$map.mappings,rootNames=_this$map.names;for(var _i41=0;_i41<rootMappings.length;_i41++){var segments=rootMappings[_i41];var tracedSegments=[];for(var j=0;j<segments.length;j++){var segment=segments[j];// 1-length segments only move the current generated column, there's no\n// source information to gather from it.\nif(segment.length===1)continue;var source=this.sources[segment[1]];var traced=source.traceSegment(segment[2],segment[3],segment.length===5?rootNames[segment[4]]:'');if(!traced)continue;// So we traced a segment down into its original source file. Now push a\n// new segment pointing to this location.\nvar column=traced.column,line=traced.line,name=traced.name;var _traced$source=traced.source,content=_traced$source.content,filename=_traced$source.filename;// Store the source location, and ensure we keep sourcesContent up to\n// date with the sources array.\nvar sourceIndex=sources.put(filename);sourcesContent[sourceIndex]=content;// This looks like unnecessary duplication, but it noticeably increases\n// performance. If we were to push the nameIndex onto length-4 array, v8\n// would internally allocate 22 slots! That's 68 wasted bytes! Array\n// literals have the same capacity as their length, saving memory.\nif(name){tracedSegments.push([segment[0],sourceIndex,line,column,names.put(name)]);}else{tracedSegments.push([segment[0],sourceIndex,line,column]);}}mappings.push(tracedSegments);}// TODO: Make all sources relative to the sourceRoot.\nreturn defaults({mappings:mappings,names:names.array,sources:sources.array,sourcesContent:sourcesContent},this.map);}/**\n     * traceSegment is only called on children SourceMapTrees. It recurses down\n     * into its own child SourceMapTrees, until we find the original source map.\n     */},{key:\"traceSegment\",value:function traceSegment(line,column,name){var _this$map2=this.map,mappings=_this$map2.mappings,names=_this$map2.names;// It's common for parent sourcemaps to have pointers to lines that have no\n// mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\nif(line>=mappings.length)return null;var segments=mappings[line];if(segments.length===0)return null;var index=binarySearch(segments,column,segmentComparator$1);if(index===-1)return null;// we come before any mapped segment\n// If we can't find a segment that lines up to this column, we use the\n// segment before.\nif(index<0){index=~index-1;}var segment=segments[index];// 1-length segments only move the current generated column, there's no\n// source information to gather from it.\nif(segment.length===1)return null;var source=this.sources[segment[1]];// So now we can recurse down, until we hit the original source file.\nreturn source.traceSegment(segment[2],segment[3],// A child map's recorded name for this segment takes precedence over the\n// parent's mapped name. Imagine a mangler changing the name over, etc.\nsegment.length===5?names[segment[4]]:name);}}]);return SourceMapTree;}();function segmentComparator$1(segment,column){return segment[0]-column;}/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Removes the filename from a path.\n */function stripFilename(path){if(!path)return'';var index=path.lastIndexOf('/');return path.slice(0,index+1);}/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */function asArray(value){if(Array.isArray(value))return value;return[value];}/**\n * Recursively builds a tree structure out of sourcemap files, with each node\n * being either an `OriginalSource` \"leaf\" or a `SourceMapTree` composed of\n * `OriginalSource`s and `SourceMapTree`s.\n *\n * Every sourcemap is composed of a collection of source files and mappings\n * into locations of those source files. When we generate a `SourceMapTree` for\n * the sourcemap, we attempt to load each source file's own sourcemap. If it\n * does not have an associated sourcemap, it is considered an original,\n * unmodified source file.\n */function buildSourceMapTree(input,loader,relativeRoot){var maps=asArray(input).map(decodeSourceMap);var map=maps.pop();for(var _i42=0;_i42<maps.length;_i42++){if(maps[_i42].sources.length!==1){throw new Error(\"Transformation map \".concat(_i42,\" must have exactly one source file.\\n\")+'Did you specify these with the most recent transformation maps first?');}}var sourceRoot=map.sourceRoot,sources=map.sources,sourcesContent=map.sourcesContent;var children=sources.map(function(sourceFile,i){// Each source file is loaded relative to the sourcemap's own sourceRoot,\n// which is itself relative to the sourcemap's parent.\nvar uri=resolve$1(sourceFile||'',resolve$1(sourceRoot||'',stripFilename(relativeRoot)));// Use the provided loader callback to retrieve the file's sourcemap.\n// TODO: We should eventually support async loading of sourcemap files.\nvar sourceMap=loader(uri);// If there is no sourcemap, then it is an unmodified source file.\nif(!sourceMap){// The source file's actual contents must be included in the sourcemap\n// (done when generating the sourcemap) for it to be included as a\n// sourceContent in the output sourcemap.\nvar sourceContent=sourcesContent?sourcesContent[i]:null;return new OriginalSource(uri,sourceContent);}// Else, it's a real sourcemap, and we need to recurse into it to load its\n// source files.\nreturn buildSourceMapTree(decodeSourceMap(sourceMap),loader,uri);});var tree=new SourceMapTree(map,children);for(var _i43=maps.length-1;_i43>=0;_i43--){tree=new SourceMapTree(maps[_i43],[tree]);}return tree;}/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * A SourceMap v3 compatible sourcemap, which only includes fields that were\n * provided to it.\n */var SourceMap=/*#__PURE__*/function(){function SourceMap(map,excludeContent){(0,_classCallCheck2.default)(this,SourceMap);this.version=3;// SourceMap spec says this should be first.\nif('file'in map)this.file=map.file;this.mappings=encode$1(map.mappings);this.names=map.names;// TODO: We first need to make all source URIs relative to the sourceRoot\n// before we can support a sourceRoot.\n// if ('sourceRoot' in map) this.sourceRoot = map.sourceRoot;\nthis.sources=map.sources;if(!excludeContent&&'sourcesContent'in map)this.sourcesContent=map.sourcesContent;}(0,_createClass2.default)(SourceMap,[{key:\"toString\",value:function toString(){return JSON.stringify(this);}}]);return SourceMap;}();/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Traces through all the mappings in the root sourcemap, through the sources\n * (and their sourcemaps), all the way back to the original source location.\n *\n * `loader` will be called every time we encounter a source file. If it returns\n * a sourcemap, we will recurse into that sourcemap to continue the trace. If\n * it returns a falsey value, that source file is treated as an original,\n * unmodified source file.\n *\n * Pass `excludeContent` content to exclude any self-containing source file\n * content from the output sourcemap.\n */function remapping(input,loader,excludeContent){var graph=buildSourceMapTree(input,loader);return new SourceMap(graph.traceMappings(),!!excludeContent);}function last_line_length(s){return s.length-s.lastIndexOf('\\n')-1;}// mutate map in-place\nfunction sourcemap_add_offset(map,offset,source_index){if(map.mappings.length==0)return;for(var line=0;line<map.mappings.length;line++){var segment_list=map.mappings[line];for(var segment=0;segment<segment_list.length;segment++){var seg=segment_list[segment];// shift only segments that belong to component source file\nif(seg[1]===source_index){// also ensures that seg.length >= 4\n// shift column if it points at the first line\nif(seg[2]===0){seg[3]+=offset.column;}// shift line\nseg[2]+=offset.line;}}}}function merge_tables(this_table,other_table){var new_table=this_table.slice();var idx_map=[];other_table=other_table||[];var val_changed=false;var _iterator12=_createForOfIteratorHelper(other_table.entries()),_step12;try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){var _step12$value=(0,_slicedToArray2.default)(_step12.value,2),other_idx=_step12$value[0],other_val=_step12$value[1];var this_idx=this_table.indexOf(other_val);if(this_idx>=0){idx_map[other_idx]=this_idx;}else{var new_idx=new_table.length;new_table[new_idx]=other_val;idx_map[other_idx]=new_idx;val_changed=true;}}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}var idx_changed=val_changed;if(val_changed){if(idx_map.find(function(val,idx){return val!=idx;})===undefined){// idx_map is identity map [0, 1, 2, 3, 4, ....]\nidx_changed=false;}}return[new_table,idx_map,val_changed,idx_changed];}function pushArray(_this,other){// We use push to mutate in place for memory and perf reasons\n// We use the for loop instead of _this.push(...other) to avoid the JS engine's function argument limit (65,535 in JavascriptCore)\nfor(var _i44=0;_i44<other.length;_i44++){_this.push(other[_i44]);}}var MappedCode=/*#__PURE__*/function(){function MappedCode(){var string=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var map=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;(0,_classCallCheck2.default)(this,MappedCode);this.string=string;if(map){this.map=map;}else{this.map={version:3,mappings:[],sources:[],names:[]};}}/**\n     * concat in-place (mutable), return this (chainable)\n     * will also mutate the `other` object\n     */(0,_createClass2.default)(MappedCode,[{key:\"concat\",value:function concat(other){// noop: if one is empty, return the other\nif(other.string=='')return this;if(this.string==''){this.string=other.string;this.map=other.map;return this;}// compute last line length before mutating\nvar column_offset=last_line_length(this.string);this.string+=other.string;var m1=this.map;var m2=other.map;if(m2.mappings.length==0)return this;// combine sources and names\nvar _merge_tables=merge_tables(m1.sources,m2.sources),_merge_tables2=(0,_slicedToArray2.default)(_merge_tables,4),sources=_merge_tables2[0],new_source_idx=_merge_tables2[1],sources_changed=_merge_tables2[2],sources_idx_changed=_merge_tables2[3];var _merge_tables3=merge_tables(m1.names,m2.names),_merge_tables4=(0,_slicedToArray2.default)(_merge_tables3,4),names=_merge_tables4[0],new_name_idx=_merge_tables4[1],names_changed=_merge_tables4[2],names_idx_changed=_merge_tables4[3];if(sources_changed)m1.sources=sources;if(names_changed)m1.names=names;// unswitched loops are faster\nif(sources_idx_changed&&names_idx_changed){for(var line=0;line<m2.mappings.length;line++){var segment_list=m2.mappings[line];for(var segment=0;segment<segment_list.length;segment++){var seg=segment_list[segment];if(seg[1]>=0)seg[1]=new_source_idx[seg[1]];if(seg[4]>=0)seg[4]=new_name_idx[seg[4]];}}}else if(sources_idx_changed){for(var _line=0;_line<m2.mappings.length;_line++){var _segment_list=m2.mappings[_line];for(var _segment=0;_segment<_segment_list.length;_segment++){var _seg=_segment_list[_segment];if(_seg[1]>=0)_seg[1]=new_source_idx[_seg[1]];}}}else if(names_idx_changed){for(var _line2=0;_line2<m2.mappings.length;_line2++){var _segment_list2=m2.mappings[_line2];for(var _segment2=0;_segment2<_segment_list2.length;_segment2++){var _seg2=_segment_list2[_segment2];if(_seg2[4]>=0)_seg2[4]=new_name_idx[_seg2[4]];}}}// combine the mappings\n// combine\n// 1. last line of first map\n// 2. first line of second map\n// columns of 2 must be shifted\nif(m2.mappings.length>0&&column_offset>0){var first_line=m2.mappings[0];for(var _i45=0;_i45<first_line.length;_i45++){first_line[_i45][0]+=column_offset;}}// combine last line + first line\npushArray(m1.mappings[m1.mappings.length-1],m2.mappings.shift());// append other lines\npushArray(m1.mappings,m2.mappings);return this;}}],[{key:\"from_processed\",value:function from_processed(string,map){var line_count=string.split('\\n').length;if(map){// ensure that count of source map mappings lines\n// is equal to count of generated code lines\n// (some tools may produce less)\nvar missing_lines=line_count-map.mappings.length;for(var _i46=0;_i46<missing_lines;_i46++){map.mappings.push([]);}return new MappedCode(string,map);}if(string=='')return new MappedCode();map={version:3,names:[],sources:[],mappings:[]};// add empty SourceMapSegment[] for every line\nfor(var _i47=0;_i47<line_count;_i47++){map.mappings.push([]);}return new MappedCode(string,map);}},{key:\"from_source\",value:function from_source(_ref22){var source=_ref22.source,file_basename=_ref22.file_basename,get_location=_ref22.get_location;var offset=get_location(0);if(!offset)offset={line:0,column:0};var map={version:3,names:[],sources:[file_basename],mappings:[]};if(source=='')return new MappedCode(source,map);// we create a high resolution identity map here,\n// we know that it will eventually be merged with svelte's map,\n// at which stage the resolution will decrease.\nvar line_list=source.split('\\n');for(var line=0;line<line_list.length;line++){map.mappings.push([]);var token_list=line_list[line].split(/([^\\d\\w\\s]|\\s+)/g);for(var token=0,column=0;token<token_list.length;token++){if(token_list[token]=='')continue;map.mappings[line].push([column,0,offset.line+line,column]);column+=token_list[token].length;}}// shift columns in first line\nvar segment_list=map.mappings[0];for(var segment=0;segment<segment_list.length;segment++){segment_list[segment][3]+=offset.column;}return new MappedCode(source,map);}}]);return MappedCode;}();function combine_sourcemaps(filename,sourcemap_list){if(sourcemap_list.length==0)return null;var map_idx=1;var map=sourcemap_list.slice(0,-1).find(function(m){return m.sources.length!==1;})===undefined?remapping(// use array interface\n// only the oldest sourcemap can have multiple sources\nsourcemap_list,function(){return null;},true// skip optional field `sourcesContent`\n):remapping(// use loader interface\nsourcemap_list[0],// last map\nfunction loader(sourcefile){if(sourcefile===filename&&sourcemap_list[map_idx]){return sourcemap_list[map_idx++];// idx 1, 2, ...\n// bundle file = branch node\n}else{return null;// source file = leaf node\n}},true);if(!map.file)delete map.file;// skip optional field `file`\n// When source maps are combined and the leading map is empty, sources is not set.\n// Add the filename to the empty array in this case. \n// Further improvements to remapping may help address this as well https://github.com/ampproject/remapping/issues/116\nif(!map.sources.length)map.sources=[filename];return map;}// browser vs node.js\nvar b64enc=typeof btoa=='function'?btoa:function(b){return Buffer.from(b).toString('base64');};var b64dec=typeof atob=='function'?atob:function(a){return Buffer.from(a,'base64').toString();};function apply_preprocessor_sourcemap(filename,svelte_map,preprocessor_map_input){if(!svelte_map||!preprocessor_map_input)return svelte_map;var preprocessor_map=typeof preprocessor_map_input==='string'?JSON.parse(preprocessor_map_input):preprocessor_map_input;var result_map=combine_sourcemaps(filename,[svelte_map,preprocessor_map]);// Svelte expects a SourceMap which includes toUrl and toString. Instead of wrapping our output in a class,\n// we just tack on the extra properties.\nObject.defineProperties(result_map,{toString:{enumerable:false,value:function toString(){return JSON.stringify(this);}},toUrl:{enumerable:false,value:function toUrl(){return'data:application/json;charset=utf-8;base64,'+b64enc(this.toString());}}});return result_map;}// parse attached sourcemap in processed.code\nfunction parse_attached_sourcemap(processed,tag_name){var r_in='[#@]\\\\s*sourceMappingURL\\\\s*=\\\\s*(\\\\S*)';var regex=tag_name=='script'?new RegExp('(?://'+r_in+')|(?:/\\\\*'+r_in+'\\\\s*\\\\*/)$'):new RegExp('/\\\\*'+r_in+'\\\\s*\\\\*/$');function log_warning(message){// code_start: help to find preprocessor\nvar code_start=processed.code.length<100?processed.code:processed.code.slice(0,100)+' [...]';console.warn(\"warning: \".concat(message,\". processed.code = \").concat(JSON.stringify(code_start)));}processed.code=processed.code.replace(regex,function(_,match1,match2){var map_url=tag_name=='script'?match1||match2:match1;var map_data=(map_url.match(/data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(\\S*)/)||[])[1];if(map_data){// sourceMappingURL is data URL\nif(processed.map){log_warning('Not implemented. '+'Found sourcemap in both processed.code and processed.map. '+'Please update your preprocessor to return only one sourcemap.');// ignore attached sourcemap\nreturn'';}processed.map=b64dec(map_data);// use attached sourcemap\nreturn'';// remove from processed.code\n}// sourceMappingURL is path or URL\nif(!processed.map){log_warning(\"Found sourcemap path \".concat(JSON.stringify(map_url),\" in processed.code, but no sourcemap data. \")+'Please update your preprocessor to return sourcemap data directly.');}// ignore sourcemap path\nreturn'';// remove from processed.code\n});}function check_enable_sourcemap(enable_sourcemap,namespace){return typeof enable_sourcemap==='boolean'?enable_sourcemap:enable_sourcemap[namespace];}function dom(component,options){var name=component.name;var renderer=new Renderer(component,options);var block=renderer.block;block.has_outro_method=true;// prevent fragment being created twice (#1063)\nif(options.customElement)block.chunks.create.push(b(_templateObject630||(_templateObject630=(0,_taggedTemplateLiteral2.default)([\"this.c = @noop;\"]))));var body=[];if(renderer.file_var){var file=component.file?x(_templateObject631||(_templateObject631=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"])),component.file):x(_templateObject632||(_templateObject632=(0,_taggedTemplateLiteral2.default)([\"undefined\"])));body.push(b(_templateObject633||(_templateObject633=(0,_taggedTemplateLiteral2.default)([\"const \",\" = \",\";\"])),renderer.file_var,file));}var css=component.stylesheet.render(options.filename,!options.customElement);var css_sourcemap_enabled=check_enable_sourcemap(options.enableSourcemap,'css');if(css_sourcemap_enabled){css.map=apply_preprocessor_sourcemap(options.filename,css.map,options.sourcemap);}else{css.map=null;}var styles=css_sourcemap_enabled&&component.stylesheet.has_styles&&options.dev?\"\".concat(css.code,\"\\n/*# sourceMappingURL=\").concat(css.map.toUrl(),\" */\"):css.code;var add_css=component.get_unique_name('add_css');var should_add_css=!options.customElement&&!!styles&&options.css!==false;if(should_add_css){body.push(b(_templateObject634||(_templateObject634=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(target) {\\n\\t\\t\\t\\t@append_styles(target, \\\"\",\"\\\", \\\"\",\"\\\");\\n\\t\\t\\t}\\n\\t\\t\"])),add_css,component.stylesheet.id,styles));}// fix order\n// TODO the deconflicted names of blocks are reversed... should set them here\nvar blocks=renderer.blocks.slice().reverse();body.push.apply(body,(0,_toConsumableArray2.default)(blocks.map(function(block){// TODO this is a horrible mess — renderer.blocks\n// contains a mixture of Blocks and Nodes\nif(block.render)return block.render();return block;})));if(options.dev&&!options.hydratable){block.chunks.claim.push(b(_templateObject635||(_templateObject635=(0,_taggedTemplateLiteral2.default)([\"throw new @_Error(\\\"options.hydrate only works if the component was compiled with the `hydratable: true` option\\\");\"],[\"throw new @_Error(\\\"options.hydrate only works if the component was compiled with the \\\\`hydratable: true\\\\` option\\\");\"]))));}var uses_slots=component.var_lookup.has('$$slots');var compute_slots;if(uses_slots){compute_slots=b(_templateObject636||(_templateObject636=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tconst $$slots = @compute_slots(#slots);\\n\\t\\t\"])));}var uses_props=component.var_lookup.has('$$props');var uses_rest=component.var_lookup.has('$$restProps');var $$props=uses_props||uses_rest?'$$new_props':'$$props';var props=component.vars.filter(function(variable){return!variable.module&&variable.export_name;});var writable_props=props.filter(function(variable){return variable.writable;});var omit_props_names=component.get_unique_name('omit_props_names');var compute_rest=x(_templateObject637||(_templateObject637=(0,_taggedTemplateLiteral2.default)([\"@compute_rest_props($$props, \",\")\"])),omit_props_names.name);var rest=uses_rest?b(_templateObject638||(_templateObject638=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\tconst \",\" = [\",\"];\\n\\t\\tlet $$restProps = \",\";\\n\\t\"])),omit_props_names.name,props.map(function(prop){return\"\\\"\".concat(prop.export_name,\"\\\"\");}).join(','),compute_rest):null;var set=uses_props||uses_rest||writable_props.length>0||component.slots.size>0?x(_templateObject639||(_templateObject639=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\" => {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\\n\\t\\t\"])),$$props,uses_props&&renderer.invalidate('$$props',x(_templateObject640||(_templateObject640=(0,_taggedTemplateLiteral2.default)([\"$$props = @assign(@assign({}, $$props), @exclude_internal_props($$new_props))\"])))),uses_rest&&!uses_props&&x(_templateObject641||(_templateObject641=(0,_taggedTemplateLiteral2.default)([\"$$props = @assign(@assign({}, $$props), @exclude_internal_props($$new_props))\"]))),uses_rest&&renderer.invalidate('$$restProps',x(_templateObject642||(_templateObject642=(0,_taggedTemplateLiteral2.default)([\"$$restProps = \",\"\"])),compute_rest)),writable_props.map(function(prop){return b(_templateObject643||(_templateObject643=(0,_taggedTemplateLiteral2.default)([\"if ('\",\"' in \",\") \",\";\"])),prop.export_name,$$props,renderer.invalidate(prop.name,x(_templateObject644||(_templateObject644=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\".\",\"\"])),prop.name,$$props,prop.export_name)));}),component.slots.size>0&&b(_templateObject645||(_templateObject645=(0,_taggedTemplateLiteral2.default)([\"if ('$$scope' in \",\") \",\";\"])),$$props,renderer.invalidate('$$scope',x(_templateObject646||(_templateObject646=(0,_taggedTemplateLiteral2.default)([\"$$scope = \",\".$$scope\"])),$$props)))):null;var accessors=[];var not_equal=component.component_options.immutable?x(_templateObject647||(_templateObject647=(0,_taggedTemplateLiteral2.default)([\"@not_equal\"]))):x(_templateObject648||(_templateObject648=(0,_taggedTemplateLiteral2.default)([\"@safe_not_equal\"])));var dev_props_check;var inject_state;var capture_state;var props_inject;props.forEach(function(prop){var variable=component.var_lookup.get(prop.name);if(!variable.writable||component.component_options.accessors){accessors.push({type:'MethodDefinition',kind:'get',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject649||(_templateObject649=(0,_taggedTemplateLiteral2.default)([\"function() {\\n\\t\\t\\t\\t\\treturn \",\"\\n\\t\\t\\t\\t}\"])),prop.hoistable?prop.name:x(_templateObject650||(_templateObject650=(0,_taggedTemplateLiteral2.default)([\"this.$$.ctx[\",\"]\"])),renderer.context_lookup.get(prop.name).index))});}else if(component.compile_options.dev){accessors.push({type:'MethodDefinition',kind:'get',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject651||(_templateObject651=(0,_taggedTemplateLiteral2.default)([\"function() {\\n\\t\\t\\t\\t\\tthrow new @_Error(\\\"<\",\">: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\\\");\\n\\t\\t\\t\\t}\"])),component.tag)});}if(component.component_options.accessors){if(variable.writable&&!renderer.readonly.has(prop.name)){accessors.push({type:'MethodDefinition',kind:'set',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject652||(_templateObject652=(0,_taggedTemplateLiteral2.default)([\"function(\",\") {\\n\\t\\t\\t\\t\\t\\tthis.$$set({ \",\": \",\" });\\n\\t\\t\\t\\t\\t\\t@flush();\\n\\t\\t\\t\\t\\t}\"])),prop.name,prop.export_name,prop.name)});}else if(component.compile_options.dev){accessors.push({type:'MethodDefinition',kind:'set',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject653||(_templateObject653=(0,_taggedTemplateLiteral2.default)([\"function(value) {\\n\\t\\t\\t\\t\\t\\tthrow new @_Error(\\\"<\",\">: Cannot set read-only property '\",\"'\\\");\\n\\t\\t\\t\\t\\t}\"])),component.tag,prop.export_name)});}}else if(component.compile_options.dev){accessors.push({type:'MethodDefinition',kind:'set',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject654||(_templateObject654=(0,_taggedTemplateLiteral2.default)([\"function(value) {\\n\\t\\t\\t\\t\\tthrow new @_Error(\\\"<\",\">: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\\\");\\n\\t\\t\\t\\t}\"])),component.tag)});}});component.instance_exports_from.forEach(function(exports_from){var import_declaration=Object.assign(Object.assign({},exports_from),{type:'ImportDeclaration',specifiers:[],source:exports_from.source});component.imports.push(import_declaration);exports_from.specifiers.forEach(function(specifier){if(component.component_options.accessors){var _name4=component.get_unique_name(specifier.exported.name);import_declaration.specifiers.push(Object.assign(Object.assign({},specifier),{type:'ImportSpecifier',imported:specifier.local,local:_name4}));accessors.push({type:'MethodDefinition',kind:'get',key:{type:'Identifier',name:specifier.exported.name},value:x(_templateObject655||(_templateObject655=(0,_taggedTemplateLiteral2.default)([\"function() {\\n\\t\\t\\t\\t\\t\\treturn \",\"\\n\\t\\t\\t\\t\\t}\"])),_name4)});}else if(component.compile_options.dev){accessors.push({type:'MethodDefinition',kind:'get',key:{type:'Identifier',name:specifier.exported.name},value:x(_templateObject656||(_templateObject656=(0,_taggedTemplateLiteral2.default)([\"function() {\\n\\t\\t\\t\\t\\t\\tthrow new @_Error(\\\"<\",\">: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\\\");\\n\\t\\t\\t\\t\\t}\"])),component.tag)});}});});if(component.compile_options.dev){// checking that expected ones were passed\nvar expected=props.filter(function(prop){return prop.writable&&!prop.initialised;});if(expected.length){dev_props_check=b(_templateObject657||(_templateObject657=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tconst { ctx: #ctx } = this.$$;\\n\\t\\t\\t\\tconst props = \",\";\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"])),options.customElement?x(_templateObject658||(_templateObject658=(0,_taggedTemplateLiteral2.default)([\"this.attributes\"]))):x(_templateObject659||(_templateObject659=(0,_taggedTemplateLiteral2.default)([\"options.props || {}\"]))),expected.map(function(prop){return b(_templateObject660||(_templateObject660=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" === undefined && !('\",\"' in props)) {\\n\\t\\t\\t\\t\\t@_console.warn(\\\"<\",\"> was created without expected prop '\",\"'\\\");\\n\\t\\t\\t\\t}\"])),renderer.reference(prop.name),prop.export_name,component.tag,prop.export_name);}));}var capturable_vars=component.vars.filter(function(v){return!v.internal&&!v.global&&!v.name.startsWith('$$');});if(capturable_vars.length>0){capture_state=x(_templateObject661||(_templateObject661=(0,_taggedTemplateLiteral2.default)([\"() => ({ \",\" })\"])),capturable_vars.map(function(prop){return p(_templateObject662||(_templateObject662=(0,_taggedTemplateLiteral2.default)([\"\",\"\"])),prop.name);}));}var injectable_vars=capturable_vars.filter(function(v){return!v.module&&v.writable&&v.name[0]!=='$';});if(uses_props||injectable_vars.length>0){inject_state=x(_templateObject663||(_templateObject663=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" => {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])),$$props,uses_props&&renderer.invalidate('$$props',x(_templateObject664||(_templateObject664=(0,_taggedTemplateLiteral2.default)([\"$$props = @assign(@assign({}, $$props), $$new_props)\"])))),injectable_vars.map(function(v){return b(_templateObject665||(_templateObject665=(0,_taggedTemplateLiteral2.default)([\"if ('\",\"' in $$props) \",\";\"])),v.name,renderer.invalidate(v.name,x(_templateObject666||(_templateObject666=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\".\",\"\"])),v.name,$$props,v.name)));}));props_inject=b(_templateObject667||(_templateObject667=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif ($$props && \\\"$$inject\\\" in $$props) {\\n\\t\\t\\t\\t\\t$$self.$inject_state($$props.$$inject);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"])));}}// instrument assignments\nif(component.ast.instance){var _scope3=component.instance_scope;var map=component.instance_scope_map;var execution_context=null;walk(component.ast.instance.content,{enter:function enter(node){if(map.has(node)){_scope3=map.get(node);if(!execution_context&&!_scope3.block){execution_context=node;}}else if(!execution_context&&node.type==='LabeledStatement'&&node.label.name==='$'){execution_context=node;}},leave:function leave(node){if(map.has(node)){_scope3=_scope3.parent;}if(execution_context===node){execution_context=null;}if(node.type==='AssignmentExpression'||node.type==='UpdateExpression'){var assignee=node.type==='AssignmentExpression'?node.left:node.argument;// normally (`a = 1`, `b.c = 2`), there'll be a single name\n// (a or b). In destructuring cases (`[d, e] = [e, d]`) there\n// may be more, in which case we need to tack the extra ones\n// onto the initial function call\nvar _names2=new Set(extract_names(assignee));this.replace(invalidate(renderer,_scope3,node,_names2,execution_context===null));}}});component.rewrite_props(function(_ref23){var name=_ref23.name,reassigned=_ref23.reassigned,export_name=_ref23.export_name;var value=\"$\".concat(name);var i=renderer.context_lookup.get(\"$\".concat(name)).index;var insert=reassigned||export_name?b(_templateObject668||(_templateObject668=(0,_taggedTemplateLiteral2.default)([\"\",\"()\"])),\"$$subscribe_\".concat(name)):b(_templateObject669||(_templateObject669=(0,_taggedTemplateLiteral2.default)([\"@component_subscribe($$self, \",\", #value => $$invalidate(\",\", \",\" = #value))\"])),name,i,value);if(component.compile_options.dev){return b(_templateObject670||(_templateObject670=(0,_taggedTemplateLiteral2.default)([\"@validate_store(\",\", '\",\"'); \",\"\"])),name,name,insert);}return insert;});}var args=[x(_templateObject671||(_templateObject671=(0,_taggedTemplateLiteral2.default)([\"$$self\"])))];var has_invalidate=props.length>0||component.has_reactive_assignments||component.slots.size>0||capture_state||inject_state;if(has_invalidate){args.push(x(_templateObject672||(_templateObject672=(0,_taggedTemplateLiteral2.default)([\"$$props\"]))),x(_templateObject673||(_templateObject673=(0,_taggedTemplateLiteral2.default)([\"$$invalidate\"]))));}else if(component.compile_options.dev){// $$props arg is still needed for unknown prop check\nargs.push(x(_templateObject674||(_templateObject674=(0,_taggedTemplateLiteral2.default)([\"$$props\"]))));}var has_create_fragment=component.compile_options.dev||block.has_content();if(has_create_fragment){body.push(b(_templateObject675||(_templateObject675=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction create_fragment(#ctx) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\\n\\t\\t\"])),block.get_contents()));}body.push(b(_templateObject676||(_templateObject676=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\t\"])),component.extract_javascript(component.ast.module),component.fully_hoisted));var filtered_props=props.filter(function(prop){var variable=component.var_lookup.get(prop.name);if(variable.hoistable)return false;return prop.name[0]!=='$';});var reactive_stores=component.vars.filter(function(variable){return variable.name[0]==='$'&&variable.name[1]!=='$';});var instance_javascript=component.extract_javascript(component.ast.instance);var has_definition=component.compile_options.dev||instance_javascript&&instance_javascript.length>0||filtered_props.length>0||uses_props||component.partly_hoisted.length>0||renderer.initial_context.length>0||component.reactive_declarations.length>0||capture_state||inject_state;var definition=has_definition?component.alias('instance'):{type:'Literal',value:null};var reactive_store_subscriptions=reactive_stores.filter(function(store){var variable=component.var_lookup.get(store.name.slice(1));return!variable||variable.hoistable;}).map(function(_ref24){var name=_ref24.name;return b(_templateObject677||(_templateObject677=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"\\n\\t\\t\\t@component_subscribe($$self, \",\", $$value => $$invalidate(\",\", \",\" = $$value));\\n\\t\\t\"])),component.compile_options.dev&&b(_templateObject678||(_templateObject678=(0,_taggedTemplateLiteral2.default)([\"@validate_store(\",\", '\",\"');\"])),name.slice(1),name.slice(1)),name.slice(1),renderer.context_lookup.get(name).index,name);});var resubscribable_reactive_store_unsubscribers=reactive_stores.filter(function(store){var variable=component.var_lookup.get(store.name.slice(1));return variable&&(variable.reassigned||variable.export_name);}).map(function(_ref25){var name=_ref25.name;return b(_templateObject679||(_templateObject679=(0,_taggedTemplateLiteral2.default)([\"$$self.$$.on_destroy.push(() => \",\"());\"])),\"$$unsubscribe_\".concat(name.slice(1)));});if(has_definition){var reactive_declarations=[];var fixed_reactive_declarations=[];// not really 'reactive' but whatever\ncomponent.reactive_declarations.forEach(function(d){var dependencies=Array.from(d.dependencies);var uses_rest_or_props=!!dependencies.find(function(n){return n==='$$props'||n==='$$restProps';});var writable=dependencies.filter(function(n){var variable=component.var_lookup.get(n);return variable&&(variable.export_name||variable.mutated||variable.reassigned);});var condition=!uses_rest_or_props&&writable.length>0&&renderer.dirty(writable,true);var statement=d.node;// TODO remove label (use d.node.body) if it's not referenced\nif(condition)statement=b(_templateObject680||(_templateObject680=(0,_taggedTemplateLiteral2.default)([\"if (\",\") { \",\" }\"])),condition,statement)[0];if(condition||uses_rest_or_props){reactive_declarations.push(statement);}else{fixed_reactive_declarations.push(statement);}});var injected=Array.from(component.injected_reactive_declaration_vars).filter(function(name){var variable=component.var_lookup.get(name);return variable.injected&&variable.name[0]!=='$';});var reactive_store_declarations=reactive_stores.map(function(variable){var $name=variable.name;var name=$name.slice(1);var store=component.var_lookup.get(name);if(store&&(store.reassigned||store.export_name)){var unsubscribe=\"$$unsubscribe_\".concat(name);var subscribe=\"$$subscribe_\".concat(name);var _i48=renderer.context_lookup.get($name).index;return b(_templateObject681||(_templateObject681=(0,_taggedTemplateLiteral2.default)([\"let \",\", \",\" = @noop, \",\" = () => (\",\"(), \",\" = @subscribe(\",\", $$value => $$invalidate(\",\", \",\" = $$value)), \",\")\"])),$name,unsubscribe,subscribe,unsubscribe,unsubscribe,name,_i48,$name,name);}return b(_templateObject682||(_templateObject682=(0,_taggedTemplateLiteral2.default)([\"let \",\";\"])),$name);});var unknown_props_check;if(component.compile_options.dev&&!(uses_props||uses_rest)){unknown_props_check=b(_templateObject683||(_templateObject683=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tconst writable_props = [\",\"];\\n\\t\\t\\t\\t@_Object.keys($$props).forEach(key => {\\n\\t\\t\\t\\t\\tif (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') @_console.warn(`<\",\"> was created with unknown prop '${key}'`);\\n\\t\\t\\t\\t});\\n\\t\\t\\t\"],[\"\\n\\t\\t\\t\\tconst writable_props = [\",\"];\\n\\t\\t\\t\\t@_Object.keys($$props).forEach(key => {\\n\\t\\t\\t\\t\\tif (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') @_console.warn(\\\\`<\",\"> was created with unknown prop '\\\\${key}'\\\\`);\\n\\t\\t\\t\\t});\\n\\t\\t\\t\"])),writable_props.map(function(prop){return x(_templateObject684||(_templateObject684=(0,_taggedTemplateLiteral2.default)([\"'\",\"'\"])),prop.export_name);}),component.tag);}var return_value={type:'ArrayExpression',elements:renderer.initial_context.map(function(member){return{type:'Identifier',name:member.name};})};body.push(b(_templateObject685||(_templateObject685=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(\",\") {\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\treturn \",\";\\n\\t\\t\\t}\\n\\t\\t\"])),definition,args,injected.map(function(name){return b(_templateObject686||(_templateObject686=(0,_taggedTemplateLiteral2.default)([\"let \",\";\"])),name);}),rest,reactive_store_declarations,reactive_store_subscriptions,resubscribable_reactive_store_unsubscribers,component.slots.size||component.compile_options.dev||uses_slots?b(_templateObject687||(_templateObject687=(0,_taggedTemplateLiteral2.default)([\"let { $$slots: #slots = {}, $$scope } = $$props;\"]))):null,component.compile_options.dev&&b(_templateObject688||(_templateObject688=(0,_taggedTemplateLiteral2.default)([\"@validate_slots('\",\"', #slots, [\",\"]);\"])),component.tag,(0,_toConsumableArray2.default)(component.slots.keys()).map(function(key){return\"'\".concat(key,\"'\");}).join(',')),compute_slots,instance_javascript,unknown_props_check,renderer.binding_groups.size>0&&b(_templateObject689||(_templateObject689=(0,_taggedTemplateLiteral2.default)([\"const $$binding_groups = [\",\"];\"])),(0,_toConsumableArray2.default)(renderer.binding_groups.keys()).map(function(_){return x(_templateObject690||(_templateObject690=(0,_taggedTemplateLiteral2.default)([\"[]\"])));})),component.partly_hoisted,set&&b(_templateObject691||(_templateObject691=(0,_taggedTemplateLiteral2.default)([\"$$self.$$set = \",\";\"])),set),capture_state&&b(_templateObject692||(_templateObject692=(0,_taggedTemplateLiteral2.default)([\"$$self.$capture_state = \",\";\"])),capture_state),inject_state&&b(_templateObject693||(_templateObject693=(0,_taggedTemplateLiteral2.default)([\"$$self.$inject_state = \",\";\"])),inject_state),/* before reactive declarations */props_inject,reactive_declarations.length>0&&b(_templateObject694||(_templateObject694=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t$$self.$$.update = () => {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\t\"])),reactive_declarations),fixed_reactive_declarations,uses_props&&b(_templateObject695||(_templateObject695=(0,_taggedTemplateLiteral2.default)([\"$$props = @exclude_internal_props($$props);\"]))),return_value));}var prop_indexes=x(_templateObject696||(_templateObject696=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\",\"\\n\\t}\"])),props.filter(function(v){return v.export_name&&!v.module;}).map(function(v){return p(_templateObject697||(_templateObject697=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"])),v.export_name,renderer.context_lookup.get(v.name).index);}));var dirty;if(renderer.context_overflow){dirty=x(_templateObject698||(_templateObject698=(0,_taggedTemplateLiteral2.default)([\"[]\"])));for(var _i49=0;_i49<renderer.context.length;_i49+=31){dirty.elements.push(x(_templateObject699||(_templateObject699=(0,_taggedTemplateLiteral2.default)([\"-1\"]))));}}if(options.customElement){var _declaration$body$bod;var init_props=x(_templateObject700||(_templateObject700=(0,_taggedTemplateLiteral2.default)([\"@attribute_to_object(this.attributes)\"])));if(uses_slots){init_props=x(_templateObject701||(_templateObject701=(0,_taggedTemplateLiteral2.default)([\"{ ...\",\", $$slots: @get_custom_elements_slots(this) }\"])),init_props);}var declaration=b(_templateObject702||(_templateObject702=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tclass \",\" extends @SvelteElement {\\n\\t\\t\\t\\tconstructor(options) {\\n\\t\\t\\t\\t\\tsuper();\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\t@init(this, { target: this.shadowRoot, props: \",\", customElement: true }, \",\", \",\", \",\", \",\", null, \",\");\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\tif (options) {\\n\\t\\t\\t\\t\\t\\tif (options.target) {\\n\\t\\t\\t\\t\\t\\t\\t@insert(options.target, this, options.anchor);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\"])),name,css.code&&b(_templateObject703||(_templateObject703=(0,_taggedTemplateLiteral2.default)([\"this.shadowRoot.innerHTML = `<style>\",\"\",\"</style>`;\"],[\"this.shadowRoot.innerHTML = \\\\`<style>\",\"\",\"</style>\\\\`;\"])),css.code.replace(/\\\\/g,'\\\\\\\\'),css_sourcemap_enabled&&options.dev?\"\\n/*# sourceMappingURL=\".concat(css.map.toUrl(),\" */\"):''),init_props,definition,has_create_fragment?'create_fragment':'null',not_equal,prop_indexes,dirty,dev_props_check,(props.length>0||uses_props||uses_rest)&&b(_templateObject704||(_templateObject704=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (options.props) {\\n\\t\\t\\t\\t\\t\\t\\tthis.$set(options.props);\\n\\t\\t\\t\\t\\t\\t\\t@flush();\\n\\t\\t\\t\\t\\t\\t}\"]))))[0];if(props.length>0){declaration.body.body.push({type:'MethodDefinition',kind:'get',static:true,computed:false,key:{type:'Identifier',name:'observedAttributes'},value:x(_templateObject705||(_templateObject705=(0,_taggedTemplateLiteral2.default)([\"function() {\\n\\t\\t\\t\\t\\treturn [\",\"];\\n\\t\\t\\t\\t}\"])),props.map(function(prop){return x(_templateObject706||(_templateObject706=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"])),prop.export_name);}))});}(_declaration$body$bod=declaration.body.body).push.apply(_declaration$body$bod,accessors);body.push(declaration);if(component.tag!=null){body.push(b(_templateObject707||(_templateObject707=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@_customElements.define(\\\"\",\"\\\", \",\");\\n\\t\\t\\t\"])),component.tag,name));}}else{var _declaration$body$bod2;var superclass={type:'Identifier',name:options.dev?'@SvelteComponentDev':'@SvelteComponent'};var optional_parameters=[];if(should_add_css){optional_parameters.push(add_css);}else if(dirty){optional_parameters.push(x(_templateObject708||(_templateObject708=(0,_taggedTemplateLiteral2.default)([\"null\"]))));}if(dirty){optional_parameters.push(dirty);}var _declaration=b(_templateObject709||(_templateObject709=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tclass \",\" extends \",\" {\\n\\t\\t\\t\\tconstructor(options) {\\n\\t\\t\\t\\t\\tsuper(\",\");\\n\\t\\t\\t\\t\\t@init(this, options, \",\", \",\", \",\", \",\", \",\");\\n\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\"])),name,superclass,options.dev&&'options',definition,has_create_fragment?'create_fragment':'null',not_equal,prop_indexes,optional_parameters,options.dev&&b(_templateObject710||(_templateObject710=(0,_taggedTemplateLiteral2.default)([\"@dispatch_dev(\\\"SvelteRegisterComponent\\\", { component: this, tagName: \\\"\",\"\\\", options, id: create_fragment.name });\"])),name.name),dev_props_check)[0];(_declaration$body$bod2=_declaration.body.body).push.apply(_declaration$body$bod2,accessors);body.push(_declaration);}return{js:flatten(body),css:css};}function get_const_tags$1(const_tags){if(const_tags.length===0)return null;return{type:'VariableDeclaration',kind:'let',declarations:const_tags.map(function(const_tag){var assignment=const_tag.node.expression;return{type:'VariableDeclarator',id:assignment.left,init:assignment.right};})};}function AwaitBlock$1(node,renderer,options){renderer.push();renderer.render(node.pending.children,options);var pending=renderer.pop();renderer.push();renderer.render(node.then.children,options);var then=renderer.pop();renderer.add_expression(x(_templateObject711||(_templateObject711=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\tfunction(__value) {\\n\\t\\t\\tif (@is_promise(__value)) {\\n\\t\\t\\t\\t__value.then(null, @noop);\\n\\t\\t\\t\\treturn \",\";\\n\\t\\t\\t}\\n\\t\\t\\treturn (function(\",\") { \",\"; return \",\"; }(__value));\\n\\t\\t}(\",\")\\n\\t\"])),pending,node.then_node?node.then_node:'',get_const_tags$1(node.then.const_tags),then,node.expression.node));}function Comment$2(node,renderer,options){if(options.preserveComments){renderer.add_string(\"<!--\".concat(node.data,\"-->\"));}}function DebugTag$1(node,renderer,options){if(!options.dev)return;var filename=options.filename||null;var _options$locate=options.locate(node.start+1),line=_options$locate.line,column=_options$locate.column;var obj=x(_templateObject712||(_templateObject712=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\",\"\\n\\t}\"])),node.expressions.map(function(e){return p(_templateObject713||(_templateObject713=(0,_taggedTemplateLiteral2.default)([\"\",\"\"])),e.node.name);}));renderer.add_expression(x(_templateObject714||(_templateObject714=(0,_taggedTemplateLiteral2.default)([\"@debug(\",\", \",\", \",\", \",\")\"])),filename?x(_templateObject715||(_templateObject715=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"])),filename):x(_templateObject716||(_templateObject716=(0,_taggedTemplateLiteral2.default)([\"null\"]))),line-1,column,obj));}function EachBlock$1(node,renderer,options){var args=[node.context_node];if(node.index)args.push({type:'Identifier',name:node.index});renderer.push();renderer.render(node.children,options);var result=renderer.pop();var consequent=x(_templateObject717||(_templateObject717=(0,_taggedTemplateLiteral2.default)([\"@each(\",\", (\",\") => { \",\"; return \",\" })\"])),node.expression.node,args,get_const_tags$1(node.const_tags),result);if(node.else){renderer.push();renderer.render(node.else.children,options);var alternate=renderer.pop();renderer.add_expression(x(_templateObject718||(_templateObject718=(0,_taggedTemplateLiteral2.default)([\"\",\".length ? \",\" : \",\"\"])),node.expression.node,consequent,alternate));}else{renderer.add_expression(consequent);}}function get_class_attribute_value(attribute){// handle special case — `class={possiblyUndefined}` with scoped CSS\nif(attribute.chunks.length===2&&attribute.chunks[1].synthetic){var _value14=attribute.chunks[0].node;return x(_templateObject719||(_templateObject719=(0,_taggedTemplateLiteral2.default)([\"@escape(@null_to_empty(\",\")) + \\\"\",\"\\\"\"])),_value14,attribute.chunks[1].data);}return get_attribute_value(attribute);}function get_attribute_value(attribute){if(attribute.chunks.length===0)return x(_templateObject720||(_templateObject720=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"])));return attribute.chunks.map(function(chunk){return chunk.type==='Text'?string_literal(chunk.data.replace(/\"/g,'&quot;')):x(_templateObject721||(_templateObject721=(0,_taggedTemplateLiteral2.default)([\"@escape(\",\")\"])),chunk.node);}).reduce(function(lhs,rhs){return x(_templateObject722||(_templateObject722=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"])),lhs,rhs);});}function get_attribute_expression(attribute){if(attribute.chunks.length===1&&attribute.chunks[0].type==='Expression'){return attribute.chunks[0].node;}return get_attribute_value(attribute);}// source: https://html.spec.whatwg.org/multipage/indices.html\nvar boolean_attributes=new Set(['allowfullscreen','allowpaymentrequest','async','autofocus','autoplay','checked','controls','default','defer','disabled','formnovalidate','hidden','ismap','loop','multiple','muted','nomodule','novalidate','open','playsinline','readonly','required','reversed','selected']);// similar logic from `compile/render_dom/wrappers/Fragment`\n// We want to remove trailing whitespace inside an element/component/block,\n// *unless* there is no whitespace between this node and its next sibling\nfunction remove_whitespace_children(children,next){var nodes=[];var last_child;var i=children.length;while(i--){var child=children[i];if(child.type==='Text'){if(child.should_skip()){continue;}var _data5=child.data;if(nodes.length===0){var should_trim=next?next.type==='Text'&&/^\\s/.test(next.data)&&trimmable_at$1(child,next):!child.has_ancestor('EachBlock');if(should_trim){_data5=trim_end(_data5);if(!_data5)continue;}}// glue text nodes (which could e.g. be separated by comments) together\nif(last_child&&last_child.type==='Text'){last_child.data=_data5+last_child.data;continue;}nodes.unshift(child);link(last_child,last_child=child);}else{nodes.unshift(child);link(last_child,last_child=child);}}var first=nodes[0];if(first&&first.type==='Text'){first.data=trim_start(first.data);if(!first.data){first.var=null;nodes.shift();if(nodes[0]){nodes[0].prev=null;}}}return nodes;}function trimmable_at$1(child,next_sibling){// Whitespace is trimmable if one of the following is true:\n// The child and its sibling share a common nearest each block (not at an each block boundary)\n// The next sibling's previous node is an each block\nreturn next_sibling.find_nearest(/EachBlock/)===child.find_nearest(/EachBlock/)||next_sibling.prev.type==='EachBlock';}function Element$1(node,renderer,options){var children=remove_whitespace_children(node.children,node.next);// awkward special case\nvar node_contents;var contenteditable=node.name!=='textarea'&&node.name!=='input'&&node.attributes.some(function(attribute){return attribute.name==='contenteditable';});renderer.add_string(\"<\".concat(node.name));var class_expression_list=node.classes.map(function(class_directive){var expression=class_directive.expression,name=class_directive.name;var snippet=expression?expression.node:x(_templateObject723||(_templateObject723=(0,_taggedTemplateLiteral2.default)([\"#ctx.\",\"\"])),name);// TODO is this right?\nreturn x(_templateObject724||(_templateObject724=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \\\"\",\"\\\" : \\\"\\\"\"])),snippet,name);});if(node.needs_manual_style_scoping){class_expression_list.push(x(_templateObject725||(_templateObject725=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"])),node.component.stylesheet.id));}var class_expression=class_expression_list.length>0&&class_expression_list.reduce(function(lhs,rhs){return x(_templateObject726||(_templateObject726=(0,_taggedTemplateLiteral2.default)([\"\",\" + ' ' + \",\"\"])),lhs,rhs);});var style_expression_list=node.styles.map(function(style_directive){var name=style_directive.name,expression=style_directive.expression.node;return p(_templateObject727||(_templateObject727=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\": \",\"\"])),name,expression);});var style_expression=style_expression_list.length>0&&x(_templateObject728||(_templateObject728=(0,_taggedTemplateLiteral2.default)([\"{ \",\" }\"])),style_expression_list);if(node.attributes.some(function(attr){return attr.is_spread;})){// TODO dry this out\nvar args=[];node.attributes.forEach(function(attribute){if(attribute.is_spread){args.push(x(_templateObject729||(_templateObject729=(0,_taggedTemplateLiteral2.default)([\"@escape_object(\",\")\"])),attribute.expression.node));}else{var attr_name=node.namespace===namespaces.foreign?attribute.name:fix_attribute_casing(attribute.name);var name=attribute.name.toLowerCase();if(name==='value'&&node.name.toLowerCase()==='textarea'){node_contents=get_attribute_value(attribute);}else if(attribute.is_true){args.push(x(_templateObject730||(_templateObject730=(0,_taggedTemplateLiteral2.default)([\"{ \",\": true }\"])),attr_name));}else if(boolean_attributes.has(name)&&attribute.chunks.length===1&&attribute.chunks[0].type!=='Text'){// a boolean attribute with one non-Text chunk\nargs.push(x(_templateObject731||(_templateObject731=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" || null }\"])),attr_name,attribute.chunks[0].node));}else if(attribute.chunks.length===1&&attribute.chunks[0].type!=='Text'){var snippet=attribute.chunks[0].node;args.push(x(_templateObject732||(_templateObject732=(0,_taggedTemplateLiteral2.default)([\"{ \",\": @escape_attribute_value(\",\") }\"])),attr_name,snippet));}else{args.push(x(_templateObject733||(_templateObject733=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"])),attr_name,get_attribute_value(attribute)));}}});renderer.add_expression(x(_templateObject734||(_templateObject734=(0,_taggedTemplateLiteral2.default)([\"@spread([\",\"], { classes: \",\", styles: \",\" })\"])),args,class_expression,style_expression));}else{var add_class_attribute=!!class_expression;var add_style_attribute=!!style_expression;node.attributes.forEach(function(attribute){var name=attribute.name.toLowerCase();var attr_name=node.namespace===namespaces.foreign?attribute.name:fix_attribute_casing(attribute.name);if(name==='value'&&node.name.toLowerCase()==='textarea'){node_contents=get_attribute_value(attribute);}else if(attribute.is_true){renderer.add_string(\" \".concat(attr_name));}else if(boolean_attributes.has(name)&&attribute.chunks.length===1&&attribute.chunks[0].type!=='Text'){// a boolean attribute with one non-Text chunk\nrenderer.add_string(' ');renderer.add_expression(x(_templateObject735||(_templateObject735=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \\\"\",\"\\\" : \\\"\\\"\"])),attribute.chunks[0].node,attr_name));}else if(name==='class'&&class_expression){add_class_attribute=false;renderer.add_string(\" \".concat(attr_name,\"=\\\"\"));renderer.add_expression(x(_templateObject736||(_templateObject736=(0,_taggedTemplateLiteral2.default)([\"[\",\", \",\"].join(' ').trim()\"])),get_class_attribute_value(attribute),class_expression));renderer.add_string('\"');}else if(name==='style'&&style_expression){add_style_attribute=false;renderer.add_expression(x(_templateObject737||(_templateObject737=(0,_taggedTemplateLiteral2.default)([\"@add_styles(@merge_ssr_styles(\",\", \",\"))\"])),get_attribute_value(attribute),style_expression));}else if(attribute.chunks.length===1&&attribute.chunks[0].type!=='Text'){var snippet=attribute.chunks[0].node;renderer.add_expression(x(_templateObject738||(_templateObject738=(0,_taggedTemplateLiteral2.default)([\"@add_attribute(\\\"\",\"\\\", \",\", \",\")\"])),attr_name,snippet,boolean_attributes.has(name)?1:0));}else{renderer.add_string(\" \".concat(attr_name,\"=\\\"\"));renderer.add_expression((name==='class'?get_class_attribute_value:get_attribute_value)(attribute));renderer.add_string('\"');}});if(add_class_attribute){renderer.add_expression(x(_templateObject739||(_templateObject739=(0,_taggedTemplateLiteral2.default)([\"@add_classes((\",\").trim())\"])),class_expression));}if(add_style_attribute){renderer.add_expression(x(_templateObject740||(_templateObject740=(0,_taggedTemplateLiteral2.default)([\"@add_styles(\",\")\"])),style_expression));}}node.bindings.forEach(function(binding){var name=binding.name,expression=binding.expression;if(binding.is_readonly){return;}if(name==='group'){var value_attribute=node.attributes.find(function(_ref26){var name=_ref26.name;return name==='value';});if(value_attribute){var _value15=get_attribute_expression(value_attribute);var type=node.get_static_attribute_value('type');var bound=expression.node;var condition=type==='checkbox'?x(_templateObject741||(_templateObject741=(0,_taggedTemplateLiteral2.default)([\"~\",\".indexOf(\",\")\"])),bound,_value15):x(_templateObject742||(_templateObject742=(0,_taggedTemplateLiteral2.default)([\"\",\" === \",\"\"])),_value15,bound);renderer.add_expression(x(_templateObject743||(_templateObject743=(0,_taggedTemplateLiteral2.default)([\"\",\" ? @add_attribute(\\\"checked\\\", true, 1) : \\\"\\\"\"])),condition));}}else if(contenteditable&&(name==='textContent'||name==='innerHTML')){node_contents=expression.node;// TODO where was this used?\n// value = name === 'textContent' ? x`@escape($$value)` : x`$$value`;\n}else if(binding.name==='value'&&node.name==='textarea'){var snippet=expression.node;node_contents=x(_templateObject744||(_templateObject744=(0,_taggedTemplateLiteral2.default)([\"\",\" || \\\"\\\"\"])),snippet);}else if(binding.name==='value'&&node.name==='select');else{var _snippet5=expression.node;renderer.add_expression(x(_templateObject745||(_templateObject745=(0,_taggedTemplateLiteral2.default)([\"@add_attribute(\\\"\",\"\\\", \",\", \",\")\"])),name,_snippet5,boolean_attributes.has(name)?1:0));}});if(options.hydratable&&options.head_id){renderer.add_string(\" data-svelte=\\\"\".concat(options.head_id,\"\\\"\"));}renderer.add_string('>');if(node_contents!==undefined){if(contenteditable){renderer.push();renderer.render(children,options);var result=renderer.pop();renderer.add_expression(x(_templateObject746||(_templateObject746=(0,_taggedTemplateLiteral2.default)([\"($$value => $$value === void 0 ? \",\" : $$value)(\",\")\"])),result,node_contents));}else{renderer.add_expression(node_contents);}if(!is_void(node.name)){renderer.add_string(\"</\".concat(node.name,\">\"));}}else{renderer.render(children,options);if(!is_void(node.name)){renderer.add_string(\"</\".concat(node.name,\">\"));}}}function Head$1(node,renderer,options){var head_options=Object.assign(Object.assign({},options),{head_id:node.id});renderer.push();renderer.render(node.children,head_options);var result=renderer.pop();renderer.add_expression(x(_templateObject747||(_templateObject747=(0,_taggedTemplateLiteral2.default)([\"$$result.head += \",\", \\\"\\\"\"])),result));}function HtmlTag(node,renderer,options){if(options.hydratable)renderer.add_string('<!-- HTML_TAG_START -->');renderer.add_expression(node.expression.node);if(options.hydratable)renderer.add_string('<!-- HTML_TAG_END -->');}function IfBlock$1(node,renderer,options){var condition=node.expression.node;renderer.push();renderer.render(node.children,options);var consequent=renderer.pop();renderer.push();if(node.else)renderer.render(node.else.children,options);var alternate=renderer.pop();renderer.add_expression(x(_templateObject748||(_templateObject748=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \",\" : \",\"\"])),condition,consequent,alternate));}function get_prop_value(attribute){if(attribute.is_true)return x(_templateObject749||(_templateObject749=(0,_taggedTemplateLiteral2.default)([\"true\"])));if(attribute.chunks.length===0)return x(_templateObject750||(_templateObject750=(0,_taggedTemplateLiteral2.default)([\"''\"])));return attribute.chunks.map(function(chunk){if(chunk.type==='Text')return string_literal(chunk.data);return chunk.node;}).reduce(function(lhs,rhs){return x(_templateObject751||(_templateObject751=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"])),lhs,rhs);});}function InlineComponent$1(node,renderer,options){var binding_props=[];var binding_fns=[];node.bindings.forEach(function(binding){renderer.has_bindings=true;// TODO this probably won't work for contextual bindings\nvar snippet=binding.expression.node;binding_props.push(p(_templateObject752||(_templateObject752=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"])),binding.name,snippet));binding_fns.push(p(_templateObject753||(_templateObject753=(0,_taggedTemplateLiteral2.default)([\"\",\": $$value => { \",\" = $$value; $$settled = false }\"])),binding.name,snippet));});var uses_spread=node.attributes.find(function(attr){return attr.is_spread;});var props;if(uses_spread){props=x(_templateObject754||(_templateObject754=(0,_taggedTemplateLiteral2.default)([\"@_Object.assign(\",\")\"])),node.attributes.map(function(attribute){if(attribute.is_spread){return attribute.expression.node;}else{return x(_templateObject755||(_templateObject755=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"])),attribute.name,get_prop_value(attribute));}}).concat(binding_props.map(function(p){return x(_templateObject756||(_templateObject756=(0,_taggedTemplateLiteral2.default)([\"{ \",\" }\"])),p);})));}else{props=x(_templateObject757||(_templateObject757=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\t\",\",\\n\\t\\t\\t\",\"\\n\\t\\t}\"])),node.attributes.map(function(attribute){return p(_templateObject758||(_templateObject758=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"])),attribute.name,get_prop_value(attribute));}),binding_props);}var bindings=x(_templateObject759||(_templateObject759=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\",\"\\n\\t}\"])),binding_fns);var expression=node.name==='svelte:self'?renderer.name:node.name==='svelte:component'?x(_templateObject760||(_templateObject760=(0,_taggedTemplateLiteral2.default)([\"(\",\") || @missing_component\"])),node.expression.node):node.name.split('.').reduce(function(lhs,rhs){return x(_templateObject761||(_templateObject761=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"])),lhs,rhs);});var slot_fns=[];var children=node.children;if(children.length){var slot_scopes=new Map();renderer.render(children,Object.assign({},options,{slot_scopes:slot_scopes}));slot_scopes.forEach(function(_ref27,name){var input=_ref27.input,output=_ref27.output,statements=_ref27.statements;slot_fns.push(p(_templateObject762||(_templateObject762=(0,_taggedTemplateLiteral2.default)([\"\",\": (\",\") => { \",\"; return \",\"; }\"])),name,input,statements,output));});}var slots=x(_templateObject763||(_templateObject763=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\",\"\\n\\t}\"])),slot_fns);if(node.css_custom_properties.length>0){renderer.add_string('<div style=\"display: contents;');node.css_custom_properties.forEach(function(attr){renderer.add_string(\" \".concat(attr.name,\":\"));renderer.add_expression(get_attribute_value(attr));renderer.add_string(';');});renderer.add_string('\">');}renderer.add_expression(x(_templateObject764||(_templateObject764=(0,_taggedTemplateLiteral2.default)([\"@validate_component(\",\", \\\"\",\"\\\").$$render($$result, \",\", \",\", \",\")\"])),expression,node.name,props,bindings,slots));if(node.css_custom_properties.length>0){renderer.add_string('</div>');}}function KeyBlock$1(node,renderer,options){renderer.render(node.children,options);}function get_slot_scope(lets){if(lets.length===0)return null;return{type:'ObjectPattern',properties:lets.map(function(l){return{type:'Property',kind:'init',method:false,shorthand:false,computed:false,key:l.name,value:l.value||l.name};})};}function Slot$1(node,renderer,options){var slot_data=get_slot_data(node.values);var slot=node.get_static_attribute_value('slot');var nearest_inline_component=node.find_nearest(/InlineComponent/);if(slot&&nearest_inline_component){renderer.push();}renderer.push();renderer.render(node.children,options);var result=renderer.pop();renderer.add_expression(x(_templateObject765||(_templateObject765=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t#slots.\",\"\\n\\t\\t\\t? #slots.\",\"(\",\")\\n\\t\\t\\t: \",\"\\n\\t\"])),node.slot_name,node.slot_name,slot_data,result));if(slot&&nearest_inline_component){var lets=node.lets;var seen=new Set(lets.map(function(l){return l.name.name;}));nearest_inline_component.lets.forEach(function(l){if(!seen.has(l.name.name))lets.push(l);});options.slot_scopes.set(slot,{input:get_slot_scope(node.lets),output:renderer.pop()});}}function SlotTemplate$1(node,renderer,options){var parent_inline_component=node.parent;var children=remove_whitespace_children(node instanceof SlotTemplate?node.children:[node],node.next);renderer.push();renderer.render(children,options);var lets=node.lets;var seen=new Set(lets.map(function(l){return l.name.name;}));parent_inline_component.lets.forEach(function(l){if(!seen.has(l.name.name))lets.push(l);});var slot_fragment_content=renderer.pop();if(!is_empty_template_literal(slot_fragment_content)){if(options.slot_scopes.has(node.slot_template_name)){if(node.slot_template_name==='default'){throw new Error('Found elements without slot attribute when using slot=\"default\"');}throw new Error(\"Duplicate slot name \\\"\".concat(node.slot_template_name,\"\\\" in <\").concat(parent_inline_component.name,\">\"));}options.slot_scopes.set(node.slot_template_name,{input:get_slot_scope(node.lets),output:slot_fragment_content,statements:get_const_tags$1(node.const_tags)});}}function is_empty_template_literal(template_literal){return template_literal.expressions.length===0&&template_literal.quasis.length===1&&template_literal.quasis[0].value.raw==='';}function Tag$2(node,renderer,_options){var snippet=node.expression.node;renderer.add_expression(node.parent&&node.parent.type==='Element'&&node.parent.name==='style'?snippet:x(_templateObject766||(_templateObject766=(0,_taggedTemplateLiteral2.default)([\"@escape(\",\")\"])),snippet));}function Text$1(node,renderer,_options){var text=node.data;if(!node.parent||node.parent.type!=='Element'||node.parent.name!=='script'&&node.parent.name!=='style'){// unless this Text node is inside a <script> or <style> element, escape &,<,>\ntext=escape_html(text);}renderer.add_string(text);}function Title$1(node,renderer,options){renderer.push();renderer.add_string('<title>');renderer.render(node.children,options);renderer.add_string('</title>');var result=renderer.pop();renderer.add_expression(x(_templateObject767||(_templateObject767=(0,_taggedTemplateLiteral2.default)([\"$$result.title = \",\", \\\"\\\"\"])),result));}function noop$1(){}var handlers$1={AwaitBlock:AwaitBlock$1,Body:noop$1,Comment:Comment$2,DebugTag:DebugTag$1,EachBlock:EachBlock$1,Element:Element$1,Head:Head$1,IfBlock:IfBlock$1,InlineComponent:InlineComponent$1,KeyBlock:KeyBlock$1,MustacheTag:Tag$2,Options:noop$1,RawMustacheTag:HtmlTag,Slot:Slot$1,SlotTemplate:SlotTemplate$1,Text:Text$1,Title:Title$1,Window:noop$1};var Renderer$1=/*#__PURE__*/function(){function Renderer$1(_ref28){var name=_ref28.name;(0,_classCallCheck2.default)(this,Renderer$1);this.has_bindings=false;this.stack=[];this.targets=[];this.name=name;this.push();}(0,_createClass2.default)(Renderer$1,[{key:\"add_string\",value:function add_string(str){this.current.value+=escape_template(str);}},{key:\"add_expression\",value:function add_expression(node){this.literal.quasis.push({type:'TemplateElement',value:{raw:this.current.value,cooked:null},tail:false});this.literal.expressions.push(node);this.current.value='';}},{key:\"push\",value:function push(){var current=this.current={value:''};var literal=this.literal={type:'TemplateLiteral',expressions:[],quasis:[]};this.stack.push({current:current,literal:literal});}},{key:\"pop\",value:function pop(){this.literal.quasis.push({type:'TemplateElement',value:{raw:this.current.value,cooked:null},tail:true});var popped=this.stack.pop();var last=this.stack[this.stack.length-1];if(last){this.literal=last.literal;this.current=last.current;}return popped.literal;}},{key:\"render\",value:function render(nodes,options){var _this80=this;nodes.forEach(function(node){var handler=handlers$1[node.type];if(!handler){throw new Error(\"No handler for '\".concat(node.type,\"' nodes\"));}handler(node,_this80,options);});}}]);return Renderer$1;}();function ssr(component,options){var renderer=new Renderer$1({name:component.name});var name=component.name;// create $$render function\nrenderer.render(trim(component.fragment.children),Object.assign({locate:component.locate},options));// TODO put this inside the Renderer class\nvar literal=renderer.pop();// TODO concatenate CSS maps\nvar css=options.customElement?{code:null,map:null}:component.stylesheet.render(options.filename,true);var uses_rest=component.var_lookup.has('$$restProps');var props=component.vars.filter(function(variable){return!variable.module&&variable.export_name;});var rest=uses_rest?b(_templateObject768||(_templateObject768=(0,_taggedTemplateLiteral2.default)([\"let $$restProps = @compute_rest_props($$props, [\",\"]);\"])),props.map(function(prop){return\"\\\"\".concat(prop.export_name,\"\\\"\");}).join(',')):null;var uses_slots=component.var_lookup.has('$$slots');var slots=uses_slots?b(_templateObject769||(_templateObject769=(0,_taggedTemplateLiteral2.default)([\"let $$slots = @compute_slots(#slots);\"]))):null;var reactive_stores=component.vars.filter(function(variable){return variable.name[0]==='$'&&variable.name[1]!=='$';});var reactive_store_subscriptions=reactive_stores.filter(function(store){var variable=component.var_lookup.get(store.name.slice(1));return!variable||variable.hoistable;}).map(function(_ref29){var name=_ref29.name;var store_name=name.slice(1);return b(_templateObject770||(_templateObject770=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\" = @subscribe(\",\", #value => \",\" = #value)\\n\\t\\t\\t\"])),component.compile_options.dev&&b(_templateObject771||(_templateObject771=(0,_taggedTemplateLiteral2.default)([\"@validate_store(\",\", '\",\"');\"])),store_name,store_name),\"$$unsubscribe_\".concat(store_name),store_name,name);});var reactive_store_unsubscriptions=reactive_stores.map(function(_ref30){var name=_ref30.name;return b(_templateObject772||(_templateObject772=(0,_taggedTemplateLiteral2.default)([\"\",\"()\"])),\"$$unsubscribe_\".concat(name.slice(1)));});var reactive_store_declarations=reactive_stores.map(function(_ref31){var name=_ref31.name;var store_name=name.slice(1);var store=component.var_lookup.get(store_name);if(store&&store.reassigned){var unsubscribe=\"$$unsubscribe_\".concat(store_name);var subscribe=\"$$subscribe_\".concat(store_name);return b(_templateObject773||(_templateObject773=(0,_taggedTemplateLiteral2.default)([\"let \",\", \",\" = @noop, \",\" = () => (\",\"(), \",\" = @subscribe(\",\", $$value => \",\" = $$value), \",\")\"])),name,unsubscribe,subscribe,unsubscribe,unsubscribe,store_name,name,store_name);}return b(_templateObject774||(_templateObject774=(0,_taggedTemplateLiteral2.default)([\"let \",\", \",\";\"])),name,\"$$unsubscribe_\".concat(store_name));});// instrument get/set store value\nif(component.ast.instance){var _scope4=component.instance_scope;var map=component.instance_scope_map;walk(component.ast.instance.content,{enter:function enter(node){if(map.has(node)){_scope4=map.get(node);}},leave:function leave(node){if(map.has(node)){_scope4=_scope4.parent;}if(node.type==='AssignmentExpression'||node.type==='UpdateExpression'){var assignee=node.type==='AssignmentExpression'?node.left:node.argument;var _names3=new Set(extract_names(assignee));var to_invalidate=new Set();var _iterator13=_createForOfIteratorHelper(_names3),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var _name5=_step13.value;var variable=component.var_lookup.get(_name5);if(variable&&!variable.hoistable&&!variable.global&&!variable.module&&(variable.subscribable||variable.name[0]==='$')){to_invalidate.add(variable.name);}}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}if(to_invalidate.size){this.replace(invalidate({component:component},_scope4,node,to_invalidate,true));}}}});}component.rewrite_props(function(_ref32){var name=_ref32.name,reassigned=_ref32.reassigned;var value=\"$\".concat(name);var insert=reassigned?b(_templateObject775||(_templateObject775=(0,_taggedTemplateLiteral2.default)([\"\",\"()\"])),\"$$subscribe_\".concat(name)):b(_templateObject776||(_templateObject776=(0,_taggedTemplateLiteral2.default)([\"\",\" = @subscribe(\",\", #value => $\",\" = #value)\"])),\"$$unsubscribe_\".concat(name),name,value);if(component.compile_options.dev){insert=b(_templateObject777||(_templateObject777=(0,_taggedTemplateLiteral2.default)([\"@validate_store(\",\", '\",\"'); \",\"\"])),name,name,insert);}return insert;});var instance_javascript=component.extract_javascript(component.ast.instance);// TODO only do this for props with a default value\nvar parent_bindings=instance_javascript?component.vars.filter(function(variable){return!variable.module&&variable.export_name;}).map(function(prop){return b(_templateObject778||(_templateObject778=(0,_taggedTemplateLiteral2.default)([\"if ($$props.\",\" === void 0 && $$bindings.\",\" && \",\" !== void 0) $$bindings.\",\"(\",\");\"])),prop.export_name,prop.export_name,prop.name,prop.export_name,prop.name);}):[];var injected=Array.from(component.injected_reactive_declaration_vars).filter(function(name){var variable=component.var_lookup.get(name);return variable.injected;});var reactive_declarations=component.reactive_declarations.map(function(d){var body=d.node.body;var statement=b(_templateObject779||(_templateObject779=(0,_taggedTemplateLiteral2.default)([\"\",\"\"])),body);if(!d.declaration){// TODO do not add label if it's not referenced\nstatement=b(_templateObject780||(_templateObject780=(0,_taggedTemplateLiteral2.default)([\"$: { \",\" }\"])),statement);}return statement;});var main=renderer.has_bindings?b(_templateObject781||(_templateObject781=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet $$settled;\\n\\t\\t\\tlet $$rendered;\\n\\n\\t\\t\\tdo {\\n\\t\\t\\t\\t$$settled = true;\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t$$rendered = \",\";\\n\\t\\t\\t} while (!$$settled);\\n\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\treturn $$rendered;\\n\\t\\t\"])),reactive_declarations,literal,reactive_store_unsubscriptions):b(_templateObject782||(_templateObject782=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\treturn \",\";\"])),reactive_declarations,reactive_store_unsubscriptions,literal);var blocks=[].concat((0,_toConsumableArray2.default)(injected.map(function(name){return b(_templateObject783||(_templateObject783=(0,_taggedTemplateLiteral2.default)([\"let \",\";\"])),name);})),[rest,slots],(0,_toConsumableArray2.default)(reactive_store_declarations),(0,_toConsumableArray2.default)(reactive_store_subscriptions),[instance_javascript],(0,_toConsumableArray2.default)(parent_bindings),[css.code&&b(_templateObject784||(_templateObject784=(0,_taggedTemplateLiteral2.default)([\"$$result.css.add(#css);\"]))),main]).filter(Boolean);var css_sourcemap_enabled=check_enable_sourcemap(options.enableSourcemap,'css');var js=b(_templateObject785||(_templateObject785=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\n\\t\\tconst \",\" = @create_ssr_component(($$result, $$props, $$bindings, #slots) => {\\n\\t\\t\\t\",\"\\n\\t\\t});\\n\\t\"])),css.code?b(_templateObject786||(_templateObject786=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\tconst #css = {\\n\\t\\t\\tcode: \\\"\",\"\\\",\\n\\t\\t\\tmap: \",\"\\n\\t\\t};\"])),css.code,css_sourcemap_enabled&&css.map?string_literal(css.map.toString()):'null'):null,component.extract_javascript(component.ast.module),component.fully_hoisted,name,blocks);return{js:js,css:css};}function trim(nodes){var start=0;for(;start<nodes.length;start+=1){var _node10=nodes[start];if(_node10.type!=='Text')break;_node10.data=_node10.data.replace(/^\\s+/,'');if(_node10.data)break;}var end=nodes.length;for(;end>start;end-=1){var _node11=nodes[end-1];if(_node11.type!=='Text')break;_node11.data=_node11.data.replace(/\\s+$/,'');if(_node11.data)break;}return nodes.slice(start,end);}var wrappers$1={esm:esm,cjs:cjs};function create_module(program,format,name,banner){var sveltePath=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'svelte';var helpers=arguments.length>5?arguments[5]:undefined;var globals=arguments.length>6?arguments[6]:undefined;var imports=arguments.length>7?arguments[7]:undefined;var module_exports=arguments.length>8?arguments[8]:undefined;var exports_from=arguments.length>9?arguments[9]:undefined;var internal_path=\"\".concat(sveltePath,\"/internal\");helpers.sort(function(a,b){return a.name<b.name?-1:1;});globals.sort(function(a,b){return a.name<b.name?-1:1;});var formatter=wrappers$1[format];if(!formatter){throw new Error(\"options.format is invalid (must be \".concat(list(Object.keys(wrappers$1)),\")\"));}return formatter(program,name,banner,sveltePath,internal_path,helpers,globals,imports,module_exports,exports_from);}function edit_source(source,sveltePath){return source==='svelte'||source.startsWith('svelte/')?source.replace('svelte',sveltePath):source;}function get_internal_globals(globals,helpers){return globals.length>0&&{type:'VariableDeclaration',kind:'const',declarations:[{type:'VariableDeclarator',id:{type:'ObjectPattern',properties:globals.map(function(g){return{type:'Property',method:false,shorthand:false,computed:false,key:{type:'Identifier',name:g.name},value:g.alias,kind:'init'};})},init:helpers.find(function(_ref33){var name=_ref33.name;return name==='globals';}).alias}]};}function esm(program,name,banner,sveltePath,internal_path,helpers,globals,imports,module_exports,exports_from){var import_declaration={type:'ImportDeclaration',specifiers:helpers.map(function(h){return{type:'ImportSpecifier',local:h.alias,imported:{type:'Identifier',name:h.name}};}),source:{type:'Literal',value:internal_path}};var internal_globals=get_internal_globals(globals,helpers);// edit user imports\nfunction rewrite_import(node){var value=edit_source(node.source.value,sveltePath);if(node.source.value!==value){node.source.value=value;node.source.raw=null;}}imports.forEach(rewrite_import);exports_from.forEach(rewrite_import);var exports=module_exports.length>0&&{type:'ExportNamedDeclaration',specifiers:module_exports.map(function(x){return{type:'Specifier',local:{type:'Identifier',name:x.name},exported:{type:'Identifier',name:x.as}};})};program.body=b(_templateObject787||(_templateObject787=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t/* \",\" */\\n\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\n\\t\\texport default \",\";\\n\\t\\t\",\"\\n\\t\"])),banner,import_declaration,internal_globals,imports,exports_from,program.body,name,exports);}function cjs(program,name,banner,sveltePath,internal_path,helpers,globals,imports,module_exports,exports_from){var internal_requires={type:'VariableDeclaration',kind:'const',declarations:[{type:'VariableDeclarator',id:{type:'ObjectPattern',properties:helpers.map(function(h){return{type:'Property',method:false,shorthand:false,computed:false,key:{type:'Identifier',name:h.name},value:h.alias,kind:'init'};})},init:x(_templateObject788||(_templateObject788=(0,_taggedTemplateLiteral2.default)([\"require(\\\"\",\"\\\")\"])),internal_path)}]};var internal_globals=get_internal_globals(globals,helpers);var user_requires=imports.map(function(node){var init=x(_templateObject789||(_templateObject789=(0,_taggedTemplateLiteral2.default)([\"require(\\\"\",\"\\\")\"])),edit_source(node.source.value,sveltePath));if(node.specifiers.length===0){return b(_templateObject790||(_templateObject790=(0,_taggedTemplateLiteral2.default)([\"\",\";\"])),init);}return{type:'VariableDeclaration',kind:'const',declarations:[{type:'VariableDeclarator',id:node.specifiers[0].type==='ImportNamespaceSpecifier'?{type:'Identifier',name:node.specifiers[0].local.name}:{type:'ObjectPattern',properties:node.specifiers.map(function(s){return{type:'Property',method:false,shorthand:false,computed:false,key:s.type==='ImportSpecifier'?s.imported:{type:'Identifier',name:'default'},value:s.local,kind:'init'};})},init:init}]};});var exports=module_exports.map(function(x){return b(_templateObject791||(_templateObject791=(0,_taggedTemplateLiteral2.default)([\"exports.\",\" = \",\";\"])),{type:'Identifier',name:x.as},{type:'Identifier',name:x.name});});var user_exports_from=exports_from.map(function(node){var init=x(_templateObject792||(_templateObject792=(0,_taggedTemplateLiteral2.default)([\"require(\\\"\",\"\\\")\"])),edit_source(node.source.value,sveltePath));return node.specifiers.map(function(specifier){return b(_templateObject793||(_templateObject793=(0,_taggedTemplateLiteral2.default)([\"exports.\",\" = \",\".\",\";\"])),specifier.exported,init,specifier.local);});});program.body=b(_templateObject794||(_templateObject794=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t/* \",\" */\\n\\n\\t\\t\\\"use strict\\\";\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\n\\t\\texports.default = \",\";\\n\\t\\t\",\"\\n\\t\"])),banner,internal_requires,internal_globals,user_requires,user_exports_from,program.body,name,exports);}var Chunk=function Chunk(start,end,content){this.start=start;this.end=end;this.original=content;this.intro='';this.outro='';this.content=content;this.storeName=false;this.edited=false;// we make these non-enumerable, for sanity while debugging\nObject.defineProperties(this,{previous:{writable:true,value:null},next:{writable:true,value:null}});};Chunk.prototype.appendLeft=function appendLeft(content){this.outro+=content;};Chunk.prototype.appendRight=function appendRight(content){this.intro=this.intro+content;};Chunk.prototype.clone=function clone(){var chunk=new Chunk(this.start,this.end,this.original);chunk.intro=this.intro;chunk.outro=this.outro;chunk.content=this.content;chunk.storeName=this.storeName;chunk.edited=this.edited;return chunk;};Chunk.prototype.contains=function contains(index){return this.start<index&&index<this.end;};Chunk.prototype.eachNext=function eachNext(fn){var chunk=this;while(chunk){fn(chunk);chunk=chunk.next;}};Chunk.prototype.eachPrevious=function eachPrevious(fn){var chunk=this;while(chunk){fn(chunk);chunk=chunk.previous;}};Chunk.prototype.edit=function edit(content,storeName,contentOnly){this.content=content;if(!contentOnly){this.intro='';this.outro='';}this.storeName=storeName;this.edited=true;return this;};Chunk.prototype.prependLeft=function prependLeft(content){this.outro=content+this.outro;};Chunk.prototype.prependRight=function prependRight(content){this.intro=content+this.intro;};Chunk.prototype.split=function split(index){var sliceIndex=index-this.start;var originalBefore=this.original.slice(0,sliceIndex);var originalAfter=this.original.slice(sliceIndex);this.original=originalBefore;var newChunk=new Chunk(index,this.end,originalAfter);newChunk.outro=this.outro;this.outro='';this.end=index;if(this.edited){// TODO is this block necessary?...\nnewChunk.edit('',false);this.content='';}else{this.content=originalBefore;}newChunk.next=this.next;if(newChunk.next){newChunk.next.previous=newChunk;}newChunk.previous=this;this.next=newChunk;return newChunk;};Chunk.prototype.toString=function toString(){return this.intro+this.content+this.outro;};Chunk.prototype.trimEnd=function trimEnd(rx){this.outro=this.outro.replace(rx,'');if(this.outro.length){return true;}var trimmed=this.content.replace(rx,'');if(trimmed.length){if(trimmed!==this.content){this.split(this.start+trimmed.length).edit('',undefined,true);}return true;}else{this.edit('',undefined,true);this.intro=this.intro.replace(rx,'');if(this.intro.length){return true;}}};Chunk.prototype.trimStart=function trimStart(rx){this.intro=this.intro.replace(rx,'');if(this.intro.length){return true;}var trimmed=this.content.replace(rx,'');if(trimmed.length){if(trimmed!==this.content){this.split(this.end-trimmed.length);this.edit('',undefined,true);}return true;}else{this.edit('',undefined,true);this.outro=this.outro.replace(rx,'');if(this.outro.length){return true;}}};var btoa$2=function btoa$2(){throw new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');};if(typeof window!=='undefined'&&typeof window.btoa==='function'){btoa$2=function btoa$2(str){return window.btoa(unescape(encodeURIComponent(str)));};}else if(typeof Buffer==='function'){btoa$2=function btoa$2(str){return Buffer.from(str,'utf-8').toString('base64');};}var SourceMap$1=function SourceMap(properties){this.version=3;this.file=properties.file;this.sources=properties.sources;this.sourcesContent=properties.sourcesContent;this.names=properties.names;this.mappings=encode(properties.mappings);};SourceMap$1.prototype.toString=function toString(){return JSON.stringify(this);};SourceMap$1.prototype.toUrl=function toUrl(){return'data:application/json;charset=utf-8;base64,'+btoa$2(this.toString());};function guessIndent(code){var lines=code.split('\\n');var tabbed=lines.filter(function(line){return /^\\t+/.test(line);});var spaced=lines.filter(function(line){return /^ {2,}/.test(line);});if(tabbed.length===0&&spaced.length===0){return null;}// More lines tabbed than spaced? Assume tabs, and\n// default to tabs in the case of a tie (or nothing\n// to go on)\nif(tabbed.length>=spaced.length){return'\\t';}// Otherwise, we need to guess the multiple\nvar min=spaced.reduce(function(previous,current){var numSpaces=/^ +/.exec(current)[0].length;return Math.min(numSpaces,previous);},Infinity);return new Array(min+1).join(' ');}function getRelativePath(from,to){var fromParts=from.split(/[/\\\\]/);var toParts=to.split(/[/\\\\]/);fromParts.pop();// get dirname\nwhile(fromParts[0]===toParts[0]){fromParts.shift();toParts.shift();}if(fromParts.length){var i=fromParts.length;while(i--){fromParts[i]='..';}}return fromParts.concat(toParts).join('/');}var toString$1=Object.prototype.toString;function isObject(thing){return toString$1.call(thing)==='[object Object]';}function getLocator$1(source){var originalLines=source.split('\\n');var lineOffsets=[];for(var i=0,pos=0;i<originalLines.length;i++){lineOffsets.push(pos);pos+=originalLines[i].length+1;}return function locate(index){var i=0;var j=lineOffsets.length;while(i<j){var m=i+j>>1;if(index<lineOffsets[m]){j=m;}else{i=m+1;}}var line=i-1;var column=index-lineOffsets[line];return{line:line,column:column};};}var Mappings=function Mappings(hires){this.hires=hires;this.generatedCodeLine=0;this.generatedCodeColumn=0;this.raw=[];this.rawSegments=this.raw[this.generatedCodeLine]=[];this.pending=null;};Mappings.prototype.addEdit=function addEdit(sourceIndex,content,loc,nameIndex){if(content.length){var segment=[this.generatedCodeColumn,sourceIndex,loc.line,loc.column];if(nameIndex>=0){segment.push(nameIndex);}this.rawSegments.push(segment);}else if(this.pending){this.rawSegments.push(this.pending);}this.advance(content);this.pending=null;};Mappings.prototype.addUneditedChunk=function addUneditedChunk(sourceIndex,chunk,original,loc,sourcemapLocations){var originalCharIndex=chunk.start;var first=true;while(originalCharIndex<chunk.end){if(this.hires||first||sourcemapLocations[originalCharIndex]){this.rawSegments.push([this.generatedCodeColumn,sourceIndex,loc.line,loc.column]);}if(original[originalCharIndex]==='\\n'){loc.line+=1;loc.column=0;this.generatedCodeLine+=1;this.raw[this.generatedCodeLine]=this.rawSegments=[];this.generatedCodeColumn=0;}else{loc.column+=1;this.generatedCodeColumn+=1;}originalCharIndex+=1;first=false;}this.pending=[this.generatedCodeColumn,sourceIndex,loc.line,loc.column];};Mappings.prototype.advance=function advance(str){if(!str){return;}var lines=str.split('\\n');if(lines.length>1){for(var i=0;i<lines.length-1;i++){this.generatedCodeLine++;this.raw[this.generatedCodeLine]=this.rawSegments=[];}this.generatedCodeColumn=0;}this.generatedCodeColumn+=lines[lines.length-1].length;};var n='\\n';var warned={insertLeft:false,insertRight:false,storeName:false};var MagicString=function MagicString(string,options){if(options===void 0)options={};var chunk=new Chunk(0,string.length,string);Object.defineProperties(this,{original:{writable:true,value:string},outro:{writable:true,value:''},intro:{writable:true,value:''},firstChunk:{writable:true,value:chunk},lastChunk:{writable:true,value:chunk},lastSearchedChunk:{writable:true,value:chunk},byStart:{writable:true,value:{}},byEnd:{writable:true,value:{}},filename:{writable:true,value:options.filename},indentExclusionRanges:{writable:true,value:options.indentExclusionRanges},sourcemapLocations:{writable:true,value:{}},storedNames:{writable:true,value:{}},indentStr:{writable:true,value:guessIndent(string)}});this.byStart[0]=chunk;this.byEnd[string.length]=chunk;};MagicString.prototype.addSourcemapLocation=function addSourcemapLocation(char){this.sourcemapLocations[char]=true;};MagicString.prototype.append=function append(content){if(typeof content!=='string'){throw new TypeError('outro content must be a string');}this.outro+=content;return this;};MagicString.prototype.appendLeft=function appendLeft(index,content){if(typeof content!=='string'){throw new TypeError('inserted content must be a string');}this._split(index);var chunk=this.byEnd[index];if(chunk){chunk.appendLeft(content);}else{this.intro+=content;}return this;};MagicString.prototype.appendRight=function appendRight(index,content){if(typeof content!=='string'){throw new TypeError('inserted content must be a string');}this._split(index);var chunk=this.byStart[index];if(chunk){chunk.appendRight(content);}else{this.outro+=content;}return this;};MagicString.prototype.clone=function clone(){var cloned=new MagicString(this.original,{filename:this.filename});var originalChunk=this.firstChunk;var clonedChunk=cloned.firstChunk=cloned.lastSearchedChunk=originalChunk.clone();while(originalChunk){cloned.byStart[clonedChunk.start]=clonedChunk;cloned.byEnd[clonedChunk.end]=clonedChunk;var nextOriginalChunk=originalChunk.next;var nextClonedChunk=nextOriginalChunk&&nextOriginalChunk.clone();if(nextClonedChunk){clonedChunk.next=nextClonedChunk;nextClonedChunk.previous=clonedChunk;clonedChunk=nextClonedChunk;}originalChunk=nextOriginalChunk;}cloned.lastChunk=clonedChunk;if(this.indentExclusionRanges){cloned.indentExclusionRanges=this.indentExclusionRanges.slice();}Object.keys(this.sourcemapLocations).forEach(function(loc){cloned.sourcemapLocations[loc]=true;});return cloned;};MagicString.prototype.generateDecodedMap=function generateDecodedMap(options){var this$1=this;options=options||{};var sourceIndex=0;var names=Object.keys(this.storedNames);var mappings=new Mappings(options.hires);var locate=getLocator$1(this.original);if(this.intro){mappings.advance(this.intro);}this.firstChunk.eachNext(function(chunk){var loc=locate(chunk.start);if(chunk.intro.length){mappings.advance(chunk.intro);}if(chunk.edited){mappings.addEdit(sourceIndex,chunk.content,loc,chunk.storeName?names.indexOf(chunk.original):-1);}else{mappings.addUneditedChunk(sourceIndex,chunk,this$1.original,loc,this$1.sourcemapLocations);}if(chunk.outro.length){mappings.advance(chunk.outro);}});return{file:options.file?options.file.split(/[/\\\\]/).pop():null,sources:[options.source?getRelativePath(options.file||'',options.source):null],sourcesContent:options.includeContent?[this.original]:[null],names:names,mappings:mappings.raw};};MagicString.prototype.generateMap=function generateMap(options){return new SourceMap$1(this.generateDecodedMap(options));};MagicString.prototype.getIndentString=function getIndentString(){return this.indentStr===null?'\\t':this.indentStr;};MagicString.prototype.indent=function indent(indentStr,options){var pattern=/^[^\\r\\n]/gm;if(isObject(indentStr)){options=indentStr;indentStr=undefined;}indentStr=indentStr!==undefined?indentStr:this.indentStr||'\\t';if(indentStr===''){return this;}// noop\noptions=options||{};// Process exclusion ranges\nvar isExcluded={};if(options.exclude){var exclusions=typeof options.exclude[0]==='number'?[options.exclude]:options.exclude;exclusions.forEach(function(exclusion){for(var i=exclusion[0];i<exclusion[1];i+=1){isExcluded[i]=true;}});}var shouldIndentNextCharacter=options.indentStart!==false;var replacer=function replacer(match){if(shouldIndentNextCharacter){return\"\"+indentStr+match;}shouldIndentNextCharacter=true;return match;};this.intro=this.intro.replace(pattern,replacer);var charIndex=0;var chunk=this.firstChunk;while(chunk){var end=chunk.end;if(chunk.edited){if(!isExcluded[charIndex]){chunk.content=chunk.content.replace(pattern,replacer);if(chunk.content.length){shouldIndentNextCharacter=chunk.content[chunk.content.length-1]==='\\n';}}}else{charIndex=chunk.start;while(charIndex<end){if(!isExcluded[charIndex]){var char=this.original[charIndex];if(char==='\\n'){shouldIndentNextCharacter=true;}else if(char!=='\\r'&&shouldIndentNextCharacter){shouldIndentNextCharacter=false;if(charIndex===chunk.start){chunk.prependRight(indentStr);}else{this._splitChunk(chunk,charIndex);chunk=chunk.next;chunk.prependRight(indentStr);}}}charIndex+=1;}}charIndex=chunk.end;chunk=chunk.next;}this.outro=this.outro.replace(pattern,replacer);return this;};MagicString.prototype.insert=function insert(){throw new Error('magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)');};MagicString.prototype.insertLeft=function insertLeft(index,content){if(!warned.insertLeft){console.warn('magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead');// eslint-disable-line no-console\nwarned.insertLeft=true;}return this.appendLeft(index,content);};MagicString.prototype.insertRight=function insertRight(index,content){if(!warned.insertRight){console.warn('magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead');// eslint-disable-line no-console\nwarned.insertRight=true;}return this.prependRight(index,content);};MagicString.prototype.move=function move(start,end,index){if(index>=start&&index<=end){throw new Error('Cannot move a selection inside itself');}this._split(start);this._split(end);this._split(index);var first=this.byStart[start];var last=this.byEnd[end];var oldLeft=first.previous;var oldRight=last.next;var newRight=this.byStart[index];if(!newRight&&last===this.lastChunk){return this;}var newLeft=newRight?newRight.previous:this.lastChunk;if(oldLeft){oldLeft.next=oldRight;}if(oldRight){oldRight.previous=oldLeft;}if(newLeft){newLeft.next=first;}if(newRight){newRight.previous=last;}if(!first.previous){this.firstChunk=last.next;}if(!last.next){this.lastChunk=first.previous;this.lastChunk.next=null;}first.previous=newLeft;last.next=newRight||null;if(!newLeft){this.firstChunk=first;}if(!newRight){this.lastChunk=last;}return this;};MagicString.prototype.overwrite=function overwrite(start,end,content,options){if(typeof content!=='string'){throw new TypeError('replacement content must be a string');}while(start<0){start+=this.original.length;}while(end<0){end+=this.original.length;}if(end>this.original.length){throw new Error('end is out of bounds');}if(start===end){throw new Error('Cannot overwrite a zero-length range – use appendLeft or prependRight instead');}this._split(start);this._split(end);if(options===true){if(!warned.storeName){console.warn('The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string');// eslint-disable-line no-console\nwarned.storeName=true;}options={storeName:true};}var storeName=options!==undefined?options.storeName:false;var contentOnly=options!==undefined?options.contentOnly:false;if(storeName){var original=this.original.slice(start,end);this.storedNames[original]=true;}var first=this.byStart[start];var last=this.byEnd[end];if(first){if(end>first.end&&first.next!==this.byStart[first.end]){throw new Error('Cannot overwrite across a split point');}first.edit(content,storeName,contentOnly);if(first!==last){var chunk=first.next;while(chunk!==last){chunk.edit('',false);chunk=chunk.next;}chunk.edit('',false);}}else{// must be inserting at the end\nvar newChunk=new Chunk(start,end,'').edit(content,storeName);// TODO last chunk in the array may not be the last chunk, if it's moved...\nlast.next=newChunk;newChunk.previous=last;}return this;};MagicString.prototype.prepend=function prepend(content){if(typeof content!=='string'){throw new TypeError('outro content must be a string');}this.intro=content+this.intro;return this;};MagicString.prototype.prependLeft=function prependLeft(index,content){if(typeof content!=='string'){throw new TypeError('inserted content must be a string');}this._split(index);var chunk=this.byEnd[index];if(chunk){chunk.prependLeft(content);}else{this.intro=content+this.intro;}return this;};MagicString.prototype.prependRight=function prependRight(index,content){if(typeof content!=='string'){throw new TypeError('inserted content must be a string');}this._split(index);var chunk=this.byStart[index];if(chunk){chunk.prependRight(content);}else{this.outro=content+this.outro;}return this;};MagicString.prototype.remove=function remove(start,end){while(start<0){start+=this.original.length;}while(end<0){end+=this.original.length;}if(start===end){return this;}if(start<0||end>this.original.length){throw new Error('Character is out of bounds');}if(start>end){throw new Error('end must be greater than start');}this._split(start);this._split(end);var chunk=this.byStart[start];while(chunk){chunk.intro='';chunk.outro='';chunk.edit('');chunk=end>chunk.end?this.byStart[chunk.end]:null;}return this;};MagicString.prototype.lastChar=function lastChar(){if(this.outro.length){return this.outro[this.outro.length-1];}var chunk=this.lastChunk;do{if(chunk.outro.length){return chunk.outro[chunk.outro.length-1];}if(chunk.content.length){return chunk.content[chunk.content.length-1];}if(chunk.intro.length){return chunk.intro[chunk.intro.length-1];}}while(chunk=chunk.previous);if(this.intro.length){return this.intro[this.intro.length-1];}return'';};MagicString.prototype.lastLine=function lastLine(){var lineIndex=this.outro.lastIndexOf(n);if(lineIndex!==-1){return this.outro.substr(lineIndex+1);}var lineStr=this.outro;var chunk=this.lastChunk;do{if(chunk.outro.length>0){lineIndex=chunk.outro.lastIndexOf(n);if(lineIndex!==-1){return chunk.outro.substr(lineIndex+1)+lineStr;}lineStr=chunk.outro+lineStr;}if(chunk.content.length>0){lineIndex=chunk.content.lastIndexOf(n);if(lineIndex!==-1){return chunk.content.substr(lineIndex+1)+lineStr;}lineStr=chunk.content+lineStr;}if(chunk.intro.length>0){lineIndex=chunk.intro.lastIndexOf(n);if(lineIndex!==-1){return chunk.intro.substr(lineIndex+1)+lineStr;}lineStr=chunk.intro+lineStr;}}while(chunk=chunk.previous);lineIndex=this.intro.lastIndexOf(n);if(lineIndex!==-1){return this.intro.substr(lineIndex+1)+lineStr;}return this.intro+lineStr;};MagicString.prototype.slice=function slice(start,end){if(start===void 0)start=0;if(end===void 0)end=this.original.length;while(start<0){start+=this.original.length;}while(end<0){end+=this.original.length;}var result='';// find start chunk\nvar chunk=this.firstChunk;while(chunk&&(chunk.start>start||chunk.end<=start)){// found end chunk before start\nif(chunk.start<end&&chunk.end>=end){return result;}chunk=chunk.next;}if(chunk&&chunk.edited&&chunk.start!==start){throw new Error(\"Cannot use replaced character \"+start+\" as slice start anchor.\");}var startChunk=chunk;while(chunk){if(chunk.intro&&(startChunk!==chunk||chunk.start===start)){result+=chunk.intro;}var containsEnd=chunk.start<end&&chunk.end>=end;if(containsEnd&&chunk.edited&&chunk.end!==end){throw new Error(\"Cannot use replaced character \"+end+\" as slice end anchor.\");}var sliceStart=startChunk===chunk?start-chunk.start:0;var sliceEnd=containsEnd?chunk.content.length+end-chunk.end:chunk.content.length;result+=chunk.content.slice(sliceStart,sliceEnd);if(chunk.outro&&(!containsEnd||chunk.end===end)){result+=chunk.outro;}if(containsEnd){break;}chunk=chunk.next;}return result;};// TODO deprecate this? not really very useful\nMagicString.prototype.snip=function snip(start,end){var clone=this.clone();clone.remove(0,start);clone.remove(end,clone.original.length);return clone;};MagicString.prototype._split=function _split(index){if(this.byStart[index]||this.byEnd[index]){return;}var chunk=this.lastSearchedChunk;var searchForward=index>chunk.end;while(chunk){if(chunk.contains(index)){return this._splitChunk(chunk,index);}chunk=searchForward?this.byStart[chunk.end]:this.byEnd[chunk.start];}};MagicString.prototype._splitChunk=function _splitChunk(chunk,index){if(chunk.edited&&chunk.content.length){// zero-length edited chunks are a special case (overlapping replacements)\nvar loc=getLocator$1(this.original)(index);throw new Error(\"Cannot split a chunk that has already been edited (\"+loc.line+\":\"+loc.column+\" – \\\"\"+chunk.original+\"\\\")\");}var newChunk=chunk.split(index);this.byEnd[index]=chunk;this.byStart[index]=newChunk;this.byEnd[newChunk.end]=newChunk;if(chunk===this.lastChunk){this.lastChunk=newChunk;}this.lastSearchedChunk=chunk;return true;};MagicString.prototype.toString=function toString(){var str=this.intro;var chunk=this.firstChunk;while(chunk){str+=chunk.toString();chunk=chunk.next;}return str+this.outro;};MagicString.prototype.isEmpty=function isEmpty(){var chunk=this.firstChunk;do{if(chunk.intro.length&&chunk.intro.trim()||chunk.content.length&&chunk.content.trim()||chunk.outro.length&&chunk.outro.trim()){return false;}}while(chunk=chunk.next);return true;};MagicString.prototype.length=function length(){var chunk=this.firstChunk;var length=0;do{length+=chunk.intro.length+chunk.content.length+chunk.outro.length;}while(chunk=chunk.next);return length;};MagicString.prototype.trimLines=function trimLines(){return this.trim('[\\\\r\\\\n]');};MagicString.prototype.trim=function trim(charType){return this.trimStart(charType).trimEnd(charType);};MagicString.prototype.trimEndAborted=function trimEndAborted(charType){var rx=new RegExp((charType||'\\\\s')+'+$');this.outro=this.outro.replace(rx,'');if(this.outro.length){return true;}var chunk=this.lastChunk;do{var end=chunk.end;var aborted=chunk.trimEnd(rx);// if chunk was trimmed, we have a new lastChunk\nif(chunk.end!==end){if(this.lastChunk===chunk){this.lastChunk=chunk.next;}this.byEnd[chunk.end]=chunk;this.byStart[chunk.next.start]=chunk.next;this.byEnd[chunk.next.end]=chunk.next;}if(aborted){return true;}chunk=chunk.previous;}while(chunk);return false;};MagicString.prototype.trimEnd=function trimEnd(charType){this.trimEndAborted(charType);return this;};MagicString.prototype.trimStartAborted=function trimStartAborted(charType){var rx=new RegExp('^'+(charType||'\\\\s')+'+');this.intro=this.intro.replace(rx,'');if(this.intro.length){return true;}var chunk=this.firstChunk;do{var end=chunk.end;var aborted=chunk.trimStart(rx);if(chunk.end!==end){// special case...\nif(chunk===this.lastChunk){this.lastChunk=chunk.next;}this.byEnd[chunk.end]=chunk;this.byStart[chunk.next.start]=chunk.next;this.byEnd[chunk.next.end]=chunk.next;}if(aborted){return true;}chunk=chunk.next;}while(chunk);return false;};MagicString.prototype.trimStart=function trimStart(charType){this.trimStartAborted(charType);return this;};var UNKNOWN={};function gather_possible_values(node,set){if(node.type==='Literal'){set.add(node.value);}else if(node.type==='ConditionalExpression'){gather_possible_values(node.consequent,set);gather_possible_values(node.alternate,set);}else{set.add(UNKNOWN);}}var BlockAppliesToNode;(function(BlockAppliesToNode){BlockAppliesToNode[BlockAppliesToNode[\"NotPossible\"]=0]=\"NotPossible\";BlockAppliesToNode[BlockAppliesToNode[\"Possible\"]=1]=\"Possible\";BlockAppliesToNode[BlockAppliesToNode[\"UnknownSelectorType\"]=2]=\"UnknownSelectorType\";})(BlockAppliesToNode||(BlockAppliesToNode={}));var NodeExist;(function(NodeExist){NodeExist[NodeExist[\"Probably\"]=1]=\"Probably\";NodeExist[NodeExist[\"Definitely\"]=2]=\"Definitely\";})(NodeExist||(NodeExist={}));var whitelist_attribute_selector=new Map([['details',new Set(['open'])]]);var Selector$1=/*#__PURE__*/function(){function Selector$1(node,stylesheet){(0,_classCallCheck2.default)(this,Selector$1);this.node=node;this.stylesheet=stylesheet;this.blocks=group_selectors(node);// take trailing :global(...) selectors out of consideration\nvar i=this.blocks.length;while(i>0){if(!this.blocks[i-1].global)break;i-=1;}this.local_blocks=this.blocks.slice(0,i);var host_only=this.blocks.length===1&&this.blocks[0].host;var root_only=this.blocks.length===1&&this.blocks[0].root;this.used=this.local_blocks.length===0||host_only||root_only;}(0,_createClass2.default)(Selector$1,[{key:\"apply\",value:function apply(node){var _this81=this;var to_encapsulate=[];apply_selector(this.local_blocks.slice(),node,to_encapsulate);if(to_encapsulate.length>0){to_encapsulate.forEach(function(_ref34){var node=_ref34.node,block=_ref34.block;_this81.stylesheet.nodes_with_css_class.add(node);block.should_encapsulate=true;});this.used=true;}}},{key:\"minify\",value:function minify(code){var c=null;this.blocks.forEach(function(block,i){if(i>0){if(block.start-c>1){code.overwrite(c,block.start,block.combinator.name||' ');}}c=block.end;});}},{key:\"transform\",value:function transform(code,attr,max_amount_class_specificity_increased){var _this82=this;var amount_class_specificity_to_increase=max_amount_class_specificity_increased-this.blocks.filter(function(block){return block.should_encapsulate;}).length;function remove_global_pseudo_class(selector){var first=selector.children[0];var last=selector.children[selector.children.length-1];code.remove(selector.start,first.start).remove(last.end,selector.end);}function encapsulate_block(block,attr){var _iterator14=_createForOfIteratorHelper(block.selectors),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var _selector2=_step14.value;if(_selector2.type==='PseudoClassSelector'&&_selector2.name==='global'){remove_global_pseudo_class(_selector2);}}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}var i=block.selectors.length;while(i--){var _selector=block.selectors[i];if(_selector.type==='PseudoElementSelector'||_selector.type==='PseudoClassSelector'){if(_selector.name!=='root'&&_selector.name!=='host'){if(i===0)code.prependRight(_selector.start,attr);}continue;}if(_selector.type==='TypeSelector'&&_selector.name==='*'){code.overwrite(_selector.start,_selector.end,attr);}else{code.appendLeft(_selector.end,attr);}break;}}this.blocks.forEach(function(block,index){if(block.global){remove_global_pseudo_class(block.selectors[0]);}if(block.should_encapsulate)encapsulate_block(block,index===_this82.blocks.length-1?attr.repeat(amount_class_specificity_to_increase+1):attr);});}},{key:\"validate\",value:function validate(component){var start=0;var end=this.blocks.length;for(;start<end;start+=1){if(!this.blocks[start].global)break;}for(;end>start;end-=1){if(!this.blocks[end-1].global)break;}for(var _i50=start;_i50<end;_i50+=1){if(this.blocks[_i50].global){return component.error(this.blocks[_i50].selectors[0],compiler_errors.css_invalid_global);}}this.validate_global_with_multiple_selectors(component);}},{key:\"validate_global_with_multiple_selectors\",value:function validate_global_with_multiple_selectors(component){if(this.blocks.length===1&&this.blocks[0].selectors.length===1){// standalone :global() with multiple selectors is OK\nreturn;}var _iterator15=_createForOfIteratorHelper(this.blocks),_step15;try{for(_iterator15.s();!(_step15=_iterator15.n()).done;){var block=_step15.value;var _iterator16=_createForOfIteratorHelper(block.selectors),_step16;try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){var _selector3=_step16.value;if(_selector3.type==='PseudoClassSelector'&&_selector3.name==='global'){if(/[^\\\\],(?!([^([]+[^\\\\]|[^([\\\\])[)\\]])/.test(_selector3.children[0].value)){component.error(_selector3,compiler_errors.css_invalid_global_selector);}}}}catch(err){_iterator16.e(err);}finally{_iterator16.f();}}}catch(err){_iterator15.e(err);}finally{_iterator15.f();}}},{key:\"get_amount_class_specificity_increased\",value:function get_amount_class_specificity_increased(){var count=0;var _iterator17=_createForOfIteratorHelper(this.blocks),_step17;try{for(_iterator17.s();!(_step17=_iterator17.n()).done;){var block=_step17.value;if(block.should_encapsulate){count++;}}}catch(err){_iterator17.e(err);}finally{_iterator17.f();}return count;}}]);return Selector$1;}();function apply_selector(blocks,node,to_encapsulate){var block=blocks.pop();if(!block)return false;if(!node){return block.global&&blocks.every(function(block){return block.global;})||block.host&&blocks.length===0;}switch(block_might_apply_to_node(block,node)){case BlockAppliesToNode.NotPossible:return false;case BlockAppliesToNode.UnknownSelectorType:// bail. TODO figure out what these could be\nto_encapsulate.push({node:node,block:block});return true;}if(block.combinator){if(block.combinator.type==='WhiteSpace'){var _iterator18=_createForOfIteratorHelper(blocks),_step18;try{for(_iterator18.s();!(_step18=_iterator18.n()).done;){var ancestor_block=_step18.value;if(ancestor_block.global){continue;}if(ancestor_block.host){to_encapsulate.push({node:node,block:block});return true;}var parent=node;while(parent=get_element_parent(parent)){if(block_might_apply_to_node(ancestor_block,parent)!==BlockAppliesToNode.NotPossible){to_encapsulate.push({node:parent,block:ancestor_block});}}if(to_encapsulate.length){to_encapsulate.push({node:node,block:block});return true;}}}catch(err){_iterator18.e(err);}finally{_iterator18.f();}if(blocks.every(function(block){return block.global;})){to_encapsulate.push({node:node,block:block});return true;}return false;}else if(block.combinator.name==='>'){var has_global_parent=blocks.every(function(block){return block.global;});if(has_global_parent||apply_selector(blocks,get_element_parent(node),to_encapsulate)){to_encapsulate.push({node:node,block:block});return true;}return false;}else if(block.combinator.name==='+'||block.combinator.name==='~'){var siblings=get_possible_element_siblings(node,block.combinator.name==='+');var has_match=false;// NOTE: if we have :global(), we couldn't figure out what is selected within `:global` due to the\n// css-tree limitation that does not parse the inner selector of :global\n// so unless we are sure there will be no sibling to match, we will consider it as matched\nvar has_global=blocks.some(function(block){return block.global;});if(has_global){if(siblings.size===0&&get_element_parent(node)!==null){return false;}to_encapsulate.push({node:node,block:block});return true;}var _iterator19=_createForOfIteratorHelper(siblings.keys()),_step19;try{for(_iterator19.s();!(_step19=_iterator19.n()).done;){var possible_sibling=_step19.value;if(apply_selector(blocks.slice(),possible_sibling,to_encapsulate)){to_encapsulate.push({node:node,block:block});has_match=true;}}}catch(err){_iterator19.e(err);}finally{_iterator19.f();}return has_match;}// TODO other combinators\nto_encapsulate.push({node:node,block:block});return true;}to_encapsulate.push({node:node,block:block});return true;}function block_might_apply_to_node(block,node){var i=block.selectors.length;var _loop=function _loop(){var selector=block.selectors[i];var name=typeof selector.name==='string'&&selector.name.replace(/\\\\(.)/g,'$1');if(selector.type==='PseudoClassSelector'&&(name==='host'||name==='root')){return{v:BlockAppliesToNode.NotPossible};}if(block.selectors.length===1&&selector.type==='PseudoClassSelector'&&name==='global'){return{v:BlockAppliesToNode.NotPossible};}if(selector.type==='PseudoClassSelector'||selector.type==='PseudoElementSelector'){return\"continue\";}if(selector.type==='ClassSelector'){if(!attribute_matches(node,'class',name,'~=',false)&&!node.classes.some(function(c){return c.name===name;}))return{v:BlockAppliesToNode.NotPossible};}else if(selector.type==='IdSelector'){if(!attribute_matches(node,'id',name,'=',false))return{v:BlockAppliesToNode.NotPossible};}else if(selector.type==='AttributeSelector'){if(!(whitelist_attribute_selector.has(node.name.toLowerCase())&&whitelist_attribute_selector.get(node.name.toLowerCase()).has(selector.name.name.toLowerCase()))&&!attribute_matches(node,selector.name.name,selector.value&&unquote(selector.value),selector.matcher,selector.flags)){return{v:BlockAppliesToNode.NotPossible};}}else if(selector.type==='TypeSelector'){if(node.name.toLowerCase()!==name.toLowerCase()&&name!=='*')return{v:BlockAppliesToNode.NotPossible};}else{return{v:BlockAppliesToNode.UnknownSelectorType};}};while(i--){var _ret=_loop();if(_ret===\"continue\")continue;if((0,_typeof2.default)(_ret)===\"object\")return _ret.v;}return BlockAppliesToNode.Possible;}function test_attribute(operator,expected_value,case_insensitive,value){if(case_insensitive){expected_value=expected_value.toLowerCase();value=value.toLowerCase();}switch(operator){case'=':return value===expected_value;case'~=':return value.split(/\\s/).includes(expected_value);case'|=':return\"\".concat(value,\"-\").startsWith(\"\".concat(expected_value,\"-\"));case'^=':return value.startsWith(expected_value);case'$=':return value.endsWith(expected_value);case'*=':return value.includes(expected_value);default:throw new Error(\"this shouldn't happen\");}}function attribute_matches(node,name,expected_value,operator,case_insensitive){var spread=node.attributes.find(function(attr){return attr.type==='Spread';});if(spread)return true;if(node.bindings.some(function(binding){return binding.name===name;}))return true;var attr=node.attributes.find(function(attr){return attr.name===name;});if(!attr)return false;if(attr.is_true)return operator===null;if(!expected_value)return true;if(attr.chunks.length===1){var _value16=attr.chunks[0];if(!_value16)return false;if(_value16.type==='Text')return test_attribute(operator,expected_value,case_insensitive,_value16.data);}var possible_values=new Set();var prev_values=[];var _iterator20=_createForOfIteratorHelper(attr.chunks),_step20;try{for(_iterator20.s();!(_step20=_iterator20.n()).done;){var chunk=_step20.value;var current_possible_values=new Set();if(chunk.type==='Text'){current_possible_values.add(chunk.data);}else{gather_possible_values(chunk.node,current_possible_values);}// impossible to find out all combinations\nif(current_possible_values.has(UNKNOWN))return true;if(prev_values.length>0){var _ret2=function(){var start_with_space=[];var remaining=[];current_possible_values.forEach(function(current_possible_value){if(/^\\s/.test(current_possible_value)){start_with_space.push(current_possible_value);}else{remaining.push(current_possible_value);}});if(remaining.length>0){if(start_with_space.length>0){prev_values.forEach(function(prev_value){return possible_values.add(prev_value);});}var combined=[];prev_values.forEach(function(prev_value){remaining.forEach(function(value){combined.push(prev_value+value);});});prev_values=combined;start_with_space.forEach(function(value){if(/\\s$/.test(value)){possible_values.add(value);}else{prev_values.push(value);}});return\"continue\";}else{prev_values.forEach(function(prev_value){return possible_values.add(prev_value);});prev_values=[];}}();if(_ret2===\"continue\")continue;}current_possible_values.forEach(function(current_possible_value){if(/\\s$/.test(current_possible_value)){possible_values.add(current_possible_value);}else{prev_values.push(current_possible_value);}});if(prev_values.length<current_possible_values.size){prev_values.push(' ');}if(prev_values.length>20){// might grow exponentially, bail out\nreturn true;}}}catch(err){_iterator20.e(err);}finally{_iterator20.f();}prev_values.forEach(function(prev_value){return possible_values.add(prev_value);});if(possible_values.has(UNKNOWN))return true;var _iterator21=_createForOfIteratorHelper(possible_values),_step21;try{for(_iterator21.s();!(_step21=_iterator21.n()).done;){var _value17=_step21.value;if(test_attribute(operator,expected_value,case_insensitive,_value17))return true;}}catch(err){_iterator21.e(err);}finally{_iterator21.f();}return false;}function unquote(value){if(value.type==='Identifier')return value.name;var str=value.value;if(str[0]===str[str.length-1]&&str[0]===\"'\"||str[0]==='\"'){return str.slice(1,str.length-1);}return str;}function get_element_parent(node){var parent=node;while((parent=parent.parent)&&parent.type!=='Element'){;}return parent;}function get_possible_element_siblings(node,adjacent_only){var result=new Map();var prev=node;while(prev=prev.prev){if(prev.type==='Element'){if(!prev.attributes.find(function(attr){return attr.type==='Attribute'&&attr.name.toLowerCase()==='slot';})){result.set(prev,NodeExist.Definitely);}if(adjacent_only){break;}}else if(prev.type==='EachBlock'||prev.type==='IfBlock'||prev.type==='AwaitBlock'){var possible_last_child=get_possible_last_child(prev,adjacent_only);add_to_map(possible_last_child,result);if(adjacent_only&&has_definite_elements(possible_last_child)){return result;}}}if(!prev||!adjacent_only){var parent=node;var skip_each_for_last_child=node.type==='ElseBlock';while((parent=parent.parent)&&(parent.type==='EachBlock'||parent.type==='IfBlock'||parent.type==='ElseBlock'||parent.type==='AwaitBlock')){var possible_siblings=get_possible_element_siblings(parent,adjacent_only);add_to_map(possible_siblings,result);if(parent.type==='EachBlock'){// first child of each block can select the last child of each block as previous sibling\nif(skip_each_for_last_child){skip_each_for_last_child=false;}else{add_to_map(get_possible_last_child(parent,adjacent_only),result);}}else if(parent.type==='ElseBlock'){skip_each_for_last_child=true;parent=parent.parent;}if(adjacent_only&&has_definite_elements(possible_siblings)){break;}}}return result;}function get_possible_last_child(block,adjacent_only){var result=new Map();if(block.type==='EachBlock'){var each_result=loop_child(block.children,adjacent_only);var else_result=block.else?loop_child(block.else.children,adjacent_only):new Map();var not_exhaustive=!has_definite_elements(else_result);if(not_exhaustive){mark_as_probably(each_result);mark_as_probably(else_result);}add_to_map(each_result,result);add_to_map(else_result,result);}else if(block.type==='IfBlock'){var if_result=loop_child(block.children,adjacent_only);var _else_result=block.else?loop_child(block.else.children,adjacent_only):new Map();var _not_exhaustive=!has_definite_elements(if_result)||!has_definite_elements(_else_result);if(_not_exhaustive){mark_as_probably(if_result);mark_as_probably(_else_result);}add_to_map(if_result,result);add_to_map(_else_result,result);}else if(block.type==='AwaitBlock'){var pending_result=block.pending?loop_child(block.pending.children,adjacent_only):new Map();var then_result=block.then?loop_child(block.then.children,adjacent_only):new Map();var catch_result=block.catch?loop_child(block.catch.children,adjacent_only):new Map();var _not_exhaustive2=!has_definite_elements(pending_result)||!has_definite_elements(then_result)||!has_definite_elements(catch_result);if(_not_exhaustive2){mark_as_probably(pending_result);mark_as_probably(then_result);mark_as_probably(catch_result);}add_to_map(pending_result,result);add_to_map(then_result,result);add_to_map(catch_result,result);}return result;}function has_definite_elements(result){if(result.size===0)return false;var _iterator22=_createForOfIteratorHelper(result.values()),_step22;try{for(_iterator22.s();!(_step22=_iterator22.n()).done;){var exist=_step22.value;if(exist===NodeExist.Definitely){return true;}}}catch(err){_iterator22.e(err);}finally{_iterator22.f();}return false;}function add_to_map(from,to){from.forEach(function(exist,element){to.set(element,higher_existence(exist,to.get(element)));});}function higher_existence(exist1,exist2){if(exist1===undefined||exist2===undefined)return exist1||exist2;return exist1>exist2?exist1:exist2;}function mark_as_probably(result){var _iterator23=_createForOfIteratorHelper(result.keys()),_step23;try{for(_iterator23.s();!(_step23=_iterator23.n()).done;){var key=_step23.value;result.set(key,NodeExist.Probably);}}catch(err){_iterator23.e(err);}finally{_iterator23.f();}}function loop_child(children,adjacent_only){var result=new Map();for(var _i51=children.length-1;_i51>=0;_i51--){var child=children[_i51];if(child.type==='Element'){result.set(child,NodeExist.Definitely);if(adjacent_only){break;}}else if(child.type==='EachBlock'||child.type==='IfBlock'||child.type==='AwaitBlock'){var child_result=get_possible_last_child(child,adjacent_only);add_to_map(child_result,result);if(adjacent_only&&has_definite_elements(child_result)){break;}}}return result;}var Block$2=/*#__PURE__*/function(){function Block$2(combinator){(0,_classCallCheck2.default)(this,Block$2);this.combinator=combinator;this.host=false;this.root=false;this.selectors=[];this.start=null;this.end=null;this.should_encapsulate=false;}(0,_createClass2.default)(Block$2,[{key:\"add\",value:function add(selector){if(this.selectors.length===0){this.start=selector.start;this.host=selector.type==='PseudoClassSelector'&&selector.name==='host';}this.root=this.root||selector.type==='PseudoClassSelector'&&selector.name==='root';this.selectors.push(selector);this.end=selector.end;}},{key:\"global\",get:function get(){return this.selectors.length>=1&&this.selectors[0].type==='PseudoClassSelector'&&this.selectors[0].name==='global'&&this.selectors.every(function(selector){return selector.type==='PseudoClassSelector'||selector.type==='PseudoElementSelector';});}}]);return Block$2;}();function group_selectors(selector){var block=new Block$2(null);var blocks=[block];selector.children.forEach(function(child){if(child.type==='WhiteSpace'||child.type==='Combinator'){block=new Block$2(child);blocks.push(block);}else{block.add(child);}});return blocks;}function remove_css_prefix(name){return name.replace(/^-((webkit)|(moz)|(o)|(ms))-/,'');}var is_keyframes_node=function is_keyframes_node(node){return remove_css_prefix(node.name)==='keyframes';};var at_rule_has_declaration=function at_rule_has_declaration(_ref35){var block=_ref35.block;return block&&block.children&&block.children.find(function(node){return node.type==='Declaration';});};function minify_declarations(code,start,declarations){var c=start;declarations.forEach(function(declaration,i){var separator=i>0?';':'';if(declaration.node.start-c>separator.length){code.overwrite(c,declaration.node.start,separator);}declaration.minify(code);c=declaration.node.end;});return c;}var Rule$1=/*#__PURE__*/function(){function Rule$1(node,stylesheet,parent){(0,_classCallCheck2.default)(this,Rule$1);this.node=node;this.parent=parent;this.selectors=node.prelude.children.map(function(node){return new Selector$1(node,stylesheet);});this.declarations=node.block.children.map(function(node){return new Declaration$1(node);});}(0,_createClass2.default)(Rule$1,[{key:\"apply\",value:function apply(node){this.selectors.forEach(function(selector){return selector.apply(node);});// TODO move the logic in here?\n}},{key:\"is_used\",value:function is_used(dev){if(this.parent&&this.parent.node.type==='Atrule'&&is_keyframes_node(this.parent.node))return true;if(this.declarations.length===0)return dev;return this.selectors.some(function(s){return s.used;});}},{key:\"minify\",value:function minify(code,_dev){var c=this.node.start;var started=false;this.selectors.forEach(function(selector){if(selector.used){var separator=started?',':'';if(selector.node.start-c>separator.length){code.overwrite(c,selector.node.start,separator);}selector.minify(code);c=selector.node.end;started=true;}});code.remove(c,this.node.block.start);c=this.node.block.start+1;c=minify_declarations(code,c,this.declarations);code.remove(c,this.node.block.end-1);}},{key:\"transform\",value:function transform(code,id,keyframes,max_amount_class_specificity_increased){if(this.parent&&this.parent.node.type==='Atrule'&&is_keyframes_node(this.parent.node))return true;var attr=\".\".concat(id);this.selectors.forEach(function(selector){return selector.transform(code,attr,max_amount_class_specificity_increased);});this.declarations.forEach(function(declaration){return declaration.transform(code,keyframes);});}},{key:\"validate\",value:function validate(component){this.selectors.forEach(function(selector){selector.validate(component);});}},{key:\"warn_on_unused_selector\",value:function warn_on_unused_selector(handler){this.selectors.forEach(function(selector){if(!selector.used)handler(selector);});}},{key:\"get_max_amount_class_specificity_increased\",value:function get_max_amount_class_specificity_increased(){return Math.max.apply(Math,(0,_toConsumableArray2.default)(this.selectors.map(function(selector){return selector.get_amount_class_specificity_increased();})));}}]);return Rule$1;}();var Declaration$1=/*#__PURE__*/function(){function Declaration$1(node){(0,_classCallCheck2.default)(this,Declaration$1);this.node=node;}(0,_createClass2.default)(Declaration$1,[{key:\"transform\",value:function transform(code,keyframes){var property=this.node.property&&remove_css_prefix(this.node.property.toLowerCase());if(property==='animation'||property==='animation-name'){this.node.value.children.forEach(function(block){if(block.type==='Identifier'){var name=block.name;if(keyframes.has(name)){code.overwrite(block.start,block.end,keyframes.get(name));}}});}}},{key:\"minify\",value:function minify(code){if(!this.node.property)return;// @apply, and possibly other weird cases?\nvar c=this.node.start+this.node.property.length;var first=this.node.value.children?this.node.value.children[0]:this.node.value;var start=first.start;while(/\\s/.test(code.original[start])){start+=1;}if(start-c>1){code.overwrite(c,start,':');}}}]);return Declaration$1;}();var Atrule$1=/*#__PURE__*/function(){function Atrule$1(node){(0,_classCallCheck2.default)(this,Atrule$1);this.node=node;this.children=[];this.declarations=[];}(0,_createClass2.default)(Atrule$1,[{key:\"apply\",value:function apply(node){if(this.node.name==='media'||this.node.name==='supports'){this.children.forEach(function(child){child.apply(node);});}else if(is_keyframes_node(this.node)){this.children.forEach(function(rule){rule.selectors.forEach(function(selector){selector.used=true;});});}}},{key:\"is_used\",value:function is_used(_dev){return true;// TODO\n}},{key:\"minify\",value:function minify(code,dev){if(this.node.name==='media'){var expression_char=code.original[this.node.prelude.start];var _c2=this.node.start+(expression_char==='('?6:7);if(this.node.prelude.start>_c2)code.remove(_c2,this.node.prelude.start);this.node.prelude.children.forEach(function(query){// TODO minify queries\n_c2=query.end;});code.remove(_c2,this.node.block.start);}else if(this.node.name==='supports'){var _c3=this.node.start+9;if(this.node.prelude.start-_c3>1)code.overwrite(_c3,this.node.prelude.start,' ');this.node.prelude.children.forEach(function(query){// TODO minify queries\n_c3=query.end;});code.remove(_c3,this.node.block.start);}else{var _c4=this.node.start+this.node.name.length+1;if(this.node.prelude){if(this.node.prelude.start-_c4>1)code.overwrite(_c4,this.node.prelude.start,' ');_c4=this.node.prelude.end;}if(this.node.block&&this.node.block.start-_c4>0){code.remove(_c4,this.node.block.start);}}// TODO other atrules\nif(this.node.block){var _c5=this.node.block.start+1;if(this.declarations.length){_c5=minify_declarations(code,_c5,this.declarations);// if the atrule has children, leave the last declaration semicolon alone\nif(this.children.length)_c5++;}this.children.forEach(function(child){if(child.is_used(dev)){code.remove(_c5,child.node.start);child.minify(code,dev);_c5=child.node.end;}});code.remove(_c5,this.node.block.end-1);}}},{key:\"transform\",value:function transform(code,id,keyframes,max_amount_class_specificity_increased){var _this83=this;if(is_keyframes_node(this.node)){this.node.prelude.children.forEach(function(_ref36){var type=_ref36.type,name=_ref36.name,start=_ref36.start,end=_ref36.end;if(type==='Identifier'){if(name.startsWith('-global-')){code.remove(start,start+8);_this83.children.forEach(function(rule){rule.selectors.forEach(function(selector){selector.used=true;});});}else{code.overwrite(start,end,keyframes.get(name));}}});}this.children.forEach(function(child){child.transform(code,id,keyframes,max_amount_class_specificity_increased);});}},{key:\"validate\",value:function validate(component){this.children.forEach(function(child){child.validate(component);});}},{key:\"warn_on_unused_selector\",value:function warn_on_unused_selector(handler){if(this.node.name!=='media')return;this.children.forEach(function(child){child.warn_on_unused_selector(handler);});}},{key:\"get_max_amount_class_specificity_increased\",value:function get_max_amount_class_specificity_increased(){return Math.max.apply(Math,(0,_toConsumableArray2.default)(this.children.map(function(rule){return rule.get_max_amount_class_specificity_increased();})));}}]);return Atrule$1;}();var get_default_css_hash=function get_default_css_hash(_ref37){var css=_ref37.css,hash=_ref37.hash;return\"svelte-\".concat(hash(css));};var Stylesheet=/*#__PURE__*/function(){function Stylesheet(_ref38){var _this84=this;var source=_ref38.source,ast=_ref38.ast,component_name=_ref38.component_name,filename=_ref38.filename,dev=_ref38.dev,_ref38$get_css_hash=_ref38.get_css_hash,get_css_hash=_ref38$get_css_hash===void 0?get_default_css_hash:_ref38$get_css_hash;(0,_classCallCheck2.default)(this,Stylesheet);this.children=[];this.keyframes=new Map();this.nodes_with_css_class=new Set();this.source=source;this.ast=ast;this.filename=filename;this.dev=dev;if(ast.css&&ast.css.children.length){this.id=get_css_hash({filename:filename,name:component_name,css:ast.css.content.styles,hash:hash});this.has_styles=true;var stack=[];var depth=0;var current_atrule=null;walk(ast.css,{enter:function enter(node){if(node.type==='Atrule'){var _atrule=new Atrule$1(node);stack.push(_atrule);if(current_atrule){current_atrule.children.push(_atrule);}else if(depth<=1){_this84.children.push(_atrule);}if(is_keyframes_node(node)){node.prelude.children.forEach(function(expression){if(expression.type==='Identifier'&&!expression.name.startsWith('-global-')){_this84.keyframes.set(expression.name,\"\".concat(_this84.id,\"-\").concat(expression.name));}});}else if(at_rule_has_declaration(node)){var _atrule$declarations;var at_rule_declarations=node.block.children.filter(function(node){return node.type==='Declaration';}).map(function(node){return new Declaration$1(node);});(_atrule$declarations=_atrule.declarations).push.apply(_atrule$declarations,(0,_toConsumableArray2.default)(at_rule_declarations));}current_atrule=_atrule;}if(node.type==='Rule'){var rule=new Rule$1(node,_this84,current_atrule);if(current_atrule){current_atrule.children.push(rule);}else if(depth<=1){_this84.children.push(rule);}}depth+=1;},leave:function leave(node){if(node.type==='Atrule'){stack.pop();current_atrule=stack[stack.length-1];}depth-=1;}});}else{this.has_styles=false;}}(0,_createClass2.default)(Stylesheet,[{key:\"apply\",value:function apply(node){if(!this.has_styles)return;for(var _i52=0;_i52<this.children.length;_i52+=1){var child=this.children[_i52];child.apply(node);}}},{key:\"reify\",value:function reify(){this.nodes_with_css_class.forEach(function(node){node.add_css_class();});}},{key:\"render\",value:function render(file,should_transform_selectors){var _this85=this;if(!this.has_styles){return{code:null,map:null};}var code=new MagicString(this.source);walk(this.ast.css,{enter:function enter(node){code.addSourcemapLocation(node.start);code.addSourcemapLocation(node.end);}});if(should_transform_selectors){var max=Math.max.apply(Math,(0,_toConsumableArray2.default)(this.children.map(function(rule){return rule.get_max_amount_class_specificity_increased();})));this.children.forEach(function(child){child.transform(code,_this85.id,_this85.keyframes,max);});}var c=0;this.children.forEach(function(child){if(child.is_used(_this85.dev)){code.remove(c,child.node.start);child.minify(code,_this85.dev);c=child.node.end;}});code.remove(c,this.source.length);return{code:code.toString(),map:code.generateMap({includeContent:true,source:this.filename,file:file})};}},{key:\"validate\",value:function validate(component){this.children.forEach(function(child){child.validate(component);});}},{key:\"warn_on_unused_selectors\",value:function warn_on_unused_selectors(component){var _this86=this;var ignores=!this.ast.css?[]:extract_ignores_above_position(this.ast.css.start,this.ast.html.children);component.push_ignores(ignores);this.children.forEach(function(child){child.warn_on_unused_selector(function(selector){component.warn(selector.node,compiler_warnings.css_unused_selector(_this86.source.slice(selector.node.start,selector.node.end)));});});component.pop_ignores();}}]);return Stylesheet;}();var test=typeof process!=='undefined'&&process.env.TEST;var TemplateScope=/*#__PURE__*/function(){function TemplateScope(parent){(0,_classCallCheck2.default)(this,TemplateScope);this.owners=new Map();this.parent=parent;this.names=new Set(parent?parent.names:[]);this.dependencies_for_name=new Map(parent?parent.dependencies_for_name:[]);}(0,_createClass2.default)(TemplateScope,[{key:\"add\",value:function add(name,dependencies,owner){this.names.add(name);this.dependencies_for_name.set(name,dependencies);this.owners.set(name,owner);return this;}},{key:\"child\",value:function child(){var child=new TemplateScope(this);return child;}},{key:\"is_top_level\",value:function is_top_level(name){return!this.parent||!this.names.has(name)&&this.parent.is_top_level(name);}},{key:\"get_owner\",value:function get_owner(name){return this.owners.get(name)||this.parent&&this.parent.get_owner(name);}},{key:\"is_let\",value:function is_let(name){var owner=this.get_owner(name);return owner&&(owner.type==='Element'||owner.type==='InlineComponent'||owner.type==='SlotTemplate');}},{key:\"is_await\",value:function is_await(name){var owner=this.get_owner(name);return owner&&(owner.type==='ThenBlock'||owner.type==='CatchBlock');}},{key:\"is_const\",value:function is_const(name){var owner=this.get_owner(name);return owner&&owner.type==='ConstTag';}}]);return TemplateScope;}();var Fragment=/*#__PURE__*/function(_Node$25){(0,_inherits2.default)(Fragment,_Node$25);var _super60=_createSuper(Fragment);function Fragment(component,info){var _this87;(0,_classCallCheck2.default)(this,Fragment);var scope=new TemplateScope();_this87=_super60.call(this,component,null,scope,info);_this87.scope=scope;_this87.children=map_children(component,(0,_assertThisInitialized2.default)(_this87),scope,info.children);return _this87;}return(0,_createClass2.default)(Fragment);}(Node$1);// This file is automatically generated\nvar internal_exports=new Set([\"HtmlTag\",\"HtmlTagHydration\",\"SvelteComponent\",\"SvelteComponentDev\",\"SvelteComponentTyped\",\"SvelteElement\",\"action_destroyer\",\"add_attribute\",\"add_classes\",\"add_flush_callback\",\"add_location\",\"add_render_callback\",\"add_resize_listener\",\"add_styles\",\"add_transform\",\"afterUpdate\",\"append\",\"append_dev\",\"append_empty_stylesheet\",\"append_hydration\",\"append_hydration_dev\",\"append_styles\",\"assign\",\"attr\",\"attr_dev\",\"attribute_to_object\",\"beforeUpdate\",\"bind\",\"binding_callbacks\",\"blank_object\",\"bubble\",\"check_outros\",\"children\",\"claim_component\",\"claim_element\",\"claim_html_tag\",\"claim_space\",\"claim_svg_element\",\"claim_text\",\"clear_loops\",\"component_subscribe\",\"compute_rest_props\",\"compute_slots\",\"createEventDispatcher\",\"create_animation\",\"create_bidirectional_transition\",\"create_component\",\"create_in_transition\",\"create_out_transition\",\"create_slot\",\"create_ssr_component\",\"current_component\",\"custom_event\",\"dataset_dev\",\"debug\",\"destroy_block\",\"destroy_component\",\"destroy_each\",\"detach\",\"detach_after_dev\",\"detach_before_dev\",\"detach_between_dev\",\"detach_dev\",\"dirty_components\",\"dispatch_dev\",\"each\",\"element\",\"element_is\",\"empty\",\"end_hydrating\",\"escape\",\"escape_attribute_value\",\"escape_object\",\"escaped\",\"exclude_internal_props\",\"fix_and_destroy_block\",\"fix_and_outro_and_destroy_block\",\"fix_position\",\"flush\",\"getAllContexts\",\"getContext\",\"get_all_dirty_from_scope\",\"get_binding_group_value\",\"get_current_component\",\"get_custom_elements_slots\",\"get_root_for_style\",\"get_slot_changes\",\"get_spread_object\",\"get_spread_update\",\"get_store_value\",\"globals\",\"group_outros\",\"handle_promise\",\"hasContext\",\"has_prop\",\"identity\",\"init\",\"insert\",\"insert_dev\",\"insert_hydration\",\"insert_hydration_dev\",\"intros\",\"invalid_attribute_name_character\",\"is_client\",\"is_crossorigin\",\"is_empty\",\"is_function\",\"is_promise\",\"listen\",\"listen_dev\",\"loop\",\"loop_guard\",\"merge_ssr_styles\",\"missing_component\",\"mount_component\",\"noop\",\"not_equal\",\"now\",\"null_to_empty\",\"object_without_properties\",\"onDestroy\",\"onMount\",\"once\",\"outro_and_destroy_block\",\"prevent_default\",\"prop_dev\",\"query_selector_all\",\"raf\",\"run\",\"run_all\",\"safe_not_equal\",\"schedule_update\",\"select_multiple_value\",\"select_option\",\"select_options\",\"select_value\",\"self\",\"setContext\",\"set_attributes\",\"set_current_component\",\"set_custom_element_data\",\"set_data\",\"set_data_dev\",\"set_input_type\",\"set_input_value\",\"set_now\",\"set_raf\",\"set_store_value\",\"set_style\",\"set_svg_attributes\",\"space\",\"spread\",\"src_url_equal\",\"start_hydrating\",\"stop_propagation\",\"subscribe\",\"svg_element\",\"text\",\"tick\",\"time_ranges_to_array\",\"to_number\",\"toggle_class\",\"transition_in\",\"transition_out\",\"trusted\",\"update_await_block_branch\",\"update_keyed_each\",\"update_slot\",\"update_slot_base\",\"validate_component\",\"validate_each_argument\",\"validate_each_keys\",\"validate_slots\",\"validate_store\",\"xlink_attr\"]);function is_used_as_reference(node,parent){if(!is_reference(node,parent)){return false;}if(!parent){return true;}/* eslint-disable no-fallthrough */switch(parent.type){// disregard the `foo` in `const foo = bar`\ncase'VariableDeclarator':return node!==parent.id;// disregard the `foo`, `bar` in `function foo(bar){}`\ncase'FunctionDeclaration':// disregard the `foo` in `import { foo } from 'foo'`\ncase'ImportSpecifier':// disregard the `foo` in `import foo from 'foo'`\ncase'ImportDefaultSpecifier':// disregard the `foo` in `import * as foo from 'foo'`\ncase'ImportNamespaceSpecifier':// disregard the `foo` in `export { foo }`\ncase'ExportSpecifier':return false;default:return true;}}var Component=/*#__PURE__*/function(){function Component(ast,source,name,compile_options,stats,warnings){var _this88=this;(0,_classCallCheck2.default)(this,Component);this.ignore_stack=[];this.vars=[];this.var_lookup=new Map();this.imports=[];this.exports_from=[];this.instance_exports_from=[];this.hoistable_nodes=new Set();this.node_for_declaration=new Map();this.partly_hoisted=[];this.fully_hoisted=[];this.reactive_declarations=[];this.reactive_declaration_nodes=new Set();this.has_reactive_assignments=false;this.injected_reactive_declaration_vars=new Set();this.helpers=new Map();this.globals=new Map();this.indirect_dependencies=new Map();this.elements=[];this.aliases=new Map();this.used_names=new Set();this.globally_used_names=new Set();this.slots=new Map();this.slot_outlets=new Set();this.name={type:'Identifier',name:name};this.stats=stats;this.warnings=warnings;this.ast=ast;this.source=source;this.compile_options=compile_options;// the instance JS gets mutated, so we park\n// a copy here for later. TODO this feels gross\nthis.original_ast=clone({html:ast.html,css:ast.css,instance:ast.instance,module:ast.module});this.file=compile_options.filename&&(typeof process!=='undefined'?compile_options.filename.replace(process.cwd(),'').replace(/^[/\\\\]/,''):compile_options.filename);this.locate=getLocator(this.source,{offsetLine:1});// styles\nthis.stylesheet=new Stylesheet({source:source,ast:ast,filename:compile_options.filename,component_name:name,dev:compile_options.dev,get_css_hash:compile_options.cssHash});this.stylesheet.validate(this);this.component_options=process_component_options(this,this.ast.html.children);this.namespace=namespaces[this.component_options.namespace]||this.component_options.namespace;if(compile_options.customElement){if(this.component_options.tag===undefined&&compile_options.tag===undefined){var svelteOptions=ast.html.children.find(function(child){return child.name==='svelte:options';})||{start:0,end:0};this.warn(svelteOptions,compiler_warnings.custom_element_no_tag);}this.tag=this.component_options.tag||compile_options.tag;}else{this.tag=this.name.name;}this.walk_module_js();this.push_ignores(this.ast.instance?extract_ignores_above_position(this.ast.instance.start,this.ast.html.children):[]);this.walk_instance_js_pre_template();this.pop_ignores();this.fragment=new Fragment(this,ast.html);this.name=this.get_unique_name(name);this.push_ignores(this.ast.instance?extract_ignores_above_position(this.ast.instance.start,this.ast.html.children):[]);this.walk_instance_js_post_template();this.pop_ignores();this.elements.forEach(function(element){return _this88.stylesheet.apply(element);});if(!compile_options.customElement)this.stylesheet.reify();this.stylesheet.warn_on_unused_selectors(this);}(0,_createClass2.default)(Component,[{key:\"add_var\",value:function add_var(variable){var add_to_lookup=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.vars.push(variable);if(add_to_lookup){this.var_lookup.set(variable.name,variable);}}},{key:\"add_reference\",value:function add_reference(name){var variable=this.var_lookup.get(name);if(variable){variable.referenced=true;}else if(is_reserved_keyword(name)){this.add_var({name:name,injected:true,referenced:true});}else if(name[0]==='$'){this.add_var({name:name,injected:true,referenced:true,mutated:true,writable:true});var subscribable_name=name.slice(1);var _variable=this.var_lookup.get(subscribable_name);if(_variable){_variable.referenced=true;_variable.subscribable=true;}}else{if(this.compile_options.varsReport==='full'){this.add_var({name:name,referenced:true},false);}this.used_names.add(name);}}},{key:\"alias\",value:function alias(name){if(!this.aliases.has(name)){this.aliases.set(name,this.get_unique_name(name));}return this.aliases.get(name);}},{key:\"apply_stylesheet\",value:function apply_stylesheet(element){this.elements.push(element);}},{key:\"global\",value:function global(name){var alias=this.alias(name);this.globals.set(name,alias);return alias;}},{key:\"generate\",value:function generate(result){var _this89=this;var js=null;var css=null;if(result){var compile_options=this.compile_options,name=this.name;var _compile_options$form=compile_options.format,format=_compile_options$form===void 0?'esm':_compile_options$form;var banner=\"\".concat(this.file?\"\".concat(this.file,\" \"):'',\"generated by Svelte v\",'3.46.2');var program={type:'Program',body:result.js};walk(program,{enter:function enter(node,parent,key){if(node.type==='Identifier'){if(node.name[0]==='@'){if(node.name[1]==='_'){var alias=_this89.global(node.name.slice(2));node.name=alias.name;}else{var _name6=node.name.slice(1);if(compile_options.hydratable){if(internal_exports.has(\"\".concat(_name6,\"_hydration\"))){_name6+='_hydration';}else if(internal_exports.has(\"\".concat(_name6,\"Hydration\"))){_name6+='Hydration';}}if(compile_options.dev){if(internal_exports.has(\"\".concat(_name6,\"_dev\"))){_name6+='_dev';}else if(internal_exports.has(\"\".concat(_name6,\"Dev\"))){_name6+='Dev';}}var _alias=_this89.alias(_name6);_this89.helpers.set(_name6,_alias);node.name=_alias.name;}}else if(node.name[0]!=='#'&&!is_valid(node.name)){// this hack allows x`foo.${bar}` where bar could be invalid\nvar _literal2={type:'Literal',value:node.name};if(parent.type==='Property'&&key==='key'){parent.key=_literal2;}else if(parent.type==='MemberExpression'&&key==='property'){parent.property=_literal2;parent.computed=true;}}}}});var referenced_globals=Array.from(this.globals,function(_ref39){var _ref40=(0,_slicedToArray2.default)(_ref39,2),name=_ref40[0],alias=_ref40[1];return name!==alias.name&&{name:name,alias:alias};}).filter(Boolean);if(referenced_globals.length){this.helpers.set('globals',this.alias('globals'));}var imported_helpers=Array.from(this.helpers,function(_ref41){var _ref42=(0,_slicedToArray2.default)(_ref41,2),name=_ref42[0],alias=_ref42[1];return{name:name,alias:alias};});create_module(program,format,name,banner,compile_options.sveltePath,imported_helpers,referenced_globals,this.imports,this.vars.filter(function(variable){return variable.module&&variable.export_name;}).map(function(variable){return{name:variable.name,as:variable.export_name};}),this.exports_from);css=compile_options.customElement?{code:null,map:null}:result.css;var js_sourcemap_enabled=check_enable_sourcemap(compile_options.enableSourcemap,'js');if(!js_sourcemap_enabled){js=print(program);js.map=null;}else{var sourcemap_source_filename=get_sourcemap_source_filename(compile_options);js=print(program,{sourceMapSource:sourcemap_source_filename});js.map.sources=[sourcemap_source_filename];js.map.sourcesContent=[this.source];js.map=apply_preprocessor_sourcemap(sourcemap_source_filename,js.map,compile_options.sourcemap);}}return{js:js,css:css,ast:this.original_ast,warnings:this.warnings,vars:this.get_vars_report(),stats:this.stats.render()};}},{key:\"get_unique_name\",value:function get_unique_name(name,scope){if(test)name=\"\".concat(name,\"$\");var alias=name;for(var _i53=1;reserved.has(alias)||this.var_lookup.has(alias)||this.used_names.has(alias)||this.globally_used_names.has(alias)||scope&&scope.has(alias);alias=\"\".concat(name,\"_\").concat(_i53++)){;}this.used_names.add(alias);return{type:'Identifier',name:alias};}},{key:\"get_unique_name_maker\",value:function get_unique_name_maker(){var _this90=this;var local_used_names=new Set();function add(name){local_used_names.add(name);}reserved.forEach(add);internal_exports.forEach(add);this.var_lookup.forEach(function(_value,key){return add(key);});return function(name){if(test)name=\"\".concat(name,\"$\");var alias=name;for(var _i54=1;_this90.used_names.has(alias)||local_used_names.has(alias);alias=\"\".concat(name,\"_\").concat(_i54++)){;}local_used_names.add(alias);_this90.globally_used_names.add(alias);return{type:'Identifier',name:alias};};}},{key:\"get_vars_report\",value:function get_vars_report(){var compile_options=this.compile_options,vars=this.vars;var vars_report=compile_options.varsReport===false?[]:compile_options.varsReport==='full'?vars:vars.filter(function(v){return!v.global&&!v.internal;});return vars_report.map(function(v){return{name:v.name,export_name:v.export_name||null,injected:v.injected||false,module:v.module||false,mutated:v.mutated||false,reassigned:v.reassigned||false,referenced:v.referenced||false,writable:v.writable||false,referenced_from_script:v.referenced_from_script||false};});}},{key:\"error\",value:function error(pos,e){if(this.compile_options.errorMode==='warn'){this.warn(pos,e);}else{_error2(e.message,{name:'ValidationError',code:e.code,source:this.source,start:pos.start,end:pos.end,filename:this.compile_options.filename});}}},{key:\"warn\",value:function warn(pos,warning){if(this.ignores&&this.ignores.has(warning.code)){return;}var start=this.locate(pos.start);var end=this.locate(pos.end);var frame=get_code_frame(this.source,start.line-1,start.column);this.warnings.push({code:warning.code,message:warning.message,frame:frame,start:start,end:end,pos:pos.start,filename:this.compile_options.filename,toString:function toString(){return\"\".concat(warning.message,\" (\").concat(start.line,\":\").concat(start.column,\")\\n\").concat(frame);}});}},{key:\"extract_imports\",value:function extract_imports(node){this.imports.push(node);}},{key:\"extract_exports\",value:function extract_exports(node){var module_script=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var ignores=extract_svelte_ignore_from_comments(node);if(ignores.length)this.push_ignores(ignores);var result=this._extract_exports(node,module_script);if(ignores.length)this.pop_ignores();return result;}},{key:\"_extract_exports\",value:function _extract_exports(node,module_script){var _this91=this;if(node.type==='ExportDefaultDeclaration'){return this.error(node,compiler_errors.default_export);}if(node.type==='ExportNamedDeclaration'){if(node.source){if(module_script){this.exports_from.push(node);}else{this.instance_exports_from.push(node);}return null;}if(node.declaration){if(node.declaration.type==='VariableDeclaration'){node.declaration.declarations.forEach(function(declarator){extract_names(declarator.id).forEach(function(name){var variable=_this91.var_lookup.get(name);variable.export_name=name;if(variable.writable&&!(variable.referenced||variable.referenced_from_script||variable.subscribable)){_this91.warn(declarator,compiler_warnings.unused_export_let(_this91.name.name,name));}});});}else{var name=node.declaration.id.name;var variable=this.var_lookup.get(name);variable.export_name=name;}return node.declaration;}else{node.specifiers.forEach(function(specifier){var variable=_this91.var_lookup.get(specifier.local.name);if(variable){variable.export_name=specifier.exported.name;if(variable.writable&&!(variable.referenced||variable.referenced_from_script||variable.subscribable)){_this91.warn(specifier,compiler_warnings.unused_export_let(_this91.name.name,specifier.exported.name));}}});return null;}}}},{key:\"extract_javascript\",value:function extract_javascript(script){var _this92=this;if(!script)return null;return script.content.body.filter(function(node){if(!node)return false;if(_this92.hoistable_nodes.has(node))return false;if(_this92.reactive_declaration_nodes.has(node))return false;if(node.type==='ImportDeclaration')return false;if(node.type==='ExportDeclaration'&&node.specifiers.length>0)return false;return true;});}},{key:\"walk_module_js\",value:function walk_module_js(){var _this93=this;var component=this;var script=this.ast.module;if(!script)return;walk(script.content,{enter:function enter(node){if(node.type==='LabeledStatement'&&node.label.name==='$'){component.warn(node,compiler_warnings.module_script_reactive_declaration);}}});var _create_scopes2=create_scopes(script.content),scope=_create_scopes2.scope,globals=_create_scopes2.globals;this.module_scope=scope;scope.declarations.forEach(function(node,name){if(name[0]==='$'){return _this93.error(node,compiler_errors.illegal_declaration);}var writable=node.type==='VariableDeclaration'&&(node.kind==='var'||node.kind==='let');_this93.add_var({name:name,module:true,hoistable:true,writable:writable});});globals.forEach(function(node,name){if(name[0]==='$'){return _this93.error(node,compiler_errors.illegal_subscription);}else{_this93.add_var({name:name,global:true,hoistable:true});}});var body=script.content.body;var i=body.length;while(--i>=0){var _node12=body[i];if(_node12.type==='ImportDeclaration'){this.extract_imports(_node12);body.splice(i,1);}if(/^Export/.test(_node12.type)){var replacement=this.extract_exports(_node12,true);if(replacement){body[i]=replacement;}else{body.splice(i,1);}}}}},{key:\"walk_instance_js_pre_template\",value:function walk_instance_js_pre_template(){var _this94=this;var script=this.ast.instance;if(!script)return;// inject vars for reactive declarations\nscript.content.body.forEach(function(node){if(node.type!=='LabeledStatement')return;if(node.body.type!=='ExpressionStatement')return;var expression=node.body.expression;if(expression.type!=='AssignmentExpression')return;if(expression.left.type==='MemberExpression')return;extract_names(expression.left).forEach(function(name){if(!_this94.var_lookup.has(name)&&name[0]!=='$'){_this94.injected_reactive_declaration_vars.add(name);}});});var _create_scopes3=create_scopes(script.content),instance_scope=_create_scopes3.scope,map=_create_scopes3.map,globals=_create_scopes3.globals;this.instance_scope=instance_scope;this.instance_scope_map=map;instance_scope.declarations.forEach(function(node,name){if(name[0]==='$'){return _this94.error(node,compiler_errors.illegal_declaration);}var writable=node.type==='VariableDeclaration'&&(node.kind==='var'||node.kind==='let');var imported=node.type.startsWith('Import');_this94.add_var({name:name,initialised:instance_scope.initialised_declarations.has(name),writable:writable,imported:imported});_this94.node_for_declaration.set(name,node);});// NOTE: add store variable first, then only $store value\n// as `$store` will mark `store` variable as referenced and subscribable\nvar global_keys=Array.from(globals.keys());var sorted_globals=[].concat((0,_toConsumableArray2.default)(global_keys.filter(function(key){return key[0]!=='$';})),(0,_toConsumableArray2.default)(global_keys.filter(function(key){return key[0]==='$';})));sorted_globals.forEach(function(name){if(_this94.var_lookup.has(name))return;var node=globals.get(name);if(_this94.injected_reactive_declaration_vars.has(name)){_this94.add_var({name:name,injected:true,writable:true,reassigned:true,initialised:true});}else if(is_reserved_keyword(name)){_this94.add_var({name:name,injected:true});}else if(name[0]==='$'){if(name==='$'||name[1]==='$'){return _this94.error(node,compiler_errors.illegal_global(name));}_this94.add_var({name:name,injected:true,mutated:true,writable:true});_this94.add_reference(name.slice(1));var variable=_this94.var_lookup.get(name.slice(1));if(variable){variable.subscribable=true;variable.referenced_from_script=true;}}else{_this94.add_var({name:name,global:true,hoistable:true});}});this.track_references_and_mutations();}},{key:\"walk_instance_js_post_template\",value:function walk_instance_js_post_template(){var script=this.ast.instance;if(!script)return;this.post_template_walk();this.hoist_instance_declarations();this.extract_reactive_declarations();}},{key:\"post_template_walk\",value:function post_template_walk(){var script=this.ast.instance;if(!script)return;var component=this;var content=script.content;var instance_scope=this.instance_scope,map=this.instance_scope_map;var scope=instance_scope;var to_remove=[];var remove=function remove(parent,prop,index){to_remove.unshift([parent,prop,index]);};var scope_updated=false;var current_function_stack=[];var current_function=null;walk(content,{enter:function enter(node,parent,prop,index){if(node.type==='FunctionDeclaration'||node.type==='FunctionExpression'){current_function_stack.push(current_function=node);}if(map.has(node)){scope=map.get(node);}if(node.type==='ImportDeclaration'){component.extract_imports(node);// TODO: to use actual remove\nremove(parent,prop,index);return this.skip();}if(/^Export/.test(node.type)){var replacement=component.extract_exports(node);if(replacement){this.replace(replacement);}else{// TODO: to use actual remove\nremove(parent,prop,index);}return this.skip();}component.warn_on_undefined_store_value_references(node,parent,prop,scope);},leave:function leave(node){if(node.type==='FunctionDeclaration'||node.type==='FunctionExpression'){current_function_stack.pop();current_function=current_function_stack[current_function_stack.length-1];}// do it on leave, to prevent infinite loop\nif(component.compile_options.dev&&component.compile_options.loopGuardTimeout>0&&(!current_function||!current_function.generator&&!current_function.async)){var to_replace_for_loop_protect=component.loop_protect(node,scope,component.compile_options.loopGuardTimeout);if(to_replace_for_loop_protect){this.replace(to_replace_for_loop_protect);scope_updated=true;}}if(map.has(node)){scope=scope.parent;}}});for(var _i55=0,_to_remove=to_remove;_i55<_to_remove.length;_i55++){var _to_remove$_i=(0,_slicedToArray2.default)(_to_remove[_i55],3),parent=_to_remove$_i[0],prop=_to_remove$_i[1],index=_to_remove$_i[2];if(parent){if(index!==null){parent[prop].splice(index,1);}else{delete parent[prop];}}}if(scope_updated){var _create_scopes4=create_scopes(script.content),_scope5=_create_scopes4.scope,_map2=_create_scopes4.map;this.instance_scope=_scope5;this.instance_scope_map=_map2;}}},{key:\"track_references_and_mutations\",value:function track_references_and_mutations(){var script=this.ast.instance;if(!script)return;var component=this;var content=script.content;var instance_scope=this.instance_scope,module_scope=this.module_scope,map=this.instance_scope_map;var scope=instance_scope;walk(content,{enter:function enter(node,parent){if(map.has(node)){scope=map.get(node);}if(node.type==='AssignmentExpression'||node.type==='UpdateExpression'){var assignee=node.type==='AssignmentExpression'?node.left:node.argument;var _names4=extract_names(assignee);var deep=assignee.type==='MemberExpression';_names4.forEach(function(name){var scope_owner=scope.find_owner(name);if(scope_owner!==null?scope_owner===instance_scope:module_scope&&module_scope.has(name)){var variable=component.var_lookup.get(name);variable[deep?'mutated':'reassigned']=true;}});}if(is_used_as_reference(node,parent)){var object=get_object(node);if(scope.find_owner(object.name)===instance_scope){var variable=component.var_lookup.get(object.name);variable.referenced_from_script=true;}}},leave:function leave(node){if(map.has(node)){scope=scope.parent;}}});}},{key:\"warn_on_undefined_store_value_references\",value:function warn_on_undefined_store_value_references(node,parent,prop,scope){if(node.type==='LabeledStatement'&&node.label.name==='$'&&parent.type!=='Program'){this.warn(node,compiler_warnings.non_top_level_reactive_declaration);}if(is_reference(node,parent)){var object=get_object(node);var name=object.name;if(name[0]==='$'){if(!scope.has(name)){this.warn_if_undefined(name,object,null);}if(name[1]!=='$'&&scope.has(name.slice(1))&&scope.find_owner(name.slice(1))!==this.instance_scope){if(!(/Function/.test(parent.type)&&prop==='params'||parent.type==='VariableDeclarator'&&prop==='id')){return this.error(node,compiler_errors.contextual_store);}}}}}},{key:\"loop_protect\",value:function loop_protect(node,scope,timeout){if(node.type==='WhileStatement'||node.type==='ForStatement'||node.type==='DoWhileStatement'){var guard=this.get_unique_name('guard',scope);this.used_names.add(guard.name);var before=b(_templateObject795||(_templateObject795=(0,_taggedTemplateLiteral2.default)([\"const \",\" = @loop_guard(\",\")\"])),guard,timeout);var inside=b(_templateObject796||(_templateObject796=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"])),guard);// wrap expression statement with BlockStatement\nif(node.body.type!=='BlockStatement'){node.body={type:'BlockStatement',body:[node.body]};}node.body.body.push(inside[0]);return{type:'BlockStatement',body:[before[0],node]};}return null;}},{key:\"rewrite_props\",value:function rewrite_props(get_insert){if(!this.ast.instance)return;var component=this;var instance_scope=this.instance_scope,map=this.instance_scope_map;var scope=instance_scope;walk(this.ast.instance.content,{enter:function enter(node){var _this95=this;if(/Function/.test(node.type)){return this.skip();}if(map.has(node)){scope=map.get(node);}if(node.type==='ExportNamedDeclaration'&&node.declaration){return this.replace(node.declaration);}if(node.type==='VariableDeclaration'){// NOTE: `var` does not follow block scoping\nif(node.kind==='var'||scope===instance_scope){var _ret3=function(){var inserts=[];var props=[];function add_new_props(exported,local,default_value){props.push({type:'Property',method:false,shorthand:false,computed:false,kind:'init',key:exported,value:default_value?{type:'AssignmentPattern',left:local,right:default_value}:local});}// transform\n// ```\n// export let { x, y = 123 } = OBJ, z = 456\n// ```\n// into\n// ```\n// let { x: x$, y: y$ = 123 } = OBJ;\n// let { x = x$, y = y$, z = 456 } = $$props;\n// ```\nfor(var index=0;index<node.declarations.length;index++){var declarator=node.declarations[index];if(declarator.id.type!=='Identifier'){(function(){function get_new_name(local){var variable=component.var_lookup.get(local.name);if(variable.subscribable){inserts.push(get_insert(variable));}if(variable.export_name&&variable.writable){var alias_name=component.get_unique_name(local.name);add_new_props({type:'Identifier',name:variable.export_name},local,alias_name);return alias_name;}return local;}function rename_identifiers(param){switch(param.type){case'ObjectPattern':{var handle_prop=function handle_prop(prop){if(prop.type==='RestElement'){rename_identifiers(prop);}else if(prop.value.type==='Identifier'){prop.value=get_new_name(prop.value);}else{rename_identifiers(prop.value);}};param.properties.forEach(handle_prop);break;}case'ArrayPattern':{var handle_element=function handle_element(element,index,array){if(element){if(element.type==='Identifier'){array[index]=get_new_name(element);}else{rename_identifiers(element);}}};param.elements.forEach(handle_element);break;}case'RestElement':param.argument=get_new_name(param.argument);break;case'AssignmentPattern':if(param.left.type==='Identifier'){param.left=get_new_name(param.left);}else{rename_identifiers(param.left);}break;}}rename_identifiers(declarator.id);})();}else{var name=declarator.id.name;var variable=component.var_lookup.get(name);var is_props=variable.export_name&&variable.writable;if(is_props){add_new_props({type:'Identifier',name:variable.export_name},declarator.id,declarator.init);node.declarations.splice(index--,1);}if(variable.subscribable&&(is_props||declarator.init)){inserts.push(get_insert(variable));}}}_this95.replace(b(_templateObject797||(_templateObject797=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\"])),node.declarations.length?node:null,props.length>0&&b(_templateObject798||(_templateObject798=(0,_taggedTemplateLiteral2.default)([\"let { \",\" } = $$props;\"])),props),inserts));return{v:_this95.skip()};}();if((0,_typeof2.default)(_ret3)===\"object\")return _ret3.v;}}},leave:function leave(node){if(map.has(node)){scope=scope.parent;}}});}},{key:\"hoist_instance_declarations\",value:function hoist_instance_declarations(){var _this96=this;// we can safely hoist variable declarations that are\n// initialised to literals, and functions that don't\n// reference instance variables other than other\n// hoistable functions. TODO others?\nvar hoistable_nodes=this.hoistable_nodes,var_lookup=this.var_lookup,injected_reactive_declaration_vars=this.injected_reactive_declaration_vars,imports=this.imports;var top_level_function_declarations=new Map();var body=this.ast.instance.content.body;var _loop2=function _loop2(_i57){var node=body[_i57];if(node.type==='VariableDeclaration'){var all_hoistable=node.declarations.every(function(d){if(!d.init){_i56=_i57;return false;}if(d.init.type!=='Literal'){_i56=_i57;return false;}// everything except const values can be changed by e.g. svelte devtools\n// which means we can't hoist it\nif(node.kind!=='const'&&_this96.compile_options.dev){_i56=_i57;return false;}var name=d.id.name;var v=_this96.var_lookup.get(name);if(v.reassigned){_i56=_i57;return false;}if(v.export_name){_i56=_i57;return false;}if(_this96.var_lookup.get(name).reassigned){_i56=_i57;return false;}if(_this96.vars.find(function(variable){return variable.name===name&&variable.module;})){_i56=_i57;return false;}_i56=_i57;return true;});if(all_hoistable){node.declarations.forEach(function(d){var variable=_this96.var_lookup.get(d.id.name);variable.hoistable=true;});hoistable_nodes.add(node);body.splice(_i57--,1);_this96.fully_hoisted.push(node);}}if(node.type==='ExportNamedDeclaration'&&node.declaration&&node.declaration.type==='FunctionDeclaration'){top_level_function_declarations.set(node.declaration.id.name,node);}if(node.type==='FunctionDeclaration'){top_level_function_declarations.set(node.id.name,node);}_i56=_i57;};for(var _i56=0;_i56<body.length;_i56+=1){_loop2(_i56);}var checked=new Set();var walking=new Set();var is_hoistable=function is_hoistable(fn_declaration){if(fn_declaration.type==='ExportNamedDeclaration'){fn_declaration=fn_declaration.declaration;}var instance_scope=_this96.instance_scope;var scope=_this96.instance_scope;var map=_this96.instance_scope_map;var hoistable=true;// handle cycles\nwalking.add(fn_declaration);walk(fn_declaration,{enter:function enter(node,parent){if(!hoistable)return this.skip();if(map.has(node)){scope=map.get(node);}if(is_reference(node,parent)){var _flatten_reference7=flatten_reference(node),name=_flatten_reference7.name;var owner=scope.find_owner(name);if(injected_reactive_declaration_vars.has(name)){hoistable=false;}else if(name[0]==='$'&&!owner){hoistable=false;}else if(owner===instance_scope){var variable=var_lookup.get(name);if(variable.reassigned||variable.mutated)hoistable=false;if(name===fn_declaration.id.name)return;if(variable.hoistable)return;if(top_level_function_declarations.has(name)){var other_declaration=top_level_function_declarations.get(name);if(walking.has(other_declaration)){hoistable=false;}else if(other_declaration.type==='ExportNamedDeclaration'&&walking.has(other_declaration.declaration)){hoistable=false;}else if(!is_hoistable(other_declaration)){hoistable=false;}}else{hoistable=false;}}this.skip();}},leave:function leave(node){if(map.has(node)){scope=scope.parent;}}});checked.add(fn_declaration);walking.delete(fn_declaration);return hoistable;};var _iterator24=_createForOfIteratorHelper(top_level_function_declarations),_step24;try{for(_iterator24.s();!(_step24=_iterator24.n()).done;){var _step24$value=(0,_slicedToArray2.default)(_step24.value,2),name=_step24$value[0],_node13=_step24$value[1];if(is_hoistable(_node13)){var variable=this.var_lookup.get(name);variable.hoistable=true;hoistable_nodes.add(_node13);var _i58=body.indexOf(_node13);body.splice(_i58,1);this.fully_hoisted.push(_node13);}}}catch(err){_iterator24.e(err);}finally{_iterator24.f();}var _iterator25=_createForOfIteratorHelper(imports),_step25;try{for(_iterator25.s();!(_step25=_iterator25.n()).done;){var specifiers=_step25.value.specifiers;var _iterator26=_createForOfIteratorHelper(specifiers),_step26;try{for(_iterator26.s();!(_step26=_iterator26.n()).done;){var specifier=_step26.value;var _variable2=var_lookup.get(specifier.local.name);if(!_variable2.mutated||_variable2.subscribable){_variable2.hoistable=true;}}}catch(err){_iterator26.e(err);}finally{_iterator26.f();}}}catch(err){_iterator25.e(err);}finally{_iterator25.f();}}},{key:\"extract_reactive_declarations\",value:function extract_reactive_declarations(){var _this97=this;var component=this;var unsorted_reactive_declarations=[];this.ast.instance.content.body.forEach(function(node){var ignores=extract_svelte_ignore_from_comments(node);if(ignores.length)_this97.push_ignores(ignores);if(node.type==='LabeledStatement'&&node.label.name==='$'){_this97.reactive_declaration_nodes.add(node);var assignees=new Set();var assignee_nodes=new Set();var dependencies=new Set();var module_dependencies=new Set();var _scope6=_this97.instance_scope;var map=_this97.instance_scope_map;walk(node.body,{enter:function enter(node,parent){if(map.has(node)){_scope6=map.get(node);}if(node.type==='AssignmentExpression'){var left=get_object(node.left);extract_identifiers(left).forEach(function(node){assignee_nodes.add(node);assignees.add(node.name);});if(node.operator!=='='){dependencies.add(left.name);}}else if(node.type==='UpdateExpression'){var identifier=get_object(node.argument);assignees.add(identifier.name);}else if(is_reference(node,parent)){var _identifier=get_object(node);if(!assignee_nodes.has(_identifier)){var name=_identifier.name;var owner=_scope6.find_owner(name);var variable=component.var_lookup.get(name);var should_add_as_dependency=true;if(variable){variable.is_reactive_dependency=true;if(variable.module&&variable.writable){should_add_as_dependency=false;module_dependencies.add(name);}}var is_writable_or_mutated=variable&&(variable.writable||variable.mutated);if(should_add_as_dependency&&(!owner||owner===component.instance_scope)&&(name[0]==='$'||is_writable_or_mutated)){dependencies.add(name);}}this.skip();}},leave:function leave(node){if(map.has(node)){_scope6=_scope6.parent;}}});if(module_dependencies.size>0&&dependencies.size===0){component.warn(node.body,compiler_warnings.module_script_variable_reactive_declaration(Array.from(module_dependencies)));}var _expression14=node.body.expression;var declaration=_expression14&&_expression14.left;unsorted_reactive_declarations.push({assignees:assignees,dependencies:dependencies,node:node,declaration:declaration});}if(ignores.length)_this97.pop_ignores();});var lookup=new Map();unsorted_reactive_declarations.forEach(function(declaration){declaration.assignees.forEach(function(name){if(!lookup.has(name)){lookup.set(name,[]);}// TODO warn or error if a name is assigned to in\n// multiple reactive declarations?\nlookup.get(name).push(declaration);});});var cycle=check_graph_for_cycles(unsorted_reactive_declarations.reduce(function(acc,declaration){declaration.assignees.forEach(function(v){declaration.dependencies.forEach(function(w){if(!declaration.assignees.has(w)){acc.push([v,w]);}});});return acc;},[]));if(cycle&&cycle.length){var declarationList=lookup.get(cycle[0]);var declaration=declarationList[0];return this.error(declaration.node,compiler_errors.cyclical_reactive_declaration(cycle));}var add_declaration=function add_declaration(declaration){if(_this97.reactive_declarations.includes(declaration))return;declaration.dependencies.forEach(function(name){if(declaration.assignees.has(name))return;var earlier_declarations=lookup.get(name);if(earlier_declarations){earlier_declarations.forEach(add_declaration);}});_this97.reactive_declarations.push(declaration);};unsorted_reactive_declarations.forEach(add_declaration);}},{key:\"warn_if_undefined\",value:function warn_if_undefined(name,node,template_scope){if(name[0]==='$'){if(name==='$'||name[1]==='$'&&!is_reserved_keyword(name)){return this.error(node,compiler_errors.illegal_global(name));}this.has_reactive_assignments=true;// TODO does this belong here?\nif(is_reserved_keyword(name))return;name=name.slice(1);}if(this.var_lookup.has(name)&&!this.var_lookup.get(name).global)return;if(template_scope&&template_scope.names.has(name))return;if(globals.has(name)&&node.type!=='InlineComponent')return;this.warn(node,compiler_warnings.missing_declaration(name,!!this.ast.instance));}},{key:\"push_ignores\",value:function push_ignores(ignores){this.ignores=new Set(this.ignores||[]);add_to_set(this.ignores,ignores);this.ignore_stack.push(this.ignores);}},{key:\"pop_ignores\",value:function pop_ignores(){this.ignore_stack.pop();this.ignores=this.ignore_stack[this.ignore_stack.length-1];}}]);return Component;}();function process_component_options(component,nodes){var component_options={immutable:component.compile_options.immutable||false,accessors:'accessors'in component.compile_options?component.compile_options.accessors:!!component.compile_options.customElement,preserveWhitespace:!!component.compile_options.preserveWhitespace,namespace:component.compile_options.namespace};var node=nodes.find(function(node){return node.name==='svelte:options';});function get_value(attribute,_ref43){var code=_ref43.code,message=_ref43.message;var value=attribute.value;var chunk=value[0];if(!chunk)return true;if(value.length>1){return component.error(attribute,{code:code,message:message});}if(chunk.type==='Text')return chunk.data;if(chunk.expression.type!=='Literal'){return component.error(attribute,{code:code,message:message});}return chunk.expression.value;}if(node){node.attributes.forEach(function(attribute){if(attribute.type==='Attribute'){var name=attribute.name;switch(name){case'tag':{var _tag=get_value(attribute,compiler_errors.invalid_tag_attribute);if(typeof _tag!=='string'&&_tag!==null){return component.error(attribute,compiler_errors.invalid_tag_attribute);}if(_tag&&!/^[a-zA-Z][a-zA-Z0-9]*-[a-zA-Z0-9-]+$/.test(_tag)){return component.error(attribute,compiler_errors.invalid_tag_property);}if(_tag&&!component.compile_options.customElement){component.warn(attribute,compiler_warnings.missing_custom_element_compile_options);}component_options.tag=_tag;break;}case'namespace':{var ns=get_value(attribute,compiler_errors.invalid_namespace_attribute);if(typeof ns!=='string'){return component.error(attribute,compiler_errors.invalid_namespace_attribute);}if(valid_namespaces.indexOf(ns)===-1){var match=fuzzymatch(ns,valid_namespaces);return component.error(attribute,compiler_errors.invalid_namespace_property(ns,match));}component_options.namespace=ns;break;}case'accessors':case'immutable':case'preserveWhitespace':{var _value18=get_value(attribute,compiler_errors.invalid_attribute_value(name));if(typeof _value18!=='boolean'){return component.error(attribute,compiler_errors.invalid_attribute_value(name));}component_options[name]=_value18;break;}default:return component.error(attribute,compiler_errors.invalid_options_attribute_unknown);}}else{return component.error(attribute,compiler_errors.invalid_options_attribute);}});}return component_options;}function get_relative_path(from,to){var from_parts=from.split(/[/\\\\]/);var to_parts=to.split(/[/\\\\]/);from_parts.pop();// get dirname\nwhile(from_parts[0]===to_parts[0]){from_parts.shift();to_parts.shift();}if(from_parts.length){var _i59=from_parts.length;while(_i59--){from_parts[_i59]='..';}}return from_parts.concat(to_parts).join('/');}function get_basename(filename){return filename.split(/[/\\\\]/).pop();}function get_sourcemap_source_filename(compile_options){if(!compile_options.filename)return null;return compile_options.outputFilename?get_relative_path(compile_options.outputFilename,compile_options.filename):get_basename(compile_options.filename);}function get_name_from_filename(filename){if(!filename)return null;var parts=filename.split(/[/\\\\]/).map(encodeURI);if(parts.length>1){var index_match=parts[parts.length-1].match(/^index(\\.\\w+)/);if(index_match){parts.pop();parts[parts.length-1]+=index_match[1];}}var base=parts.pop().replace(/%/g,'u').replace(/\\.[^.]+$/,'').replace(/[^a-zA-Z_$0-9]+/g,'_').replace(/^_/,'').replace(/_$/,'').replace(/^(\\d)/,'_$1');if(!base){throw new Error(\"Could not derive component name from file \".concat(filename));}return base[0].toUpperCase()+base.slice(1);}var valid_options=['format','name','filename','sourcemap','enableSourcemap','generate','errorMode','varsReport','outputFilename','cssOutputFilename','sveltePath','dev','accessors','immutable','hydratable','legacy','customElement','namespace','tag','css','loopGuardTimeout','preserveComments','preserveWhitespace','cssHash'];function validate_options(options,warnings){var name=options.name,filename=options.filename,loopGuardTimeout=options.loopGuardTimeout,dev=options.dev,namespace=options.namespace;Object.keys(options).forEach(function(key){if(!valid_options.includes(key)){var match=fuzzymatch(key,valid_options);var message=\"Unrecognized option '\".concat(key,\"'\");if(match)message+=\" (did you mean '\".concat(match,\"'?)\");throw new Error(message);}});if(name&&!/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(name)){throw new Error(\"options.name must be a valid identifier (got '\".concat(name,\"')\"));}if(name&&/^[a-z]/.test(name)){var message='options.name should be capitalised';warnings.push({code:'options-lowercase-name',message:message,filename:filename,toString:function toString(){return message;}});}if(loopGuardTimeout&&!dev){var _message='options.loopGuardTimeout is for options.dev = true only';warnings.push({code:'options-loop-guard-timeout',message:_message,filename:filename,toString:function toString(){return _message;}});}if(namespace&&valid_namespaces.indexOf(namespace)===-1){var match=fuzzymatch(namespace,valid_namespaces);if(match){throw new Error(\"Invalid namespace '\".concat(namespace,\"' (did you mean '\").concat(match,\"'?)\"));}else{throw new Error(\"Invalid namespace '\".concat(namespace,\"'\"));}}}function compile(source){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};options=Object.assign({generate:'dom',dev:false,enableSourcemap:true},options);var stats=new Stats();var warnings=[];validate_options(options,warnings);stats.start('parse');var ast=parse$3(source,options);stats.stop('parse');stats.start('create component');var component=new Component(ast,source,options.name||get_name_from_filename(options.filename)||'Component',options,stats,warnings);stats.stop('create component');var result=options.generate===false?null:options.generate==='ssr'?ssr(component,options):dom(component,options);return component.generate(result);}/**\n * Import decoded sourcemap from mozilla/source-map/SourceMapGenerator\n * Forked from source-map/lib/source-map-generator.js\n * from methods _serializeMappings and toJSON.\n * We cannot use source-map.d.ts types, because we access hidden properties.\n */function decoded_sourcemap_from_generator(generator){var previous_generated_line=1;var converted_mappings=[[]];var result_line;var result_segment;var mapping;var source_idx=generator._sources.toArray().reduce(function(acc,val,idx){return acc[val]=idx,acc;},{});var name_idx=generator._names.toArray().reduce(function(acc,val,idx){return acc[val]=idx,acc;},{});var mappings=generator._mappings.toArray();result_line=converted_mappings[0];for(var _i60=0,len=mappings.length;_i60<len;_i60++){mapping=mappings[_i60];if(mapping.generatedLine>previous_generated_line){while(mapping.generatedLine>previous_generated_line){converted_mappings.push([]);previous_generated_line++;}result_line=converted_mappings[mapping.generatedLine-1];// line is one-based\n}else if(_i60>0){var previous_mapping=mappings[_i60-1];if(// sorted by selectivity\nmapping.generatedColumn===previous_mapping.generatedColumn&&mapping.originalColumn===previous_mapping.originalColumn&&mapping.name===previous_mapping.name&&mapping.generatedLine===previous_mapping.generatedLine&&mapping.originalLine===previous_mapping.originalLine&&mapping.source===previous_mapping.source){continue;}}result_line.push([mapping.generatedColumn]);result_segment=result_line[result_line.length-1];if(mapping.source!=null){var _result_segment;(_result_segment=result_segment).push.apply(_result_segment,[source_idx[mapping.source],mapping.originalLine-1,mapping.originalColumn]);if(mapping.name!=null){result_segment.push(name_idx[mapping.name]);}}}var map={version:generator._version,sources:generator._sources.toArray(),names:generator._names.toArray(),mappings:converted_mappings};if(generator._file!=null){map.file=generator._file;}// not needed: map.sourcesContent and map.sourceRoot\nreturn map;}function decode_map(processed){var decoded_map=typeof processed.map==='string'?JSON.parse(processed.map):processed.map;if(typeof decoded_map.mappings==='string'){decoded_map.mappings=decode(decoded_map.mappings);}if(decoded_map._mappings&&decoded_map.constructor.name==='SourceMapGenerator'){// import decoded sourcemap from mozilla/source-map/SourceMapGenerator\ndecoded_map=decoded_sourcemap_from_generator(decoded_map);}return decoded_map;}function slice_source(code_slice,offset,_ref44){var file_basename=_ref44.file_basename,filename=_ref44.filename,_get_location=_ref44.get_location;return{source:code_slice,get_location:function get_location(index){return _get_location(index+offset);},file_basename:file_basename,filename:filename};}function calculate_replacements(re,get_replacement,source){var replacements=[];source.replace(re,function(){for(var _len4=arguments.length,match=new Array(_len4),_key4=0;_key4<_len4;_key4++){match[_key4]=arguments[_key4];}replacements.push(get_replacement.apply(void 0,match).then(function(replacement){var matched_string=match[0];var offset=match[match.length-2];return{offset:offset,length:matched_string.length,replacement:replacement};}));return'';});return Promise.all(replacements);}function perform_replacements(replacements,source){var out=new MappedCode();var last_end=0;var _iterator27=_createForOfIteratorHelper(replacements),_step27;try{for(_iterator27.s();!(_step27=_iterator27.n()).done;){var _step27$value=_step27.value,offset=_step27$value.offset,length=_step27$value.length,replacement=_step27$value.replacement;var unchanged_prefix=MappedCode.from_source(slice_source(source.source.slice(last_end,offset),last_end,source));out.concat(unchanged_prefix).concat(replacement);last_end=offset+length;}}catch(err){_iterator27.e(err);}finally{_iterator27.f();}var unchanged_suffix=MappedCode.from_source(slice_source(source.source.slice(last_end),last_end,source));return out.concat(unchanged_suffix);}function replace_in_code(_x,_x2,_x3){return _replace_in_code.apply(this,arguments);}function _replace_in_code(){_replace_in_code=(0,_asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee(regex,get_replacement,location){var replacements;return _regenerator.default.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return calculate_replacements(regex,get_replacement,location.source);case 2:replacements=_context.sent;return _context.abrupt(\"return\",perform_replacements(replacements,location));case 4:case\"end\":return _context.stop();}}},_callee);}));return _replace_in_code.apply(this,arguments);}function get_file_basename(filename){return filename.split(/[/\\\\]/).pop();}/**\n * Represents intermediate states of the preprocessing.\n */var PreprocessResult=/*#__PURE__*/function(){function PreprocessResult(source,filename){(0,_classCallCheck2.default)(this,PreprocessResult);this.source=source;this.filename=filename;// sourcemap_list is sorted in reverse order from last map (index 0) to first map (index -1)\n// so we use sourcemap_list.unshift() to add new maps\n// https://github.com/ampproject/remapping#multiple-transformations-of-a-file\nthis.sourcemap_list=[];this.dependencies=[];this.update_source({string:source});// preprocess source must be relative to itself or equal null\nthis.file_basename=filename==null?null:get_file_basename(filename);}(0,_createClass2.default)(PreprocessResult,[{key:\"update_source\",value:function update_source(_ref45){var source=_ref45.string,map=_ref45.map,dependencies=_ref45.dependencies;if(source!=null){this.source=source;this.get_location=getLocator(source);}if(map){this.sourcemap_list.unshift(map);}if(dependencies){var _this$dependencies;(_this$dependencies=this.dependencies).push.apply(_this$dependencies,(0,_toConsumableArray2.default)(dependencies));}}},{key:\"to_processed\",value:function to_processed(){var _this98=this;// Combine all the source maps for each preprocessor function into one\nvar map=combine_sourcemaps(this.file_basename,this.sourcemap_list);return{// TODO return separated output, in future version where svelte.compile supports it:\n// style: { code: styleCode, map: styleMap },\n// script { code: scriptCode, map: scriptMap },\n// markup { code: markupCode, map: markupMap },\ncode:this.source,dependencies:(0,_toConsumableArray2.default)(new Set(this.dependencies)),map:map,toString:function toString(){return _this98.source;}};}}]);return PreprocessResult;}();/**\n * Convert preprocessor output for the tag content into MappedCode\n */function processed_content_to_code(processed,location,file_basename){// Convert the preprocessed code and its sourcemap to a MappedCode\nvar decoded_map;if(processed.map){decoded_map=decode_map(processed);// decoded map may not have sources for empty maps like `{ mappings: '' }`\nif(decoded_map.sources){// offset only segments pointing at original component source\nvar source_index=decoded_map.sources.indexOf(file_basename);if(source_index!==-1){sourcemap_add_offset(decoded_map,location,source_index);}}}return MappedCode.from_processed(processed.code,decoded_map);}/**\n * Given the whole tag including content, return a `MappedCode`\n * representing the tag content replaced with `processed`.\n */function processed_tag_to_code(processed,tag_name,attributes,source){var file_basename=source.file_basename,get_location=source.get_location;var build_mapped_code=function build_mapped_code(code,offset){return MappedCode.from_source(slice_source(code,offset,source));};var tag_open=\"<\".concat(tag_name).concat(attributes||'',\">\");var tag_close=\"</\".concat(tag_name,\">\");var tag_open_code=build_mapped_code(tag_open,0);var tag_close_code=build_mapped_code(tag_close,tag_open.length+source.source.length);parse_attached_sourcemap(processed,tag_name);var content_code=processed_content_to_code(processed,get_location(tag_open.length),file_basename);return tag_open_code.concat(content_code).concat(tag_close_code);}function parse_tag_attributes(str){// note: won't work with attribute values containing spaces.\nreturn str.split(/\\s+/).filter(Boolean).reduce(function(attrs,attr){var _a;var i=attr.indexOf('=');var _ref46=i>0?[attr.slice(0,i),attr.slice(i+1)]:[attr],_ref47=(0,_slicedToArray2.default)(_ref46,2),key=_ref47[0],value=_ref47[1];var _ref48=value&&value.match(/^['\"](.*)['\"]$/)||[],_ref49=(0,_slicedToArray2.default)(_ref48,2),unquoted=_ref49[1];return Object.assign(Object.assign({},attrs),(0,_defineProperty2.default)({},key,(_a=unquoted!==null&&unquoted!==void 0?unquoted:value,_a!==null&&_a!==void 0?_a:true)));},{});}/**\n * Calculate the updates required to process all instances of the specified tag.\n */function process_tag(_x4,_x5,_x6){return _process_tag.apply(this,arguments);}function _process_tag(){_process_tag=(0,_asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee3(tag_name,preprocessor,source){var filename,markup,tag_regex,dependencies,process_single_tag,_process_single_tag,_yield$replace_in_cod,string,map;return _regenerator.default.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_process_single_tag=function _process_single_tag3(){_process_single_tag=(0,_asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee2(tag_with_content){var attributes,content,tag_offset,no_change,processed,_args3=arguments;return _regenerator.default.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:attributes=_args3.length>1&&_args3[1]!==undefined?_args3[1]:'';content=_args3.length>2&&_args3[2]!==undefined?_args3[2]:'';tag_offset=_args3.length>3?_args3[3]:undefined;no_change=function no_change(){return MappedCode.from_source(slice_source(tag_with_content,tag_offset,source));};if(!(!attributes&&!content)){_context2.next=6;break;}return _context2.abrupt(\"return\",no_change());case 6:_context2.next=8;return preprocessor({content:content||'',attributes:parse_tag_attributes(attributes||''),markup:markup,filename:filename});case 8:processed=_context2.sent;if(processed){_context2.next=11;break;}return _context2.abrupt(\"return\",no_change());case 11:if(processed.dependencies)dependencies.push.apply(dependencies,(0,_toConsumableArray2.default)(processed.dependencies));if(!(!processed.map&&processed.code===content)){_context2.next=14;break;}return _context2.abrupt(\"return\",no_change());case 14:return _context2.abrupt(\"return\",processed_tag_to_code(processed,tag_name,attributes,slice_source(content,tag_offset,source)));case 15:case\"end\":return _context2.stop();}}},_callee2);}));return _process_single_tag.apply(this,arguments);};process_single_tag=function _process_single_tag2(_x12){return _process_single_tag.apply(this,arguments);};filename=source.filename,markup=source.source;tag_regex=tag_name==='style'?/<!--[^]*?-->|<style(\\s[^]*?)?(?:>([^]*?)<\\/style>|\\/>)/gi:/<!--[^]*?-->|<script(\\s[^]*?)?(?:>([^]*?)<\\/script>|\\/>)/gi;dependencies=[];_context3.next=7;return replace_in_code(tag_regex,process_single_tag,source);case 7:_yield$replace_in_cod=_context3.sent;string=_yield$replace_in_cod.string;map=_yield$replace_in_cod.map;return _context3.abrupt(\"return\",{string:string,map:map,dependencies:dependencies});case 11:case\"end\":return _context3.stop();}}},_callee3);}));return _process_tag.apply(this,arguments);}function process_markup(_x7,_x8){return _process_markup.apply(this,arguments);}function _process_markup(){_process_markup=(0,_asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee4(process,source){var processed;return _regenerator.default.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return process({content:source.source,filename:source.filename});case 2:processed=_context4.sent;if(!processed){_context4.next=7;break;}return _context4.abrupt(\"return\",{string:processed.code,map:processed.map?// TODO: can we use decode_sourcemap?\ntypeof processed.map==='string'?JSON.parse(processed.map):processed.map:undefined,dependencies:processed.dependencies});case 7:return _context4.abrupt(\"return\",{});case 8:case\"end\":return _context4.stop();}}},_callee4);}));return _process_markup.apply(this,arguments);}function preprocess(_x9,_x10,_x11){return _preprocess.apply(this,arguments);}function _preprocess(){_preprocess=(0,_asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee5(source,preprocessor,options){var filename,preprocessors,markup,script,style,result,_iterator28,_step28,_process,_iterator29,_step29,_process2,_iterator30,_step30,_preprocess2;return _regenerator.default.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:filename=options&&options.filename||preprocessor.filename;// legacy\npreprocessors=preprocessor?Array.isArray(preprocessor)?preprocessor:[preprocessor]:[];markup=preprocessors.map(function(p){return p.markup;}).filter(Boolean);script=preprocessors.map(function(p){return p.script;}).filter(Boolean);style=preprocessors.map(function(p){return p.style;}).filter(Boolean);result=new PreprocessResult(source,filename);// TODO keep track: what preprocessor generated what sourcemap?\n// to make debugging easier = detect low-resolution sourcemaps in fn combine_mappings\n_iterator28=_createForOfIteratorHelper(markup);_context5.prev=7;_iterator28.s();case 9:if((_step28=_iterator28.n()).done){_context5.next=18;break;}_process=_step28.value;_context5.t0=result;_context5.next=14;return process_markup(_process,result);case 14:_context5.t1=_context5.sent;_context5.t0.update_source.call(_context5.t0,_context5.t1);case 16:_context5.next=9;break;case 18:_context5.next=23;break;case 20:_context5.prev=20;_context5.t2=_context5[\"catch\"](7);_iterator28.e(_context5.t2);case 23:_context5.prev=23;_iterator28.f();return _context5.finish(23);case 26:_iterator29=_createForOfIteratorHelper(script);_context5.prev=27;_iterator29.s();case 29:if((_step29=_iterator29.n()).done){_context5.next=38;break;}_process2=_step29.value;_context5.t3=result;_context5.next=34;return process_tag('script',_process2,result);case 34:_context5.t4=_context5.sent;_context5.t3.update_source.call(_context5.t3,_context5.t4);case 36:_context5.next=29;break;case 38:_context5.next=43;break;case 40:_context5.prev=40;_context5.t5=_context5[\"catch\"](27);_iterator29.e(_context5.t5);case 43:_context5.prev=43;_iterator29.f();return _context5.finish(43);case 46:_iterator30=_createForOfIteratorHelper(style);_context5.prev=47;_iterator30.s();case 49:if((_step30=_iterator30.n()).done){_context5.next=58;break;}_preprocess2=_step30.value;_context5.t6=result;_context5.next=54;return process_tag('style',_preprocess2,result);case 54:_context5.t7=_context5.sent;_context5.t6.update_source.call(_context5.t6,_context5.t7);case 56:_context5.next=49;break;case 58:_context5.next=63;break;case 60:_context5.prev=60;_context5.t8=_context5[\"catch\"](47);_iterator30.e(_context5.t8);case 63:_context5.prev=63;_iterator30.f();return _context5.finish(63);case 66:return _context5.abrupt(\"return\",result.to_processed());case 67:case\"end\":return _context5.stop();}}},_callee5,null,[[7,20,23,26],[27,40,43,46],[47,60,63,66]]);}));return _preprocess.apply(this,arguments);}var VERSION='3.46.2';exports.VERSION=VERSION;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/svelte/compiler.mjs\n");

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar punycode = __webpack_require__(/*! punycode */ \"./node_modules/punycode/punycode.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/url/util.js\");\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = __webpack_require__(/*! querystring */ \"./node_modules/querystring-es3/index.js\");\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/url/url.js\n");

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanM/MzVlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1N0cmluZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnc3RyaW5nJztcbiAgfSxcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuICB9LFxuICBpc051bGw6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbE9yVW5kZWZpbmVkOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09IG51bGw7XG4gIH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url/util.js\n");

/***/ })

}]);