(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[79],{

/***/ "./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nmodule.exports = _taggedTemplateLiteral, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90YWdnZWRUZW1wbGF0ZUxpdGVyYWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90YWdnZWRUZW1wbGF0ZUxpdGVyYWwuanM/NTY0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\n");

/***/ }),

/***/ "./node_modules/babylon7/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/babylon7/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\n\nvar _get17 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ \"./node_modules/@babel/runtime/helpers/get.js\"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits.js\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\"));\n\nvar _taggedTemplateLiteral2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/taggedTemplateLiteral */ \"./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\"));\n\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar Position = /*#__PURE__*/(0, _createClass2.default)(function Position(line, col, index) {\n  (0, _classCallCheck2.default)(this, Position);\n  this.line = void 0;\n  this.column = void 0;\n  this.index = void 0;\n  this.line = line;\n  this.column = col;\n  this.index = index;\n});\nvar SourceLocation = /*#__PURE__*/(0, _createClass2.default)(function SourceLocation(start, end) {\n  (0, _classCallCheck2.default)(this, SourceLocation);\n  this.start = void 0;\n  this.end = void 0;\n  this.filename = void 0;\n  this.identifierName = void 0;\n  this.start = start;\n  this.end = end;\n});\n\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  var line = position.line,\n      column = position.column,\n      index = position.index;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n\nvar ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nvar reflect = function reflect(keys) {\n  var last = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : keys.length - 1;\n  return {\n    get: function get() {\n      return keys.reduce(function (object, key) {\n        return object[key];\n      }, this);\n    },\n    set: function set(value) {\n      keys.reduce(function (item, key, i) {\n        return i === last ? item[key] = value : item[key];\n      }, this);\n    }\n  };\n};\n\nvar instantiate = function instantiate(constructor, properties, descriptors) {\n  return Object.keys(descriptors).map(function (key) {\n    return [key, descriptors[key]];\n  }).filter(function (_ref2) {\n    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n        descriptor = _ref3[1];\n\n    return !!descriptor;\n  }).map(function (_ref4) {\n    var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n        key = _ref5[0],\n        descriptor = _ref5[1];\n\n    return [key, typeof descriptor === \"function\" ? {\n      value: descriptor,\n      enumerable: false\n    } : typeof descriptor.reflect === \"string\" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split(\".\"))) : descriptor];\n  }).reduce(function (instance, _ref6) {\n    var _ref7 = (0, _slicedToArray2.default)(_ref6, 2),\n        key = _ref7[0],\n        descriptor = _ref7[1];\n\n    return Object.defineProperty(instance, key, Object.assign({\n      configurable: true\n    }, descriptor));\n  }, Object.assign(new constructor(), properties));\n};\n\nvar ModuleErrors = function ModuleErrors(_) {\n  return {\n    ImportMetaOutsideModule: _(\"import.meta may appear only with 'sourceType: \\\"module\\\"'\", {\n      code: ParseErrorCodes.SourceTypeModuleError\n    }),\n    ImportOutsideModule: _(\"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\", {\n      code: ParseErrorCodes.SourceTypeModuleError\n    })\n  };\n};\n\nvar NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\n\nvar toNodeDescription = function toNodeDescription(_ref8) {\n  var type = _ref8.type,\n      prefix = _ref8.prefix;\n  return type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];\n};\n\nvar StandardErrors = function StandardErrors(_) {\n  return {\n    AccessorIsGenerator: _(function (_ref9) {\n      var kind = _ref9.kind;\n      return \"A \".concat(kind, \"ter cannot be a generator.\");\n    }),\n    ArgumentsInClass: _(\"'arguments' is only allowed in functions and class methods.\"),\n    AsyncFunctionInSingleStatementContext: _(\"Async functions can only be declared at the top level or inside a block.\"),\n    AwaitBindingIdentifier: _(\"Can not use 'await' as identifier inside an async function.\"),\n    AwaitBindingIdentifierInStaticBlock: _(\"Can not use 'await' as identifier inside a static block.\"),\n    AwaitExpressionFormalParameter: _(\"'await' is not allowed in async function parameters.\"),\n    AwaitNotInAsyncContext: _(\"'await' is only allowed within async functions and at the top levels of modules.\"),\n    AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n    BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n    BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n    BadSetterRestParameter: _(\"A 'set' accesor function argument must not be a rest parameter.\"),\n    ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n    ConstructorClassPrivateField: _(\"Classes may not have a private field named '#constructor'.\"),\n    ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n    ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n    ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n    DeclarationMissingInitializer: _(function (_ref10) {\n      var kind = _ref10.kind;\n      return \"Missing initializer in \".concat(kind, \" declaration.\");\n    }),\n    DecoratorBeforeExport: _(\"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\"),\n    DecoratorConstructor: _(\"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\"),\n    DecoratorExportClass: _(\"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\"),\n    DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n    DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n    DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n    DestructureNamedImport: _(\"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\"),\n    DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n    DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n    DuplicateExport: _(function (_ref11) {\n      var exportName = _ref11.exportName;\n      return \"`\".concat(exportName, \"` has already been exported. Exported identifiers must be unique.\");\n    }),\n    DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n    DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n    ElementAfterRest: _(\"Rest element must be last element.\"),\n    EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n    ExportBindingIsString: _(function (_ref12) {\n      var localName = _ref12.localName,\n          exportName = _ref12.exportName;\n      return \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '\".concat(localName, \"' as '\").concat(exportName, \"' } from 'some-module'`?\");\n    }),\n    ExportDefaultFromAsIdentifier: _(\"'from' is not allowed as an identifier after 'export default'.\"),\n    ForInOfLoopInitializer: _(function (_ref13) {\n      var type = _ref13.type;\n      return \"'\".concat(type === \"ForInStatement\" ? \"for-in\" : \"for-of\", \"' loop variable declaration may not have an initializer.\");\n    }),\n    ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n    ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n    GeneratorInSingleStatementContext: _(\"Generators can only be declared at the top level or inside a block.\"),\n    IllegalBreakContinue: _(function (_ref14) {\n      var type = _ref14.type;\n      return \"Unsyntactic \".concat(type === \"BreakStatement\" ? \"break\" : \"continue\", \".\");\n    }),\n    IllegalLanguageModeDirective: _(\"Illegal 'use strict' directive in function with non-simple parameter list.\"),\n    IllegalReturn: _(\"'return' outside of function.\"),\n    ImportBindingIsString: _(function (_ref15) {\n      var importName = _ref15.importName;\n      return \"A string literal cannot be used as an imported binding.\\n- Did you mean `import { \\\"\".concat(importName, \"\\\" as foo }`?\");\n    }),\n    ImportCallArgumentTrailingComma: _(\"Trailing comma is disallowed inside import(...) arguments.\"),\n    ImportCallArity: _(function (_ref16) {\n      var maxArgumentCount = _ref16.maxArgumentCount;\n      return \"`import()` requires exactly \".concat(maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\", \".\");\n    }),\n    ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n    ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n    IncompatibleRegExpUVFlags: _(\"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\"),\n    InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n    InvalidCodePoint: _(\"Code point out of bounds.\"),\n    InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n    InvalidDecimal: _(\"Invalid decimal.\"),\n    InvalidDigit: _(function (_ref17) {\n      var radix = _ref17.radix;\n      return \"Expected number in radix \".concat(radix, \".\");\n    }),\n    InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n    InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n    InvalidEscapedReservedWord: _(function (_ref18) {\n      var reservedWord = _ref18.reservedWord;\n      return \"Escape sequence in keyword \".concat(reservedWord, \".\");\n    }),\n    InvalidIdentifier: _(function (_ref19) {\n      var identifierName = _ref19.identifierName;\n      return \"Invalid identifier \".concat(identifierName, \".\");\n    }),\n    InvalidLhs: _(function (_ref20) {\n      var ancestor = _ref20.ancestor;\n      return \"Invalid left-hand side in \".concat(toNodeDescription(ancestor), \".\");\n    }),\n    InvalidLhsBinding: _(function (_ref21) {\n      var ancestor = _ref21.ancestor;\n      return \"Binding invalid left-hand side in \".concat(toNodeDescription(ancestor), \".\");\n    }),\n    InvalidNumber: _(\"Invalid number.\"),\n    InvalidOrMissingExponent: _(\"Floating-point numbers require a valid exponent after the 'e'.\"),\n    InvalidOrUnexpectedToken: _(function (_ref22) {\n      var unexpected = _ref22.unexpected;\n      return \"Unexpected character '\".concat(unexpected, \"'.\");\n    }),\n    InvalidParenthesizedAssignment: _(\"Invalid parenthesized assignment pattern.\"),\n    InvalidPrivateFieldResolution: _(function (_ref23) {\n      var identifierName = _ref23.identifierName;\n      return \"Private name #\".concat(identifierName, \" is not defined.\");\n    }),\n    InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n    InvalidRecordProperty: _(\"Only properties and spread elements are allowed in record definitions.\"),\n    InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n    LabelRedeclaration: _(function (_ref24) {\n      var labelName = _ref24.labelName;\n      return \"Label '\".concat(labelName, \"' is already declared.\");\n    }),\n    LetInLexicalBinding: _(\"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\"),\n    LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n    MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n    MissingClassName: _(\"A class name is required.\"),\n    MissingEqInAssignment: _(\"Only '=' operator can be used for specifying default value.\"),\n    MissingSemicolon: _(\"Missing semicolon.\"),\n    MissingPlugin: _(function (_ref25) {\n      var missingPlugin = _ref25.missingPlugin;\n      return \"This experimental syntax requires enabling the parser plugin: \".concat(missingPlugin.map(function (name) {\n        return JSON.stringify(name);\n      }).join(\", \"), \".\");\n    }),\n    MissingOneOfPlugins: _(function (_ref26) {\n      var missingPlugin = _ref26.missingPlugin;\n      return \"This experimental syntax requires enabling one of the following parser plugin(s): \".concat(missingPlugin.map(function (name) {\n        return JSON.stringify(name);\n      }).join(\", \"), \".\");\n    }),\n    MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n    MixingCoalesceWithLogical: _(\"Nullish coalescing operator(??) requires parens when mixing with logical operators.\"),\n    ModuleAttributeDifferentFromType: _(\"The only accepted module attribute is `type`.\"),\n    ModuleAttributeInvalidValue: _(\"Only string literals are allowed as module attribute values.\"),\n    ModuleAttributesWithDuplicateKeys: _(function (_ref27) {\n      var key = _ref27.key;\n      return \"Duplicate key \\\"\".concat(key, \"\\\" is not allowed in module attributes.\");\n    }),\n    ModuleExportNameHasLoneSurrogate: _(function (_ref28) {\n      var surrogateCharCode = _ref28.surrogateCharCode;\n      return \"An export name cannot include a lone surrogate, found '\\\\u\".concat(surrogateCharCode.toString(16), \"'.\");\n    }),\n    ModuleExportUndefined: _(function (_ref29) {\n      var localName = _ref29.localName;\n      return \"Export '\".concat(localName, \"' is not defined.\");\n    }),\n    MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n    NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n    NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n    NumberIdentifier: _(\"Identifier directly after number.\"),\n    NumericSeparatorInEscapeSequence: _(\"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\"),\n    ObsoleteAwaitStar: _(\"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\"),\n    OptionalChainingNoNew: _(\"Constructors in/after an Optional Chain are not allowed.\"),\n    OptionalChainingNoTemplate: _(\"Tagged Template Literals are not allowed in optionalChain.\"),\n    OverrideOnConstructor: _(\"'override' modifier cannot appear on a constructor declaration.\"),\n    ParamDupe: _(\"Argument name clash.\"),\n    PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n    PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n    PrivateInExpectedIn: _(function (_ref30) {\n      var identifierName = _ref30.identifierName;\n      return \"Private names are only allowed in property accesses (`obj.#\".concat(identifierName, \"`) or in `in` expressions (`#\").concat(identifierName, \" in obj`).\");\n    }),\n    PrivateNameRedeclaration: _(function (_ref31) {\n      var identifierName = _ref31.identifierName;\n      return \"Duplicate private name #\".concat(identifierName, \".\");\n    }),\n    RecordExpressionBarIncorrectEndSyntaxType: _(\"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n    RecordExpressionBarIncorrectStartSyntaxType: _(\"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n    RecordExpressionHashIncorrectStartSyntaxType: _(\"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\"),\n    RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n    RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n    SloppyFunction: _(\"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\"),\n    StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n    SuperNotAllowed: _(\"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\"),\n    SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n    TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n    TupleExpressionBarIncorrectEndSyntaxType: _(\"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n    TupleExpressionBarIncorrectStartSyntaxType: _(\"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\"),\n    TupleExpressionHashIncorrectStartSyntaxType: _(\"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\"),\n    UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n    UnexpectedAwaitAfterPipelineBody: _('Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.'),\n    UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n    UnexpectedImportExport: _(\"'import' and 'export' may only appear at the top level.\"),\n    UnexpectedKeyword: _(function (_ref32) {\n      var keyword = _ref32.keyword;\n      return \"Unexpected keyword '\".concat(keyword, \"'.\");\n    }),\n    UnexpectedLeadingDecorator: _(\"Leading decorators must be attached to a class declaration.\"),\n    UnexpectedLexicalDeclaration: _(\"Lexical declaration cannot appear in a single-statement context.\"),\n    UnexpectedNewTarget: _(\"`new.target` can only be used in functions or class properties.\"),\n    UnexpectedNumericSeparator: _(\"A numeric separator is only allowed between two digits.\"),\n    UnexpectedPrivateField: _(\"Unexpected private name.\"),\n    UnexpectedReservedWord: _(function (_ref33) {\n      var reservedWord = _ref33.reservedWord;\n      return \"Unexpected reserved word '\".concat(reservedWord, \"'.\");\n    }),\n    UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n    UnexpectedToken: _(function (_ref34) {\n      var expected = _ref34.expected,\n          unexpected = _ref34.unexpected;\n      return \"Unexpected token\".concat(unexpected ? \" '\".concat(unexpected, \"'.\") : \"\").concat(expected ? \", expected \\\"\".concat(expected, \"\\\"\") : \"\");\n    }),\n    UnexpectedTokenUnaryExponentiation: _(\"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\"),\n    UnsupportedBind: _(\"Binding should be performed on object property.\"),\n    UnsupportedDecoratorExport: _(\"A decorated export must export a class declaration.\"),\n    UnsupportedDefaultExport: _(\"Only expressions, functions or classes are allowed as the `default` export.\"),\n    UnsupportedImport: _(\"`import` can only be used in `import()` or `import.meta`.\"),\n    UnsupportedMetaProperty: _(function (_ref35) {\n      var target = _ref35.target,\n          onlyValidPropertyName = _ref35.onlyValidPropertyName;\n      return \"The only valid meta property for \".concat(target, \" is \").concat(target, \".\").concat(onlyValidPropertyName, \".\");\n    }),\n    UnsupportedParameterDecorator: _(\"Decorators cannot be used to decorate parameters.\"),\n    UnsupportedPropertyDecorator: _(\"Decorators cannot be used to decorate object literal properties.\"),\n    UnsupportedSuper: _(\"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\"),\n    UnterminatedComment: _(\"Unterminated comment.\"),\n    UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n    UnterminatedString: _(\"Unterminated string constant.\"),\n    UnterminatedTemplate: _(\"Unterminated template.\"),\n    VarRedeclaration: _(function (_ref36) {\n      var identifierName = _ref36.identifierName;\n      return \"Identifier '\".concat(identifierName, \"' has already been declared.\");\n    }),\n    YieldBindingIdentifier: _(\"Can not use 'yield' as identifier inside a generator.\"),\n    YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n    ZeroDigitNumericSeparator: _(\"Numeric separator can not be used after leading 0.\")\n  };\n};\n\nvar StrictModeErrors = function StrictModeErrors(_) {\n  return {\n    StrictDelete: _(\"Deleting local variable in strict mode.\"),\n    StrictEvalArguments: _(function (_ref37) {\n      var referenceName = _ref37.referenceName;\n      return \"Assigning to '\".concat(referenceName, \"' in strict mode.\");\n    }),\n    StrictEvalArgumentsBinding: _(function (_ref38) {\n      var bindingName = _ref38.bindingName;\n      return \"Binding '\".concat(bindingName, \"' in strict mode.\");\n    }),\n    StrictFunction: _(\"In strict mode code, functions can only be declared at top level or inside a block.\"),\n    StrictNumericEscape: _(\"The only valid numeric escape in strict mode is '\\\\0'.\"),\n    StrictOctalLiteral: _(\"Legacy octal literals are not allowed in strict mode.\"),\n    StrictWith: _(\"'with' in strict mode.\")\n  };\n};\n\nvar UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\n\nvar PipelineOperatorErrors = function PipelineOperatorErrors(_) {\n  return {\n    PipeBodyIsTighter: _(\"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\"),\n    PipeTopicRequiresHackPipes: _('Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'),\n    PipeTopicUnbound: _(\"Topic reference is unbound; it must be inside a pipe body.\"),\n    PipeTopicUnconfiguredToken: _(function (_ref39) {\n      var token = _ref39.token;\n      return \"Invalid topic token \".concat(token, \". In order to use \").concat(token, \" as a topic reference, the pipelineOperator plugin must be configured with { \\\"proposal\\\": \\\"hack\\\", \\\"topicToken\\\": \\\"\").concat(token, \"\\\" }.\");\n    }),\n    PipeTopicUnused: _(\"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\"),\n    PipeUnparenthesizedBody: _(function (_ref40) {\n      var type = _ref40.type;\n      return \"Hack-style pipe body cannot be an unparenthesized \".concat(toNodeDescription({\n        type: type\n      }), \"; please wrap it in parentheses.\");\n    }),\n    PipelineBodyNoArrow: _('Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.'),\n    PipelineBodySequenceExpression: _(\"Pipeline body may not be a comma-separated sequence expression.\"),\n    PipelineHeadSequenceExpression: _(\"Pipeline head should not be a comma-separated sequence expression.\"),\n    PipelineTopicUnused: _(\"Pipeline is in topic style but does not use topic reference.\"),\n    PrimaryTopicNotAllowed: _(\"Topic reference was used in a lexical context without topic binding.\"),\n    PrimaryTopicRequiresSmartPipeline: _('Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.')\n  };\n};\n\nvar _excluded$1 = [\"toMessage\"];\n\nfunction toParseErrorConstructor(_ref) {\n  var toMessage = _ref.toMessage,\n      properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  return function constructor(_ref41) {\n    var loc = _ref41.loc,\n        details = _ref41.details;\n    return instantiate(SyntaxError, Object.assign({}, properties, {\n      loc: loc\n    }), {\n      clone: function clone() {\n        var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var loc = overrides.loc || {};\n        return constructor({\n          loc: new Position(\"line\" in loc ? loc.line : this.loc.line, \"column\" in loc ? loc.column : this.loc.column, \"index\" in loc ? loc.index : this.loc.index),\n          details: Object.assign({}, this.details, overrides.details)\n        });\n      },\n      details: {\n        value: details,\n        enumerable: false\n      },\n      message: {\n        get: function get() {\n          return \"\".concat(toMessage(this.details), \" (\").concat(this.loc.line, \":\").concat(this.loc.column, \")\");\n        },\n        set: function set(value) {\n          Object.defineProperty(this, \"message\", {\n            value: value\n          });\n        }\n      },\n      pos: {\n        reflect: \"loc.index\",\n        enumerable: true\n      },\n      missingPlugin: \"missingPlugin\" in details && {\n        reflect: \"details.missingPlugin\",\n        enumerable: true\n      }\n    });\n  };\n}\n\nfunction toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return Object.assign({\n    toMessage: typeof toMessageOrMessage === \"string\" ? function () {\n      return toMessageOrMessage;\n    } : toMessageOrMessage\n  }, credentials);\n}\n\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return function (toParseErrorCredentialsMap) {\n      return ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n    };\n  }\n\n  var partialCredentials = argument(toParseErrorCredentials);\n  var ParseErrorConstructors = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(partialCredentials); _i < _Object$keys.length; _i++) {\n    var reasonCode = _Object$keys[_i];\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode: reasonCode\n    }, syntaxPlugin ? {\n      syntaxPlugin: syntaxPlugin\n    } : {}, partialCredentials[reasonCode]));\n  }\n\n  return ParseErrorConstructors;\n}\n\nvar Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)([\"pipelineOperator\"])))(PipelineOperatorErrors));\nvar defineProperty = Object.defineProperty;\n\nvar toUnenumerable = function toUnenumerable(object, key) {\n  return defineProperty(object, key, {\n    enumerable: false,\n    value: object[key]\n  });\n};\n\nfunction toESTreeLocation(node) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\n\nvar estree = function estree(superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    (0, _inherits2.default)(_class, _superClass);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      (0, _classCallCheck2.default)(this, _class);\n      return _super.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class, [{\n      key: \"parse\",\n      value: function parse() {\n        var file = toESTreeLocation((0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parse\", this).call(this));\n\n        if (this.options.tokens) {\n          file.tokens = file.tokens.map(toESTreeLocation);\n        }\n\n        return file;\n      }\n    }, {\n      key: \"parseRegExpLiteral\",\n      value: function parseRegExpLiteral(_ref42) {\n        var pattern = _ref42.pattern,\n            flags = _ref42.flags;\n        var regex = null;\n\n        try {\n          regex = new RegExp(pattern, flags);\n        } catch (e) {}\n\n        var node = this.estreeParseLiteral(regex);\n        node.regex = {\n          pattern: pattern,\n          flags: flags\n        };\n        return node;\n      }\n    }, {\n      key: \"parseBigIntLiteral\",\n      value: function parseBigIntLiteral(value) {\n        var bigInt;\n\n        try {\n          bigInt = BigInt(value);\n        } catch (_unused) {\n          bigInt = null;\n        }\n\n        var node = this.estreeParseLiteral(bigInt);\n        node.bigint = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"parseDecimalLiteral\",\n      value: function parseDecimalLiteral(value) {\n        var decimal = null;\n        var node = this.estreeParseLiteral(decimal);\n        node.decimal = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"estreeParseLiteral\",\n      value: function estreeParseLiteral(value) {\n        return this.parseLiteral(value, \"Literal\");\n      }\n    }, {\n      key: \"parseStringLiteral\",\n      value: function parseStringLiteral(value) {\n        return this.estreeParseLiteral(value);\n      }\n    }, {\n      key: \"parseNumericLiteral\",\n      value: function parseNumericLiteral(value) {\n        return this.estreeParseLiteral(value);\n      }\n    }, {\n      key: \"parseNullLiteral\",\n      value: function parseNullLiteral() {\n        return this.estreeParseLiteral(null);\n      }\n    }, {\n      key: \"parseBooleanLiteral\",\n      value: function parseBooleanLiteral(value) {\n        return this.estreeParseLiteral(value);\n      }\n    }, {\n      key: \"directiveToStmt\",\n      value: function directiveToStmt(directive) {\n        var directiveLiteral = directive.value;\n        var stmt = this.startNodeAt(directive.start, directive.loc.start);\n        var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n        expression.value = directiveLiteral.extra.expressionValue;\n        expression.raw = directiveLiteral.extra.raw;\n        stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.loc.end);\n        stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n        return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n      }\n    }, {\n      key: \"initFunction\",\n      value: function initFunction(node, isAsync) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"initFunction\", this).call(this, node, isAsync);\n        node.expression = false;\n      }\n    }, {\n      key: \"checkDeclaration\",\n      value: function checkDeclaration(node) {\n        if (node != null && this.isObjectProperty(node)) {\n          this.checkDeclaration(node.value);\n        } else {\n          (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"checkDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"getObjectOrClassMethodParams\",\n      value: function getObjectOrClassMethodParams(method) {\n        return method.value.params;\n      }\n    }, {\n      key: \"isValidDirective\",\n      value: function isValidDirective(stmt) {\n        var _stmt$expression$extr;\n\n        return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n      }\n    }, {\n      key: \"parseBlockBody\",\n      value: function parseBlockBody(node) {\n        var _get2,\n            _this2 = this;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        (_get2 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseBlockBody\", this)).call.apply(_get2, [this, node].concat(args));\n\n        var directiveStatements = node.directives.map(function (d) {\n          return _this2.directiveToStmt(d);\n        });\n        node.body = directiveStatements.concat(node.body);\n        delete node.directives;\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n        if (method.typeParameters) {\n          method.value.typeParameters = method.typeParameters;\n          delete method.typeParameters;\n        }\n\n        classBody.body.push(method);\n      }\n    }, {\n      key: \"parsePrivateName\",\n      value: function parsePrivateName() {\n        var node = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parsePrivateName\", this).call(this);\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return node;\n          }\n        }\n        return this.convertPrivateNameToPrivateIdentifier(node);\n      }\n    }, {\n      key: \"convertPrivateNameToPrivateIdentifier\",\n      value: function convertPrivateNameToPrivateIdentifier(node) {\n        var name = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"getPrivateNameSV\", this).call(this, node);\n        node = node;\n        delete node.id;\n        node.name = name;\n        node.type = \"PrivateIdentifier\";\n        return node;\n      }\n    }, {\n      key: \"isPrivateName\",\n      value: function isPrivateName(node) {\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"isPrivateName\", this).call(this, node);\n          }\n        }\n        return node.type === \"PrivateIdentifier\";\n      }\n    }, {\n      key: \"getPrivateNameSV\",\n      value: function getPrivateNameSV(node) {\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"getPrivateNameSV\", this).call(this, node);\n          }\n        }\n        return node.name;\n      }\n    }, {\n      key: \"parseLiteral\",\n      value: function parseLiteral(value, type) {\n        var node = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseLiteral\", this).call(this, value, type);\n        node.raw = node.extra.raw;\n        delete node.extra;\n        return node;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpression) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseFunctionBody\", this).call(this, node, allowExpression, isMethod);\n        node.expression = node.body.type !== \"BlockStatement\";\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n        var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n        var funcNode = this.startNode();\n        funcNode.kind = node.kind;\n        funcNode = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseMethod\", this).call(this, funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n        funcNode.type = \"FunctionExpression\";\n        delete funcNode.kind;\n        node.value = funcNode;\n\n        if (type === \"ClassPrivateMethod\") {\n          node.computed = false;\n        }\n\n        type = \"MethodDefinition\";\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty() {\n        var _get3;\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        var propertyNode = (_get3 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseClassProperty\", this)).call.apply(_get3, [this].concat(args));\n\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return propertyNode;\n          }\n        }\n        propertyNode.type = \"PropertyDefinition\";\n        return propertyNode;\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty() {\n        var _get4;\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        var propertyNode = (_get4 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseClassPrivateProperty\", this)).call.apply(_get4, [this].concat(args));\n\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return propertyNode;\n          }\n        }\n        propertyNode.type = \"PropertyDefinition\";\n        propertyNode.computed = false;\n        return propertyNode;\n      }\n    }, {\n      key: \"parseObjectMethod\",\n      value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n        var node = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseObjectMethod\", this).call(this, prop, isGenerator, isAsync, isPattern, isAccessor);\n\n        if (node) {\n          node.type = \"Property\";\n          if (node.kind === \"method\") node.kind = \"init\";\n          node.shorthand = false;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseObjectProperty\",\n      value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n        var node = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseObjectProperty\", this).call(this, prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n        if (node) {\n          node.kind = \"init\";\n          node.type = \"Property\";\n        }\n\n        return node;\n      }\n    }, {\n      key: \"isValidLVal\",\n      value: function isValidLVal(type) {\n        var _get5;\n\n        for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          rest[_key4 - 1] = arguments[_key4];\n        }\n\n        return type === \"Property\" ? \"value\" : (_get5 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"isValidLVal\", this)).call.apply(_get5, [this, type].concat(rest));\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        if (node != null && this.isObjectProperty(node)) {\n          return this.isAssignable(node.value, isBinding);\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"isAssignable\", this).call(this, node, isBinding);\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (node != null && this.isObjectProperty(node)) {\n          var key = node.key,\n              value = node.value;\n\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n\n          this.toAssignable(value, isLHS);\n        } else {\n          (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"toAssignableObjectExpressionProp\",\n      value: function toAssignableObjectExpressionProp(prop) {\n        if (prop.kind === \"get\" || prop.kind === \"set\") {\n          this.raise(Errors.PatternHasAccessor, {\n            at: prop.key\n          });\n        } else if (prop.method) {\n          this.raise(Errors.PatternHasMethod, {\n            at: prop.key\n          });\n        } else {\n          (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"toAssignableObjectExpressionProp\", this).apply(this, arguments);\n        }\n      }\n    }, {\n      key: \"finishCallExpression\",\n      value: function finishCallExpression(node, optional) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"finishCallExpression\", this).call(this, node, optional);\n\n        if (node.callee.type === \"Import\") {\n          node.type = \"ImportExpression\";\n          node.source = node.arguments[0];\n\n          if (this.hasPlugin(\"importAssertions\")) {\n            var _node$arguments$;\n\n            node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n          }\n\n          delete node.arguments;\n          delete node.callee;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"toReferencedArguments\",\n      value: function toReferencedArguments(node) {\n        if (node.type === \"ImportExpression\") {\n          return;\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"toReferencedArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseExport\", this).call(this, node);\n\n        switch (node.type) {\n          case \"ExportAllDeclaration\":\n            node.exported = null;\n            break;\n\n          case \"ExportNamedDeclaration\":\n            if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n              node.type = \"ExportAllDeclaration\";\n              node.exported = node.specifiers[0].exported;\n              delete node.specifiers;\n            }\n\n            break;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        var node = (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n\n        if (state.optionalChainMember) {\n          if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n            node.type = node.type.substring(8);\n          }\n\n          if (state.stop) {\n            var chain = this.startNodeAtNode(node);\n            chain.expression = node;\n            return this.finishNode(chain, \"ChainExpression\");\n          }\n        } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n          node.optional = false;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"hasPropertyAsPrivateName\",\n      value: function hasPropertyAsPrivateName(node) {\n        if (node.type === \"ChainExpression\") {\n          node = node.expression;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"hasPropertyAsPrivateName\", this).call(this, node);\n      }\n    }, {\n      key: \"isOptionalChain\",\n      value: function isOptionalChain(node) {\n        return node.type === \"ChainExpression\";\n      }\n    }, {\n      key: \"isObjectProperty\",\n      value: function isObjectProperty(node) {\n        return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n      }\n    }, {\n      key: \"isObjectMethod\",\n      value: function isObjectMethod(node) {\n        return node.method || node.kind === \"get\" || node.kind === \"set\";\n      }\n    }, {\n      key: \"finishNodeAt\",\n      value: function finishNodeAt(node, type, endLoc) {\n        return toESTreeLocation((0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"finishNodeAt\", this).call(this, node, type, endLoc));\n      }\n    }, {\n      key: \"resetEndLocation\",\n      value: function resetEndLocation(node) {\n        var endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class.prototype), \"resetEndLocation\", this).call(this, node, endLoc);\n        toESTreeLocation(node);\n      }\n    }]);\n    return _class;\n  }(superClass);\n};\n\nvar TokContext = /*#__PURE__*/(0, _createClass2.default)(function TokContext(token, preserveSpace) {\n  (0, _classCallCheck2.default)(this, TokContext);\n  this.token = void 0;\n  this.preserveSpace = void 0;\n  this.token = token;\n  this.preserveSpace = !!preserveSpace;\n});\nvar types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\nvar ExportedTokenType = /*#__PURE__*/(0, _createClass2.default)(function ExportedTokenType(label) {\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _classCallCheck2.default)(this, ExportedTokenType);\n  this.label = void 0;\n  this.keyword = void 0;\n  this.beforeExpr = void 0;\n  this.startsExpr = void 0;\n  this.rightAssociative = void 0;\n  this.isLoop = void 0;\n  this.isAssign = void 0;\n  this.prefix = void 0;\n  this.postfix = void 0;\n  this.binop = void 0;\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop != null ? conf.binop : null;\n  {\n    this.updateContext = null;\n  }\n});\nvar keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  var token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr: beforeExpr,\n    binop: binop\n  });\n}\n\nvar tokenTypeCounter = -1;\nvar tokenTypes = [];\nvar tokenLabels = [];\nvar tokenBinops = [];\nvar tokenBeforeExprs = [];\nvar tokenStartsExprs = [];\nvar tokenPrefixes = [];\n\nfunction createToken(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nvar tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr: beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr: beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr: beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr: beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr: beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr: beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr: beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr: startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr: startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr: startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix: prefix,\n    postfix: postfix,\n    startsExpr: startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr: startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr: startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr: beforeExpr,\n    binop: 9,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr: startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr: beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr: beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr: beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr: beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr: startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr: beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr: startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr: startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr: startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr: beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr: startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr: startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr: startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr: startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop: isLoop,\n    beforeExpr: beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop: isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop: isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr: startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr: startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr: startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr: startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr: startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr: startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr: startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr: startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr: startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr: startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr: startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr: startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr: startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr: startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr: startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr: startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr: startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr: startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr: startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr: startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr: startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr: startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr: startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr: startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr: startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr: startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr: startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr: startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr: startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr: startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr: startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr: startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr: startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr: startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr: startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr: startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr: startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr: startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr: startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr: startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr: startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr: startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 128;\n}\n\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\n\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 128;\n}\n\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 132;\n}\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\n\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 125 && token <= 127;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 117 && token <= 119;\n}\n\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 120 && token <= 126;\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsBinaryOperator(token) {\n  return tokenBinops[token] !== -1;\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\n\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\n{\n  tokenTypes[8].updateContext = function (context) {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = function (context) {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = function (context) {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[138].updateContext = function (context) {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0898-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3C\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u180F-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF-\\u1ACE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n\n  for (var i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nvar reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nvar keywords = new Set(reservedWords.keyword);\nvar reservedWordsStrictSet = new Set(reservedWords.strict);\nvar reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\n\nvar reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nvar SCOPE_OTHER = 0,\n    SCOPE_PROGRAM = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_ARROW = 4,\n    SCOPE_SIMPLE_CATCH = 8,\n    SCOPE_SUPER = 16,\n    SCOPE_DIRECT_SUPER = 32,\n    SCOPE_CLASS = 64,\n    SCOPE_STATIC_BLOCK = 128,\n    SCOPE_TS_MODULE = 256,\n    SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nvar BIND_KIND_VALUE = 1,\n    BIND_KIND_TYPE = 2,\n    BIND_SCOPE_VAR = 4,\n    BIND_SCOPE_LEXICAL = 8,\n    BIND_SCOPE_FUNCTION = 16,\n    BIND_FLAGS_NONE = 64,\n    BIND_FLAGS_CLASS = 128,\n    BIND_FLAGS_TS_ENUM = 256,\n    BIND_FLAGS_TS_CONST_ENUM = 512,\n    BIND_FLAGS_TS_EXPORT_ONLY = 1024,\n    BIND_FLAGS_FLOW_DECLARE_FN = 2048;\nvar BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n    BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n    BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n    BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n    BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n    BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n    BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n    BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n    BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n    BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n    BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nvar CLASS_ELEMENT_FLAG_STATIC = 4,\n    CLASS_ELEMENT_KIND_GETTER = 2,\n    CLASS_ELEMENT_KIND_SETTER = 1,\n    CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nvar CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n    CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n    CLASS_ELEMENT_OTHER = 0;\n\nvar BaseParser = /*#__PURE__*/function () {\n  function BaseParser() {\n    (0, _classCallCheck2.default)(this, BaseParser);\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  (0, _createClass2.default)(BaseParser, [{\n    key: \"hasPlugin\",\n    value: function hasPlugin(pluginConfig) {\n      if (typeof pluginConfig === \"string\") {\n        return this.plugins.has(pluginConfig);\n      } else {\n        var _pluginConfig = (0, _slicedToArray2.default)(pluginConfig, 2),\n            pluginName = _pluginConfig[0],\n            pluginOptions = _pluginConfig[1];\n\n        if (!this.hasPlugin(pluginName)) {\n          return false;\n        }\n\n        var actualOptions = this.plugins.get(pluginName);\n\n        for (var _i2 = 0, _Object$keys2 = Object.keys(pluginOptions); _i2 < _Object$keys2.length; _i2++) {\n          var key = _Object$keys2[_i2];\n\n          if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n  }, {\n    key: \"getPluginOption\",\n    value: function getPluginOption(plugin, name) {\n      var _this$plugins$get;\n\n      return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n    }\n  }]);\n  return BaseParser;\n}();\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    var _node$trailingComment;\n\n    (_node$trailingComment = node.trailingComments).unshift.apply(_node$trailingComment, (0, _toConsumableArray2.default)(comments));\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    var _node$leadingComments;\n\n    (_node$leadingComments = node.leadingComments).unshift.apply(_node$leadingComments, (0, _toConsumableArray2.default)(comments));\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    var _node$innerComments;\n\n    (_node$innerComments = node.innerComments).unshift.apply(_node$innerComments, (0, _toConsumableArray2.default)(comments));\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  var lastElement = null;\n  var i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nvar CommentsParser = /*#__PURE__*/function (_BaseParser) {\n  (0, _inherits2.default)(CommentsParser, _BaseParser);\n\n  var _super2 = _createSuper(CommentsParser);\n\n  function CommentsParser() {\n    (0, _classCallCheck2.default)(this, CommentsParser);\n    return _super2.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(CommentsParser, [{\n    key: \"addComment\",\n    value: function addComment(comment) {\n      if (this.filename) comment.loc.filename = this.filename;\n      this.state.comments.push(comment);\n    }\n  }, {\n    key: \"processComment\",\n    value: function processComment(node) {\n      var commentStack = this.state.commentStack;\n      var commentStackLength = commentStack.length;\n      if (commentStackLength === 0) return;\n      var i = commentStackLength - 1;\n      var lastCommentWS = commentStack[i];\n\n      if (lastCommentWS.start === node.end) {\n        lastCommentWS.leadingNode = node;\n        i--;\n      }\n\n      var nodeStart = node.start;\n\n      for (; i >= 0; i--) {\n        var commentWS = commentStack[i];\n        var commentEnd = commentWS.end;\n\n        if (commentEnd > nodeStart) {\n          commentWS.containingNode = node;\n          this.finalizeComment(commentWS);\n          commentStack.splice(i, 1);\n        } else {\n          if (commentEnd === nodeStart) {\n            commentWS.trailingNode = node;\n          }\n\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"finalizeComment\",\n    value: function finalizeComment(commentWS) {\n      var comments = commentWS.comments;\n\n      if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n        if (commentWS.leadingNode !== null) {\n          setTrailingComments(commentWS.leadingNode, comments);\n        }\n\n        if (commentWS.trailingNode !== null) {\n          setLeadingComments(commentWS.trailingNode, comments);\n        }\n      } else {\n        var node = commentWS.containingNode,\n            commentStart = commentWS.start;\n\n        if (this.input.charCodeAt(commentStart - 1) === 44) {\n          switch (node.type) {\n            case \"ObjectExpression\":\n            case \"ObjectPattern\":\n            case \"RecordExpression\":\n              adjustInnerComments(node, node.properties, commentWS);\n              break;\n\n            case \"CallExpression\":\n            case \"OptionalCallExpression\":\n              adjustInnerComments(node, node.arguments, commentWS);\n              break;\n\n            case \"FunctionDeclaration\":\n            case \"FunctionExpression\":\n            case \"ArrowFunctionExpression\":\n            case \"ObjectMethod\":\n            case \"ClassMethod\":\n            case \"ClassPrivateMethod\":\n              adjustInnerComments(node, node.params, commentWS);\n              break;\n\n            case \"ArrayExpression\":\n            case \"ArrayPattern\":\n            case \"TupleExpression\":\n              adjustInnerComments(node, node.elements, commentWS);\n              break;\n\n            case \"ExportNamedDeclaration\":\n            case \"ImportDeclaration\":\n              adjustInnerComments(node, node.specifiers, commentWS);\n              break;\n\n            default:\n              {\n                setInnerComments(node, comments);\n              }\n          }\n        } else {\n          setInnerComments(node, comments);\n        }\n      }\n    }\n  }, {\n    key: \"finalizeRemainingComments\",\n    value: function finalizeRemainingComments() {\n      var commentStack = this.state.commentStack;\n\n      for (var i = commentStack.length - 1; i >= 0; i--) {\n        this.finalizeComment(commentStack[i]);\n      }\n\n      this.state.commentStack = [];\n    }\n  }, {\n    key: \"resetPreviousNodeTrailingComments\",\n    value: function resetPreviousNodeTrailingComments(node) {\n      var commentStack = this.state.commentStack;\n      var length = commentStack.length;\n      if (length === 0) return;\n      var commentWS = commentStack[length - 1];\n\n      if (commentWS.leadingNode === node) {\n        commentWS.leadingNode = null;\n      }\n    }\n  }, {\n    key: \"takeSurroundingComments\",\n    value: function takeSurroundingComments(node, start, end) {\n      var commentStack = this.state.commentStack;\n      var commentStackLength = commentStack.length;\n      if (commentStackLength === 0) return;\n      var i = commentStackLength - 1;\n\n      for (; i >= 0; i--) {\n        var commentWS = commentStack[i];\n        var commentEnd = commentWS.end;\n        var commentStart = commentWS.start;\n\n        if (commentStart === end) {\n          commentWS.leadingNode = node;\n        } else if (commentEnd === start) {\n          commentWS.trailingNode = node;\n        } else if (commentEnd < start) {\n          break;\n        }\n      }\n    }\n  }]);\n  return CommentsParser;\n}(BaseParser);\n\nvar lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nvar skipWhiteSpaceInLine = new RegExp(\"(?:[^\\\\S\\\\n\\\\r\\\\u2028\\\\u2029]|\\\\/\\\\/.*|\\\\/\\\\*.*?\\\\*\\\\/)*\", \"y\");\nvar skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar State = /*#__PURE__*/function () {\n  function State() {\n    (0, _classCallCheck2.default)(this, State);\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.inDisallowConditionalTypesContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 135;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  (0, _createClass2.default)(State, [{\n    key: \"init\",\n    value: function init(_ref43) {\n      var strictMode = _ref43.strictMode,\n          sourceType = _ref43.sourceType,\n          startLine = _ref43.startLine,\n          startColumn = _ref43.startColumn;\n      this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n      this.curLine = startLine;\n      this.lineStart = -startColumn;\n      this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n    }\n  }, {\n    key: \"curPosition\",\n    value: function curPosition() {\n      return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(skipArrays) {\n      var state = new State();\n      var keys = Object.keys(this);\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var val = this[key];\n\n        if (!skipArrays && Array.isArray(val)) {\n          val = val.slice();\n        }\n\n        state[key] = val;\n      }\n\n      return state;\n    }\n  }]);\n  return State;\n}();\n\nvar _excluded = [\"at\"],\n    _excluded2 = [\"at\"];\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nvar VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nvar forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nvar isAllowedNumericSeparatorSibling = {\n  bin: function bin(ch) {\n    return ch === 48 || ch === 49;\n  },\n  oct: function oct(ch) {\n    return ch >= 48 && ch <= 55;\n  },\n  dec: function dec(ch) {\n    return ch >= 48 && ch <= 57;\n  },\n  hex: function hex(ch) {\n    return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;\n  }\n};\nvar Token = /*#__PURE__*/(0, _createClass2.default)(function Token(state) {\n  (0, _classCallCheck2.default)(this, Token);\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n});\n\nvar Tokenizer = /*#__PURE__*/function (_CommentsParser) {\n  (0, _inherits2.default)(Tokenizer, _CommentsParser);\n\n  var _super3 = _createSuper(Tokenizer);\n\n  function Tokenizer(options, input) {\n    var _this3;\n\n    (0, _classCallCheck2.default)(this, Tokenizer);\n    _this3 = _super3.call(this);\n    _this3.isLookahead = void 0;\n    _this3.tokens = [];\n    _this3.state = new State();\n\n    _this3.state.init(options);\n\n    _this3.input = input;\n    _this3.length = input.length;\n    _this3.isLookahead = false;\n    return _this3;\n  }\n\n  (0, _createClass2.default)(Tokenizer, [{\n    key: \"pushToken\",\n    value: function pushToken(token) {\n      this.tokens.length = this.state.tokensLength;\n      this.tokens.push(token);\n      ++this.state.tokensLength;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n\n      this.state.lastTokStart = this.state.start;\n      this.state.lastTokEndLoc = this.state.endLoc;\n      this.state.lastTokStartLoc = this.state.startLoc;\n      this.nextToken();\n    }\n  }, {\n    key: \"eat\",\n    value: function eat(type) {\n      if (this.match(type)) {\n        this.next();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(type) {\n      return this.state.type === type;\n    }\n  }, {\n    key: \"createLookaheadState\",\n    value: function createLookaheadState(state) {\n      return {\n        pos: state.pos,\n        value: null,\n        type: state.type,\n        start: state.start,\n        end: state.end,\n        context: [this.curContext()],\n        inType: state.inType,\n        startLoc: state.startLoc,\n        lastTokEndLoc: state.lastTokEndLoc,\n        curLine: state.curLine,\n        lineStart: state.lineStart,\n        curPosition: state.curPosition\n      };\n    }\n  }, {\n    key: \"lookahead\",\n    value: function lookahead() {\n      var old = this.state;\n      this.state = this.createLookaheadState(old);\n      this.isLookahead = true;\n      this.nextToken();\n      this.isLookahead = false;\n      var curr = this.state;\n      this.state = old;\n      return curr;\n    }\n  }, {\n    key: \"nextTokenStart\",\n    value: function nextTokenStart() {\n      return this.nextTokenStartSince(this.state.pos);\n    }\n  }, {\n    key: \"nextTokenStartSince\",\n    value: function nextTokenStartSince(pos) {\n      skipWhiteSpace.lastIndex = pos;\n      return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n    }\n  }, {\n    key: \"lookaheadCharCode\",\n    value: function lookaheadCharCode() {\n      return this.input.charCodeAt(this.nextTokenStart());\n    }\n  }, {\n    key: \"codePointAtPos\",\n    value: function codePointAtPos(pos) {\n      var cp = this.input.charCodeAt(pos);\n\n      if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n        var trail = this.input.charCodeAt(pos);\n\n        if ((trail & 0xfc00) === 0xdc00) {\n          cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n        }\n      }\n\n      return cp;\n    }\n  }, {\n    key: \"setStrict\",\n    value: function setStrict(strict) {\n      var _this4 = this;\n\n      this.state.strict = strict;\n\n      if (strict) {\n        this.state.strictErrors.forEach(function (_ref44) {\n          var _ref45 = (0, _slicedToArray2.default)(_ref44, 2),\n              toParseError = _ref45[0],\n              at = _ref45[1];\n\n          return _this4.raise(toParseError, {\n            at: at\n          });\n        });\n        this.state.strictErrors.clear();\n      }\n    }\n  }, {\n    key: \"curContext\",\n    value: function curContext() {\n      return this.state.context[this.state.context.length - 1];\n    }\n  }, {\n    key: \"nextToken\",\n    value: function nextToken() {\n      this.skipSpace();\n      this.state.start = this.state.pos;\n      if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n      if (this.state.pos >= this.length) {\n        this.finishToken(135);\n        return;\n      }\n\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }, {\n    key: \"skipBlockComment\",\n    value: function skipBlockComment() {\n      var startLoc;\n      if (!this.isLookahead) startLoc = this.state.curPosition();\n      var start = this.state.pos;\n      var end = this.input.indexOf(\"*/\", start + 2);\n\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos = end + 2;\n      lineBreakG.lastIndex = start + 2;\n\n      while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n        ++this.state.curLine;\n        this.state.lineStart = lineBreakG.lastIndex;\n      }\n\n      if (this.isLookahead) return;\n      var comment = {\n        type: \"CommentBlock\",\n        value: this.input.slice(start + 2, end),\n        start: start,\n        end: end + 2,\n        loc: new SourceLocation(startLoc, this.state.curPosition())\n      };\n      if (this.options.tokens) this.pushToken(comment);\n      return comment;\n    }\n  }, {\n    key: \"skipLineComment\",\n    value: function skipLineComment(startSkip) {\n      var start = this.state.pos;\n      var startLoc;\n      if (!this.isLookahead) startLoc = this.state.curPosition();\n      var ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n      if (this.state.pos < this.length) {\n        while (!isNewLine(ch) && ++this.state.pos < this.length) {\n          ch = this.input.charCodeAt(this.state.pos);\n        }\n      }\n\n      if (this.isLookahead) return;\n      var end = this.state.pos;\n      var value = this.input.slice(start + startSkip, end);\n      var comment = {\n        type: \"CommentLine\",\n        value: value,\n        start: start,\n        end: end,\n        loc: new SourceLocation(startLoc, this.state.curPosition())\n      };\n      if (this.options.tokens) this.pushToken(comment);\n      return comment;\n    }\n  }, {\n    key: \"skipSpace\",\n    value: function skipSpace() {\n      var spaceStart = this.state.pos;\n      var comments = [];\n\n      loop: while (this.state.pos < this.length) {\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case 32:\n          case 160:\n          case 9:\n            ++this.state.pos;\n            break;\n\n          case 13:\n            if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n          case 8232:\n          case 8233:\n            ++this.state.pos;\n            ++this.state.curLine;\n            this.state.lineStart = this.state.pos;\n            break;\n\n          case 47:\n            switch (this.input.charCodeAt(this.state.pos + 1)) {\n              case 42:\n                {\n                  var comment = this.skipBlockComment();\n\n                  if (comment !== undefined) {\n                    this.addComment(comment);\n                    if (this.options.attachComment) comments.push(comment);\n                  }\n\n                  break;\n                }\n\n              case 47:\n                {\n                  var _comment = this.skipLineComment(2);\n\n                  if (_comment !== undefined) {\n                    this.addComment(_comment);\n                    if (this.options.attachComment) comments.push(_comment);\n                  }\n\n                  break;\n                }\n\n              default:\n                break loop;\n            }\n\n            break;\n\n          default:\n            if (isWhitespace(ch)) {\n              ++this.state.pos;\n            } else if (ch === 45 && !this.inModule) {\n              var pos = this.state.pos;\n\n              if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n                var _comment2 = this.skipLineComment(3);\n\n                if (_comment2 !== undefined) {\n                  this.addComment(_comment2);\n                  if (this.options.attachComment) comments.push(_comment2);\n                }\n              } else {\n                break loop;\n              }\n            } else if (ch === 60 && !this.inModule) {\n              var _pos = this.state.pos;\n\n              if (this.input.charCodeAt(_pos + 1) === 33 && this.input.charCodeAt(_pos + 2) === 45 && this.input.charCodeAt(_pos + 3) === 45) {\n                var _comment3 = this.skipLineComment(4);\n\n                if (_comment3 !== undefined) {\n                  this.addComment(_comment3);\n                  if (this.options.attachComment) comments.push(_comment3);\n                }\n              } else {\n                break loop;\n              }\n            } else {\n              break loop;\n            }\n\n        }\n      }\n\n      if (comments.length > 0) {\n        var end = this.state.pos;\n        var CommentWhitespace = {\n          start: spaceStart,\n          end: end,\n          comments: comments,\n          leadingNode: null,\n          trailingNode: null,\n          containingNode: null\n        };\n        this.state.commentStack.push(CommentWhitespace);\n      }\n    }\n  }, {\n    key: \"finishToken\",\n    value: function finishToken(type, val) {\n      this.state.end = this.state.pos;\n      this.state.endLoc = this.state.curPosition();\n      var prevType = this.state.type;\n      this.state.type = type;\n      this.state.value = val;\n\n      if (!this.isLookahead) {\n        this.updateContext(prevType);\n      }\n    }\n  }, {\n    key: \"replaceToken\",\n    value: function replaceToken(type) {\n      this.state.type = type;\n      this.updateContext();\n    }\n  }, {\n    key: \"readToken_numberSign\",\n    value: function readToken_numberSign() {\n      if (this.state.pos === 0 && this.readToken_interpreter()) {\n        return;\n      }\n\n      var nextPos = this.state.pos + 1;\n      var next = this.codePointAtPos(nextPos);\n\n      if (next >= 48 && next <= 57) {\n        throw this.raise(Errors.UnexpectedDigitAfterHash, {\n          at: this.state.curPosition()\n        });\n      }\n\n      if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n        this.expectPlugin(\"recordAndTuple\");\n\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n          throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n\n        if (next === 123) {\n          this.finishToken(7);\n        } else {\n          this.finishToken(1);\n        }\n      } else if (isIdentifierStart(next)) {\n        ++this.state.pos;\n        this.finishToken(134, this.readWord1(next));\n      } else if (next === 92) {\n        ++this.state.pos;\n        this.finishToken(134, this.readWord1());\n      } else {\n        this.finishOp(27, 1);\n      }\n    }\n  }, {\n    key: \"readToken_dot\",\n    value: function readToken_dot() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next >= 48 && next <= 57) {\n        this.readNumber(true);\n        return;\n      }\n\n      if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n        this.state.pos += 3;\n        this.finishToken(21);\n      } else {\n        ++this.state.pos;\n        this.finishToken(16);\n      }\n    }\n  }, {\n    key: \"readToken_slash\",\n    value: function readToken_slash() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(31, 2);\n      } else {\n        this.finishOp(56, 1);\n      }\n    }\n  }, {\n    key: \"readToken_interpreter\",\n    value: function readToken_interpreter() {\n      if (this.state.pos !== 0 || this.length < 2) return false;\n      var ch = this.input.charCodeAt(this.state.pos + 1);\n      if (ch !== 33) return false;\n      var start = this.state.pos;\n      this.state.pos += 1;\n\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n\n      var value = this.input.slice(start + 2, this.state.pos);\n      this.finishToken(28, value);\n      return true;\n    }\n  }, {\n    key: \"readToken_mult_modulo\",\n    value: function readToken_mult_modulo(code) {\n      var type = code === 42 ? 55 : 54;\n      var width = 1;\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 42 && next === 42) {\n        width++;\n        next = this.input.charCodeAt(this.state.pos + 2);\n        type = 57;\n      }\n\n      if (next === 61 && !this.state.inType) {\n        width++;\n        type = code === 37 ? 33 : 30;\n      }\n\n      this.finishOp(type, width);\n    }\n  }, {\n    key: \"readToken_pipe_amp\",\n    value: function readToken_pipe_amp(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n          this.finishOp(30, 3);\n        } else {\n          this.finishOp(code === 124 ? 41 : 42, 2);\n        }\n\n        return;\n      }\n\n      if (code === 124) {\n        if (next === 62) {\n          this.finishOp(39, 2);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(9);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(4);\n          return;\n        }\n      }\n\n      if (next === 61) {\n        this.finishOp(30, 2);\n        return;\n      }\n\n      this.finishOp(code === 124 ? 43 : 45, 1);\n    }\n  }, {\n    key: \"readToken_caret\",\n    value: function readToken_caret() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61 && !this.state.inType) {\n        this.finishOp(32, 2);\n      } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n        proposal: \"hack\",\n        topicToken: \"^^\"\n      }])) {\n        this.finishOp(37, 2);\n        var lookaheadCh = this.input.codePointAt(this.state.pos);\n\n        if (lookaheadCh === 94) {\n          throw this.unexpected();\n        }\n      } else {\n        this.finishOp(44, 1);\n      }\n    }\n  }, {\n    key: \"readToken_atSign\",\n    value: function readToken_atSign() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n        proposal: \"hack\",\n        topicToken: \"@@\"\n      }])) {\n        this.finishOp(38, 2);\n      } else {\n        this.finishOp(26, 1);\n      }\n    }\n  }, {\n    key: \"readToken_plus_min\",\n    value: function readToken_plus_min(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        this.finishOp(34, 2);\n        return;\n      }\n\n      if (next === 61) {\n        this.finishOp(30, 2);\n      } else {\n        this.finishOp(53, 1);\n      }\n    }\n  }, {\n    key: \"readToken_lt\",\n    value: function readToken_lt() {\n      var pos = this.state.pos;\n      var next = this.input.charCodeAt(pos + 1);\n\n      if (next === 60) {\n        if (this.input.charCodeAt(pos + 2) === 61) {\n          this.finishOp(30, 3);\n          return;\n        }\n\n        this.finishOp(51, 2);\n        return;\n      }\n\n      if (next === 61) {\n        this.finishOp(49, 2);\n        return;\n      }\n\n      this.finishOp(47, 1);\n    }\n  }, {\n    key: \"readToken_gt\",\n    value: function readToken_gt() {\n      var pos = this.state.pos;\n      var next = this.input.charCodeAt(pos + 1);\n\n      if (next === 62) {\n        var size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n        if (this.input.charCodeAt(pos + size) === 61) {\n          this.finishOp(30, size + 1);\n          return;\n        }\n\n        this.finishOp(52, size);\n        return;\n      }\n\n      if (next === 61) {\n        this.finishOp(49, 2);\n        return;\n      }\n\n      this.finishOp(48, 1);\n    }\n  }, {\n    key: \"readToken_eq_excl\",\n    value: function readToken_eq_excl(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n        return;\n      }\n\n      if (code === 61 && next === 62) {\n        this.state.pos += 2;\n        this.finishToken(19);\n        return;\n      }\n\n      this.finishOp(code === 61 ? 29 : 35, 1);\n    }\n  }, {\n    key: \"readToken_question\",\n    value: function readToken_question() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var next2 = this.input.charCodeAt(this.state.pos + 2);\n\n      if (next === 63) {\n        if (next2 === 61) {\n          this.finishOp(30, 3);\n        } else {\n          this.finishOp(40, 2);\n        }\n      } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n        this.state.pos += 2;\n        this.finishToken(18);\n      } else {\n        ++this.state.pos;\n        this.finishToken(17);\n      }\n    }\n  }, {\n    key: \"getTokenFromCode\",\n    value: function getTokenFromCode(code) {\n      switch (code) {\n        case 46:\n          this.readToken_dot();\n          return;\n\n        case 40:\n          ++this.state.pos;\n          this.finishToken(10);\n          return;\n\n        case 41:\n          ++this.state.pos;\n          this.finishToken(11);\n          return;\n\n        case 59:\n          ++this.state.pos;\n          this.finishToken(13);\n          return;\n\n        case 44:\n          ++this.state.pos;\n          this.finishToken(12);\n          return;\n\n        case 91:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {\n                at: this.state.curPosition()\n              });\n            }\n\n            this.state.pos += 2;\n            this.finishToken(2);\n          } else {\n            ++this.state.pos;\n            this.finishToken(0);\n          }\n\n          return;\n\n        case 93:\n          ++this.state.pos;\n          this.finishToken(3);\n          return;\n\n        case 123:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {\n                at: this.state.curPosition()\n              });\n            }\n\n            this.state.pos += 2;\n            this.finishToken(6);\n          } else {\n            ++this.state.pos;\n            this.finishToken(5);\n          }\n\n          return;\n\n        case 125:\n          ++this.state.pos;\n          this.finishToken(8);\n          return;\n\n        case 58:\n          if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n            this.finishOp(15, 2);\n          } else {\n            ++this.state.pos;\n            this.finishToken(14);\n          }\n\n          return;\n\n        case 63:\n          this.readToken_question();\n          return;\n\n        case 96:\n          this.readTemplateToken();\n          return;\n\n        case 48:\n          {\n            var next = this.input.charCodeAt(this.state.pos + 1);\n\n            if (next === 120 || next === 88) {\n              this.readRadixNumber(16);\n              return;\n            }\n\n            if (next === 111 || next === 79) {\n              this.readRadixNumber(8);\n              return;\n            }\n\n            if (next === 98 || next === 66) {\n              this.readRadixNumber(2);\n              return;\n            }\n          }\n\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          this.readNumber(false);\n          return;\n\n        case 34:\n        case 39:\n          this.readString(code);\n          return;\n\n        case 47:\n          this.readToken_slash();\n          return;\n\n        case 37:\n        case 42:\n          this.readToken_mult_modulo(code);\n          return;\n\n        case 124:\n        case 38:\n          this.readToken_pipe_amp(code);\n          return;\n\n        case 94:\n          this.readToken_caret();\n          return;\n\n        case 43:\n        case 45:\n          this.readToken_plus_min(code);\n          return;\n\n        case 60:\n          this.readToken_lt();\n          return;\n\n        case 62:\n          this.readToken_gt();\n          return;\n\n        case 61:\n        case 33:\n          this.readToken_eq_excl(code);\n          return;\n\n        case 126:\n          this.finishOp(36, 1);\n          return;\n\n        case 64:\n          this.readToken_atSign();\n          return;\n\n        case 35:\n          this.readToken_numberSign();\n          return;\n\n        case 92:\n          this.readWord();\n          return;\n\n        default:\n          if (isIdentifierStart(code)) {\n            this.readWord(code);\n            return;\n          }\n\n      }\n\n      throw this.raise(Errors.InvalidOrUnexpectedToken, {\n        at: this.state.curPosition(),\n        unexpected: String.fromCodePoint(code)\n      });\n    }\n  }, {\n    key: \"finishOp\",\n    value: function finishOp(type, size) {\n      var str = this.input.slice(this.state.pos, this.state.pos + size);\n      this.state.pos += size;\n      this.finishToken(type, str);\n    }\n  }, {\n    key: \"readRegexp\",\n    value: function readRegexp() {\n      var startLoc = this.state.startLoc;\n      var start = this.state.start + 1;\n      var escaped, inClass;\n      var pos = this.state.pos;\n\n      for (;; ++pos) {\n        if (pos >= this.length) {\n          throw this.raise(Errors.UnterminatedRegExp, {\n            at: createPositionWithColumnOffset(startLoc, 1)\n          });\n        }\n\n        var ch = this.input.charCodeAt(pos);\n\n        if (isNewLine(ch)) {\n          throw this.raise(Errors.UnterminatedRegExp, {\n            at: createPositionWithColumnOffset(startLoc, 1)\n          });\n        }\n\n        if (escaped) {\n          escaped = false;\n        } else {\n          if (ch === 91) {\n            inClass = true;\n          } else if (ch === 93 && inClass) {\n            inClass = false;\n          } else if (ch === 47 && !inClass) {\n            break;\n          }\n\n          escaped = ch === 92;\n        }\n      }\n\n      var content = this.input.slice(start, pos);\n      ++pos;\n      var mods = \"\";\n\n      var nextPos = function nextPos() {\n        return createPositionWithColumnOffset(startLoc, pos + 2 - start);\n      };\n\n      while (pos < this.length) {\n        var cp = this.codePointAtPos(pos);\n        var char = String.fromCharCode(cp);\n\n        if (VALID_REGEX_FLAGS.has(cp)) {\n          if (cp === 118) {\n            this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n            if (mods.includes(\"u\")) {\n              this.raise(Errors.IncompatibleRegExpUVFlags, {\n                at: nextPos()\n              });\n            }\n          } else if (cp === 117) {\n            if (mods.includes(\"v\")) {\n              this.raise(Errors.IncompatibleRegExpUVFlags, {\n                at: nextPos()\n              });\n            }\n          }\n\n          if (mods.includes(char)) {\n            this.raise(Errors.DuplicateRegExpFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (isIdentifierChar(cp) || cp === 92) {\n          this.raise(Errors.MalformedRegExpFlags, {\n            at: nextPos()\n          });\n        } else {\n          break;\n        }\n\n        ++pos;\n        mods += char;\n      }\n\n      this.state.pos = pos;\n      this.finishToken(133, {\n        pattern: content,\n        flags: mods\n      });\n    }\n  }, {\n    key: \"readInt\",\n    value: function readInt(radix, len, forceLen) {\n      var allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var start = this.state.pos;\n      var forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n      var isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n      var invalid = false;\n      var total = 0;\n\n      for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n        var code = this.input.charCodeAt(this.state.pos);\n        var val = void 0;\n\n        if (code === 95 && allowNumSeparator !== \"bail\") {\n          var prev = this.input.charCodeAt(this.state.pos - 1);\n          var next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (!allowNumSeparator) {\n            this.raise(Errors.NumericSeparatorInEscapeSequence, {\n              at: this.state.curPosition()\n            });\n          } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n            this.raise(Errors.UnexpectedNumericSeparator, {\n              at: this.state.curPosition()\n            });\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n\n        if (code >= 97) {\n          val = code - 97 + 10;\n        } else if (code >= 65) {\n          val = code - 65 + 10;\n        } else if (_isDigit(code)) {\n          val = code - 48;\n        } else {\n          val = Infinity;\n        }\n\n        if (val >= radix) {\n          if (this.options.errorRecovery && val <= 9) {\n            val = 0;\n            this.raise(Errors.InvalidDigit, {\n              at: this.state.curPosition(),\n              radix: radix\n            });\n          } else if (forceLen) {\n            val = 0;\n            invalid = true;\n          } else {\n            break;\n          }\n        }\n\n        ++this.state.pos;\n        total = total * radix + val;\n      }\n\n      if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n        return null;\n      }\n\n      return total;\n    }\n  }, {\n    key: \"readRadixNumber\",\n    value: function readRadixNumber(radix) {\n      var startLoc = this.state.curPosition();\n      var isBigInt = false;\n      this.state.pos += 2;\n      var val = this.readInt(radix);\n\n      if (val == null) {\n        this.raise(Errors.InvalidDigit, {\n          at: createPositionWithColumnOffset(startLoc, 2),\n          radix: radix\n        });\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      } else if (next === 109) {\n        throw this.raise(Errors.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n\n      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n        throw this.raise(Errors.NumberIdentifier, {\n          at: this.state.curPosition()\n        });\n      }\n\n      if (isBigInt) {\n        var str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n        this.finishToken(131, str);\n        return;\n      }\n\n      this.finishToken(130, val);\n    }\n  }, {\n    key: \"readNumber\",\n    value: function readNumber(startsWithDot) {\n      var start = this.state.pos;\n      var startLoc = this.state.curPosition();\n      var isFloat = false;\n      var isBigInt = false;\n      var isDecimal = false;\n      var hasExponent = false;\n      var isOctal = false;\n\n      if (!startsWithDot && this.readInt(10) === null) {\n        this.raise(Errors.InvalidNumber, {\n          at: this.state.curPosition()\n        });\n      }\n\n      var hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n      if (hasLeadingZero) {\n        var integer = this.input.slice(start, this.state.pos);\n        this.recordStrictModeErrors(Errors.StrictOctalLiteral, {\n          at: startLoc\n        });\n\n        if (!this.state.strict) {\n          var underscorePos = integer.indexOf(\"_\");\n\n          if (underscorePos > 0) {\n            this.raise(Errors.ZeroDigitNumericSeparator, {\n              at: createPositionWithColumnOffset(startLoc, underscorePos)\n            });\n          }\n        }\n\n        isOctal = hasLeadingZero && !/[89]/.test(integer);\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 46 && !isOctal) {\n        ++this.state.pos;\n        this.readInt(10);\n        isFloat = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if ((next === 69 || next === 101) && !isOctal) {\n        next = this.input.charCodeAt(++this.state.pos);\n\n        if (next === 43 || next === 45) {\n          ++this.state.pos;\n        }\n\n        if (this.readInt(10) === null) {\n          this.raise(Errors.InvalidOrMissingExponent, {\n            at: startLoc\n          });\n        }\n\n        isFloat = true;\n        hasExponent = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if (next === 110) {\n        if (isFloat || hasLeadingZero) {\n          this.raise(Errors.InvalidBigIntLiteral, {\n            at: startLoc\n          });\n        }\n\n        ++this.state.pos;\n        isBigInt = true;\n      }\n\n      if (next === 109) {\n        this.expectPlugin(\"decimal\", this.state.curPosition());\n\n        if (hasExponent || hasLeadingZero) {\n          this.raise(Errors.InvalidDecimal, {\n            at: startLoc\n          });\n        }\n\n        ++this.state.pos;\n        isDecimal = true;\n      }\n\n      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n        throw this.raise(Errors.NumberIdentifier, {\n          at: this.state.curPosition()\n        });\n      }\n\n      var str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n      if (isBigInt) {\n        this.finishToken(131, str);\n        return;\n      }\n\n      if (isDecimal) {\n        this.finishToken(132, str);\n        return;\n      }\n\n      var val = isOctal ? parseInt(str, 8) : parseFloat(str);\n      this.finishToken(130, val);\n    }\n  }, {\n    key: \"readCodePoint\",\n    value: function readCodePoint(throwOnInvalid) {\n      var ch = this.input.charCodeAt(this.state.pos);\n      var code;\n\n      if (ch === 123) {\n        ++this.state.pos;\n        code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n        ++this.state.pos;\n\n        if (code !== null && code > 0x10ffff) {\n          if (throwOnInvalid) {\n            this.raise(Errors.InvalidCodePoint, {\n              at: this.state.curPosition()\n            });\n          } else {\n            return null;\n          }\n        }\n      } else {\n        code = this.readHexChar(4, false, throwOnInvalid);\n      }\n\n      return code;\n    }\n  }, {\n    key: \"readString\",\n    value: function readString(quote) {\n      var out = \"\",\n          chunkStart = ++this.state.pos;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc\n          });\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.readEscapedChar(false);\n          chunkStart = this.state.pos;\n        } else if (ch === 8232 || ch === 8233) {\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc\n          });\n        } else {\n          ++this.state.pos;\n        }\n      }\n\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(129, out);\n    }\n  }, {\n    key: \"readTemplateContinuation\",\n    value: function readTemplateContinuation() {\n      if (!this.match(8)) {\n        this.unexpected(null, 8);\n      }\n\n      this.state.pos--;\n      this.readTemplateToken();\n    }\n  }, {\n    key: \"readTemplateToken\",\n    value: function readTemplateToken() {\n      var out = \"\",\n          chunkStart = this.state.pos,\n          containsInvalid = false;\n      ++this.state.pos;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedTemplate, {\n            at: createPositionWithColumnOffset(this.state.startLoc, 1)\n          });\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        if (ch === 96) {\n          ++this.state.pos;\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(24, containsInvalid ? null : out);\n          return;\n        }\n\n        if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n          this.state.pos += 2;\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(25, containsInvalid ? null : out);\n          return;\n        }\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          var escaped = this.readEscapedChar(true);\n\n          if (escaped === null) {\n            containsInvalid = true;\n          } else {\n            out += escaped;\n          }\n\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          ++this.state.pos;\n\n          switch (ch) {\n            case 13:\n              if (this.input.charCodeAt(this.state.pos) === 10) {\n                ++this.state.pos;\n              }\n\n            case 10:\n              out += \"\\n\";\n              break;\n\n            default:\n              out += String.fromCharCode(ch);\n              break;\n          }\n\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n    }\n  }, {\n    key: \"recordStrictModeErrors\",\n    value: function recordStrictModeErrors(toParseError, _ref46) {\n      var at = _ref46.at;\n      var index = at.index;\n\n      if (this.state.strict && !this.state.strictErrors.has(index)) {\n        this.raise(toParseError, {\n          at: at\n        });\n      } else {\n        this.state.strictErrors.set(index, [toParseError, at]);\n      }\n    }\n  }, {\n    key: \"readEscapedChar\",\n    value: function readEscapedChar(inTemplate) {\n      var throwOnInvalid = !inTemplate;\n      var ch = this.input.charCodeAt(++this.state.pos);\n      ++this.state.pos;\n\n      switch (ch) {\n        case 110:\n          return \"\\n\";\n\n        case 114:\n          return \"\\r\";\n\n        case 120:\n          {\n            var code = this.readHexChar(2, false, throwOnInvalid);\n            return code === null ? null : String.fromCharCode(code);\n          }\n\n        case 117:\n          {\n            var _code = this.readCodePoint(throwOnInvalid);\n\n            return _code === null ? null : String.fromCodePoint(_code);\n          }\n\n        case 116:\n          return \"\\t\";\n\n        case 98:\n          return \"\\b\";\n\n        case 118:\n          return \"\\x0B\";\n\n        case 102:\n          return \"\\f\";\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n          this.state.lineStart = this.state.pos;\n          ++this.state.curLine;\n\n        case 8232:\n        case 8233:\n          return \"\";\n\n        case 56:\n        case 57:\n          if (inTemplate) {\n            return null;\n          } else {\n            this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n              at: createPositionWithColumnOffset(this.state.curPosition(), -1)\n            });\n          }\n\n        default:\n          if (ch >= 48 && ch <= 55) {\n            var codePos = createPositionWithColumnOffset(this.state.curPosition(), -1);\n            var match = this.input.slice(this.state.pos - 1, this.state.pos + 2).match(/^[0-7]+/);\n            var octalStr = match[0];\n            var octal = parseInt(octalStr, 8);\n\n            if (octal > 255) {\n              octalStr = octalStr.slice(0, -1);\n              octal = parseInt(octalStr, 8);\n            }\n\n            this.state.pos += octalStr.length - 1;\n            var next = this.input.charCodeAt(this.state.pos);\n\n            if (octalStr !== \"0\" || next === 56 || next === 57) {\n              if (inTemplate) {\n                return null;\n              } else {\n                this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                  at: codePos\n                });\n              }\n            }\n\n            return String.fromCharCode(octal);\n          }\n\n          return String.fromCharCode(ch);\n      }\n    }\n  }, {\n    key: \"readHexChar\",\n    value: function readHexChar(len, forceLen, throwOnInvalid) {\n      var codeLoc = this.state.curPosition();\n      var n = this.readInt(16, len, forceLen, false);\n\n      if (n === null) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidEscapeSequence, {\n            at: codeLoc\n          });\n        } else {\n          this.state.pos = codeLoc.index - 1;\n        }\n      }\n\n      return n;\n    }\n  }, {\n    key: \"readWord1\",\n    value: function readWord1(firstCode) {\n      this.state.containsEsc = false;\n      var word = \"\";\n      var start = this.state.pos;\n      var chunkStart = this.state.pos;\n\n      if (firstCode !== undefined) {\n        this.state.pos += firstCode <= 0xffff ? 1 : 2;\n      }\n\n      while (this.state.pos < this.length) {\n        var ch = this.codePointAtPos(this.state.pos);\n\n        if (isIdentifierChar(ch)) {\n          this.state.pos += ch <= 0xffff ? 1 : 2;\n        } else if (ch === 92) {\n          this.state.containsEsc = true;\n          word += this.input.slice(chunkStart, this.state.pos);\n          var escStart = this.state.curPosition();\n          var identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n          if (this.input.charCodeAt(++this.state.pos) !== 117) {\n            this.raise(Errors.MissingUnicodeEscape, {\n              at: this.state.curPosition()\n            });\n            chunkStart = this.state.pos - 1;\n            continue;\n          }\n\n          ++this.state.pos;\n          var esc = this.readCodePoint(true);\n\n          if (esc !== null) {\n            if (!identifierCheck(esc)) {\n              this.raise(Errors.EscapedCharNotAnIdentifier, {\n                at: escStart\n              });\n            }\n\n            word += String.fromCodePoint(esc);\n          }\n\n          chunkStart = this.state.pos;\n        } else {\n          break;\n        }\n      }\n\n      return word + this.input.slice(chunkStart, this.state.pos);\n    }\n  }, {\n    key: \"readWord\",\n    value: function readWord(firstCode) {\n      var word = this.readWord1(firstCode);\n      var type = keywords$1.get(word);\n\n      if (type !== undefined) {\n        this.finishToken(type, tokenLabelName(type));\n      } else {\n        this.finishToken(128, word);\n      }\n    }\n  }, {\n    key: \"checkKeywordEscapes\",\n    value: function checkKeywordEscapes() {\n      var type = this.state.type;\n\n      if (tokenIsKeyword(type) && this.state.containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.startLoc,\n          reservedWord: tokenLabelName(type)\n        });\n      }\n    }\n  }, {\n    key: \"raise\",\n    value: function raise(toParseError, raiseProperties) {\n      var at = raiseProperties.at,\n          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);\n\n      var loc = at instanceof Position ? at : at.loc.start;\n      var error = toParseError({\n        loc: loc,\n        details: details\n      });\n      if (!this.options.errorRecovery) throw error;\n      if (!this.isLookahead) this.state.errors.push(error);\n      return error;\n    }\n  }, {\n    key: \"raiseOverwrite\",\n    value: function raiseOverwrite(toParseError, raiseProperties) {\n      var at = raiseProperties.at,\n          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);\n\n      var loc = at instanceof Position ? at : at.loc.start;\n      var pos = loc.index;\n      var errors = this.state.errors;\n\n      for (var i = errors.length - 1; i >= 0; i--) {\n        var error = errors[i];\n\n        if (error.loc.index === pos) {\n          return errors[i] = toParseError({\n            loc: loc,\n            details: details\n          });\n        }\n\n        if (error.loc.index < pos) break;\n      }\n\n      return this.raise(toParseError, raiseProperties);\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(prevType) {}\n  }, {\n    key: \"unexpected\",\n    value: function unexpected(loc, type) {\n      throw this.raise(Errors.UnexpectedToken, {\n        expected: type ? tokenLabelName(type) : null,\n        at: loc != null ? loc : this.state.startLoc\n      });\n    }\n  }, {\n    key: \"expectPlugin\",\n    value: function expectPlugin(pluginName, loc) {\n      if (this.hasPlugin(pluginName)) {\n        return true;\n      }\n\n      throw this.raise(Errors.MissingPlugin, {\n        at: loc != null ? loc : this.state.startLoc,\n        missingPlugin: [pluginName]\n      });\n    }\n  }, {\n    key: \"expectOnePlugin\",\n    value: function expectOnePlugin(pluginNames) {\n      var _this5 = this;\n\n      if (!pluginNames.some(function (name) {\n        return _this5.hasPlugin(name);\n      })) {\n        throw this.raise(Errors.MissingOneOfPlugins, {\n          at: this.state.startLoc,\n          missingPlugin: pluginNames\n        });\n      }\n    }\n  }]);\n  return Tokenizer;\n}(CommentsParser);\n\nvar Scope = /*#__PURE__*/(0, _createClass2.default)(function Scope(flags) {\n  (0, _classCallCheck2.default)(this, Scope);\n  this.var = new Set();\n  this.lexical = new Set();\n  this.functions = new Set();\n  this.flags = flags;\n});\n\nvar ScopeHandler = /*#__PURE__*/function () {\n  function ScopeHandler(parser, inModule) {\n    (0, _classCallCheck2.default)(this, ScopeHandler);\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  (0, _createClass2.default)(ScopeHandler, [{\n    key: \"inFunction\",\n    get: function get() {\n      return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"allowSuper\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n    }\n  }, {\n    key: \"allowDirectSuper\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n    }\n  }, {\n    key: \"inClass\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n    }\n  }, {\n    key: \"inClassAndNotInNonArrowFunction\",\n    get: function get() {\n      var flags = this.currentThisScopeFlags();\n      return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n    }\n  }, {\n    key: \"inStaticBlock\",\n    get: function get() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var flags = this.scopeStack[i].flags;\n\n        if (flags & SCOPE_STATIC_BLOCK) {\n          return true;\n        }\n\n        if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n          return false;\n        }\n      }\n    }\n  }, {\n    key: \"inNonArrowFunction\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"treatFunctionsAsVar\",\n    get: function get() {\n      return this.treatFunctionsAsVarInScope(this.currentScope());\n    }\n  }, {\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new Scope(flags);\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(flags) {\n      this.scopeStack.push(this.createScope(flags));\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.scopeStack.pop();\n    }\n  }, {\n    key: \"treatFunctionsAsVarInScope\",\n    value: function treatFunctionsAsVarInScope(scope) {\n      return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, loc) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n        if (bindingType & BIND_SCOPE_FUNCTION) {\n          scope.functions.add(name);\n        } else {\n          scope.lexical.add(name);\n        }\n\n        if (bindingType & BIND_SCOPE_LEXICAL) {\n          this.maybeExportDefined(scope, name);\n        }\n      } else if (bindingType & BIND_SCOPE_VAR) {\n        for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n          scope = this.scopeStack[i];\n          this.checkRedeclarationInScope(scope, name, bindingType, loc);\n          scope.var.add(name);\n          this.maybeExportDefined(scope, name);\n          if (scope.flags & SCOPE_VAR) break;\n        }\n      }\n\n      if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"maybeExportDefined\",\n    value: function maybeExportDefined(scope, name) {\n      if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"checkRedeclarationInScope\",\n    value: function checkRedeclarationInScope(scope, name, bindingType, loc) {\n      if (this.isRedeclaredInScope(scope, name, bindingType)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n      }\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n      }\n\n      return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      var name = id.name;\n      var topLevelScope = this.scopeStack[0];\n\n      if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n        this.undefinedExports.set(name, id.loc.start);\n      }\n    }\n  }, {\n    key: \"currentScope\",\n    value: function currentScope() {\n      return this.scopeStack[this.scopeStack.length - 1];\n    }\n  }, {\n    key: \"currentVarScopeFlags\",\n    value: function currentVarScopeFlags() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var flags = this.scopeStack[i].flags;\n\n        if (flags & SCOPE_VAR) {\n          return flags;\n        }\n      }\n    }\n  }, {\n    key: \"currentThisScopeFlags\",\n    value: function currentThisScopeFlags() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var flags = this.scopeStack[i].flags;\n\n        if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n          return flags;\n        }\n      }\n    }\n  }]);\n  return ScopeHandler;\n}();\n\nvar FlowScope = /*#__PURE__*/function (_Scope) {\n  (0, _inherits2.default)(FlowScope, _Scope);\n\n  var _super4 = _createSuper(FlowScope);\n\n  function FlowScope() {\n    var _this6;\n\n    (0, _classCallCheck2.default)(this, FlowScope);\n\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    _this6 = _super4.call.apply(_super4, [this].concat(args));\n    _this6.declareFunctions = new Set();\n    return _this6;\n  }\n\n  return (0, _createClass2.default)(FlowScope);\n}(Scope);\n\nvar FlowScopeHandler = /*#__PURE__*/function (_ScopeHandler) {\n  (0, _inherits2.default)(FlowScopeHandler, _ScopeHandler);\n\n  var _super5 = _createSuper(FlowScopeHandler);\n\n  function FlowScopeHandler() {\n    (0, _classCallCheck2.default)(this, FlowScopeHandler);\n    return _super5.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(FlowScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new FlowScope(flags);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, loc) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n        scope.declareFunctions.add(name);\n        return;\n      }\n\n      (0, _get17.default)((0, _getPrototypeOf2.default)(FlowScopeHandler.prototype), \"declareName\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if ((0, _get17.default)((0, _getPrototypeOf2.default)(FlowScopeHandler.prototype), \"isRedeclaredInScope\", this).apply(this, arguments)) return true;\n\n      if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n        return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n      }\n\n      return false;\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(FlowScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n      }\n    }\n  }]);\n  return FlowScopeHandler;\n}(ScopeHandler);\n\nvar ClassScope = /*#__PURE__*/(0, _createClass2.default)(function ClassScope() {\n  (0, _classCallCheck2.default)(this, ClassScope);\n  this.privateNames = new Set();\n  this.loneAccessors = new Map();\n  this.undefinedPrivateNames = new Map();\n});\n\nvar ClassScopeHandler = /*#__PURE__*/function () {\n  function ClassScopeHandler(parser) {\n    (0, _classCallCheck2.default)(this, ClassScopeHandler);\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n\n  (0, _createClass2.default)(ClassScopeHandler, [{\n    key: \"current\",\n    value: function current() {\n      return this.stack[this.stack.length - 1];\n    }\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      this.stack.push(new ClassScope());\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      var oldClassScope = this.stack.pop();\n      var current = this.current();\n\n      for (var _i3 = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i3 < _Array$from.length; _i3++) {\n        var _Array$from$_i = (0, _slicedToArray2.default)(_Array$from[_i3], 2),\n            name = _Array$from$_i[0],\n            loc = _Array$from$_i[1];\n\n        if (current) {\n          if (!current.undefinedPrivateNames.has(name)) {\n            current.undefinedPrivateNames.set(name, loc);\n          }\n        } else {\n          this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n            at: loc,\n            identifierName: name\n          });\n        }\n      }\n    }\n  }, {\n    key: \"declarePrivateName\",\n    value: function declarePrivateName(name, elementType, loc) {\n      var _this$current = this.current(),\n          privateNames = _this$current.privateNames,\n          loneAccessors = _this$current.loneAccessors,\n          undefinedPrivateNames = _this$current.undefinedPrivateNames;\n\n      var redefined = privateNames.has(name);\n\n      if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n        var accessor = redefined && loneAccessors.get(name);\n\n        if (accessor) {\n          var oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n          var newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n          var oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n          var newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n          redefined = oldKind === newKind || oldStatic !== newStatic;\n          if (!redefined) loneAccessors.delete(name);\n        } else if (!redefined) {\n          loneAccessors.set(name, elementType);\n        }\n      }\n\n      if (redefined) {\n        this.parser.raise(Errors.PrivateNameRedeclaration, {\n          at: loc,\n          identifierName: name\n        });\n      }\n\n      privateNames.add(name);\n      undefinedPrivateNames.delete(name);\n    }\n  }, {\n    key: \"usePrivateName\",\n    value: function usePrivateName(name, loc) {\n      var classScope;\n\n      var _iterator = _createForOfIteratorHelper(this.stack),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          classScope = _step.value;\n          if (classScope.privateNames.has(name)) return;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (classScope) {\n        classScope.undefinedPrivateNames.set(name, loc);\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }]);\n  return ClassScopeHandler;\n}();\n\nvar kExpression = 0,\n    kMaybeArrowParameterDeclaration = 1,\n    kMaybeAsyncArrowParameterDeclaration = 2,\n    kParameterDeclaration = 3;\n\nvar ExpressionScope = /*#__PURE__*/function () {\n  function ExpressionScope() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    (0, _classCallCheck2.default)(this, ExpressionScope);\n    this.type = void 0;\n    this.type = type;\n  }\n\n  (0, _createClass2.default)(ExpressionScope, [{\n    key: \"canBeArrowParameterDeclaration\",\n    value: function canBeArrowParameterDeclaration() {\n      return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n    }\n  }, {\n    key: \"isCertainlyParameterDeclaration\",\n    value: function isCertainlyParameterDeclaration() {\n      return this.type === kParameterDeclaration;\n    }\n  }]);\n  return ExpressionScope;\n}();\n\nvar ArrowHeadParsingScope = /*#__PURE__*/function (_ExpressionScope) {\n  (0, _inherits2.default)(ArrowHeadParsingScope, _ExpressionScope);\n\n  var _super6 = _createSuper(ArrowHeadParsingScope);\n\n  function ArrowHeadParsingScope(type) {\n    var _this7;\n\n    (0, _classCallCheck2.default)(this, ArrowHeadParsingScope);\n    _this7 = _super6.call(this, type);\n    _this7.declarationErrors = new Map();\n    return _this7;\n  }\n\n  (0, _createClass2.default)(ArrowHeadParsingScope, [{\n    key: \"recordDeclarationError\",\n    value: function recordDeclarationError(ParsingErrorClass, _ref47) {\n      var at = _ref47.at;\n      var index = at.index;\n      this.declarationErrors.set(index, [ParsingErrorClass, at]);\n    }\n  }, {\n    key: \"clearDeclarationError\",\n    value: function clearDeclarationError(index) {\n      this.declarationErrors.delete(index);\n    }\n  }, {\n    key: \"iterateErrors\",\n    value: function iterateErrors(iterator) {\n      this.declarationErrors.forEach(iterator);\n    }\n  }]);\n  return ArrowHeadParsingScope;\n}(ExpressionScope);\n\nvar ExpressionScopeHandler = /*#__PURE__*/function () {\n  function ExpressionScopeHandler(parser) {\n    (0, _classCallCheck2.default)(this, ExpressionScopeHandler);\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n\n  (0, _createClass2.default)(ExpressionScopeHandler, [{\n    key: \"enter\",\n    value: function enter(scope) {\n      this.stack.push(scope);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stack.pop();\n    }\n  }, {\n    key: \"recordParameterInitializerError\",\n    value: function recordParameterInitializerError(toParseError, _ref48) {\n      var node = _ref48.at;\n      var origin = {\n        at: node.loc.start\n      };\n      var stack = this.stack;\n      var i = stack.length - 1;\n      var scope = stack[i];\n\n      while (!scope.isCertainlyParameterDeclaration()) {\n        if (scope.canBeArrowParameterDeclaration()) {\n          scope.recordDeclarationError(toParseError, origin);\n        } else {\n          return;\n        }\n\n        scope = stack[--i];\n      }\n\n      this.parser.raise(toParseError, origin);\n    }\n  }, {\n    key: \"recordArrowParemeterBindingError\",\n    value: function recordArrowParemeterBindingError(error, _ref49) {\n      var node = _ref49.at;\n      var stack = this.stack;\n      var scope = stack[stack.length - 1];\n      var origin = {\n        at: node.loc.start\n      };\n\n      if (scope.isCertainlyParameterDeclaration()) {\n        this.parser.raise(error, origin);\n      } else if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(error, origin);\n      } else {\n        return;\n      }\n    }\n  }, {\n    key: \"recordAsyncArrowParametersError\",\n    value: function recordAsyncArrowParametersError(_ref50) {\n      var at = _ref50.at;\n      var stack = this.stack;\n      var i = stack.length - 1;\n      var scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n          scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {\n            at: at\n          });\n        }\n\n        scope = stack[--i];\n      }\n    }\n  }, {\n    key: \"validateAsPattern\",\n    value: function validateAsPattern() {\n      var _this8 = this;\n\n      var stack = this.stack;\n      var currentScope = stack[stack.length - 1];\n      if (!currentScope.canBeArrowParameterDeclaration()) return;\n      currentScope.iterateErrors(function (_ref51) {\n        var _ref52 = (0, _slicedToArray2.default)(_ref51, 2),\n            toParseError = _ref52[0],\n            loc = _ref52[1];\n\n        _this8.parser.raise(toParseError, {\n          at: loc\n        });\n\n        var i = stack.length - 2;\n        var scope = stack[i];\n\n        while (scope.canBeArrowParameterDeclaration()) {\n          scope.clearDeclarationError(loc.index);\n          scope = stack[--i];\n        }\n      });\n    }\n  }]);\n  return ExpressionScopeHandler;\n}();\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nvar PARAM = 0,\n    PARAM_YIELD = 1,\n    PARAM_AWAIT = 2,\n    PARAM_RETURN = 4,\n    PARAM_IN = 8;\n\nvar ProductionParameterHandler = /*#__PURE__*/function () {\n  function ProductionParameterHandler() {\n    (0, _classCallCheck2.default)(this, ProductionParameterHandler);\n    this.stacks = [];\n  }\n\n  (0, _createClass2.default)(ProductionParameterHandler, [{\n    key: \"enter\",\n    value: function enter(flags) {\n      this.stacks.push(flags);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stacks.pop();\n    }\n  }, {\n    key: \"currentFlags\",\n    value: function currentFlags() {\n      return this.stacks[this.stacks.length - 1];\n    }\n  }, {\n    key: \"hasAwait\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_AWAIT) > 0;\n    }\n  }, {\n    key: \"hasYield\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_YIELD) > 0;\n    }\n  }, {\n    key: \"hasReturn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_RETURN) > 0;\n    }\n  }, {\n    key: \"hasIn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_IN) > 0;\n    }\n  }]);\n  return ProductionParameterHandler;\n}();\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nvar UtilParser = /*#__PURE__*/function (_Tokenizer) {\n  (0, _inherits2.default)(UtilParser, _Tokenizer);\n\n  var _super7 = _createSuper(UtilParser);\n\n  function UtilParser() {\n    (0, _classCallCheck2.default)(this, UtilParser);\n    return _super7.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(UtilParser, [{\n    key: \"addExtra\",\n    value: function addExtra(node, key, value) {\n      var enumerable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (!node) return;\n      var extra = node.extra = node.extra || {};\n\n      if (enumerable) {\n        extra[key] = value;\n      } else {\n        Object.defineProperty(extra, key, {\n          enumerable: enumerable,\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"isContextual\",\n    value: function isContextual(token) {\n      return this.state.type === token && !this.state.containsEsc;\n    }\n  }, {\n    key: \"isUnparsedContextual\",\n    value: function isUnparsedContextual(nameStart, name) {\n      var nameEnd = nameStart + name.length;\n\n      if (this.input.slice(nameStart, nameEnd) === name) {\n        var nextCh = this.input.charCodeAt(nameEnd);\n        return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isLookaheadContextual\",\n    value: function isLookaheadContextual(name) {\n      var next = this.nextTokenStart();\n      return this.isUnparsedContextual(next, name);\n    }\n  }, {\n    key: \"eatContextual\",\n    value: function eatContextual(token) {\n      if (this.isContextual(token)) {\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"expectContextual\",\n    value: function expectContextual(token, toParseError) {\n      if (!this.eatContextual(token)) {\n        if (toParseError != null) {\n          throw this.raise(toParseError, {\n            at: this.state.startLoc\n          });\n        }\n\n        throw this.unexpected(null, token);\n      }\n    }\n  }, {\n    key: \"canInsertSemicolon\",\n    value: function canInsertSemicolon() {\n      return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();\n    }\n  }, {\n    key: \"hasPrecedingLineBreak\",\n    value: function hasPrecedingLineBreak() {\n      return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n    }\n  }, {\n    key: \"hasFollowingLineBreak\",\n    value: function hasFollowingLineBreak() {\n      skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n      return skipWhiteSpaceToLineBreak.test(this.input);\n    }\n  }, {\n    key: \"isLineTerminator\",\n    value: function isLineTerminator() {\n      return this.eat(13) || this.canInsertSemicolon();\n    }\n  }, {\n    key: \"semicolon\",\n    value: function semicolon() {\n      var allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n      this.raise(Errors.MissingSemicolon, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }, {\n    key: \"expect\",\n    value: function expect(type, loc) {\n      this.eat(type) || this.unexpected(loc, type);\n    }\n  }, {\n    key: \"tryParse\",\n    value: function tryParse(fn) {\n      var oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n      var abortSignal = {\n        node: null\n      };\n\n      try {\n        var node = fn(function () {\n          var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          abortSignal.node = node;\n          throw abortSignal;\n        });\n\n        if (this.state.errors.length > oldState.errors.length) {\n          var failState = this.state;\n          this.state = oldState;\n          this.state.tokensLength = failState.tokensLength;\n          return {\n            node: node,\n            error: failState.errors[oldState.errors.length],\n            thrown: false,\n            aborted: false,\n            failState: failState\n          };\n        }\n\n        return {\n          node: node,\n          error: null,\n          thrown: false,\n          aborted: false,\n          failState: null\n        };\n      } catch (error) {\n        var _failState = this.state;\n        this.state = oldState;\n\n        if (error instanceof SyntaxError) {\n          return {\n            node: null,\n            error: error,\n            thrown: true,\n            aborted: false,\n            failState: _failState\n          };\n        }\n\n        if (error === abortSignal) {\n          return {\n            node: abortSignal.node,\n            error: null,\n            thrown: false,\n            aborted: true,\n            failState: _failState\n          };\n        }\n\n        throw error;\n      }\n    }\n  }, {\n    key: \"checkExpressionErrors\",\n    value: function checkExpressionErrors(refExpressionErrors, andThrow) {\n      if (!refExpressionErrors) return false;\n      var shorthandAssignLoc = refExpressionErrors.shorthandAssignLoc,\n          doubleProtoLoc = refExpressionErrors.doubleProtoLoc,\n          privateKeyLoc = refExpressionErrors.privateKeyLoc,\n          optionalParametersLoc = refExpressionErrors.optionalParametersLoc;\n      var hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n\n      if (!andThrow) {\n        return hasErrors;\n      }\n\n      if (shorthandAssignLoc != null) {\n        this.raise(Errors.InvalidCoverInitializedName, {\n          at: shorthandAssignLoc\n        });\n      }\n\n      if (doubleProtoLoc != null) {\n        this.raise(Errors.DuplicateProto, {\n          at: doubleProtoLoc\n        });\n      }\n\n      if (privateKeyLoc != null) {\n        this.raise(Errors.UnexpectedPrivateField, {\n          at: privateKeyLoc\n        });\n      }\n\n      if (optionalParametersLoc != null) {\n        this.unexpected(optionalParametersLoc);\n      }\n    }\n  }, {\n    key: \"isLiteralPropertyName\",\n    value: function isLiteralPropertyName() {\n      return tokenIsLiteralPropertyName(this.state.type);\n    }\n  }, {\n    key: \"isPrivateName\",\n    value: function isPrivateName(node) {\n      return node.type === \"PrivateName\";\n    }\n  }, {\n    key: \"getPrivateNameSV\",\n    value: function getPrivateNameSV(node) {\n      return node.id.name;\n    }\n  }, {\n    key: \"hasPropertyAsPrivateName\",\n    value: function hasPropertyAsPrivateName(node) {\n      return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n    }\n  }, {\n    key: \"isOptionalChain\",\n    value: function isOptionalChain(node) {\n      return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n    }\n  }, {\n    key: \"isObjectProperty\",\n    value: function isObjectProperty(node) {\n      return node.type === \"ObjectProperty\";\n    }\n  }, {\n    key: \"isObjectMethod\",\n    value: function isObjectMethod(node) {\n      return node.type === \"ObjectMethod\";\n    }\n  }, {\n    key: \"initializeScopes\",\n    value: function initializeScopes() {\n      var _this9 = this;\n\n      var inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      var oldExportedIdentifiers = this.exportedIdentifiers;\n      this.exportedIdentifiers = new Set();\n      var oldInModule = this.inModule;\n      this.inModule = inModule;\n      var oldScope = this.scope;\n      var ScopeHandler = this.getScopeHandler();\n      this.scope = new ScopeHandler(this, inModule);\n      var oldProdParam = this.prodParam;\n      this.prodParam = new ProductionParameterHandler();\n      var oldClassScope = this.classScope;\n      this.classScope = new ClassScopeHandler(this);\n      var oldExpressionScope = this.expressionScope;\n      this.expressionScope = new ExpressionScopeHandler(this);\n      return function () {\n        _this9.state.labels = oldLabels;\n        _this9.exportedIdentifiers = oldExportedIdentifiers;\n        _this9.inModule = oldInModule;\n        _this9.scope = oldScope;\n        _this9.prodParam = oldProdParam;\n        _this9.classScope = oldClassScope;\n        _this9.expressionScope = oldExpressionScope;\n      };\n    }\n  }, {\n    key: \"enterInitialScopes\",\n    value: function enterInitialScopes() {\n      var paramFlags = PARAM;\n\n      if (this.inModule) {\n        paramFlags |= PARAM_AWAIT;\n      }\n\n      this.scope.enter(SCOPE_PROGRAM);\n      this.prodParam.enter(paramFlags);\n    }\n  }, {\n    key: \"checkDestructuringPrivate\",\n    value: function checkDestructuringPrivate(refExpressionErrors) {\n      var privateKeyLoc = refExpressionErrors.privateKeyLoc;\n\n      if (privateKeyLoc !== null) {\n        this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n      }\n    }\n  }]);\n  return UtilParser;\n}(Tokenizer);\n\nvar ExpressionErrors = /*#__PURE__*/(0, _createClass2.default)(function ExpressionErrors() {\n  (0, _classCallCheck2.default)(this, ExpressionErrors);\n  this.shorthandAssignLoc = null;\n  this.doubleProtoLoc = null;\n  this.privateKeyLoc = null;\n  this.optionalParametersLoc = null;\n});\nvar Node = /*#__PURE__*/(0, _createClass2.default)(function Node(parser, pos, loc) {\n  (0, _classCallCheck2.default)(this, Node);\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  this.loc = new SourceLocation(loc);\n  if (parser != null && parser.options.ranges) this.range = [pos, 0];\n  if (parser != null && parser.filename) this.loc.filename = parser.filename;\n});\nvar NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    var newNode = new Node();\n    var keys = Object.keys(this);\n\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  var type = node.type,\n      start = node.start,\n      end = node.end,\n      loc = node.loc,\n      range = node.range,\n      extra = node.extra,\n      name = node.name;\n  var cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  var type = node.type,\n      start = node.start,\n      end = node.end,\n      loc = node.loc,\n      range = node.range,\n      extra = node.extra;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  var cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n\n  cloned.value = node.value;\n  return cloned;\n}\n\nvar NodeUtils = /*#__PURE__*/function (_UtilParser) {\n  (0, _inherits2.default)(NodeUtils, _UtilParser);\n\n  var _super8 = _createSuper(NodeUtils);\n\n  function NodeUtils() {\n    (0, _classCallCheck2.default)(this, NodeUtils);\n    return _super8.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(NodeUtils, [{\n    key: \"startNode\",\n    value: function startNode() {\n      return new Node(this, this.state.start, this.state.startLoc);\n    }\n  }, {\n    key: \"startNodeAt\",\n    value: function startNodeAt(pos, loc) {\n      return new Node(this, pos, loc);\n    }\n  }, {\n    key: \"startNodeAtNode\",\n    value: function startNodeAtNode(type) {\n      return this.startNodeAt(type.start, type.loc.start);\n    }\n  }, {\n    key: \"finishNode\",\n    value: function finishNode(node, type) {\n      return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n    }\n  }, {\n    key: \"finishNodeAt\",\n    value: function finishNodeAt(node, type, endLoc) {\n      node.type = type;\n      node.end = endLoc.index;\n      node.loc.end = endLoc;\n      if (this.options.ranges) node.range[1] = endLoc.index;\n      if (this.options.attachComment) this.processComment(node);\n      return node;\n    }\n  }, {\n    key: \"resetStartLocation\",\n    value: function resetStartLocation(node, start, startLoc) {\n      node.start = start;\n      node.loc.start = startLoc;\n      if (this.options.ranges) node.range[0] = start;\n    }\n  }, {\n    key: \"resetEndLocation\",\n    value: function resetEndLocation(node) {\n      var endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n      node.end = endLoc.index;\n      node.loc.end = endLoc;\n      if (this.options.ranges) node.range[1] = endLoc.index;\n    }\n  }, {\n    key: \"resetStartLocationFromNode\",\n    value: function resetStartLocationFromNode(node, locationNode) {\n      this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n    }\n  }]);\n  return NodeUtils;\n}(UtilParser);\n\nvar reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nvar FlowErrors = ParseErrorEnum(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2.default)([\"flow\"])))(function (_) {\n  return {\n    AmbiguousConditionalArrow: _(\"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\"),\n    AmbiguousDeclareModuleKind: _(\"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\"),\n    AssignReservedType: _(function (_ref53) {\n      var reservedType = _ref53.reservedType;\n      return \"Cannot overwrite reserved type \".concat(reservedType, \".\");\n    }),\n    DeclareClassElement: _(\"The `declare` modifier can only appear on class fields.\"),\n    DeclareClassFieldInitializer: _(\"Initializers are not allowed in fields with the `declare` modifier.\"),\n    DuplicateDeclareModuleExports: _(\"Duplicate `declare module.exports` statement.\"),\n    EnumBooleanMemberNotInitialized: _(function (_ref54) {\n      var memberName = _ref54.memberName,\n          enumName = _ref54.enumName;\n      return \"Boolean enum members need to be initialized. Use either `\".concat(memberName, \" = true,` or `\").concat(memberName, \" = false,` in enum `\").concat(enumName, \"`.\");\n    }),\n    EnumDuplicateMemberName: _(function (_ref55) {\n      var memberName = _ref55.memberName,\n          enumName = _ref55.enumName;\n      return \"Enum member names need to be unique, but the name `\".concat(memberName, \"` has already been used before in enum `\").concat(enumName, \"`.\");\n    }),\n    EnumInconsistentMemberValues: _(function (_ref56) {\n      var enumName = _ref56.enumName;\n      return \"Enum `\".concat(enumName, \"` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\");\n    }),\n    EnumInvalidExplicitType: _(function (_ref57) {\n      var invalidEnumType = _ref57.invalidEnumType,\n          enumName = _ref57.enumName;\n      return \"Enum type `\".concat(invalidEnumType, \"` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `\").concat(enumName, \"`.\");\n    }),\n    EnumInvalidExplicitTypeUnknownSupplied: _(function (_ref58) {\n      var enumName = _ref58.enumName;\n      return \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `\".concat(enumName, \"`.\");\n    }),\n    EnumInvalidMemberInitializerPrimaryType: _(function (_ref59) {\n      var enumName = _ref59.enumName,\n          memberName = _ref59.memberName,\n          explicitType = _ref59.explicitType;\n      return \"Enum `\".concat(enumName, \"` has type `\").concat(explicitType, \"`, so the initializer of `\").concat(memberName, \"` needs to be a \").concat(explicitType, \" literal.\");\n    }),\n    EnumInvalidMemberInitializerSymbolType: _(function (_ref60) {\n      var enumName = _ref60.enumName,\n          memberName = _ref60.memberName;\n      return \"Symbol enum members cannot be initialized. Use `\".concat(memberName, \",` in enum `\").concat(enumName, \"`.\");\n    }),\n    EnumInvalidMemberInitializerUnknownType: _(function (_ref61) {\n      var enumName = _ref61.enumName,\n          memberName = _ref61.memberName;\n      return \"The enum member initializer for `\".concat(memberName, \"` needs to be a literal (either a boolean, number, or string) in enum `\").concat(enumName, \"`.\");\n    }),\n    EnumInvalidMemberName: _(function (_ref62) {\n      var enumName = _ref62.enumName,\n          memberName = _ref62.memberName,\n          suggestion = _ref62.suggestion;\n      return \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `\".concat(memberName, \"`, consider using `\").concat(suggestion, \"`, in enum `\").concat(enumName, \"`.\");\n    }),\n    EnumNumberMemberNotInitialized: _(function (_ref63) {\n      var enumName = _ref63.enumName,\n          memberName = _ref63.memberName;\n      return \"Number enum members need to be initialized, e.g. `\".concat(memberName, \" = 1` in enum `\").concat(enumName, \"`.\");\n    }),\n    EnumStringMemberInconsistentlyInitailized: _(function (_ref64) {\n      var enumName = _ref64.enumName;\n      return \"String enum members need to consistently either all use initializers, or use no initializers, in enum `\".concat(enumName, \"`.\");\n    }),\n    GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n    ImportTypeShorthandOnlyInPureImport: _(\"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\"),\n    InexactInsideExact: _(\"Explicit inexact syntax cannot appear inside an explicit exact object type.\"),\n    InexactInsideNonObject: _(\"Explicit inexact syntax cannot appear in class or interface definitions.\"),\n    InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n    InvalidNonTypeImportInDeclareModule: _(\"Imports within a `declare module` body must always be `import type` or `import typeof`.\"),\n    MissingTypeParamDefault: _(\"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\"),\n    NestedDeclareModule: _(\"`declare module` cannot be used inside another `declare module`.\"),\n    NestedFlowComment: _(\"Cannot have a flow comment inside another flow comment.\"),\n    PatternIsOptional: _(\"A binding pattern parameter cannot be optional in an implementation signature.\", {\n      reasonCode: \"OptionalBindingPattern\"\n    }),\n    SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n    SpreadVariance: _(\"Spread properties cannot have variance.\"),\n    ThisParamAnnotationRequired: _(\"A type annotation is required for the `this` parameter.\"),\n    ThisParamBannedInConstructor: _(\"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\"),\n    ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n    ThisParamMustBeFirst: _(\"The `this` parameter must be the first function parameter.\"),\n    ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n    TypeBeforeInitializer: _(\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\"),\n    TypeCastInPattern: _(\"The type cast expression is expected to be wrapped with parenthesis.\"),\n    UnexpectedExplicitInexactInObject: _(\"Explicit inexact syntax must appear at the end of an inexact object.\"),\n    UnexpectedReservedType: _(function (_ref65) {\n      var reservedType = _ref65.reservedType;\n      return \"Unexpected reserved type \".concat(reservedType, \".\");\n    }),\n    UnexpectedReservedUnderscore: _(\"`_` is only allowed as a type argument to call or new.\"),\n    UnexpectedSpaceBetweenModuloChecks: _(\"Spaces between `%` and `checks` are not allowed here.\"),\n    UnexpectedSpreadType: _(\"Spread operator cannot appear in class or interface definitions.\"),\n    UnexpectedSubtractionOperand: _('Unexpected token, expected \"number\" or \"bigint\".'),\n    UnexpectedTokenAfterTypeParameter: _(\"Expected an arrow function after this type parameter declaration.\"),\n    UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\"),\n    UnsupportedDeclareExportKind: _(function (_ref66) {\n      var unsupportedExportKind = _ref66.unsupportedExportKind,\n          suggestion = _ref66.suggestion;\n      return \"`declare export \".concat(unsupportedExportKind, \"` is not supported. Use `\").concat(suggestion, \"` instead.\");\n    }),\n    UnsupportedStatementInDeclareModule: _(\"Only declares and type imports are allowed inside declare module.\"),\n    UnterminatedFlowComment: _(\"Unterminated flow-comment.\")\n  };\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 97;\n}\n\nvar exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  var list1 = [];\n  var list2 = [];\n\n  for (var i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nvar FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = function flow(superClass) {\n  return /*#__PURE__*/function (_superClass2) {\n    (0, _inherits2.default)(_class2, _superClass2);\n\n    var _super9 = _createSuper(_class2);\n\n    function _class2() {\n      var _this10;\n\n      (0, _classCallCheck2.default)(this, _class2);\n\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      _this10 = _super9.call.apply(_super9, [this].concat(args));\n      _this10.flowPragma = undefined;\n      return _this10;\n    }\n\n    (0, _createClass2.default)(_class2, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return FlowScopeHandler;\n      }\n    }, {\n      key: \"shouldParseTypes\",\n      value: function shouldParseTypes() {\n        return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n      }\n    }, {\n      key: \"shouldParseEnums\",\n      value: function shouldParseEnums() {\n        return !!this.getPluginOption(\"flow\", \"enums\");\n      }\n    }, {\n      key: \"finishToken\",\n      value: function finishToken(type, val) {\n        if (type !== 129 && type !== 13 && type !== 28) {\n          if (this.flowPragma === undefined) {\n            this.flowPragma = null;\n          }\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"finishToken\", this).call(this, type, val);\n      }\n    }, {\n      key: \"addComment\",\n      value: function addComment(comment) {\n        if (this.flowPragma === undefined) {\n          var matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n          if (!matches) ;else if (matches[1] === \"flow\") {\n            this.flowPragma = \"flow\";\n          } else if (matches[1] === \"noflow\") {\n            this.flowPragma = \"noflow\";\n          } else {\n            throw new Error(\"Unexpected flow pragma\");\n          }\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"addComment\", this).call(this, comment);\n      }\n    }, {\n      key: \"flowParseTypeInitialiser\",\n      value: function flowParseTypeInitialiser(tok) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(tok || 14);\n        var type = this.flowParseType();\n        this.state.inType = oldInType;\n        return type;\n      }\n    }, {\n      key: \"flowParsePredicate\",\n      value: function flowParsePredicate() {\n        var node = this.startNode();\n        var moduloLoc = this.state.startLoc;\n        this.next();\n        this.expectContextual(107);\n\n        if (this.state.lastTokStart > moduloLoc.index + 1) {\n          this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n            at: moduloLoc\n          });\n        }\n\n        if (this.eat(10)) {\n          node.value = this.parseExpression();\n          this.expect(11);\n          return this.finishNode(node, \"DeclaredPredicate\");\n        } else {\n          return this.finishNode(node, \"InferredPredicate\");\n        }\n      }\n    }, {\n      key: \"flowParseTypeAndPredicateInitialiser\",\n      value: function flowParseTypeAndPredicateInitialiser() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(14);\n        var type = null;\n        var predicate = null;\n\n        if (this.match(54)) {\n          this.state.inType = oldInType;\n          predicate = this.flowParsePredicate();\n        } else {\n          type = this.flowParseType();\n          this.state.inType = oldInType;\n\n          if (this.match(54)) {\n            predicate = this.flowParsePredicate();\n          }\n        }\n\n        return [type, predicate];\n      }\n    }, {\n      key: \"flowParseDeclareClass\",\n      value: function flowParseDeclareClass(node) {\n        this.next();\n        this.flowParseInterfaceish(node, true);\n        return this.finishNode(node, \"DeclareClass\");\n      }\n    }, {\n      key: \"flowParseDeclareFunction\",\n      value: function flowParseDeclareFunction(node) {\n        this.next();\n        var id = node.id = this.parseIdentifier();\n        var typeNode = this.startNode();\n        var typeContainer = this.startNode();\n\n        if (this.match(47)) {\n          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          typeNode.typeParameters = null;\n        }\n\n        this.expect(10);\n        var tmp = this.flowParseFunctionTypeParams();\n        typeNode.params = tmp.params;\n        typeNode.rest = tmp.rest;\n        typeNode.this = tmp._this;\n        this.expect(11);\n\n        var _this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser();\n\n        var _this$flowParseTypeAn2 = (0, _slicedToArray2.default)(_this$flowParseTypeAn, 2);\n\n        typeNode.returnType = _this$flowParseTypeAn2[0];\n        node.predicate = _this$flowParseTypeAn2[1];\n        typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n        id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n        this.resetEndLocation(id);\n        this.semicolon();\n        this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n        return this.finishNode(node, \"DeclareFunction\");\n      }\n    }, {\n      key: \"flowParseDeclare\",\n      value: function flowParseDeclare(node, insideModule) {\n        if (this.match(80)) {\n          return this.flowParseDeclareClass(node);\n        } else if (this.match(68)) {\n          return this.flowParseDeclareFunction(node);\n        } else if (this.match(74)) {\n          return this.flowParseDeclareVariable(node);\n        } else if (this.eatContextual(123)) {\n          if (this.match(16)) {\n            return this.flowParseDeclareModuleExports(node);\n          } else {\n            if (insideModule) {\n              this.raise(FlowErrors.NestedDeclareModule, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n\n            return this.flowParseDeclareModule(node);\n          }\n        } else if (this.isContextual(126)) {\n          return this.flowParseDeclareTypeAlias(node);\n        } else if (this.isContextual(127)) {\n          return this.flowParseDeclareOpaqueType(node);\n        } else if (this.isContextual(125)) {\n          return this.flowParseDeclareInterface(node);\n        } else if (this.match(82)) {\n          return this.flowParseDeclareExportDeclaration(node, insideModule);\n        } else {\n          throw this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseDeclareVariable\",\n      value: function flowParseDeclareVariable(node) {\n        this.next();\n        node.id = this.flowParseTypeAnnotatableIdentifier(true);\n        this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n        this.semicolon();\n        return this.finishNode(node, \"DeclareVariable\");\n      }\n    }, {\n      key: \"flowParseDeclareModule\",\n      value: function flowParseDeclareModule(node) {\n        var _this11 = this;\n\n        this.scope.enter(SCOPE_OTHER);\n\n        if (this.match(129)) {\n          node.id = this.parseExprAtom();\n        } else {\n          node.id = this.parseIdentifier();\n        }\n\n        var bodyNode = node.body = this.startNode();\n        var body = bodyNode.body = [];\n        this.expect(5);\n\n        while (!this.match(8)) {\n          var _bodyNode = this.startNode();\n\n          if (this.match(83)) {\n            this.next();\n\n            if (!this.isContextual(126) && !this.match(87)) {\n              this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n\n            this.parseImport(_bodyNode);\n          } else {\n            this.expectContextual(121, FlowErrors.UnsupportedStatementInDeclareModule);\n            _bodyNode = this.flowParseDeclare(_bodyNode, true);\n          }\n\n          body.push(_bodyNode);\n        }\n\n        this.scope.exit();\n        this.expect(8);\n        this.finishNode(bodyNode, \"BlockStatement\");\n        var kind = null;\n        var hasModuleExport = false;\n        body.forEach(function (bodyElement) {\n          if (isEsModuleType(bodyElement)) {\n            if (kind === \"CommonJS\") {\n              _this11.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n                at: bodyElement\n              });\n            }\n\n            kind = \"ES\";\n          } else if (bodyElement.type === \"DeclareModuleExports\") {\n            if (hasModuleExport) {\n              _this11.raise(FlowErrors.DuplicateDeclareModuleExports, {\n                at: bodyElement\n              });\n            }\n\n            if (kind === \"ES\") {\n              _this11.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n                at: bodyElement\n              });\n            }\n\n            kind = \"CommonJS\";\n            hasModuleExport = true;\n          }\n        });\n        node.kind = kind || \"CommonJS\";\n        return this.finishNode(node, \"DeclareModule\");\n      }\n    }, {\n      key: \"flowParseDeclareExportDeclaration\",\n      value: function flowParseDeclareExportDeclaration(node, insideModule) {\n        this.expect(82);\n\n        if (this.eat(65)) {\n          if (this.match(68) || this.match(80)) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n          } else {\n            node.declaration = this.flowParseType();\n            this.semicolon();\n          }\n\n          node.default = true;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else {\n          if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {\n            var label = this.state.value;\n            throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n              at: this.state.startLoc,\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label]\n            });\n          }\n\n          if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127)) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127)) {\n            node = this.parseExport(node);\n\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParseDeclareModuleExports\",\n      value: function flowParseDeclareModuleExports(node) {\n        this.next();\n        this.expectContextual(108);\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n        this.semicolon();\n        return this.finishNode(node, \"DeclareModuleExports\");\n      }\n    }, {\n      key: \"flowParseDeclareTypeAlias\",\n      value: function flowParseDeclareTypeAlias(node) {\n        this.next();\n        this.flowParseTypeAlias(node);\n        node.type = \"DeclareTypeAlias\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareOpaqueType\",\n      value: function flowParseDeclareOpaqueType(node) {\n        this.next();\n        this.flowParseOpaqueType(node, true);\n        node.type = \"DeclareOpaqueType\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareInterface\",\n      value: function flowParseDeclareInterface(node) {\n        this.next();\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"DeclareInterface\");\n      }\n    }, {\n      key: \"flowParseInterfaceish\",\n      value: function flowParseInterfaceish(node) {\n        var isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n        this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.extends = [];\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eat(81)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (!isClass && this.eat(12));\n        }\n\n        if (this.isContextual(114)) {\n          this.next();\n\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(12));\n        }\n\n        if (this.isContextual(110)) {\n          this.next();\n\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(12));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: isClass,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: isClass,\n          allowInexact: false\n        });\n      }\n    }, {\n      key: \"flowParseInterfaceExtends\",\n      value: function flowParseInterfaceExtends() {\n        var node = this.startNode();\n        node.id = this.flowParseQualifiedTypeIdentifier();\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        return this.finishNode(node, \"InterfaceExtends\");\n      }\n    }, {\n      key: \"flowParseInterface\",\n      value: function flowParseInterface(node) {\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"InterfaceDeclaration\");\n      }\n    }, {\n      key: \"checkNotUnderscore\",\n      value: function checkNotUnderscore(word) {\n        if (word === \"_\") {\n          this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n            at: this.state.startLoc\n          });\n        }\n      }\n    }, {\n      key: \"checkReservedType\",\n      value: function checkReservedType(word, startLoc, declaration) {\n        if (!reservedTypes.has(word)) return;\n        this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n          at: startLoc,\n          reservedType: word\n        });\n      }\n    }, {\n      key: \"flowParseRestrictedIdentifier\",\n      value: function flowParseRestrictedIdentifier(liberal, declaration) {\n        this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n        return this.parseIdentifier(liberal);\n      }\n    }, {\n      key: \"flowParseTypeAlias\",\n      value: function flowParseTypeAlias(node) {\n        node.id = this.flowParseRestrictedIdentifier(false, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.right = this.flowParseTypeInitialiser(29);\n        this.semicolon();\n        return this.finishNode(node, \"TypeAlias\");\n      }\n    }, {\n      key: \"flowParseOpaqueType\",\n      value: function flowParseOpaqueType(node, declare) {\n        this.expectContextual(126);\n        node.id = this.flowParseRestrictedIdentifier(true, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.supertype = null;\n\n        if (this.match(14)) {\n          node.supertype = this.flowParseTypeInitialiser(14);\n        }\n\n        node.impltype = null;\n\n        if (!declare) {\n          node.impltype = this.flowParseTypeInitialiser(29);\n        }\n\n        this.semicolon();\n        return this.finishNode(node, \"OpaqueType\");\n      }\n    }, {\n      key: \"flowParseTypeParameter\",\n      value: function flowParseTypeParameter() {\n        var requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var nodeStartLoc = this.state.startLoc;\n        var node = this.startNode();\n        var variance = this.flowParseVariance();\n        var ident = this.flowParseTypeAnnotatableIdentifier();\n        node.name = ident.name;\n        node.variance = variance;\n        node.bound = ident.typeAnnotation;\n\n        if (this.match(29)) {\n          this.eat(29);\n          node.default = this.flowParseType();\n        } else {\n          if (requireDefault) {\n            this.raise(FlowErrors.MissingTypeParamDefault, {\n              at: nodeStartLoc\n            });\n          }\n        }\n\n        return this.finishNode(node, \"TypeParameter\");\n      }\n    }, {\n      key: \"flowParseTypeParameterDeclaration\",\n      value: function flowParseTypeParameterDeclaration() {\n        var oldInType = this.state.inType;\n        var node = this.startNode();\n        node.params = [];\n        this.state.inType = true;\n\n        if (this.match(47) || this.match(138)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        var defaultRequired = false;\n\n        do {\n          var typeParameter = this.flowParseTypeParameter(defaultRequired);\n          node.params.push(typeParameter);\n\n          if (typeParameter.default) {\n            defaultRequired = true;\n          }\n\n          if (!this.match(48)) {\n            this.expect(12);\n          }\n        } while (!this.match(48));\n\n        this.expect(48);\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterDeclaration\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiation\",\n      value: function flowParseTypeParameterInstantiation() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expect(47);\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n\n        while (!this.match(48)) {\n          node.params.push(this.flowParseType());\n\n          if (!this.match(48)) {\n            this.expect(12);\n          }\n        }\n\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        this.expect(48);\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiationCallOrNew\",\n      value: function flowParseTypeParameterInstantiationCallOrNew() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expect(47);\n\n        while (!this.match(48)) {\n          node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n          if (!this.match(48)) {\n            this.expect(12);\n          }\n        }\n\n        this.expect(48);\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseInterfaceType\",\n      value: function flowParseInterfaceType() {\n        var node = this.startNode();\n        this.expectContextual(125);\n        node.extends = [];\n\n        if (this.eat(81)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (this.eat(12));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: false,\n          allowInexact: false\n        });\n        return this.finishNode(node, \"InterfaceTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectPropertyKey\",\n      value: function flowParseObjectPropertyKey() {\n        return this.match(130) || this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n      }\n    }, {\n      key: \"flowParseObjectTypeIndexer\",\n      value: function flowParseObjectTypeIndexer(node, isStatic, variance) {\n        node.static = isStatic;\n\n        if (this.lookahead().type === 14) {\n          node.id = this.flowParseObjectPropertyKey();\n          node.key = this.flowParseTypeInitialiser();\n        } else {\n          node.id = null;\n          node.key = this.flowParseType();\n        }\n\n        this.expect(3);\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n        return this.finishNode(node, \"ObjectTypeIndexer\");\n      }\n    }, {\n      key: \"flowParseObjectTypeInternalSlot\",\n      value: function flowParseObjectTypeInternalSlot(node, isStatic) {\n        node.static = isStatic;\n        node.id = this.flowParseObjectPropertyKey();\n        this.expect(3);\n        this.expect(3);\n\n        if (this.match(47) || this.match(10)) {\n          node.method = true;\n          node.optional = false;\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n        } else {\n          node.method = false;\n\n          if (this.eat(17)) {\n            node.optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n        }\n\n        return this.finishNode(node, \"ObjectTypeInternalSlot\");\n      }\n    }, {\n      key: \"flowParseObjectTypeMethodish\",\n      value: function flowParseObjectTypeMethodish(node) {\n        node.params = [];\n        node.rest = null;\n        node.typeParameters = null;\n        node.this = null;\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        this.expect(10);\n\n        if (this.match(78)) {\n          node.this = this.flowParseFunctionTypeParam(true);\n          node.this.name = null;\n\n          if (!this.match(11)) {\n            this.expect(12);\n          }\n        }\n\n        while (!this.match(11) && !this.match(21)) {\n          node.params.push(this.flowParseFunctionTypeParam(false));\n\n          if (!this.match(11)) {\n            this.expect(12);\n          }\n        }\n\n        if (this.eat(21)) {\n          node.rest = this.flowParseFunctionTypeParam(false);\n        }\n\n        this.expect(11);\n        node.returnType = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectTypeCallProperty\",\n      value: function flowParseObjectTypeCallProperty(node, isStatic) {\n        var valueNode = this.startNode();\n        node.static = isStatic;\n        node.value = this.flowParseObjectTypeMethodish(valueNode);\n        return this.finishNode(node, \"ObjectTypeCallProperty\");\n      }\n    }, {\n      key: \"flowParseObjectType\",\n      value: function flowParseObjectType(_ref67) {\n        var allowStatic = _ref67.allowStatic,\n            allowExact = _ref67.allowExact,\n            allowSpread = _ref67.allowSpread,\n            allowProto = _ref67.allowProto,\n            allowInexact = _ref67.allowInexact;\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var nodeStart = this.startNode();\n        nodeStart.callProperties = [];\n        nodeStart.properties = [];\n        nodeStart.indexers = [];\n        nodeStart.internalSlots = [];\n        var endDelim;\n        var exact;\n        var inexact = false;\n\n        if (allowExact && this.match(6)) {\n          this.expect(6);\n          endDelim = 9;\n          exact = true;\n        } else {\n          this.expect(5);\n          endDelim = 8;\n          exact = false;\n        }\n\n        nodeStart.exact = exact;\n\n        while (!this.match(endDelim)) {\n          var isStatic = false;\n          var protoStartLoc = null;\n          var inexactStartLoc = null;\n          var node = this.startNode();\n\n          if (allowProto && this.isContextual(115)) {\n            var lookahead = this.lookahead();\n\n            if (lookahead.type !== 14 && lookahead.type !== 17) {\n              this.next();\n              protoStartLoc = this.state.startLoc;\n              allowStatic = false;\n            }\n          }\n\n          if (allowStatic && this.isContextual(104)) {\n            var _lookahead = this.lookahead();\n\n            if (_lookahead.type !== 14 && _lookahead.type !== 17) {\n              this.next();\n              isStatic = true;\n            }\n          }\n\n          var variance = this.flowParseVariance();\n\n          if (this.eat(0)) {\n            if (protoStartLoc != null) {\n              this.unexpected(protoStartLoc);\n            }\n\n            if (this.eat(0)) {\n              if (variance) {\n                this.unexpected(variance.loc.start);\n              }\n\n              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n            } else {\n              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n            }\n          } else if (this.match(10) || this.match(47)) {\n            if (protoStartLoc != null) {\n              this.unexpected(protoStartLoc);\n            }\n\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n\n            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n          } else {\n            var kind = \"init\";\n\n            if (this.isContextual(98) || this.isContextual(103)) {\n              var _lookahead2 = this.lookahead();\n\n              if (tokenIsLiteralPropertyName(_lookahead2.type)) {\n                kind = this.state.value;\n                this.next();\n              }\n            }\n\n            var propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n            if (propOrInexact === null) {\n              inexact = true;\n              inexactStartLoc = this.state.lastTokStartLoc;\n            } else {\n              nodeStart.properties.push(propOrInexact);\n            }\n          }\n\n          this.flowObjectTypeSemicolon();\n\n          if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n            this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n              at: inexactStartLoc\n            });\n          }\n        }\n\n        this.expect(endDelim);\n\n        if (allowSpread) {\n          nodeStart.inexact = inexact;\n        }\n\n        var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n        this.state.inType = oldInType;\n        return out;\n      }\n    }, {\n      key: \"flowParseObjectTypeProperty\",\n      value: function flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n        if (this.eat(21)) {\n          var isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n          if (isInexactToken) {\n            if (!allowSpread) {\n              this.raise(FlowErrors.InexactInsideNonObject, {\n                at: this.state.lastTokStartLoc\n              });\n            } else if (!allowInexact) {\n              this.raise(FlowErrors.InexactInsideExact, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n\n            if (variance) {\n              this.raise(FlowErrors.InexactVariance, {\n                at: variance\n              });\n            }\n\n            return null;\n          }\n\n          if (!allowSpread) {\n            this.raise(FlowErrors.UnexpectedSpreadType, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n\n          if (variance) {\n            this.raise(FlowErrors.SpreadVariance, {\n              at: variance\n            });\n          }\n\n          node.argument = this.flowParseType();\n          return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n        } else {\n          node.key = this.flowParseObjectPropertyKey();\n          node.static = isStatic;\n          node.proto = protoStartLoc != null;\n          node.kind = kind;\n          var optional = false;\n\n          if (this.match(47) || this.match(10)) {\n            node.method = true;\n\n            if (protoStartLoc != null) {\n              this.unexpected(protoStartLoc);\n            }\n\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n\n            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n            if (kind === \"get\" || kind === \"set\") {\n              this.flowCheckGetterSetterParams(node);\n            }\n\n            if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n              this.raise(FlowErrors.ThisParamBannedInConstructor, {\n                at: node.value.this\n              });\n            }\n          } else {\n            if (kind !== \"init\") this.unexpected();\n            node.method = false;\n\n            if (this.eat(17)) {\n              optional = true;\n            }\n\n            node.value = this.flowParseTypeInitialiser();\n            node.variance = variance;\n          }\n\n          node.optional = optional;\n          return this.finishNode(node, \"ObjectTypeProperty\");\n        }\n      }\n    }, {\n      key: \"flowCheckGetterSetterParams\",\n      value: function flowCheckGetterSetterParams(property) {\n        var paramCount = property.kind === \"get\" ? 0 : 1;\n        var length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n        if (property.value.this) {\n          this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n            at: property.value.this\n          });\n        }\n\n        if (length !== paramCount) {\n          this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n            at: property\n          });\n        }\n\n        if (property.kind === \"set\" && property.value.rest) {\n          this.raise(Errors.BadSetterRestParameter, {\n            at: property\n          });\n        }\n      }\n    }, {\n      key: \"flowObjectTypeSemicolon\",\n      value: function flowObjectTypeSemicolon() {\n        if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n          this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseQualifiedTypeIdentifier\",\n      value: function flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n        startPos = startPos || this.state.start;\n        startLoc = startLoc || this.state.startLoc;\n        var node = id || this.flowParseRestrictedIdentifier(true);\n\n        while (this.eat(16)) {\n          var node2 = this.startNodeAt(startPos, startLoc);\n          node2.qualification = node;\n          node2.id = this.flowParseRestrictedIdentifier(true);\n          node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"flowParseGenericType\",\n      value: function flowParseGenericType(startPos, startLoc, id) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.typeParameters = null;\n        node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        return this.finishNode(node, \"GenericTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeofType\",\n      value: function flowParseTypeofType() {\n        var node = this.startNode();\n        this.expect(87);\n        node.argument = this.flowParsePrimaryType();\n        return this.finishNode(node, \"TypeofTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTupleType\",\n      value: function flowParseTupleType() {\n        var node = this.startNode();\n        node.types = [];\n        this.expect(0);\n\n        while (this.state.pos < this.length && !this.match(3)) {\n          node.types.push(this.flowParseType());\n          if (this.match(3)) break;\n          this.expect(12);\n        }\n\n        this.expect(3);\n        return this.finishNode(node, \"TupleTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParam\",\n      value: function flowParseFunctionTypeParam(first) {\n        var name = null;\n        var optional = false;\n        var typeAnnotation = null;\n        var node = this.startNode();\n        var lh = this.lookahead();\n        var isThis = this.state.type === 78;\n\n        if (lh.type === 14 || lh.type === 17) {\n          if (isThis && !first) {\n            this.raise(FlowErrors.ThisParamMustBeFirst, {\n              at: node\n            });\n          }\n\n          name = this.parseIdentifier(isThis);\n\n          if (this.eat(17)) {\n            optional = true;\n\n            if (isThis) {\n              this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n                at: node\n              });\n            }\n          }\n\n          typeAnnotation = this.flowParseTypeInitialiser();\n        } else {\n          typeAnnotation = this.flowParseType();\n        }\n\n        node.name = name;\n        node.optional = optional;\n        node.typeAnnotation = typeAnnotation;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"reinterpretTypeAsFunctionTypeParam\",\n      value: function reinterpretTypeAsFunctionTypeParam(type) {\n        var node = this.startNodeAt(type.start, type.loc.start);\n        node.name = null;\n        node.optional = false;\n        node.typeAnnotation = type;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParams\",\n      value: function flowParseFunctionTypeParams() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var rest = null;\n        var _this = null;\n\n        if (this.match(78)) {\n          _this = this.flowParseFunctionTypeParam(true);\n          _this.name = null;\n\n          if (!this.match(11)) {\n            this.expect(12);\n          }\n        }\n\n        while (!this.match(11) && !this.match(21)) {\n          params.push(this.flowParseFunctionTypeParam(false));\n\n          if (!this.match(11)) {\n            this.expect(12);\n          }\n        }\n\n        if (this.eat(21)) {\n          rest = this.flowParseFunctionTypeParam(false);\n        }\n\n        return {\n          params: params,\n          rest: rest,\n          _this: _this\n        };\n      }\n    }, {\n      key: \"flowIdentToTypeAnnotation\",\n      value: function flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n        switch (id.name) {\n          case \"any\":\n            return this.finishNode(node, \"AnyTypeAnnotation\");\n\n          case \"bool\":\n          case \"boolean\":\n            return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n          case \"mixed\":\n            return this.finishNode(node, \"MixedTypeAnnotation\");\n\n          case \"empty\":\n            return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n          case \"number\":\n            return this.finishNode(node, \"NumberTypeAnnotation\");\n\n          case \"string\":\n            return this.finishNode(node, \"StringTypeAnnotation\");\n\n          case \"symbol\":\n            return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n          default:\n            this.checkNotUnderscore(id.name);\n            return this.flowParseGenericType(startPos, startLoc, id);\n        }\n      }\n    }, {\n      key: \"flowParsePrimaryType\",\n      value: function flowParsePrimaryType() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.startNode();\n        var tmp;\n        var type;\n        var isGroupedType = false;\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n        switch (this.state.type) {\n          case 5:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: false,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: true\n            });\n\n          case 6:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: true,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: false\n            });\n\n          case 0:\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseTupleType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n            return type;\n\n          case 47:\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(10);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(11);\n            this.expect(19);\n            node.returnType = this.flowParseType();\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n          case 10:\n            this.next();\n\n            if (!this.match(11) && !this.match(21)) {\n              if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n                var token = this.lookahead().type;\n                isGroupedType = token !== 17 && token !== 14;\n              } else {\n                isGroupedType = true;\n              }\n            }\n\n            if (isGroupedType) {\n              this.state.noAnonFunctionType = false;\n              type = this.flowParseType();\n              this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n              if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n                this.expect(11);\n                return type;\n              } else {\n                this.eat(12);\n              }\n            }\n\n            if (type) {\n              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n            } else {\n              tmp = this.flowParseFunctionTypeParams();\n            }\n\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(11);\n            this.expect(19);\n            node.returnType = this.flowParseType();\n            node.typeParameters = null;\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n          case 129:\n            return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n          case 85:\n          case 86:\n            node.value = this.match(85);\n            this.next();\n            return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n          case 53:\n            if (this.state.value === \"-\") {\n              this.next();\n\n              if (this.match(130)) {\n                return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n              }\n\n              if (this.match(131)) {\n                return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n              }\n\n              throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n                at: this.state.startLoc\n              });\n            }\n\n            throw this.unexpected();\n\n          case 130:\n            return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n          case 131:\n            return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n          case 88:\n            this.next();\n            return this.finishNode(node, \"VoidTypeAnnotation\");\n\n          case 84:\n            this.next();\n            return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n          case 78:\n            this.next();\n            return this.finishNode(node, \"ThisTypeAnnotation\");\n\n          case 55:\n            this.next();\n            return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n          case 87:\n            return this.flowParseTypeofType();\n\n          default:\n            if (tokenIsKeyword(this.state.type)) {\n              var label = tokenLabelName(this.state.type);\n              this.next();\n              return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"createIdentifier\", this).call(this, node, label);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              if (this.isContextual(125)) {\n                return this.flowParseInterfaceType();\n              }\n\n              return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n            }\n\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParsePostfixType\",\n      value: function flowParsePostfixType() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var type = this.flowParsePrimaryType();\n        var seenOptionalIndexedAccess = false;\n\n        while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n          var node = this.startNodeAt(startPos, startLoc);\n          var optional = this.eat(18);\n          seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n          this.expect(0);\n\n          if (!optional && this.match(3)) {\n            node.elementType = type;\n            this.next();\n            type = this.finishNode(node, \"ArrayTypeAnnotation\");\n          } else {\n            node.objectType = type;\n            node.indexType = this.flowParseType();\n            this.expect(3);\n\n            if (seenOptionalIndexedAccess) {\n              node.optional = optional;\n              type = this.finishNode(node, \"OptionalIndexedAccessType\");\n            } else {\n              type = this.finishNode(node, \"IndexedAccessType\");\n            }\n          }\n        }\n\n        return type;\n      }\n    }, {\n      key: \"flowParsePrefixType\",\n      value: function flowParsePrefixType() {\n        var node = this.startNode();\n\n        if (this.eat(17)) {\n          node.typeAnnotation = this.flowParsePrefixType();\n          return this.finishNode(node, \"NullableTypeAnnotation\");\n        } else {\n          return this.flowParsePostfixType();\n        }\n      }\n    }, {\n      key: \"flowParseAnonFunctionWithoutParens\",\n      value: function flowParseAnonFunctionWithoutParens() {\n        var param = this.flowParsePrefixType();\n\n        if (!this.state.noAnonFunctionType && this.eat(19)) {\n          var node = this.startNodeAt(param.start, param.loc.start);\n          node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n          node.rest = null;\n          node.this = null;\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        return param;\n      }\n    }, {\n      key: \"flowParseIntersectionType\",\n      value: function flowParseIntersectionType() {\n        var node = this.startNode();\n        this.eat(45);\n        var type = this.flowParseAnonFunctionWithoutParens();\n        node.types = [type];\n\n        while (this.eat(45)) {\n          node.types.push(this.flowParseAnonFunctionWithoutParens());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseUnionType\",\n      value: function flowParseUnionType() {\n        var node = this.startNode();\n        this.eat(43);\n        var type = this.flowParseIntersectionType();\n        node.types = [type];\n\n        while (this.eat(43)) {\n          node.types.push(this.flowParseIntersectionType());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseType\",\n      value: function flowParseType() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var type = this.flowParseUnionType();\n        this.state.inType = oldInType;\n        return type;\n      }\n    }, {\n      key: \"flowParseTypeOrImplicitInstantiation\",\n      value: function flowParseTypeOrImplicitInstantiation() {\n        if (this.state.type === 128 && this.state.value === \"_\") {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var node = this.parseIdentifier();\n          return this.flowParseGenericType(startPos, startLoc, node);\n        } else {\n          return this.flowParseType();\n        }\n      }\n    }, {\n      key: \"flowParseTypeAnnotation\",\n      value: function flowParseTypeAnnotation() {\n        var node = this.startNode();\n        node.typeAnnotation = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"TypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeAnnotatableIdentifier\",\n      value: function flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n        var ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n        if (this.match(14)) {\n          ident.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(ident);\n        }\n\n        return ident;\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"flowParseVariance\",\n      value: function flowParseVariance() {\n        var variance = null;\n\n        if (this.match(53)) {\n          variance = this.startNode();\n\n          if (this.state.value === \"+\") {\n            variance.kind = \"plus\";\n          } else {\n            variance.kind = \"minus\";\n          }\n\n          this.next();\n          this.finishNode(variance, \"Variance\");\n        }\n\n        return variance;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpressionBody) {\n        var _this12 = this;\n\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (allowExpressionBody) {\n          return this.forwardNoArrowParamsConversionAt(node, function () {\n            return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseFunctionBody\", _this12).call(_this12, node, true, isMethod);\n          });\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseFunctionBody\", this).call(this, node, false, isMethod);\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(14)) {\n          var typeNode = this.startNode();\n\n          var _this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser();\n\n          var _this$flowParseTypeAn4 = (0, _slicedToArray2.default)(_this$flowParseTypeAn3, 2);\n\n          typeNode.typeAnnotation = _this$flowParseTypeAn4[0];\n          node.predicate = _this$flowParseTypeAn4[1];\n          node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"parseStatement\",\n      value: function parseStatement(context, topLevel) {\n        if (this.state.strict && this.isContextual(125)) {\n          var lookahead = this.lookahead();\n\n          if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n            var node = this.startNode();\n            this.next();\n            return this.flowParseInterface(node);\n          }\n        } else if (this.shouldParseEnums() && this.isContextual(122)) {\n          var _node = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_node);\n        }\n\n        var stmt = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseStatement\", this).call(this, context, topLevel);\n\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n\n        return stmt;\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type === \"Identifier\") {\n          if (expr.name === \"declare\") {\n            if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n              return this.flowParseDeclare(node);\n            }\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (expr.name === \"interface\") {\n              return this.flowParseInterface(node);\n            } else if (expr.name === \"type\") {\n              return this.flowParseTypeAlias(node);\n            } else if (expr.name === \"opaque\") {\n              return this.flowParseOpaqueType(node, false);\n            }\n          }\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        var type = this.state.type;\n\n        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n          return !this.state.containsEsc;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        var type = this.state.type;\n\n        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n          return this.state.containsEsc;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.shouldParseEnums() && this.isContextual(122)) {\n          var node = this.startNode();\n          this.next();\n          return this.flowParseEnumDeclaration(node);\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n        var _this13 = this;\n\n        if (!this.match(17)) return expr;\n\n        if (this.state.maybeInArrowParameters) {\n          var nextCh = this.lookaheadCharCode();\n\n          if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n            this.setOptionalParametersError(refExpressionErrors);\n            return expr;\n          }\n        }\n\n        this.expect(17);\n        var state = this.state.clone();\n        var originalNoArrowAt = this.state.noArrowAt;\n        var node = this.startNodeAt(startPos, startLoc);\n\n        var _this$tryParseConditi = this.tryParseConditionalConsequent(),\n            consequent = _this$tryParseConditi.consequent,\n            failed = _this$tryParseConditi.failed;\n\n        var _this$getArrowLikeExp = this.getArrowLikeExpressions(consequent),\n            _this$getArrowLikeExp2 = (0, _slicedToArray2.default)(_this$getArrowLikeExp, 2),\n            valid = _this$getArrowLikeExp2[0],\n            invalid = _this$getArrowLikeExp2[1];\n\n        if (failed || invalid.length > 0) {\n          var noArrowAt = (0, _toConsumableArray2.default)(originalNoArrowAt);\n\n          if (invalid.length > 0) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt;\n\n            for (var i = 0; i < invalid.length; i++) {\n              noArrowAt.push(invalid[i].start);\n            }\n\n            var _this$tryParseConditi2 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi2.consequent;\n            failed = _this$tryParseConditi2.failed;\n\n            var _this$getArrowLikeExp3 = this.getArrowLikeExpressions(consequent);\n\n            var _this$getArrowLikeExp4 = (0, _slicedToArray2.default)(_this$getArrowLikeExp3, 2);\n\n            valid = _this$getArrowLikeExp4[0];\n            invalid = _this$getArrowLikeExp4[1];\n          }\n\n          if (failed && valid.length > 1) {\n            this.raise(FlowErrors.AmbiguousConditionalArrow, {\n              at: state.startLoc\n            });\n          }\n\n          if (failed && valid.length === 1) {\n            this.state = state;\n            noArrowAt.push(valid[0].start);\n            this.state.noArrowAt = noArrowAt;\n\n            var _this$tryParseConditi3 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi3.consequent;\n            failed = _this$tryParseConditi3.failed;\n          }\n        }\n\n        this.getArrowLikeExpressions(consequent, true);\n        this.state.noArrowAt = originalNoArrowAt;\n        this.expect(14);\n        node.test = expr;\n        node.consequent = consequent;\n        node.alternate = this.forwardNoArrowParamsConversionAt(node, function () {\n          return _this13.parseMaybeAssign(undefined, undefined);\n        });\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n    }, {\n      key: \"tryParseConditionalConsequent\",\n      value: function tryParseConditionalConsequent() {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        var consequent = this.parseMaybeAssignAllowIn();\n        var failed = !this.match(14);\n        this.state.noArrowParamsConversionAt.pop();\n        return {\n          consequent: consequent,\n          failed: failed\n        };\n      }\n    }, {\n      key: \"getArrowLikeExpressions\",\n      value: function getArrowLikeExpressions(node, disallowInvalid) {\n        var _this14 = this;\n\n        var stack = [node];\n        var arrows = [];\n\n        while (stack.length !== 0) {\n          var _node2 = stack.pop();\n\n          if (_node2.type === \"ArrowFunctionExpression\") {\n            if (_node2.typeParameters || !_node2.returnType) {\n              this.finishArrowValidation(_node2);\n            } else {\n              arrows.push(_node2);\n            }\n\n            stack.push(_node2.body);\n          } else if (_node2.type === \"ConditionalExpression\") {\n            stack.push(_node2.consequent);\n            stack.push(_node2.alternate);\n          }\n        }\n\n        if (disallowInvalid) {\n          arrows.forEach(function (node) {\n            return _this14.finishArrowValidation(node);\n          });\n          return [arrows, []];\n        }\n\n        return partition(arrows, function (node) {\n          return node.params.every(function (param) {\n            return _this14.isAssignable(param, true);\n          });\n        });\n      }\n    }, {\n      key: \"finishArrowValidation\",\n      value: function finishArrowValidation(node) {\n        var _node$extra;\n\n        this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"checkParams\", this).call(this, node, false, true);\n        this.scope.exit();\n      }\n    }, {\n      key: \"forwardNoArrowParamsConversionAt\",\n      value: function forwardNoArrowParamsConversionAt(node, parse) {\n        var result;\n\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          this.state.noArrowParamsConversionAt.push(this.state.start);\n          result = parse();\n          this.state.noArrowParamsConversionAt.pop();\n        } else {\n          result = parse();\n        }\n\n        return result;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(17)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(14)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"assertModuleNodeAllowed\",\n      value: function assertModuleNodeAllowed(node) {\n        if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n          return;\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"assertModuleNodeAllowed\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var decl = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseExport\", this).call(this, node);\n\n        if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n          decl.exportKind = decl.exportKind || \"value\";\n        }\n\n        return decl;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        if (this.isContextual(126)) {\n          node.exportKind = \"type\";\n          var declarationNode = this.startNode();\n          this.next();\n\n          if (this.match(5)) {\n            node.specifiers = this.parseExportSpecifiers(true);\n            this.parseExportFrom(node);\n            return null;\n          } else {\n            return this.flowParseTypeAlias(declarationNode);\n          }\n        } else if (this.isContextual(127)) {\n          node.exportKind = \"type\";\n\n          var _declarationNode = this.startNode();\n\n          this.next();\n          return this.flowParseOpaqueType(_declarationNode, false);\n        } else if (this.isContextual(125)) {\n          node.exportKind = \"type\";\n\n          var _declarationNode2 = this.startNode();\n\n          this.next();\n          return this.flowParseInterface(_declarationNode2);\n        } else if (this.shouldParseEnums() && this.isContextual(122)) {\n          node.exportKind = \"value\";\n\n          var _declarationNode3 = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_declarationNode3);\n        } else {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"eatExportStar\",\n      value: function eatExportStar(node) {\n        if ((0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"eatExportStar\", this).apply(this, arguments)) return true;\n\n        if (this.isContextual(126) && this.lookahead().type === 55) {\n          node.exportKind = \"type\";\n          this.next();\n          this.next();\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeParseExportNamespaceSpecifier\",\n      value: function maybeParseExportNamespaceSpecifier(node) {\n        var startLoc = this.state.startLoc;\n        var hasNamespace = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"maybeParseExportNamespaceSpecifier\", this).call(this, node);\n\n        if (hasNamespace && node.exportKind === \"type\") {\n          this.unexpected(startLoc);\n        }\n\n        return hasNamespace;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state) {\n        var startLoc = this.state.startLoc;\n\n        if (this.isContextual(121)) {\n          if (this.parseClassMemberFromModifier(classBody, member)) {\n            return;\n          }\n\n          member.declare = true;\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassMember\", this).call(this, classBody, member, state);\n\n        if (member.declare) {\n          if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n            this.raise(FlowErrors.DeclareClassElement, {\n              at: startLoc\n            });\n          } else if (member.value) {\n            this.raise(FlowErrors.DeclareClassFieldInitializer, {\n              at: member.value\n            });\n          }\n        }\n      }\n    }, {\n      key: \"isIterator\",\n      value: function isIterator(word) {\n        return word === \"iterator\" || word === \"asyncIterator\";\n      }\n    }, {\n      key: \"readIterator\",\n      value: function readIterator() {\n        var word = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"readWord1\", this).call(this);\n        var fullWord = \"@@\" + word;\n\n        if (!this.isIterator(word) || !this.state.inType) {\n          this.raise(Errors.InvalidIdentifier, {\n            at: this.state.curPosition(),\n            identifierName: fullWord\n          });\n        }\n\n        this.finishToken(128, fullWord);\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 123 && next === 124) {\n          return this.finishOp(6, 2);\n        } else if (this.state.inType && (code === 62 || code === 60)) {\n          return this.finishOp(code === 62 ? 48 : 47, 1);\n        } else if (this.state.inType && code === 63) {\n          if (next === 46) {\n            return this.finishOp(18, 2);\n          }\n\n          return this.finishOp(17, 1);\n        } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n          this.state.pos += 2;\n          return this.readIterator();\n        } else {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        if (node.type === \"TypeCastExpression\") {\n          return this.isAssignable(node.expression, isBinding);\n        } else {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isAssignable\", this).call(this, node, isBinding);\n        }\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (!isLHS && node.type === \"AssignmentExpression\" && node.left.type === \"TypeCastExpression\") {\n          node.left = this.typeCastToParameter(node.left);\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"toAssignable\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList, trailingCommaLoc, isLHS) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n\n          if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n            exprList[i] = this.typeCastToParameter(expr);\n          }\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"toAssignableList\", this).call(this, exprList, trailingCommaLoc, isLHS);\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isParenthesizedExpr) {\n        for (var i = 0; i < exprList.length; i++) {\n          var _expr$extra;\n\n          var expr = exprList[i];\n\n          if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n            this.raise(FlowErrors.TypeCastInPattern, {\n              at: expr.typeAnnotation\n            });\n          }\n        }\n\n        return exprList;\n      }\n    }, {\n      key: \"parseArrayLike\",\n      value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n        var node = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseArrayLike\", this).call(this, close, canBePattern, isTuple, refExpressionErrors);\n\n        if (canBePattern && !this.state.maybeInArrowParameters) {\n          this.toReferencedList(node.elements);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"isValidLVal\",\n      value: function isValidLVal(type) {\n        var _get6;\n\n        for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n          rest[_key7 - 1] = arguments[_key7];\n        }\n\n        return type === \"TypeCastExpression\" || (_get6 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isValidLVal\", this)).call.apply(_get6, [this, type].concat(rest));\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        if (this.match(14)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (this.match(14)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.match(47) || (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(14) || (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"isNonstaticConstructor\",\n      value: function isNonstaticConstructor(method) {\n        return !this.match(14) && (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isNonstaticConstructor\", this).call(this, method);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        if (method.variance) {\n          this.unexpected(method.variance.loc.start);\n        }\n\n        delete method.variance;\n\n        if (this.match(47)) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n        if (method.params && isConstructor) {\n          var params = method.params;\n\n          if (params.length > 0 && this.isThisParam(params[0])) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: method\n            });\n          }\n        } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n          var _params2 = method.value.params;\n\n          if (_params2.length > 0 && this.isThisParam(_params2[0])) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: method\n            });\n          }\n        }\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        if (method.variance) {\n          this.unexpected(method.variance.loc.start);\n        }\n\n        delete method.variance;\n\n        if (this.match(47)) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && this.match(47)) {\n          node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        if (this.isContextual(110)) {\n          this.next();\n          var implemented = node.implements = [];\n\n          do {\n            var _node3 = this.startNode();\n\n            _node3.id = this.flowParseRestrictedIdentifier(true);\n\n            if (this.match(47)) {\n              _node3.typeParameters = this.flowParseTypeParameterInstantiation();\n            } else {\n              _node3.typeParameters = null;\n            }\n\n            implemented.push(this.finishNode(_node3, \"ClassImplements\"));\n          } while (this.eat(12));\n        }\n      }\n    }, {\n      key: \"checkGetterSetterParams\",\n      value: function checkGetterSetterParams(method) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"checkGetterSetterParams\", this).call(this, method);\n        var params = this.getObjectOrClassMethodParams(method);\n\n        if (params.length > 0) {\n          var param = params[0];\n\n          if (this.isThisParam(param) && method.kind === \"get\") {\n            this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n              at: param\n            });\n          } else if (this.isThisParam(param)) {\n            this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n              at: param\n            });\n          }\n        }\n      }\n    }, {\n      key: \"parsePropertyNamePrefixOperator\",\n      value: function parsePropertyNamePrefixOperator(node) {\n        node.variance = this.flowParseVariance();\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n        if (prop.variance) {\n          this.unexpected(prop.variance.loc.start);\n        }\n\n        delete prop.variance;\n        var typeParameters;\n\n        if (this.match(47) && !isAccessor) {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          if (!this.match(10)) this.unexpected();\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseObjPropValue\", this).call(this, prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n        if (typeParameters) {\n          (prop.value || prop).typeParameters = typeParameters;\n        }\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(17)) {\n          if (param.type !== \"Identifier\") {\n            this.raise(FlowErrors.PatternIsOptional, {\n              at: param\n            });\n          }\n\n          if (this.isThisParam(param)) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n              at: param\n            });\n          }\n\n          param.optional = true;\n        }\n\n        if (this.match(14)) {\n          param.typeAnnotation = this.flowParseTypeAnnotation();\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamAnnotationRequired, {\n            at: param\n          });\n        }\n\n        if (this.match(29) && this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamNoDefault, {\n            at: param\n          });\n        }\n\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault(startPos, startLoc, left) {\n        var node = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseMaybeDefault\", this).call(this, startPos, startLoc, left);\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(FlowErrors.TypeBeforeInitializer, {\n            at: node.typeAnnotation\n          });\n        }\n\n        return node;\n      }\n    }, {\n      key: \"shouldParseDefaultImport\",\n      value: function shouldParseDefaultImport(node) {\n        if (!hasTypeImportKind(node)) {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"shouldParseDefaultImport\", this).call(this, node);\n        }\n\n        return isMaybeDefaultImport(this.state.type);\n      }\n    }, {\n      key: \"parseImportSpecifierLocal\",\n      value: function parseImportSpecifierLocal(node, specifier, type) {\n        specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n        node.specifiers.push(this.finishImportSpecifier(specifier, type));\n      }\n    }, {\n      key: \"maybeParseDefaultImportSpecifier\",\n      value: function maybeParseDefaultImportSpecifier(node) {\n        node.importKind = \"value\";\n        var kind = null;\n\n        if (this.match(87)) {\n          kind = \"typeof\";\n        } else if (this.isContextual(126)) {\n          kind = \"type\";\n        }\n\n        if (kind) {\n          var lh = this.lookahead();\n          var type = lh.type;\n\n          if (kind === \"type\" && type === 55) {\n            this.unexpected(null, lh.type);\n          }\n\n          if (isMaybeDefaultImport(type) || type === 5 || type === 55) {\n            this.next();\n            node.importKind = kind;\n          }\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"maybeParseDefaultImportSpecifier\", this).call(this, node);\n      }\n    }, {\n      key: \"parseImportSpecifier\",\n      value: function parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n        var firstIdent = specifier.imported;\n        var specifierTypeKind = null;\n\n        if (firstIdent.type === \"Identifier\") {\n          if (firstIdent.name === \"type\") {\n            specifierTypeKind = \"type\";\n          } else if (firstIdent.name === \"typeof\") {\n            specifierTypeKind = \"typeof\";\n          }\n        }\n\n        var isBinding = false;\n\n        if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n          var as_ident = this.parseIdentifier(true);\n\n          if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n            specifier.imported = as_ident;\n            specifier.importKind = specifierTypeKind;\n            specifier.local = cloneIdentifier(as_ident);\n          } else {\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n            specifier.local = this.parseIdentifier();\n          }\n        } else {\n          if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n            specifier.imported = this.parseIdentifier(true);\n            specifier.importKind = specifierTypeKind;\n          } else {\n            if (importedIsString) {\n              throw this.raise(Errors.ImportBindingIsString, {\n                at: specifier,\n                importName: firstIdent.value\n              });\n            }\n\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n          }\n\n          if (this.eatContextual(93)) {\n            specifier.local = this.parseIdentifier();\n          } else {\n            isBinding = true;\n            specifier.local = cloneIdentifier(specifier.imported);\n          }\n        }\n\n        var specifierIsTypeImport = hasTypeImportKind(specifier);\n\n        if (isInTypeOnlyImport && specifierIsTypeImport) {\n          this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n            at: specifier\n          });\n        }\n\n        if (isInTypeOnlyImport || specifierIsTypeImport) {\n          this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n        }\n\n        if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n          this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n        }\n\n        return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        switch (this.state.type) {\n          case 78:\n            return this.parseIdentifier(true);\n\n          default:\n            return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseBindingAtom\", this).call(this);\n        }\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var kind = node.kind;\n\n        if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (this.match(14)) {\n          decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(14)) {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          node.returnType = this.flowParseTypeAnnotation();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(14) || (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n        var _this15 = this;\n\n        var _jsx;\n\n        var state = null;\n        var jsx;\n\n        if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseMaybeAssign\", _this15).call(_this15, refExpressionErrors, afterLeftParse);\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n          var currentContext = context[context.length - 1];\n\n          if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n            context.pop();\n          }\n        }\n\n        if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n          var _jsx2, _jsx3;\n\n          state = state || this.state.clone();\n          var typeParameters;\n          var arrow = this.tryParse(function (abort) {\n            var _arrowExpression$extr;\n\n            typeParameters = _this15.flowParseTypeParameterDeclaration();\n\n            var arrowExpression = _this15.forwardNoArrowParamsConversionAt(typeParameters, function () {\n              var result = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseMaybeAssign\", _this15).call(_this15, refExpressionErrors, afterLeftParse);\n\n              _this15.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            });\n\n            if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n\n            var expr = _this15.maybeUnwrapTypeCastExpression(arrowExpression);\n\n            if (expr.type !== \"ArrowFunctionExpression\") abort();\n            expr.typeParameters = typeParameters;\n\n            _this15.resetStartLocationFromNode(expr, typeParameters);\n\n            return arrowExpression;\n          }, state);\n          var arrowExpression = null;\n\n          if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n            if (!arrow.error && !arrow.aborted) {\n              if (arrow.node.async) {\n                this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n                  at: typeParameters\n                });\n              }\n\n              return arrow.node;\n            }\n\n            arrowExpression = arrow.node;\n          }\n\n          if ((_jsx2 = jsx) != null && _jsx2.node) {\n            this.state = jsx.failState;\n            return jsx.node;\n          }\n\n          if (arrowExpression) {\n            this.state = arrow.failState;\n            return arrowExpression;\n          }\n\n          if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n          if (arrow.thrown) throw arrow.error;\n          throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n            at: typeParameters\n          });\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseMaybeAssign\", this).call(this, refExpressionErrors, afterLeftParse);\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this16 = this;\n\n        if (this.match(14)) {\n          var result = this.tryParse(function () {\n            var oldNoAnonFunctionType = _this16.state.noAnonFunctionType;\n            _this16.state.noAnonFunctionType = true;\n\n            var typeNode = _this16.startNode();\n\n            var _this16$flowParseType = _this16.flowParseTypeAndPredicateInitialiser();\n\n            var _this16$flowParseType2 = (0, _slicedToArray2.default)(_this16$flowParseType, 2);\n\n            typeNode.typeAnnotation = _this16$flowParseType2[0];\n            node.predicate = _this16$flowParseType2[1];\n            _this16.state.noAnonFunctionType = oldNoAnonFunctionType;\n            if (_this16.canInsertSemicolon()) _this16.unexpected();\n            if (!_this16.match(19)) _this16.unexpected();\n            return typeNode;\n          });\n          if (result.thrown) return null;\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow(params) {\n        return this.match(14) || (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"shouldParseArrow\", this).call(this, params);\n      }\n    }, {\n      key: \"setArrowFunctionParameters\",\n      value: function setArrowFunctionParameters(node, params) {\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          node.params = params;\n        } else {\n          (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"setArrowFunctionParameters\", this).call(this, node, params);\n        }\n      }\n    }, {\n      key: \"checkParams\",\n      value: function checkParams(node, allowDuplicates, isArrowFunction) {\n        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          return;\n        }\n\n        for (var i = 0; i < node.params.length; i++) {\n          if (this.isThisParam(node.params[i]) && i > 0) {\n            this.raise(FlowErrors.ThisParamMustBeFirst, {\n              at: node.params[i]\n            });\n          }\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"checkParams\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseParenAndDistinguishExpression\",\n      value: function parseParenAndDistinguishExpression(canBeArrow) {\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseParenAndDistinguishExpression\", this).call(this, canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n      }\n    }, {\n      key: \"parseSubscripts\",\n      value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n        var _this17 = this;\n\n        if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(11, false);\n          base = this.finishNode(node, \"CallExpression\");\n        } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n          var state = this.state.clone();\n          var arrow = this.tryParse(function (abort) {\n            return _this17.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort();\n          }, state);\n          if (!arrow.error && !arrow.aborted) return arrow.node;\n          var result = this.tryParse(function () {\n            return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseSubscripts\", _this17).call(_this17, base, startPos, startLoc, noCalls);\n          }, state);\n          if (result.node && !result.error) return result.node;\n\n          if (arrow.node) {\n            this.state = arrow.failState;\n            return arrow.node;\n          }\n\n          if (result.node) {\n            this.state = result.failState;\n            return result.node;\n          }\n\n          throw arrow.error || result.error;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseSubscripts\", this).call(this, base, startPos, startLoc, noCalls);\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n        var _this18 = this;\n\n        if (this.match(18) && this.isLookaheadToken_lt()) {\n          subscriptState.optionalChainMember = true;\n\n          if (noCalls) {\n            subscriptState.stop = true;\n            return base;\n          }\n\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.typeArguments = this.flowParseTypeParameterInstantiation();\n          this.expect(10);\n          node.arguments = this.parseCallExpressionArguments(11, false);\n          node.optional = true;\n          return this.finishCallExpression(node, true);\n        } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n          var _node4 = this.startNodeAt(startPos, startLoc);\n\n          _node4.callee = base;\n          var result = this.tryParse(function () {\n            _node4.typeArguments = _this18.flowParseTypeParameterInstantiationCallOrNew();\n\n            _this18.expect(10);\n\n            _node4.arguments = _this18.parseCallExpressionArguments(11, false);\n            if (subscriptState.optionalChainMember) _node4.optional = false;\n            return _this18.finishCallExpression(_node4, subscriptState.optionalChainMember);\n          });\n\n          if (result.node) {\n            if (result.error) this.state = result.failState;\n            return result.node;\n          }\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, subscriptState);\n      }\n    }, {\n      key: \"parseNewCallee\",\n      value: function parseNewCallee(node) {\n        var _this19 = this;\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseNewCallee\", this).call(this, node);\n        var targs = null;\n\n        if (this.shouldParseTypes() && this.match(47)) {\n          targs = this.tryParse(function () {\n            return _this19.flowParseTypeParameterInstantiationCallOrNew();\n          }).node;\n        }\n\n        node.typeArguments = targs;\n      }\n    }, {\n      key: \"parseAsyncArrowWithTypeParameters\",\n      value: function parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        this.parseFunctionParams(node);\n        if (!this.parseArrow(node)) return;\n        return this.parseArrowExpression(node, undefined, true);\n      }\n    }, {\n      key: \"readToken_mult_modulo\",\n      value: function readToken_mult_modulo(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 42 && next === 47 && this.state.hasFlowComment) {\n          this.state.hasFlowComment = false;\n          this.state.pos += 2;\n          this.nextToken();\n          return;\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"readToken_mult_modulo\", this).call(this, code);\n      }\n    }, {\n      key: \"readToken_pipe_amp\",\n      value: function readToken_pipe_amp(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 124 && next === 125) {\n          this.finishOp(9, 2);\n          return;\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"readToken_pipe_amp\", this).call(this, code);\n      }\n    }, {\n      key: \"parseTopLevel\",\n      value: function parseTopLevel(file, program) {\n        var fileNode = (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseTopLevel\", this).call(this, file, program);\n\n        if (this.state.hasFlowComment) {\n          this.raise(FlowErrors.UnterminatedFlowComment, {\n            at: this.state.curPosition()\n          });\n        }\n\n        return fileNode;\n      }\n    }, {\n      key: \"skipBlockComment\",\n      value: function skipBlockComment() {\n        if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n          if (this.state.hasFlowComment) {\n            throw this.raise(FlowErrors.NestedFlowComment, {\n              at: this.state.startLoc\n            });\n          }\n\n          this.hasFlowCommentCompletion();\n          this.state.pos += this.skipFlowComment();\n          this.state.hasFlowComment = true;\n          return;\n        }\n\n        if (this.state.hasFlowComment) {\n          var end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n\n          if (end === -1) {\n            throw this.raise(Errors.UnterminatedComment, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos = end + 2 + 3;\n          return;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"skipBlockComment\", this).call(this);\n      }\n    }, {\n      key: \"skipFlowComment\",\n      value: function skipFlowComment() {\n        var pos = this.state.pos;\n        var shiftToFirstNonWhiteSpace = 2;\n\n        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n          shiftToFirstNonWhiteSpace++;\n        }\n\n        var ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n        var ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n        if (ch2 === 58 && ch3 === 58) {\n          return shiftToFirstNonWhiteSpace + 2;\n        }\n\n        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n          return shiftToFirstNonWhiteSpace + 12;\n        }\n\n        if (ch2 === 58 && ch3 !== 58) {\n          return shiftToFirstNonWhiteSpace;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"hasFlowCommentCompletion\",\n      value: function hasFlowCommentCompletion() {\n        var end = this.input.indexOf(\"*/\", this.state.pos);\n\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition()\n          });\n        }\n      }\n    }, {\n      key: \"flowEnumErrorBooleanMemberNotInitialized\",\n      value: function flowEnumErrorBooleanMemberNotInitialized(loc, _ref68) {\n        var enumName = _ref68.enumName,\n            memberName = _ref68.memberName;\n        this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n          at: loc,\n          memberName: memberName,\n          enumName: enumName\n        });\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberInitializer\",\n      value: function flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n        return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({\n          at: loc\n        }, enumContext));\n      }\n    }, {\n      key: \"flowEnumErrorNumberMemberNotInitialized\",\n      value: function flowEnumErrorNumberMemberNotInitialized(loc, _ref69) {\n        var enumName = _ref69.enumName,\n            memberName = _ref69.memberName;\n        this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n          at: loc,\n          enumName: enumName,\n          memberName: memberName\n        });\n      }\n    }, {\n      key: \"flowEnumErrorStringMemberInconsistentlyInitailized\",\n      value: function flowEnumErrorStringMemberInconsistentlyInitailized(node, _ref70) {\n        var enumName = _ref70.enumName;\n        this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n          at: node,\n          enumName: enumName\n        });\n      }\n    }, {\n      key: \"flowEnumMemberInit\",\n      value: function flowEnumMemberInit() {\n        var _this20 = this;\n\n        var startLoc = this.state.startLoc;\n\n        var endOfInit = function endOfInit() {\n          return _this20.match(12) || _this20.match(8);\n        };\n\n        switch (this.state.type) {\n          case 130:\n            {\n              var literal = this.parseNumericLiteral(this.state.value);\n\n              if (endOfInit()) {\n                return {\n                  type: \"number\",\n                  loc: literal.loc.start,\n                  value: literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                loc: startLoc\n              };\n            }\n\n          case 129:\n            {\n              var _literal = this.parseStringLiteral(this.state.value);\n\n              if (endOfInit()) {\n                return {\n                  type: \"string\",\n                  loc: _literal.loc.start,\n                  value: _literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                loc: startLoc\n              };\n            }\n\n          case 85:\n          case 86:\n            {\n              var _literal2 = this.parseBooleanLiteral(this.match(85));\n\n              if (endOfInit()) {\n                return {\n                  type: \"boolean\",\n                  loc: _literal2.loc.start,\n                  value: _literal2\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                loc: startLoc\n              };\n            }\n\n          default:\n            return {\n              type: \"invalid\",\n              loc: startLoc\n            };\n        }\n      }\n    }, {\n      key: \"flowEnumMemberRaw\",\n      value: function flowEnumMemberRaw() {\n        var loc = this.state.startLoc;\n        var id = this.parseIdentifier(true);\n        var init = this.eat(29) ? this.flowEnumMemberInit() : {\n          type: \"none\",\n          loc: loc\n        };\n        return {\n          id: id,\n          init: init\n        };\n      }\n    }, {\n      key: \"flowEnumCheckExplicitTypeMismatch\",\n      value: function flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n        var explicitType = context.explicitType;\n\n        if (explicitType === null) {\n          return;\n        }\n\n        if (explicitType !== expectedType) {\n          this.flowEnumErrorInvalidMemberInitializer(loc, context);\n        }\n      }\n    }, {\n      key: \"flowEnumMembers\",\n      value: function flowEnumMembers(_ref71) {\n        var enumName = _ref71.enumName,\n            explicitType = _ref71.explicitType;\n        var seenNames = new Set();\n        var members = {\n          booleanMembers: [],\n          numberMembers: [],\n          stringMembers: [],\n          defaultedMembers: []\n        };\n        var hasUnknownMembers = false;\n\n        while (!this.match(8)) {\n          if (this.eat(21)) {\n            hasUnknownMembers = true;\n            break;\n          }\n\n          var memberNode = this.startNode();\n\n          var _this$flowEnumMemberR = this.flowEnumMemberRaw(),\n              id = _this$flowEnumMemberR.id,\n              init = _this$flowEnumMemberR.init;\n\n          var memberName = id.name;\n\n          if (memberName === \"\") {\n            continue;\n          }\n\n          if (/^[a-z]/.test(memberName)) {\n            this.raise(FlowErrors.EnumInvalidMemberName, {\n              at: id,\n              memberName: memberName,\n              suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n              enumName: enumName\n            });\n          }\n\n          if (seenNames.has(memberName)) {\n            this.raise(FlowErrors.EnumDuplicateMemberName, {\n              at: id,\n              memberName: memberName,\n              enumName: enumName\n            });\n          }\n\n          seenNames.add(memberName);\n          var context = {\n            enumName: enumName,\n            explicitType: explicitType,\n            memberName: memberName\n          };\n          memberNode.id = id;\n\n          switch (init.type) {\n            case \"boolean\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n                memberNode.init = init.value;\n                members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n                break;\n              }\n\n            case \"number\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n                memberNode.init = init.value;\n                members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n                break;\n              }\n\n            case \"string\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n                memberNode.init = init.value;\n                members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n                break;\n              }\n\n            case \"invalid\":\n              {\n                throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n              }\n\n            case \"none\":\n              {\n                switch (explicitType) {\n                  case \"boolean\":\n                    this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                    break;\n\n                  case \"number\":\n                    this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                    break;\n\n                  default:\n                    members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n                }\n              }\n          }\n\n          if (!this.match(8)) {\n            this.expect(12);\n          }\n        }\n\n        return {\n          members: members,\n          hasUnknownMembers: hasUnknownMembers\n        };\n      }\n    }, {\n      key: \"flowEnumStringMembers\",\n      value: function flowEnumStringMembers(initializedMembers, defaultedMembers, _ref72) {\n        var enumName = _ref72.enumName;\n\n        if (initializedMembers.length === 0) {\n          return defaultedMembers;\n        } else if (defaultedMembers.length === 0) {\n          return initializedMembers;\n        } else if (defaultedMembers.length > initializedMembers.length) {\n          var _iterator2 = _createForOfIteratorHelper(initializedMembers),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var member = _step2.value;\n              this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n                enumName: enumName\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          return defaultedMembers;\n        } else {\n          var _iterator3 = _createForOfIteratorHelper(defaultedMembers),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _member = _step3.value;\n              this.flowEnumErrorStringMemberInconsistentlyInitailized(_member, {\n                enumName: enumName\n              });\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          return initializedMembers;\n        }\n      }\n    }, {\n      key: \"flowEnumParseExplicitType\",\n      value: function flowEnumParseExplicitType(_ref73) {\n        var enumName = _ref73.enumName;\n        if (!this.eatContextual(101)) return null;\n\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n            at: this.state.startLoc,\n            enumName: enumName\n          });\n        }\n\n        var value = this.state.value;\n        this.next();\n\n        if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n          this.raise(FlowErrors.EnumInvalidExplicitType, {\n            at: this.state.startLoc,\n            enumName: enumName,\n            invalidEnumType: value\n          });\n        }\n\n        return value;\n      }\n    }, {\n      key: \"flowEnumBody\",\n      value: function flowEnumBody(node, id) {\n        var _this21 = this;\n\n        var enumName = id.name;\n        var nameLoc = id.loc.start;\n        var explicitType = this.flowEnumParseExplicitType({\n          enumName: enumName\n        });\n        this.expect(5);\n\n        var _this$flowEnumMembers = this.flowEnumMembers({\n          enumName: enumName,\n          explicitType: explicitType\n        }),\n            members = _this$flowEnumMembers.members,\n            hasUnknownMembers = _this$flowEnumMembers.hasUnknownMembers;\n\n        node.hasUnknownMembers = hasUnknownMembers;\n\n        switch (explicitType) {\n          case \"boolean\":\n            node.explicitType = true;\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n\n          case \"number\":\n            node.explicitType = true;\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n\n          case \"string\":\n            node.explicitType = true;\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName: enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n\n          case \"symbol\":\n            node.members = members.defaultedMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumSymbolBody\");\n\n          default:\n            {\n              var empty = function empty() {\n                node.members = [];\n\n                _this21.expect(8);\n\n                return _this21.finishNode(node, \"EnumStringBody\");\n              };\n\n              node.explicitType = false;\n              var boolsLen = members.booleanMembers.length;\n              var numsLen = members.numberMembers.length;\n              var strsLen = members.stringMembers.length;\n              var defaultedLen = members.defaultedMembers.length;\n\n              if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n                return empty();\n              } else if (!boolsLen && !numsLen) {\n                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                  enumName: enumName\n                });\n                this.expect(8);\n                return this.finishNode(node, \"EnumStringBody\");\n              } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n                var _iterator4 = _createForOfIteratorHelper(members.defaultedMembers),\n                    _step4;\n\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var member = _step4.value;\n                    this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                      enumName: enumName,\n                      memberName: member.id.name\n                    });\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n\n                node.members = members.booleanMembers;\n                this.expect(8);\n                return this.finishNode(node, \"EnumBooleanBody\");\n              } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n                var _iterator5 = _createForOfIteratorHelper(members.defaultedMembers),\n                    _step5;\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var _member2 = _step5.value;\n                    this.flowEnumErrorNumberMemberNotInitialized(_member2.loc.start, {\n                      enumName: enumName,\n                      memberName: _member2.id.name\n                    });\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n\n                node.members = members.numberMembers;\n                this.expect(8);\n                return this.finishNode(node, \"EnumNumberBody\");\n              } else {\n                this.raise(FlowErrors.EnumInconsistentMemberValues, {\n                  at: nameLoc,\n                  enumName: enumName\n                });\n                return empty();\n              }\n            }\n        }\n      }\n    }, {\n      key: \"flowParseEnumDeclaration\",\n      value: function flowParseEnumDeclaration(node) {\n        var id = this.parseIdentifier();\n        node.id = id;\n        node.body = this.flowEnumBody(this.startNode(), id);\n        return this.finishNode(node, \"EnumDeclaration\");\n      }\n    }, {\n      key: \"isLookaheadToken_lt\",\n      value: function isLookaheadToken_lt() {\n        var next = this.nextTokenStart();\n\n        if (this.input.charCodeAt(next) === 60) {\n          var afterNext = this.input.charCodeAt(next + 1);\n          return afterNext !== 60 && afterNext !== 61;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeUnwrapTypeCastExpression\",\n      value: function maybeUnwrapTypeCastExpression(node) {\n        return node.type === \"TypeCastExpression\" ? node.expression : node;\n      }\n    }]);\n    return _class2;\n  }(superClass);\n};\n\nvar entities = {\n  __proto__: null,\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nvar JsxErrors = ParseErrorEnum(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2.default)([\"jsx\"])))(function (_) {\n  return {\n    AttributeIsEmpty: _(\"JSX attributes must only be assigned a non-empty expression.\"),\n    MissingClosingTagElement: _(function (_ref74) {\n      var openingTagName = _ref74.openingTagName;\n      return \"Expected corresponding JSX closing tag for <\".concat(openingTagName, \">.\");\n    }),\n    MissingClosingTagFragment: _(\"Expected corresponding JSX closing tag for <>.\"),\n    UnexpectedSequenceExpression: _(\"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\"),\n    UnexpectedToken: _(function (_ref75) {\n      var unexpected = _ref75.unexpected,\n          HTMLEntity = _ref75.HTMLEntity;\n      return \"Unexpected token `\".concat(unexpected, \"`. Did you mean `\").concat(HTMLEntity, \"` or `{'\").concat(unexpected, \"'}`?\");\n    }),\n    UnsupportedJsxValue: _(\"JSX value should be either an expression or a quoted JSX text.\"),\n    UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n    UnwrappedAdjacentJSXElements: _(\"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\")\n  };\n});\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = function jsx(superClass) {\n  return /*#__PURE__*/function (_superClass3) {\n    (0, _inherits2.default)(_class3, _superClass3);\n\n    var _super10 = _createSuper(_class3);\n\n    function _class3() {\n      (0, _classCallCheck2.default)(this, _class3);\n      return _super10.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class3, [{\n      key: \"jsxReadToken\",\n      value: function jsxReadToken() {\n        var out = \"\";\n        var chunkStart = this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(JsxErrors.UnterminatedJsxContent, {\n              at: this.state.startLoc\n            });\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n\n          switch (ch) {\n            case 60:\n            case 123:\n              if (this.state.pos === this.state.start) {\n                if (ch === 60 && this.state.canStartJSXElement) {\n                  ++this.state.pos;\n                  return this.finishToken(138);\n                }\n\n                return (0, _get17.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"getTokenFromCode\", this).call(this, ch);\n              }\n\n              out += this.input.slice(chunkStart, this.state.pos);\n              return this.finishToken(137, out);\n\n            case 38:\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadEntity();\n              chunkStart = this.state.pos;\n              break;\n\n            case 62:\n            case 125:\n            default:\n              if (isNewLine(ch)) {\n                out += this.input.slice(chunkStart, this.state.pos);\n                out += this.jsxReadNewLine(true);\n                chunkStart = this.state.pos;\n              } else {\n                ++this.state.pos;\n              }\n\n          }\n        }\n      }\n    }, {\n      key: \"jsxReadNewLine\",\n      value: function jsxReadNewLine(normalizeCRLF) {\n        var ch = this.input.charCodeAt(this.state.pos);\n        var out;\n        ++this.state.pos;\n\n        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n          out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n        } else {\n          out = String.fromCharCode(ch);\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        return out;\n      }\n    }, {\n      key: \"jsxReadString\",\n      value: function jsxReadString(quote) {\n        var out = \"\";\n        var chunkStart = ++this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(Errors.UnterminatedString, {\n              at: this.state.startLoc\n            });\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n          if (ch === quote) break;\n\n          if (ch === 38) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n          } else if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(false);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos++);\n        return this.finishToken(129, out);\n      }\n    }, {\n      key: \"jsxReadEntity\",\n      value: function jsxReadEntity() {\n        var startPos = ++this.state.pos;\n\n        if (this.codePointAtPos(this.state.pos) === 35) {\n          ++this.state.pos;\n          var radix = 10;\n\n          if (this.codePointAtPos(this.state.pos) === 120) {\n            radix = 16;\n            ++this.state.pos;\n          }\n\n          var codePoint = this.readInt(radix, undefined, false, \"bail\");\n\n          if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n            ++this.state.pos;\n            return String.fromCodePoint(codePoint);\n          }\n        } else {\n          var count = 0;\n          var semi = false;\n\n          while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {\n            ++this.state.pos;\n          }\n\n          if (semi) {\n            var desc = this.input.slice(startPos, this.state.pos);\n            var entity = entities[desc];\n            ++this.state.pos;\n\n            if (entity) {\n              return entity;\n            }\n          }\n        }\n\n        this.state.pos = startPos;\n        return \"&\";\n      }\n    }, {\n      key: \"jsxReadWord\",\n      value: function jsxReadWord() {\n        var ch;\n        var start = this.state.pos;\n\n        do {\n          ch = this.input.charCodeAt(++this.state.pos);\n        } while (isIdentifierChar(ch) || ch === 45);\n\n        return this.finishToken(136, this.input.slice(start, this.state.pos));\n      }\n    }, {\n      key: \"jsxParseIdentifier\",\n      value: function jsxParseIdentifier() {\n        var node = this.startNode();\n\n        if (this.match(136)) {\n          node.name = this.state.value;\n        } else if (tokenIsKeyword(this.state.type)) {\n          node.name = tokenLabelName(this.state.type);\n        } else {\n          this.unexpected();\n        }\n\n        this.next();\n        return this.finishNode(node, \"JSXIdentifier\");\n      }\n    }, {\n      key: \"jsxParseNamespacedName\",\n      value: function jsxParseNamespacedName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var name = this.jsxParseIdentifier();\n        if (!this.eat(14)) return name;\n        var node = this.startNodeAt(startPos, startLoc);\n        node.namespace = name;\n        node.name = this.jsxParseIdentifier();\n        return this.finishNode(node, \"JSXNamespacedName\");\n      }\n    }, {\n      key: \"jsxParseElementName\",\n      value: function jsxParseElementName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.jsxParseNamespacedName();\n\n        if (node.type === \"JSXNamespacedName\") {\n          return node;\n        }\n\n        while (this.eat(16)) {\n          var newNode = this.startNodeAt(startPos, startLoc);\n          newNode.object = node;\n          newNode.property = this.jsxParseIdentifier();\n          node = this.finishNode(newNode, \"JSXMemberExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"jsxParseAttributeValue\",\n      value: function jsxParseAttributeValue() {\n        var node;\n\n        switch (this.state.type) {\n          case 5:\n            node = this.startNode();\n            this.setContext(types.brace);\n            this.next();\n            node = this.jsxParseExpressionContainer(node, types.j_oTag);\n\n            if (node.expression.type === \"JSXEmptyExpression\") {\n              this.raise(JsxErrors.AttributeIsEmpty, {\n                at: node\n              });\n            }\n\n            return node;\n\n          case 138:\n          case 129:\n            return this.parseExprAtom();\n\n          default:\n            throw this.raise(JsxErrors.UnsupportedJsxValue, {\n              at: this.state.startLoc\n            });\n        }\n      }\n    }, {\n      key: \"jsxParseEmptyExpression\",\n      value: function jsxParseEmptyExpression() {\n        var node = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);\n        return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n      }\n    }, {\n      key: \"jsxParseSpreadChild\",\n      value: function jsxParseSpreadChild(node) {\n        this.next();\n        node.expression = this.parseExpression();\n        this.setContext(types.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(8);\n        return this.finishNode(node, \"JSXSpreadChild\");\n      }\n    }, {\n      key: \"jsxParseExpressionContainer\",\n      value: function jsxParseExpressionContainer(node, previousContext) {\n        if (this.match(8)) {\n          node.expression = this.jsxParseEmptyExpression();\n        } else {\n          var expression = this.parseExpression();\n          node.expression = expression;\n        }\n\n        this.setContext(previousContext);\n        this.state.canStartJSXElement = true;\n        this.expect(8);\n        return this.finishNode(node, \"JSXExpressionContainer\");\n      }\n    }, {\n      key: \"jsxParseAttribute\",\n      value: function jsxParseAttribute() {\n        var node = this.startNode();\n\n        if (this.match(5)) {\n          this.setContext(types.brace);\n          this.next();\n          this.expect(21);\n          node.argument = this.parseMaybeAssignAllowIn();\n          this.setContext(types.j_oTag);\n          this.state.canStartJSXElement = true;\n          this.expect(8);\n          return this.finishNode(node, \"JSXSpreadAttribute\");\n        }\n\n        node.name = this.jsxParseNamespacedName();\n        node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n        return this.finishNode(node, \"JSXAttribute\");\n      }\n    }, {\n      key: \"jsxParseOpeningElementAt\",\n      value: function jsxParseOpeningElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.eat(139)) {\n          return this.finishNode(node, \"JSXOpeningFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        return this.jsxParseOpeningElementAfterName(node);\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var attributes = [];\n\n        while (!this.match(56) && !this.match(139)) {\n          attributes.push(this.jsxParseAttribute());\n        }\n\n        node.attributes = attributes;\n        node.selfClosing = this.eat(56);\n        this.expect(139);\n        return this.finishNode(node, \"JSXOpeningElement\");\n      }\n    }, {\n      key: \"jsxParseClosingElementAt\",\n      value: function jsxParseClosingElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.eat(139)) {\n          return this.finishNode(node, \"JSXClosingFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        this.expect(139);\n        return this.finishNode(node, \"JSXClosingElement\");\n      }\n    }, {\n      key: \"jsxParseElementAt\",\n      value: function jsxParseElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var children = [];\n        var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n        var closingElement = null;\n\n        if (!openingElement.selfClosing) {\n          contents: for (;;) {\n            switch (this.state.type) {\n              case 138:\n                startPos = this.state.start;\n                startLoc = this.state.startLoc;\n                this.next();\n\n                if (this.eat(56)) {\n                  closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n                  break contents;\n                }\n\n                children.push(this.jsxParseElementAt(startPos, startLoc));\n                break;\n\n              case 137:\n                children.push(this.parseExprAtom());\n                break;\n\n              case 5:\n                {\n                  var _node5 = this.startNode();\n\n                  this.setContext(types.brace);\n                  this.next();\n\n                  if (this.match(21)) {\n                    children.push(this.jsxParseSpreadChild(_node5));\n                  } else {\n                    children.push(this.jsxParseExpressionContainer(_node5, types.j_expr));\n                  }\n\n                  break;\n                }\n\n              default:\n                throw this.unexpected();\n            }\n          }\n\n          if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n            this.raise(JsxErrors.MissingClosingTagFragment, {\n              at: closingElement\n            });\n          } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name)\n            });\n          } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n              this.raise(JsxErrors.MissingClosingTagElement, {\n                at: closingElement,\n                openingTagName: getQualifiedJSXName(openingElement.name)\n              });\n            }\n          }\n        }\n\n        if (isFragment(openingElement)) {\n          node.openingFragment = openingElement;\n          node.closingFragment = closingElement;\n        } else {\n          node.openingElement = openingElement;\n          node.closingElement = closingElement;\n        }\n\n        node.children = children;\n\n        if (this.match(47)) {\n          throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n            at: this.state.startLoc\n          });\n        }\n\n        return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n      }\n    }, {\n      key: \"jsxParseElement\",\n      value: function jsxParseElement() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        this.next();\n        return this.jsxParseElementAt(startPos, startLoc);\n      }\n    }, {\n      key: \"setContext\",\n      value: function setContext(newContext) {\n        var context = this.state.context;\n        context[context.length - 1] = newContext;\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        if (this.match(137)) {\n          return this.parseLiteral(this.state.value, \"JSXText\");\n        } else if (this.match(138)) {\n          return this.jsxParseElement();\n        } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n          this.replaceToken(138);\n          return this.jsxParseElement();\n        } else {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"skipSpace\",\n      value: function skipSpace() {\n        var curContext = this.curContext();\n        if (!curContext.preserveSpace) (0, _get17.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"skipSpace\", this).call(this);\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        var context = this.curContext();\n\n        if (context === types.j_expr) {\n          return this.jsxReadToken();\n        }\n\n        if (context === types.j_oTag || context === types.j_cTag) {\n          if (isIdentifierStart(code)) {\n            return this.jsxReadWord();\n          }\n\n          if (code === 62) {\n            ++this.state.pos;\n            return this.finishToken(139);\n          }\n\n          if ((code === 34 || code === 39) && context === types.j_oTag) {\n            return this.jsxReadString(code);\n          }\n        }\n\n        if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n          ++this.state.pos;\n          return this.finishToken(138);\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        var _this$state = this.state,\n            context = _this$state.context,\n            type = _this$state.type;\n\n        if (type === 56 && prevType === 138) {\n          context.splice(-2, 2, types.j_cTag);\n          this.state.canStartJSXElement = false;\n        } else if (type === 138) {\n          context.push(types.j_oTag);\n        } else if (type === 139) {\n          var out = context[context.length - 1];\n\n          if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n            context.pop();\n            this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n          } else {\n            this.setContext(types.j_expr);\n            this.state.canStartJSXElement = true;\n          }\n        } else {\n          this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n        }\n      }\n    }]);\n    return _class3;\n  }(superClass);\n};\n\nvar TypeScriptScope = /*#__PURE__*/function (_Scope2) {\n  (0, _inherits2.default)(TypeScriptScope, _Scope2);\n\n  var _super11 = _createSuper(TypeScriptScope);\n\n  function TypeScriptScope() {\n    var _this22;\n\n    (0, _classCallCheck2.default)(this, TypeScriptScope);\n\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    _this22 = _super11.call.apply(_super11, [this].concat(args));\n    _this22.types = new Set();\n    _this22.enums = new Set();\n    _this22.constEnums = new Set();\n    _this22.classes = new Set();\n    _this22.exportOnlyBindings = new Set();\n    return _this22;\n  }\n\n  return (0, _createClass2.default)(TypeScriptScope);\n}(Scope);\n\nvar TypeScriptScopeHandler = /*#__PURE__*/function (_ScopeHandler2) {\n  (0, _inherits2.default)(TypeScriptScopeHandler, _ScopeHandler2);\n\n  var _super12 = _createSuper(TypeScriptScopeHandler);\n\n  function TypeScriptScopeHandler() {\n    (0, _classCallCheck2.default)(this, TypeScriptScopeHandler);\n    return _super12.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(TypeScriptScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new TypeScriptScope(flags);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, loc) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n        this.maybeExportDefined(scope, name);\n        scope.exportOnlyBindings.add(name);\n        return;\n      }\n\n      (0, _get17.default)((0, _getPrototypeOf2.default)(TypeScriptScopeHandler.prototype), \"declareName\", this).apply(this, arguments);\n\n      if (bindingType & BIND_KIND_TYPE) {\n        if (!(bindingType & BIND_KIND_VALUE)) {\n          this.checkRedeclarationInScope(scope, name, bindingType, loc);\n          this.maybeExportDefined(scope, name);\n        }\n\n        scope.types.add(name);\n      }\n\n      if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n      if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n      if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (scope.enums.has(name)) {\n        if (bindingType & BIND_FLAGS_TS_ENUM) {\n          var isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n          var wasConst = scope.constEnums.has(name);\n          return isConst !== wasConst;\n        }\n\n        return true;\n      }\n\n      if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n        if (scope.lexical.has(name)) {\n          return !!(bindingType & BIND_KIND_VALUE);\n        } else {\n          return false;\n        }\n      }\n\n      if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n        return true;\n      }\n\n      return (0, _get17.default)((0, _getPrototypeOf2.default)(TypeScriptScopeHandler.prototype), \"isRedeclaredInScope\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      var topLevelScope = this.scopeStack[0];\n      var name = id.name;\n\n      if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(TypeScriptScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n      }\n    }\n  }]);\n  return TypeScriptScopeHandler;\n}(ScopeHandler);\n\nvar getOwn$1 = function getOwn$1(object, key) {\n  return Object.hasOwnProperty.call(object, key) && object[key];\n};\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(\"Unexpected \".concat(x, \" value.\"));\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nfunction tsTokenCanStartExpression(token) {\n  return tokenCanStartExpression(token) || tokenIsBinaryOperator(token);\n}\n\nvar TSErrors = ParseErrorEnum(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2.default)([\"typescript\"])))(function (_) {\n  return {\n    AbstractMethodHasImplementation: _(function (_ref76) {\n      var methodName = _ref76.methodName;\n      return \"Method '\".concat(methodName, \"' cannot have an implementation because it is marked abstract.\");\n    }),\n    AbstractPropertyHasInitializer: _(function (_ref77) {\n      var propertyName = _ref77.propertyName;\n      return \"Property '\".concat(propertyName, \"' cannot have an initializer because it is marked abstract.\");\n    }),\n    AccesorCannotDeclareThisParameter: _(\"'get' and 'set' accessors cannot declare 'this' parameters.\"),\n    AccesorCannotHaveTypeParameters: _(\"An accessor cannot have type parameters.\"),\n    CannotFindName: _(function (_ref78) {\n      var name = _ref78.name;\n      return \"Cannot find name '\".concat(name, \"'.\");\n    }),\n    ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n    ClassMethodHasReadonly: _(\"Class methods cannot have the 'readonly' modifier.\"),\n    ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\"),\n    ConstructorHasTypeParameters: _(\"Type parameters cannot appear on a constructor declaration.\"),\n    DeclareAccessor: _(function (_ref79) {\n      var kind = _ref79.kind;\n      return \"'declare' is not allowed in \".concat(kind, \"ters.\");\n    }),\n    DeclareClassFieldHasInitializer: _(\"Initializers are not allowed in ambient contexts.\"),\n    DeclareFunctionHasImplementation: _(\"An implementation cannot be declared in ambient contexts.\"),\n    DuplicateAccessibilityModifier: _(function (_ref80) {\n      var modifier = _ref80.modifier;\n      return \"Accessibility modifier already seen.\";\n    }),\n    DuplicateModifier: _(function (_ref81) {\n      var modifier = _ref81.modifier;\n      return \"Duplicate modifier: '\".concat(modifier, \"'.\");\n    }),\n    EmptyHeritageClauseType: _(function (_ref82) {\n      var token = _ref82.token;\n      return \"'\".concat(token, \"' list cannot be empty.\");\n    }),\n    EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n    EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n    ExpectedAmbientAfterExportDeclare: _(\"'export declare' must be followed by an ambient declaration.\"),\n    ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n    IncompatibleModifiers: _(function (_ref83) {\n      var modifiers = _ref83.modifiers;\n      return \"'\".concat(modifiers[0], \"' modifier cannot be used with '\").concat(modifiers[1], \"' modifier.\");\n    }),\n    IndexSignatureHasAbstract: _(\"Index signatures cannot have the 'abstract' modifier.\"),\n    IndexSignatureHasAccessibility: _(function (_ref84) {\n      var modifier = _ref84.modifier;\n      return \"Index signatures cannot have an accessibility modifier ('\".concat(modifier, \"').\");\n    }),\n    IndexSignatureHasDeclare: _(\"Index signatures cannot have the 'declare' modifier.\"),\n    IndexSignatureHasOverride: _(\"'override' modifier cannot appear on an index signature.\"),\n    IndexSignatureHasStatic: _(\"Index signatures cannot have the 'static' modifier.\"),\n    InitializerNotAllowedInAmbientContext: _(\"Initializers are not allowed in ambient contexts.\"),\n    InvalidModifierOnTypeMember: _(function (_ref85) {\n      var modifier = _ref85.modifier;\n      return \"'\".concat(modifier, \"' modifier cannot appear on a type member.\");\n    }),\n    InvalidModifierOnTypeParameter: _(function (_ref86) {\n      var modifier = _ref86.modifier;\n      return \"'\".concat(modifier, \"' modifier cannot appear on a type parameter.\");\n    }),\n    InvalidModifierOnTypeParameterPositions: _(function (_ref87) {\n      var modifier = _ref87.modifier;\n      return \"'\".concat(modifier, \"' modifier can only appear on a type parameter of a class, interface or type alias.\");\n    }),\n    InvalidModifiersOrder: _(function (_ref88) {\n      var orderedModifiers = _ref88.orderedModifiers;\n      return \"'\".concat(orderedModifiers[0], \"' modifier must precede '\").concat(orderedModifiers[1], \"' modifier.\");\n    }),\n    InvalidTupleMemberLabel: _(\"Tuple members must be labeled with a simple identifier.\"),\n    MissingInterfaceName: _(\"'interface' declarations must be followed by an identifier.\"),\n    MixedLabeledAndUnlabeledElements: _(\"Tuple members must all have names or all not have names.\"),\n    NonAbstractClassHasAbstractMethod: _(\"Abstract methods can only appear within an abstract class.\"),\n    NonClassMethodPropertyHasAbstractModifer: _(\"'abstract' modifier can only appear on a class, method, or property declaration.\"),\n    OptionalTypeBeforeRequired: _(\"A required element cannot follow an optional element.\"),\n    OverrideNotInSubClass: _(\"This member cannot have an 'override' modifier because its containing class does not extend another class.\"),\n    PatternIsOptional: _(\"A binding pattern parameter cannot be optional in an implementation signature.\"),\n    PrivateElementHasAbstract: _(\"Private elements cannot have the 'abstract' modifier.\"),\n    PrivateElementHasAccessibility: _(function (_ref89) {\n      var modifier = _ref89.modifier;\n      return \"Private elements cannot have an accessibility modifier ('\".concat(modifier, \"').\");\n    }),\n    ReadonlyForMethodSignature: _(\"'readonly' modifier can only appear on a property declaration or index signature.\"),\n    ReservedArrowTypeParam: _(\"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\"),\n    ReservedTypeAssertion: _(\"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\"),\n    SetAccesorCannotHaveOptionalParameter: _(\"A 'set' accessor cannot have an optional parameter.\"),\n    SetAccesorCannotHaveRestParameter: _(\"A 'set' accessor cannot have rest parameter.\"),\n    SetAccesorCannotHaveReturnType: _(\"A 'set' accessor cannot have a return type annotation.\"),\n    SingleTypeParameterWithoutTrailingComma: _(function (_ref90) {\n      var typeParameterName = _ref90.typeParameterName;\n      return \"Single type parameter \".concat(typeParameterName, \" should have a trailing comma. Example usage: <\").concat(typeParameterName, \",>.\");\n    }),\n    StaticBlockCannotHaveModifier: _(\"Static class blocks cannot have any modifier.\"),\n    TypeAnnotationAfterAssign: _(\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\"),\n    TypeImportCannotSpecifyDefaultAndNamed: _(\"A type-only import can specify a default import or named bindings, but not both.\"),\n    TypeModifierIsUsedInTypeExports: _(\"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\"),\n    TypeModifierIsUsedInTypeImports: _(\"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\"),\n    UnexpectedParameterModifier: _(\"A parameter property is only allowed in a constructor implementation.\"),\n    UnexpectedReadonly: _(\"'readonly' type modifier is only permitted on array and tuple literal types.\"),\n    UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n    UnexpectedTypeCastInParameter: _(\"Unexpected type cast in parameter position.\"),\n    UnsupportedImportTypeArgument: _(\"Argument in a type import must be a string literal.\"),\n    UnsupportedParameterPropertyKind: _(\"A parameter property may not be declared using a binding pattern.\"),\n    UnsupportedSignatureParameterKind: _(function (_ref91) {\n      var type = _ref91.type;\n      return \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got \".concat(type, \".\");\n    })\n  };\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nfunction tsIsVarianceAnnotations(modifier) {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nvar typescript = function typescript(superClass) {\n  return /*#__PURE__*/function (_superClass4) {\n    (0, _inherits2.default)(_class4, _superClass4);\n\n    var _super13 = _createSuper(_class4);\n\n    function _class4() {\n      (0, _classCallCheck2.default)(this, _class4);\n      return _super13.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class4, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return TypeScriptScopeHandler;\n      }\n    }, {\n      key: \"tsIsIdentifier\",\n      value: function tsIsIdentifier() {\n        return tokenIsIdentifier(this.state.type);\n      }\n    }, {\n      key: \"tsTokenCanFollowModifier\",\n      value: function tsTokenCanFollowModifier() {\n        return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n      }\n    }, {\n      key: \"tsNextTokenCanFollowModifier\",\n      value: function tsNextTokenCanFollowModifier() {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n    }, {\n      key: \"tsParseModifier\",\n      value: function tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n        if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58) {\n          return undefined;\n        }\n\n        var modifier = this.state.value;\n\n        if (allowedModifiers.indexOf(modifier) !== -1) {\n          if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n            return undefined;\n          }\n\n          if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n            return modifier;\n          }\n        }\n\n        return undefined;\n      }\n    }, {\n      key: \"tsParseModifiers\",\n      value: function tsParseModifiers(_ref92) {\n        var _this23 = this;\n\n        var modified = _ref92.modified,\n            allowedModifiers = _ref92.allowedModifiers,\n            disallowedModifiers = _ref92.disallowedModifiers,\n            stopOnStartOfClassStaticBlock = _ref92.stopOnStartOfClassStaticBlock,\n            _ref92$errorTemplate = _ref92.errorTemplate,\n            errorTemplate = _ref92$errorTemplate === void 0 ? TSErrors.InvalidModifierOnTypeMember : _ref92$errorTemplate;\n\n        var enforceOrder = function enforceOrder(loc, modifier, before, after) {\n          if (modifier === before && modified[after]) {\n            _this23.raise(TSErrors.InvalidModifiersOrder, {\n              at: loc,\n              orderedModifiers: [before, after]\n            });\n          }\n        };\n\n        var incompatible = function incompatible(loc, modifier, mod1, mod2) {\n          if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n            _this23.raise(TSErrors.IncompatibleModifiers, {\n              at: loc,\n              modifiers: [mod1, mod2]\n            });\n          }\n        };\n\n        for (;;) {\n          var startLoc = this.state.startLoc;\n          var modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n          if (!modifier) break;\n\n          if (tsIsAccessModifier(modifier)) {\n            if (modified.accessibility) {\n              this.raise(TSErrors.DuplicateAccessibilityModifier, {\n                at: startLoc,\n                modifier: modifier\n              });\n            } else {\n              enforceOrder(startLoc, modifier, modifier, \"override\");\n              enforceOrder(startLoc, modifier, modifier, \"static\");\n              enforceOrder(startLoc, modifier, modifier, \"readonly\");\n              modified.accessibility = modifier;\n            }\n          } else if (tsIsVarianceAnnotations(modifier)) {\n            if (modified[modifier]) {\n              this.raise(TSErrors.DuplicateModifier, {\n                at: startLoc,\n                modifier: modifier\n              });\n            }\n\n            modified[modifier] = true;\n            enforceOrder(startLoc, modifier, \"in\", \"out\");\n          } else {\n            if (Object.hasOwnProperty.call(modified, modifier)) {\n              this.raise(TSErrors.DuplicateModifier, {\n                at: startLoc,\n                modifier: modifier\n              });\n            } else {\n              enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n              enforceOrder(startLoc, modifier, \"static\", \"override\");\n              enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n              enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n              incompatible(startLoc, modifier, \"declare\", \"override\");\n              incompatible(startLoc, modifier, \"static\", \"abstract\");\n            }\n\n            modified[modifier] = true;\n          }\n\n          if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n            this.raise(errorTemplate, {\n              at: startLoc,\n              modifier: modifier\n            });\n          }\n        }\n      }\n    }, {\n      key: \"tsIsListTerminator\",\n      value: function tsIsListTerminator(kind) {\n        switch (kind) {\n          case \"EnumMembers\":\n          case \"TypeMembers\":\n            return this.match(8);\n\n          case \"HeritageClauseElement\":\n            return this.match(5);\n\n          case \"TupleElementTypes\":\n            return this.match(3);\n\n          case \"TypeParametersOrArguments\":\n            return this.match(48);\n        }\n\n        throw new Error(\"Unreachable\");\n      }\n    }, {\n      key: \"tsParseList\",\n      value: function tsParseList(kind, parseElement) {\n        var result = [];\n\n        while (!this.tsIsListTerminator(kind)) {\n          result.push(parseElement());\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseDelimitedList\",\n      value: function tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n      }\n    }, {\n      key: \"tsParseDelimitedListWorker\",\n      value: function tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n        var result = [];\n        var trailingCommaPos = -1;\n\n        for (;;) {\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          trailingCommaPos = -1;\n          var element = parseElement();\n\n          if (element == null) {\n            return undefined;\n          }\n\n          result.push(element);\n\n          if (this.eat(12)) {\n            trailingCommaPos = this.state.lastTokStart;\n            continue;\n          }\n\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          if (expectSuccess) {\n            this.expect(12);\n          }\n\n          return undefined;\n        }\n\n        if (refTrailingCommaPos) {\n          refTrailingCommaPos.value = trailingCommaPos;\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseBracketedList\",\n      value: function tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n        if (!skipFirstToken) {\n          if (bracket) {\n            this.expect(0);\n          } else {\n            this.expect(47);\n          }\n        }\n\n        var result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n        if (bracket) {\n          this.expect(3);\n        } else {\n          this.expect(48);\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseImportType\",\n      value: function tsParseImportType() {\n        var node = this.startNode();\n        this.expect(83);\n        this.expect(10);\n\n        if (!this.match(129)) {\n          this.raise(TSErrors.UnsupportedImportTypeArgument, {\n            at: this.state.startLoc\n          });\n        }\n\n        node.argument = this.parseExprAtom();\n        this.expect(11);\n\n        if (this.eat(16)) {\n          node.qualifier = this.tsParseEntityName();\n        }\n\n        if (this.match(47)) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSImportType\");\n      }\n    }, {\n      key: \"tsParseEntityName\",\n      value: function tsParseEntityName() {\n        var allowReservedWords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var entity = this.parseIdentifier(allowReservedWords);\n\n        while (this.eat(16)) {\n          var node = this.startNodeAtNode(entity);\n          node.left = entity;\n          node.right = this.parseIdentifier(allowReservedWords);\n          entity = this.finishNode(node, \"TSQualifiedName\");\n        }\n\n        return entity;\n      }\n    }, {\n      key: \"tsParseTypeReference\",\n      value: function tsParseTypeReference() {\n        var node = this.startNode();\n        node.typeName = this.tsParseEntityName();\n\n        if (!this.hasPrecedingLineBreak() && this.match(47)) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSTypeReference\");\n      }\n    }, {\n      key: \"tsParseThisTypePredicate\",\n      value: function tsParseThisTypePredicate(lhs) {\n        this.next();\n        var node = this.startNodeAtNode(lhs);\n        node.parameterName = lhs;\n        node.typeAnnotation = this.tsParseTypeAnnotation(false);\n        node.asserts = false;\n        return this.finishNode(node, \"TSTypePredicate\");\n      }\n    }, {\n      key: \"tsParseThisTypeNode\",\n      value: function tsParseThisTypeNode() {\n        var node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSThisType\");\n      }\n    }, {\n      key: \"tsParseTypeQuery\",\n      value: function tsParseTypeQuery() {\n        var node = this.startNode();\n        this.expect(87);\n\n        if (this.match(83)) {\n          node.exprName = this.tsParseImportType();\n        } else {\n          node.exprName = this.tsParseEntityName();\n        }\n\n        if (!this.hasPrecedingLineBreak() && this.match(47)) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSTypeQuery\");\n      }\n    }, {\n      key: \"tsParseInOutModifiers\",\n      value: function tsParseInOutModifiers(node) {\n        this.tsParseModifiers({\n          modified: node,\n          allowedModifiers: [\"in\", \"out\"],\n          disallowedModifiers: [\"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n        });\n      }\n    }, {\n      key: \"tsParseNoneModifiers\",\n      value: function tsParseNoneModifiers(node) {\n        this.tsParseModifiers({\n          modified: node,\n          allowedModifiers: [],\n          disallowedModifiers: [\"in\", \"out\"],\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n        });\n      }\n    }, {\n      key: \"tsParseTypeParameter\",\n      value: function tsParseTypeParameter() {\n        var parseModifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.tsParseNoneModifiers.bind(this);\n        var node = this.startNode();\n        parseModifiers(node);\n        node.name = this.tsParseTypeParameterName();\n        node.constraint = this.tsEatThenParseType(81);\n        node.default = this.tsEatThenParseType(29);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsTryParseTypeParameters\",\n      value: function tsTryParseTypeParameters(parseModifiers) {\n        if (this.match(47)) {\n          return this.tsParseTypeParameters(parseModifiers);\n        }\n      }\n    }, {\n      key: \"tsParseTypeParameters\",\n      value: function tsParseTypeParameters(parseModifiers) {\n        var node = this.startNode();\n\n        if (this.match(47) || this.match(138)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        var refTrailingCommaPos = {\n          value: -1\n        };\n        node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);\n\n        if (node.params.length === 0) {\n          this.raise(TSErrors.EmptyTypeParameters, {\n            at: node\n          });\n        }\n\n        if (refTrailingCommaPos.value !== -1) {\n          this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n        }\n\n        return this.finishNode(node, \"TSTypeParameterDeclaration\");\n      }\n    }, {\n      key: \"tsTryNextParseConstantContext\",\n      value: function tsTryNextParseConstantContext() {\n        if (this.lookahead().type !== 75) return null;\n        this.next();\n        var typeReference = this.tsParseTypeReference();\n\n        if (typeReference.typeParameters) {\n          this.raise(TSErrors.CannotFindName, {\n            at: typeReference.typeName,\n            name: \"const\"\n          });\n        }\n\n        return typeReference;\n      }\n    }, {\n      key: \"tsFillSignature\",\n      value: function tsFillSignature(returnToken, signature) {\n        var returnTokenRequired = returnToken === 19;\n        var paramsKey = \"parameters\";\n        var returnTypeKey = \"typeAnnotation\";\n        signature.typeParameters = this.tsTryParseTypeParameters();\n        this.expect(10);\n        signature[paramsKey] = this.tsParseBindingListForSignature();\n\n        if (returnTokenRequired) {\n          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        } else if (this.match(returnToken)) {\n          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        }\n      }\n    }, {\n      key: \"tsParseBindingListForSignature\",\n      value: function tsParseBindingListForSignature() {\n        var _this24 = this;\n\n        return this.parseBindingList(11, 41).map(function (pattern) {\n          if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n            _this24.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type\n            });\n          }\n\n          return pattern;\n        });\n      }\n    }, {\n      key: \"tsParseTypeMemberSemicolon\",\n      value: function tsParseTypeMemberSemicolon() {\n        if (!this.eat(12) && !this.isLineTerminator()) {\n          this.expect(13);\n        }\n      }\n    }, {\n      key: \"tsParseSignatureMember\",\n      value: function tsParseSignatureMember(kind, node) {\n        this.tsFillSignature(14, node);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, kind);\n      }\n    }, {\n      key: \"tsIsUnambiguouslyIndexSignature\",\n      value: function tsIsUnambiguouslyIndexSignature() {\n        this.next();\n\n        if (tokenIsIdentifier(this.state.type)) {\n          this.next();\n          return this.match(14);\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsTryParseIndexSignature\",\n      value: function tsTryParseIndexSignature(node) {\n        if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n          return undefined;\n        }\n\n        this.expect(0);\n        var id = this.parseIdentifier();\n        id.typeAnnotation = this.tsParseTypeAnnotation();\n        this.resetEndLocation(id);\n        this.expect(3);\n        node.parameters = [id];\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, \"TSIndexSignature\");\n      }\n    }, {\n      key: \"tsParsePropertyOrMethodSignature\",\n      value: function tsParsePropertyOrMethodSignature(node, readonly) {\n        if (this.eat(17)) node.optional = true;\n        var nodeAny = node;\n\n        if (this.match(10) || this.match(47)) {\n          if (readonly) {\n            this.raise(TSErrors.ReadonlyForMethodSignature, {\n              at: node\n            });\n          }\n\n          var method = nodeAny;\n\n          if (method.kind && this.match(47)) {\n            this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.tsFillSignature(14, method);\n          this.tsParseTypeMemberSemicolon();\n          var paramsKey = \"parameters\";\n          var returnTypeKey = \"typeAnnotation\";\n\n          if (method.kind === \"get\") {\n            if (method[paramsKey].length > 0) {\n              this.raise(Errors.BadGetterArity, {\n                at: this.state.curPosition()\n              });\n\n              if (this.isThisParam(method[paramsKey][0])) {\n                this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                  at: this.state.curPosition()\n                });\n              }\n            }\n          } else if (method.kind === \"set\") {\n            if (method[paramsKey].length !== 1) {\n              this.raise(Errors.BadSetterArity, {\n                at: this.state.curPosition()\n              });\n            } else {\n              var firstParameter = method[paramsKey][0];\n\n              if (this.isThisParam(firstParameter)) {\n                this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                  at: this.state.curPosition()\n                });\n              }\n\n              if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n                this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                  at: this.state.curPosition()\n                });\n              }\n\n              if (firstParameter.type === \"RestElement\") {\n                this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                  at: this.state.curPosition()\n                });\n              }\n            }\n\n            if (method[returnTypeKey]) {\n              this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n                at: method[returnTypeKey]\n              });\n            }\n          } else {\n            method.kind = \"method\";\n          }\n\n          return this.finishNode(method, \"TSMethodSignature\");\n        } else {\n          var property = nodeAny;\n          if (readonly) property.readonly = true;\n          var type = this.tsTryParseTypeAnnotation();\n          if (type) property.typeAnnotation = type;\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(property, \"TSPropertySignature\");\n        }\n      }\n    }, {\n      key: \"tsParseTypeMember\",\n      value: function tsParseTypeMember() {\n        var node = this.startNode();\n\n        if (this.match(10) || this.match(47)) {\n          return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n        }\n\n        if (this.match(77)) {\n          var id = this.startNode();\n          this.next();\n\n          if (this.match(10) || this.match(47)) {\n            return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n          } else {\n            node.key = this.createIdentifier(id, \"new\");\n            return this.tsParsePropertyOrMethodSignature(node, false);\n          }\n        }\n\n        this.tsParseModifiers({\n          modified: node,\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n        });\n        var idx = this.tsTryParseIndexSignature(node);\n\n        if (idx) {\n          return idx;\n        }\n\n        this.parsePropertyName(node);\n\n        if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n          node.kind = node.key.name;\n          this.parsePropertyName(node);\n        }\n\n        return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n      }\n    }, {\n      key: \"tsParseTypeLiteral\",\n      value: function tsParseTypeLiteral() {\n        var node = this.startNode();\n        node.members = this.tsParseObjectTypeMembers();\n        return this.finishNode(node, \"TSTypeLiteral\");\n      }\n    }, {\n      key: \"tsParseObjectTypeMembers\",\n      value: function tsParseObjectTypeMembers() {\n        this.expect(5);\n        var members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n        this.expect(8);\n        return members;\n      }\n    }, {\n      key: \"tsIsStartOfMappedType\",\n      value: function tsIsStartOfMappedType() {\n        this.next();\n\n        if (this.eat(53)) {\n          return this.isContextual(118);\n        }\n\n        if (this.isContextual(118)) {\n          this.next();\n        }\n\n        if (!this.match(0)) {\n          return false;\n        }\n\n        this.next();\n\n        if (!this.tsIsIdentifier()) {\n          return false;\n        }\n\n        this.next();\n        return this.match(58);\n      }\n    }, {\n      key: \"tsParseMappedTypeParameter\",\n      value: function tsParseMappedTypeParameter() {\n        var node = this.startNode();\n        node.name = this.tsParseTypeParameterName();\n        node.constraint = this.tsExpectThenParseType(58);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsParseMappedType\",\n      value: function tsParseMappedType() {\n        var node = this.startNode();\n        this.expect(5);\n\n        if (this.match(53)) {\n          node.readonly = this.state.value;\n          this.next();\n          this.expectContextual(118);\n        } else if (this.eatContextual(118)) {\n          node.readonly = true;\n        }\n\n        this.expect(0);\n        node.typeParameter = this.tsParseMappedTypeParameter();\n        node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n        this.expect(3);\n\n        if (this.match(53)) {\n          node.optional = this.state.value;\n          this.next();\n          this.expect(17);\n        } else if (this.eat(17)) {\n          node.optional = true;\n        }\n\n        node.typeAnnotation = this.tsTryParseType();\n        this.semicolon();\n        this.expect(8);\n        return this.finishNode(node, \"TSMappedType\");\n      }\n    }, {\n      key: \"tsParseTupleType\",\n      value: function tsParseTupleType() {\n        var _this25 = this;\n\n        var node = this.startNode();\n        node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n        var seenOptionalElement = false;\n        var labeledElements = null;\n        node.elementTypes.forEach(function (elementNode) {\n          var _labeledElements;\n\n          var _elementNode = elementNode,\n              type = _elementNode.type;\n\n          if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n            _this25.raise(TSErrors.OptionalTypeBeforeRequired, {\n              at: elementNode\n            });\n          }\n\n          seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n          if (type === \"TSRestType\") {\n            elementNode = elementNode.typeAnnotation;\n            type = elementNode.type;\n          }\n\n          var isLabeled = type === \"TSNamedTupleMember\";\n          labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n          if (labeledElements !== isLabeled) {\n            _this25.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n              at: elementNode\n            });\n          }\n        });\n        return this.finishNode(node, \"TSTupleType\");\n      }\n    }, {\n      key: \"tsParseTupleElementType\",\n      value: function tsParseTupleElementType() {\n        var _this$state2 = this.state,\n            startPos = _this$state2.start,\n            startLoc = _this$state2.startLoc;\n        var rest = this.eat(21);\n        var type = this.tsParseType();\n        var optional = this.eat(17);\n        var labeled = this.eat(14);\n\n        if (labeled) {\n          var labeledNode = this.startNodeAtNode(type);\n          labeledNode.optional = optional;\n\n          if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n            labeledNode.label = type.typeName;\n          } else {\n            this.raise(TSErrors.InvalidTupleMemberLabel, {\n              at: type\n            });\n            labeledNode.label = type;\n          }\n\n          labeledNode.elementType = this.tsParseType();\n          type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n        } else if (optional) {\n          var optionalTypeNode = this.startNodeAtNode(type);\n          optionalTypeNode.typeAnnotation = type;\n          type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n        }\n\n        if (rest) {\n          var restNode = this.startNodeAt(startPos, startLoc);\n          restNode.typeAnnotation = type;\n          type = this.finishNode(restNode, \"TSRestType\");\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseParenthesizedType\",\n      value: function tsParseParenthesizedType() {\n        var node = this.startNode();\n        this.expect(10);\n        node.typeAnnotation = this.tsParseType();\n        this.expect(11);\n        return this.finishNode(node, \"TSParenthesizedType\");\n      }\n    }, {\n      key: \"tsParseFunctionOrConstructorType\",\n      value: function tsParseFunctionOrConstructorType(type, abstract) {\n        var node = this.startNode();\n\n        if (type === \"TSConstructorType\") {\n          node.abstract = !!abstract;\n          if (abstract) this.next();\n          this.next();\n        }\n\n        this.tsFillSignature(19, node);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"tsParseLiteralTypeNode\",\n      value: function tsParseLiteralTypeNode() {\n        var _this26 = this;\n\n        var node = this.startNode();\n\n        node.literal = function () {\n          switch (_this26.state.type) {\n            case 130:\n            case 131:\n            case 129:\n            case 85:\n            case 86:\n              return _this26.parseExprAtom();\n\n            default:\n              throw _this26.unexpected();\n          }\n        }();\n\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"tsParseTemplateLiteralType\",\n      value: function tsParseTemplateLiteralType() {\n        var node = this.startNode();\n        node.literal = this.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"parseTemplateSubstitution\",\n      value: function parseTemplateSubstitution() {\n        if (this.state.inType) return this.tsParseType();\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseTemplateSubstitution\", this).call(this);\n      }\n    }, {\n      key: \"tsParseThisTypeOrThisTypePredicate\",\n      value: function tsParseThisTypeOrThisTypePredicate() {\n        var thisKeyword = this.tsParseThisTypeNode();\n\n        if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n          return this.tsParseThisTypePredicate(thisKeyword);\n        } else {\n          return thisKeyword;\n        }\n      }\n    }, {\n      key: \"tsParseNonArrayType\",\n      value: function tsParseNonArrayType() {\n        switch (this.state.type) {\n          case 129:\n          case 130:\n          case 131:\n          case 85:\n          case 86:\n            return this.tsParseLiteralTypeNode();\n\n          case 53:\n            if (this.state.value === \"-\") {\n              var node = this.startNode();\n              var nextToken = this.lookahead();\n\n              if (nextToken.type !== 130 && nextToken.type !== 131) {\n                throw this.unexpected();\n              }\n\n              node.literal = this.parseMaybeUnary();\n              return this.finishNode(node, \"TSLiteralType\");\n            }\n\n            break;\n\n          case 78:\n            return this.tsParseThisTypeOrThisTypePredicate();\n\n          case 87:\n            return this.tsParseTypeQuery();\n\n          case 83:\n            return this.tsParseImportType();\n\n          case 5:\n            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n          case 0:\n            return this.tsParseTupleType();\n\n          case 10:\n            return this.tsParseParenthesizedType();\n\n          case 25:\n          case 24:\n            return this.tsParseTemplateLiteralType();\n\n          default:\n            {\n              var type = this.state.type;\n\n              if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n                var nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n                if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n                  var _node6 = this.startNode();\n\n                  this.next();\n                  return this.finishNode(_node6, nodeType);\n                }\n\n                return this.tsParseTypeReference();\n              }\n            }\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"tsParseArrayTypeOrHigher\",\n      value: function tsParseArrayTypeOrHigher() {\n        var type = this.tsParseNonArrayType();\n\n        while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n          if (this.match(3)) {\n            var node = this.startNodeAtNode(type);\n            node.elementType = type;\n            this.expect(3);\n            type = this.finishNode(node, \"TSArrayType\");\n          } else {\n            var _node7 = this.startNodeAtNode(type);\n\n            _node7.objectType = type;\n            _node7.indexType = this.tsParseType();\n            this.expect(3);\n            type = this.finishNode(_node7, \"TSIndexedAccessType\");\n          }\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseTypeOperator\",\n      value: function tsParseTypeOperator() {\n        var node = this.startNode();\n        var operator = this.state.value;\n        this.next();\n        node.operator = operator;\n        node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n        if (operator === \"readonly\") {\n          this.tsCheckTypeAnnotationForReadOnly(node);\n        }\n\n        return this.finishNode(node, \"TSTypeOperator\");\n      }\n    }, {\n      key: \"tsCheckTypeAnnotationForReadOnly\",\n      value: function tsCheckTypeAnnotationForReadOnly(node) {\n        switch (node.typeAnnotation.type) {\n          case \"TSTupleType\":\n          case \"TSArrayType\":\n            return;\n\n          default:\n            this.raise(TSErrors.UnexpectedReadonly, {\n              at: node\n            });\n        }\n      }\n    }, {\n      key: \"tsParseInferType\",\n      value: function tsParseInferType() {\n        var _this27 = this;\n\n        var node = this.startNode();\n        this.expectContextual(112);\n        var typeParameter = this.startNode();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsTryParse(function () {\n          return _this27.tsParseConstraintForInferType();\n        });\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n        return this.finishNode(node, \"TSInferType\");\n      }\n    }, {\n      key: \"tsParseConstraintForInferType\",\n      value: function tsParseConstraintForInferType() {\n        var _this28 = this;\n\n        if (this.eat(81)) {\n          var constraint = this.tsInDisallowConditionalTypesContext(function () {\n            return _this28.tsParseType();\n          });\n\n          if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {\n            return constraint;\n          }\n        }\n      }\n    }, {\n      key: \"tsParseTypeOperatorOrHigher\",\n      value: function tsParseTypeOperatorOrHigher() {\n        var _this29 = this;\n\n        var isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n        return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(function () {\n          return _this29.tsParseArrayTypeOrHigher();\n        });\n      }\n    }, {\n      key: \"tsParseUnionOrIntersectionType\",\n      value: function tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n        var node = this.startNode();\n        var hasLeadingOperator = this.eat(operator);\n        var types = [];\n\n        do {\n          types.push(parseConstituentType());\n        } while (this.eat(operator));\n\n        if (types.length === 1 && !hasLeadingOperator) {\n          return types[0];\n        }\n\n        node.types = types;\n        return this.finishNode(node, kind);\n      }\n    }, {\n      key: \"tsParseIntersectionTypeOrHigher\",\n      value: function tsParseIntersectionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n      }\n    }, {\n      key: \"tsParseUnionTypeOrHigher\",\n      value: function tsParseUnionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n      }\n    }, {\n      key: \"tsIsStartOfFunctionType\",\n      value: function tsIsStartOfFunctionType() {\n        if (this.match(47)) {\n          return true;\n        }\n\n        return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n      }\n    }, {\n      key: \"tsSkipParameterStart\",\n      value: function tsSkipParameterStart() {\n        if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n          this.next();\n          return true;\n        }\n\n        if (this.match(5)) {\n          var errors = this.state.errors;\n          var previousErrorCount = errors.length;\n\n          try {\n            this.parseObjectLike(8, true);\n            return errors.length === previousErrorCount;\n          } catch (_unused) {\n            return false;\n          }\n        }\n\n        if (this.match(0)) {\n          this.next();\n          var _errors = this.state.errors;\n          var _previousErrorCount = _errors.length;\n\n          try {\n            this.parseBindingList(3, 93, true);\n            return _errors.length === _previousErrorCount;\n          } catch (_unused2) {\n            return false;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsIsUnambiguouslyStartOfFunctionType\",\n      value: function tsIsUnambiguouslyStartOfFunctionType() {\n        this.next();\n\n        if (this.match(11) || this.match(21)) {\n          return true;\n        }\n\n        if (this.tsSkipParameterStart()) {\n          if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n            return true;\n          }\n\n          if (this.match(11)) {\n            this.next();\n\n            if (this.match(19)) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsParseTypeOrTypePredicateAnnotation\",\n      value: function tsParseTypeOrTypePredicateAnnotation(returnToken) {\n        var _this30 = this;\n\n        return this.tsInType(function () {\n          var t = _this30.startNode();\n\n          _this30.expect(returnToken);\n\n          var node = _this30.startNode();\n\n          var asserts = !!_this30.tsTryParse(_this30.tsParseTypePredicateAsserts.bind(_this30));\n\n          if (asserts && _this30.match(78)) {\n            var thisTypePredicate = _this30.tsParseThisTypeOrThisTypePredicate();\n\n            if (thisTypePredicate.type === \"TSThisType\") {\n              node.parameterName = thisTypePredicate;\n              node.asserts = true;\n              node.typeAnnotation = null;\n              thisTypePredicate = _this30.finishNode(node, \"TSTypePredicate\");\n            } else {\n              _this30.resetStartLocationFromNode(thisTypePredicate, node);\n\n              thisTypePredicate.asserts = true;\n            }\n\n            t.typeAnnotation = thisTypePredicate;\n            return _this30.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var typePredicateVariable = _this30.tsIsIdentifier() && _this30.tsTryParse(_this30.tsParseTypePredicatePrefix.bind(_this30));\n\n          if (!typePredicateVariable) {\n            if (!asserts) {\n              return _this30.tsParseTypeAnnotation(false, t);\n            }\n\n            node.parameterName = _this30.parseIdentifier();\n            node.asserts = asserts;\n            node.typeAnnotation = null;\n            t.typeAnnotation = _this30.finishNode(node, \"TSTypePredicate\");\n            return _this30.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var type = _this30.tsParseTypeAnnotation(false);\n\n          node.parameterName = typePredicateVariable;\n          node.typeAnnotation = type;\n          node.asserts = asserts;\n          t.typeAnnotation = _this30.finishNode(node, \"TSTypePredicate\");\n          return _this30.finishNode(t, \"TSTypeAnnotation\");\n        });\n      }\n    }, {\n      key: \"tsTryParseTypeOrTypePredicateAnnotation\",\n      value: function tsTryParseTypeOrTypePredicateAnnotation() {\n        return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n      }\n    }, {\n      key: \"tsTryParseTypeAnnotation\",\n      value: function tsTryParseTypeAnnotation() {\n        return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n      }\n    }, {\n      key: \"tsTryParseType\",\n      value: function tsTryParseType() {\n        return this.tsEatThenParseType(14);\n      }\n    }, {\n      key: \"tsParseTypePredicatePrefix\",\n      value: function tsParseTypePredicatePrefix() {\n        var id = this.parseIdentifier();\n\n        if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n          this.next();\n          return id;\n        }\n      }\n    }, {\n      key: \"tsParseTypePredicateAsserts\",\n      value: function tsParseTypePredicateAsserts() {\n        if (this.state.type !== 106) {\n          return false;\n        }\n\n        var containsEsc = this.state.containsEsc;\n        this.next();\n\n        if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n          return false;\n        }\n\n        if (containsEsc) {\n          this.raise(Errors.InvalidEscapedReservedWord, {\n            at: this.state.lastTokStartLoc,\n            reservedWord: \"asserts\"\n          });\n        }\n\n        return true;\n      }\n    }, {\n      key: \"tsParseTypeAnnotation\",\n      value: function tsParseTypeAnnotation() {\n        var _this31 = this;\n\n        var eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n        this.tsInType(function () {\n          if (eatColon) _this31.expect(14);\n          t.typeAnnotation = _this31.tsParseType();\n        });\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n    }, {\n      key: \"tsParseType\",\n      value: function tsParseType() {\n        var _this32 = this;\n\n        assert(this.state.inType);\n        var type = this.tsParseNonConditionalType();\n\n        if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {\n          return type;\n        }\n\n        var node = this.startNodeAtNode(type);\n        node.checkType = type;\n        node.extendsType = this.tsInDisallowConditionalTypesContext(function () {\n          return _this32.tsParseNonConditionalType();\n        });\n        this.expect(17);\n        node.trueType = this.tsInAllowConditionalTypesContext(function () {\n          return _this32.tsParseType();\n        });\n        this.expect(14);\n        node.falseType = this.tsInAllowConditionalTypesContext(function () {\n          return _this32.tsParseType();\n        });\n        return this.finishNode(node, \"TSConditionalType\");\n      }\n    }, {\n      key: \"isAbstractConstructorSignature\",\n      value: function isAbstractConstructorSignature() {\n        return this.isContextual(120) && this.lookahead().type === 77;\n      }\n    }, {\n      key: \"tsParseNonConditionalType\",\n      value: function tsParseNonConditionalType() {\n        if (this.tsIsStartOfFunctionType()) {\n          return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n        }\n\n        if (this.match(77)) {\n          return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n        } else if (this.isAbstractConstructorSignature()) {\n          return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n        }\n\n        return this.tsParseUnionTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseTypeAssertion\",\n      value: function tsParseTypeAssertion() {\n        if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n          this.raise(TSErrors.ReservedTypeAssertion, {\n            at: this.state.startLoc\n          });\n        }\n\n        var node = this.startNode();\n\n        var _const = this.tsTryNextParseConstantContext();\n\n        node.typeAnnotation = _const || this.tsNextThenParseType();\n        this.expect(48);\n        node.expression = this.parseMaybeUnary();\n        return this.finishNode(node, \"TSTypeAssertion\");\n      }\n    }, {\n      key: \"tsParseHeritageClause\",\n      value: function tsParseHeritageClause(token) {\n        var _this33 = this;\n\n        var originalStartLoc = this.state.startLoc;\n        var delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", function () {\n          var node = _this33.startNode();\n\n          node.expression = _this33.tsParseEntityName();\n\n          if (_this33.match(47)) {\n            node.typeParameters = _this33.tsParseTypeArguments();\n          }\n\n          return _this33.finishNode(node, \"TSExpressionWithTypeArguments\");\n        });\n\n        if (!delimitedList.length) {\n          this.raise(TSErrors.EmptyHeritageClauseType, {\n            at: originalStartLoc,\n            token: token\n          });\n        }\n\n        return delimitedList;\n      }\n    }, {\n      key: \"tsParseInterfaceDeclaration\",\n      value: function tsParseInterfaceDeclaration(node) {\n        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (this.hasFollowingLineBreak()) return null;\n        this.expectContextual(125);\n        if (properties.declare) node.declare = true;\n\n        if (tokenIsIdentifier(this.state.type)) {\n          node.id = this.parseIdentifier();\n          this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n        } else {\n          node.id = null;\n          this.raise(TSErrors.MissingInterfaceName, {\n            at: this.state.startLoc\n          });\n        }\n\n        node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));\n\n        if (this.eat(81)) {\n          node.extends = this.tsParseHeritageClause(\"extends\");\n        }\n\n        var body = this.startNode();\n        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n        node.body = this.finishNode(body, \"TSInterfaceBody\");\n        return this.finishNode(node, \"TSInterfaceDeclaration\");\n      }\n    }, {\n      key: \"tsParseTypeAliasDeclaration\",\n      value: function tsParseTypeAliasDeclaration(node) {\n        var _this34 = this;\n\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_TYPE);\n        node.typeAnnotation = this.tsInType(function () {\n          node.typeParameters = _this34.tsTryParseTypeParameters(_this34.tsParseInOutModifiers.bind(_this34));\n\n          _this34.expect(29);\n\n          if (_this34.isContextual(111) && _this34.lookahead().type !== 16) {\n            var _node8 = _this34.startNode();\n\n            _this34.next();\n\n            return _this34.finishNode(_node8, \"TSIntrinsicKeyword\");\n          }\n\n          return _this34.tsParseType();\n        });\n        this.semicolon();\n        return this.finishNode(node, \"TSTypeAliasDeclaration\");\n      }\n    }, {\n      key: \"tsInNoContext\",\n      value: function tsInNoContext(cb) {\n        var oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      }\n    }, {\n      key: \"tsInType\",\n      value: function tsInType(cb) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n\n        try {\n          return cb();\n        } finally {\n          this.state.inType = oldInType;\n        }\n      }\n    }, {\n      key: \"tsInDisallowConditionalTypesContext\",\n      value: function tsInDisallowConditionalTypesContext(cb) {\n        var oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n        this.state.inDisallowConditionalTypesContext = true;\n\n        try {\n          return cb();\n        } finally {\n          this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n        }\n      }\n    }, {\n      key: \"tsInAllowConditionalTypesContext\",\n      value: function tsInAllowConditionalTypesContext(cb) {\n        var oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n        this.state.inDisallowConditionalTypesContext = false;\n\n        try {\n          return cb();\n        } finally {\n          this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n        }\n      }\n    }, {\n      key: \"tsEatThenParseType\",\n      value: function tsEatThenParseType(token) {\n        return !this.match(token) ? undefined : this.tsNextThenParseType();\n      }\n    }, {\n      key: \"tsExpectThenParseType\",\n      value: function tsExpectThenParseType(token) {\n        var _this35 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this35.expect(token);\n        });\n      }\n    }, {\n      key: \"tsNextThenParseType\",\n      value: function tsNextThenParseType() {\n        var _this36 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this36.next();\n        });\n      }\n    }, {\n      key: \"tsDoThenParseType\",\n      value: function tsDoThenParseType(cb) {\n        var _this37 = this;\n\n        return this.tsInType(function () {\n          cb();\n          return _this37.tsParseType();\n        });\n      }\n    }, {\n      key: \"tsParseEnumMember\",\n      value: function tsParseEnumMember() {\n        var node = this.startNode();\n        node.id = this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n        if (this.eat(29)) {\n          node.initializer = this.parseMaybeAssignAllowIn();\n        }\n\n        return this.finishNode(node, \"TSEnumMember\");\n      }\n    }, {\n      key: \"tsParseEnumDeclaration\",\n      value: function tsParseEnumDeclaration(node) {\n        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (properties.const) node.const = true;\n        if (properties.declare) node.declare = true;\n        this.expectContextual(122);\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n        this.expect(5);\n        node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n        this.expect(8);\n        return this.finishNode(node, \"TSEnumDeclaration\");\n      }\n    }, {\n      key: \"tsParseModuleBlock\",\n      value: function tsParseModuleBlock() {\n        var node = this.startNode();\n        this.scope.enter(SCOPE_OTHER);\n        this.expect(5);\n        this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n        this.scope.exit();\n        return this.finishNode(node, \"TSModuleBlock\");\n      }\n    }, {\n      key: \"tsParseModuleOrNamespaceDeclaration\",\n      value: function tsParseModuleOrNamespaceDeclaration(node) {\n        var nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.parseIdentifier();\n\n        if (!nested) {\n          this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n        }\n\n        if (this.eat(16)) {\n          var inner = this.startNode();\n          this.tsParseModuleOrNamespaceDeclaration(inner, true);\n          node.body = inner;\n        } else {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseAmbientExternalModuleDeclaration\",\n      value: function tsParseAmbientExternalModuleDeclaration(node) {\n        if (this.isContextual(109)) {\n          node.global = true;\n          node.id = this.parseIdentifier();\n        } else if (this.match(129)) {\n          node.id = this.parseExprAtom();\n        } else {\n          this.unexpected();\n        }\n\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        } else {\n          this.semicolon();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseImportEqualsDeclaration\",\n      value: function tsParseImportEqualsDeclaration(node, isExport) {\n        node.isExport = isExport || false;\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_LEXICAL);\n        this.expect(29);\n        var moduleReference = this.tsParseModuleReference();\n\n        if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n          this.raise(TSErrors.ImportAliasHasImportType, {\n            at: moduleReference\n          });\n        }\n\n        node.moduleReference = moduleReference;\n        this.semicolon();\n        return this.finishNode(node, \"TSImportEqualsDeclaration\");\n      }\n    }, {\n      key: \"tsIsExternalModuleReference\",\n      value: function tsIsExternalModuleReference() {\n        return this.isContextual(116) && this.lookaheadCharCode() === 40;\n      }\n    }, {\n      key: \"tsParseModuleReference\",\n      value: function tsParseModuleReference() {\n        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n      }\n    }, {\n      key: \"tsParseExternalModuleReference\",\n      value: function tsParseExternalModuleReference() {\n        var node = this.startNode();\n        this.expectContextual(116);\n        this.expect(10);\n\n        if (!this.match(129)) {\n          throw this.unexpected();\n        }\n\n        node.expression = this.parseExprAtom();\n        this.expect(11);\n        return this.finishNode(node, \"TSExternalModuleReference\");\n      }\n    }, {\n      key: \"tsLookAhead\",\n      value: function tsLookAhead(f) {\n        var state = this.state.clone();\n        var res = f();\n        this.state = state;\n        return res;\n      }\n    }, {\n      key: \"tsTryParseAndCatch\",\n      value: function tsTryParseAndCatch(f) {\n        var result = this.tryParse(function (abort) {\n          return f() || abort();\n        });\n        if (result.aborted || !result.node) return undefined;\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"tsTryParse\",\n      value: function tsTryParse(f) {\n        var state = this.state.clone();\n        var result = f();\n\n        if (result !== undefined && result !== false) {\n          return result;\n        } else {\n          this.state = state;\n          return undefined;\n        }\n      }\n    }, {\n      key: \"tsTryParseDeclare\",\n      value: function tsTryParseDeclare(nany) {\n        var _this38 = this;\n\n        if (this.isLineTerminator()) {\n          return;\n        }\n\n        var starttype = this.state.type;\n        var kind;\n\n        if (this.isContextual(99)) {\n          starttype = 74;\n          kind = \"let\";\n        }\n\n        return this.tsInAmbientContext(function () {\n          if (starttype === 68) {\n            nany.declare = true;\n            return _this38.parseFunctionStatement(nany, false, true);\n          }\n\n          if (starttype === 80) {\n            nany.declare = true;\n            return _this38.parseClass(nany, true, false);\n          }\n\n          if (starttype === 122) {\n            return _this38.tsParseEnumDeclaration(nany, {\n              declare: true\n            });\n          }\n\n          if (starttype === 109) {\n            return _this38.tsParseAmbientExternalModuleDeclaration(nany);\n          }\n\n          if (starttype === 75 || starttype === 74) {\n            if (!_this38.match(75) || !_this38.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return _this38.parseVarStatement(nany, kind || _this38.state.value, true);\n            }\n\n            _this38.expect(75);\n\n            return _this38.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true\n            });\n          }\n\n          if (starttype === 125) {\n            var result = _this38.tsParseInterfaceDeclaration(nany, {\n              declare: true\n            });\n\n            if (result) return result;\n          }\n\n          if (tokenIsIdentifier(starttype)) {\n            return _this38.tsParseDeclaration(nany, _this38.state.value, true);\n          }\n        });\n      }\n    }, {\n      key: \"tsTryParseExportDeclaration\",\n      value: function tsTryParseExportDeclaration() {\n        return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      }\n    }, {\n      key: \"tsParseExpressionStatement\",\n      value: function tsParseExpressionStatement(node, expr) {\n        switch (expr.name) {\n          case \"declare\":\n            {\n              var declaration = this.tsTryParseDeclare(node);\n\n              if (declaration) {\n                declaration.declare = true;\n                return declaration;\n              }\n\n              break;\n            }\n\n          case \"global\":\n            if (this.match(5)) {\n              this.scope.enter(SCOPE_TS_MODULE);\n              this.prodParam.enter(PARAM);\n              var mod = node;\n              mod.global = true;\n              mod.id = expr;\n              mod.body = this.tsParseModuleBlock();\n              this.scope.exit();\n              this.prodParam.exit();\n              return this.finishNode(mod, \"TSModuleDeclaration\");\n            }\n\n            break;\n\n          default:\n            return this.tsParseDeclaration(node, expr.name, false);\n        }\n      }\n    }, {\n      key: \"tsParseDeclaration\",\n      value: function tsParseDeclaration(node, value, next) {\n        switch (value) {\n          case \"abstract\":\n            if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n              return this.tsParseAbstractDeclaration(node);\n            }\n\n            break;\n\n          case \"module\":\n            if (this.tsCheckLineTerminator(next)) {\n              if (this.match(129)) {\n                return this.tsParseAmbientExternalModuleDeclaration(node);\n              } else if (tokenIsIdentifier(this.state.type)) {\n                return this.tsParseModuleOrNamespaceDeclaration(node);\n              }\n            }\n\n            break;\n\n          case \"namespace\":\n            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n\n            break;\n\n          case \"type\":\n            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n              return this.tsParseTypeAliasDeclaration(node);\n            }\n\n            break;\n        }\n      }\n    }, {\n      key: \"tsCheckLineTerminator\",\n      value: function tsCheckLineTerminator(next) {\n        if (next) {\n          if (this.hasFollowingLineBreak()) return false;\n          this.next();\n          return true;\n        }\n\n        return !this.isLineTerminator();\n      }\n    }, {\n      key: \"tsTryParseGenericAsyncArrowFunction\",\n      value: function tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n        var _this39 = this;\n\n        if (!this.match(47)) {\n          return undefined;\n        }\n\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        this.state.maybeInArrowParameters = true;\n        var res = this.tsTryParseAndCatch(function () {\n          var node = _this39.startNodeAt(startPos, startLoc);\n\n          node.typeParameters = _this39.tsParseTypeParameters();\n          (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseFunctionParams\", _this39).call(_this39, node);\n          node.returnType = _this39.tsTryParseTypeOrTypePredicateAnnotation();\n\n          _this39.expect(19);\n\n          return node;\n        });\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n        if (!res) {\n          return undefined;\n        }\n\n        return this.parseArrowExpression(res, null, true);\n      }\n    }, {\n      key: \"tsParseTypeArgumentsInExpression\",\n      value: function tsParseTypeArgumentsInExpression() {\n        if (this.reScan_lt() !== 47) {\n          return undefined;\n        }\n\n        return this.tsParseTypeArguments();\n      }\n    }, {\n      key: \"tsParseTypeArguments\",\n      value: function tsParseTypeArguments() {\n        var _this40 = this;\n\n        var node = this.startNode();\n        node.params = this.tsInType(function () {\n          return _this40.tsInNoContext(function () {\n            _this40.expect(47);\n\n            return _this40.tsParseDelimitedList(\"TypeParametersOrArguments\", _this40.tsParseType.bind(_this40));\n          });\n        });\n\n        if (node.params.length === 0) {\n          this.raise(TSErrors.EmptyTypeArguments, {\n            at: node\n          });\n        }\n\n        this.expect(48);\n        return this.finishNode(node, \"TSTypeParameterInstantiation\");\n      }\n    }, {\n      key: \"tsIsDeclarationStart\",\n      value: function tsIsDeclarationStart() {\n        return tokenIsTSDeclarationStart(this.state.type);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.tsIsDeclarationStart()) return false;\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseAssignableListItem\",\n      value: function parseAssignableListItem(allowModifiers, decorators) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var accessibility;\n        var readonly = false;\n        var override = false;\n\n        if (allowModifiers !== undefined) {\n          var modified = {};\n          this.tsParseModifiers({\n            modified: modified,\n            allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n          });\n          accessibility = modified.accessibility;\n          override = modified.override;\n          readonly = modified.readonly;\n\n          if (allowModifiers === false && (accessibility || readonly || override)) {\n            this.raise(TSErrors.UnexpectedParameterModifier, {\n              at: startLoc\n            });\n          }\n        }\n\n        var left = this.parseMaybeDefault();\n        this.parseAssignableListItemTypes(left);\n        var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n        if (accessibility || readonly || override) {\n          var pp = this.startNodeAt(startPos, startLoc);\n\n          if (decorators.length) {\n            pp.decorators = decorators;\n          }\n\n          if (accessibility) pp.accessibility = accessibility;\n          if (readonly) pp.readonly = readonly;\n          if (override) pp.override = override;\n\n          if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n            this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n              at: pp\n            });\n          }\n\n          pp.parameter = elt;\n          return this.finishNode(pp, \"TSParameterProperty\");\n        }\n\n        if (decorators.length) {\n          left.decorators = decorators;\n        }\n\n        return elt;\n      }\n    }, {\n      key: \"isSimpleParameter\",\n      value: function isSimpleParameter(node) {\n        return node.type === \"TSParameterProperty\" && (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isSimpleParameter\", this).call(this, node.parameter) || (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isSimpleParameter\", this).call(this, node);\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(14)) {\n          node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        }\n\n        var bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n        if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n          this.finishNode(node, bodilessType);\n          return;\n        }\n\n        if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n          this.raise(TSErrors.DeclareFunctionHasImplementation, {\n            at: node\n          });\n\n          if (node.declare) {\n            (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, bodilessType, isMethod);\n            return;\n          }\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"registerFunctionStatementId\",\n      value: function registerFunctionStatementId(node) {\n        if (!node.body && node.id) {\n          this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n        } else {\n          (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"registerFunctionStatementId\", this).apply(this, arguments);\n        }\n      }\n    }, {\n      key: \"tsCheckForInvalidTypeCasts\",\n      value: function tsCheckForInvalidTypeCasts(items) {\n        var _this41 = this;\n\n        items.forEach(function (node) {\n          if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n            _this41.raise(TSErrors.UnexpectedTypeAnnotation, {\n              at: node.typeAnnotation\n            });\n          }\n        });\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isInParens) {\n        this.tsCheckForInvalidTypeCasts(exprList);\n        return exprList;\n      }\n    }, {\n      key: \"parseArrayLike\",\n      value: function parseArrayLike() {\n        var _get7;\n\n        for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n          args[_key9] = arguments[_key9];\n        }\n\n        var node = (_get7 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseArrayLike\", this)).call.apply(_get7, [this].concat(args));\n\n        if (node.type === \"ArrayExpression\") {\n          this.tsCheckForInvalidTypeCasts(node.elements);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        var _this42 = this;\n\n        if (!this.hasPrecedingLineBreak() && this.match(35)) {\n          this.state.canStartJSXElement = false;\n          this.next();\n          var nonNullExpression = this.startNodeAt(startPos, startLoc);\n          nonNullExpression.expression = base;\n          return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n        }\n\n        var isOptionalCall = false;\n\n        if (this.match(18) && this.lookaheadCharCode() === 60) {\n          if (noCalls) {\n            state.stop = true;\n            return base;\n          }\n\n          state.optionalChainMember = isOptionalCall = true;\n          this.next();\n        }\n\n        if (this.match(47) || this.match(51)) {\n          var missingParenErrorLoc;\n          var result = this.tsTryParseAndCatch(function () {\n            if (!noCalls && _this42.atPossibleAsyncArrow(base)) {\n              var asyncArrowFn = _this42.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n              if (asyncArrowFn) {\n                return asyncArrowFn;\n              }\n            }\n\n            var typeArguments = _this42.tsParseTypeArgumentsInExpression();\n\n            if (!typeArguments) throw _this42.unexpected();\n\n            if (isOptionalCall && !_this42.match(10)) {\n              missingParenErrorLoc = _this42.state.curPosition();\n              throw _this42.unexpected();\n            }\n\n            if (tokenIsTemplate(_this42.state.type)) {\n              var _result = _this42.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n\n              _result.typeParameters = typeArguments;\n              return _result;\n            }\n\n            if (!noCalls && _this42.eat(10)) {\n              var _node9 = _this42.startNodeAt(startPos, startLoc);\n\n              _node9.callee = base;\n              _node9.arguments = _this42.parseCallExpressionArguments(11, false);\n\n              _this42.tsCheckForInvalidTypeCasts(_node9.arguments);\n\n              _node9.typeParameters = typeArguments;\n\n              if (state.optionalChainMember) {\n                _node9.optional = isOptionalCall;\n              }\n\n              return _this42.finishCallExpression(_node9, state.optionalChainMember);\n            }\n\n            if (tsTokenCanStartExpression(_this42.state.type) && _this42.state.type !== 10) {\n              throw _this42.unexpected();\n            }\n\n            var node = _this42.startNodeAt(startPos, startLoc);\n\n            node.expression = base;\n            node.typeParameters = typeArguments;\n            return _this42.finishNode(node, \"TSInstantiationExpression\");\n          });\n\n          if (missingParenErrorLoc) {\n            this.unexpected(missingParenErrorLoc, 10);\n          }\n\n          if (result) return result;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n      }\n    }, {\n      key: \"parseNewCallee\",\n      value: function parseNewCallee(node) {\n        var _callee$extra;\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseNewCallee\", this).call(this, node);\n        var callee = node.callee;\n\n        if (callee.type === \"TSInstantiationExpression\" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {\n          node.typeParameters = callee.typeParameters;\n          node.callee = callee.expression;\n        }\n      }\n    }, {\n      key: \"parseExprOp\",\n      value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n        if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.expression = left;\n\n          var _const = this.tsTryNextParseConstantContext();\n\n          if (_const) {\n            node.typeAnnotation = _const;\n          } else {\n            node.typeAnnotation = this.tsNextThenParseType();\n          }\n\n          this.finishNode(node, \"TSAsExpression\");\n          this.reScan_lt_gt();\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExprOp\", this).call(this, left, leftStartPos, leftStartLoc, minPrec);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n        if (!this.state.isAmbientContext) {\n          (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"checkReservedWord\", this).call(this, word, startLoc, checkKeywords, isBinding);\n        }\n      }\n    }, {\n      key: \"checkDuplicateExports\",\n      value: function checkDuplicateExports() {}\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        node.importKind = \"value\";\n\n        if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {\n          var ahead = this.lookahead();\n\n          if (this.isContextual(126) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {\n            node.importKind = \"type\";\n            this.next();\n            ahead = this.lookahead();\n          }\n\n          if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n            return this.tsParseImportEqualsDeclaration(node);\n          }\n        }\n\n        var importNode = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseImport\", this).call(this, node);\n\n        if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n          this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n            at: importNode\n          });\n        }\n\n        return importNode;\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        if (this.match(83)) {\n          this.next();\n\n          if (this.isContextual(126) && this.lookaheadCharCode() !== 61) {\n            node.importKind = \"type\";\n            this.next();\n          } else {\n            node.importKind = \"value\";\n          }\n\n          return this.tsParseImportEqualsDeclaration(node, true);\n        } else if (this.eat(29)) {\n          var assign = node;\n          assign.expression = this.parseExpression();\n          this.semicolon();\n          return this.finishNode(assign, \"TSExportAssignment\");\n        } else if (this.eatContextual(93)) {\n          var decl = node;\n          this.expectContextual(124);\n          decl.id = this.parseIdentifier();\n          this.semicolon();\n          return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n        } else {\n          if (this.isContextual(126) && this.lookahead().type === 5) {\n            this.next();\n            node.exportKind = \"type\";\n          } else {\n            node.exportKind = \"value\";\n          }\n\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExport\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"isAbstractClass\",\n      value: function isAbstractClass() {\n        return this.isContextual(120) && this.lookahead().type === 80;\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.isAbstractClass()) {\n          var cls = this.startNode();\n          this.next();\n          cls.abstract = true;\n          this.parseClass(cls, true, true);\n          return cls;\n        }\n\n        if (this.match(125)) {\n          var result = this.tsParseInterfaceDeclaration(this.startNode());\n          if (result) return result;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseVarStatement\",\n      value: function parseVarStatement(node, kind) {\n        var allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var isAmbientContext = this.state.isAmbientContext;\n        var declaration = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseVarStatement\", this).call(this, node, kind, allowMissingInitializer || isAmbientContext);\n        if (!isAmbientContext) return declaration;\n\n        var _iterator6 = _createForOfIteratorHelper(declaration.declarations),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _step6$value = _step6.value,\n                id = _step6$value.id,\n                init = _step6$value.init;\n            if (!init) continue;\n\n            if (kind !== \"const\" || !!id.typeAnnotation) {\n              this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n                at: init\n              });\n            } else if (init.type !== \"StringLiteral\" && init.type !== \"BooleanLiteral\" && init.type !== \"NumericLiteral\" && init.type !== \"BigIntLiteral\" && (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) && !isPossiblyLiteralEnum(init)) {\n              this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {\n                at: init\n              });\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        return declaration;\n      }\n    }, {\n      key: \"parseStatementContent\",\n      value: function parseStatementContent(context, topLevel) {\n        if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n          var node = this.startNode();\n          this.expect(75);\n          return this.tsParseEnumDeclaration(node, {\n            const: true\n          });\n        }\n\n        if (this.isContextual(122)) {\n          return this.tsParseEnumDeclaration(this.startNode());\n        }\n\n        if (this.isContextual(125)) {\n          var result = this.tsParseInterfaceDeclaration(this.startNode());\n          if (result) return result;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseStatementContent\", this).call(this, context, topLevel);\n      }\n    }, {\n      key: \"parseAccessModifier\",\n      value: function parseAccessModifier() {\n        return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n      }\n    }, {\n      key: \"tsHasSomeModifiers\",\n      value: function tsHasSomeModifiers(member, modifiers) {\n        return modifiers.some(function (modifier) {\n          if (tsIsAccessModifier(modifier)) {\n            return member.accessibility === modifier;\n          }\n\n          return !!member[modifier];\n        });\n      }\n    }, {\n      key: \"tsIsStartOfStaticBlocks\",\n      value: function tsIsStartOfStaticBlocks() {\n        return this.isContextual(104) && this.lookaheadCharCode() === 123;\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state) {\n        var _this43 = this;\n\n        var modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n        this.tsParseModifiers({\n          modified: member,\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n        });\n\n        var callParseClassMemberWithIsStatic = function callParseClassMemberWithIsStatic() {\n          if (_this43.tsIsStartOfStaticBlocks()) {\n            _this43.next();\n\n            _this43.next();\n\n            if (_this43.tsHasSomeModifiers(member, modifiers)) {\n              _this43.raise(TSErrors.StaticBlockCannotHaveModifier, {\n                at: _this43.state.curPosition()\n              });\n            }\n\n            _this43.parseClassStaticBlock(classBody, member);\n          } else {\n            _this43.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n          }\n        };\n\n        if (member.declare) {\n          this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n        } else {\n          callParseClassMemberWithIsStatic();\n        }\n      }\n    }, {\n      key: \"parseClassMemberWithIsStatic\",\n      value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n        var idx = this.tsTryParseIndexSignature(member);\n\n        if (idx) {\n          classBody.body.push(idx);\n\n          if (member.abstract) {\n            this.raise(TSErrors.IndexSignatureHasAbstract, {\n              at: member\n            });\n          }\n\n          if (member.accessibility) {\n            this.raise(TSErrors.IndexSignatureHasAccessibility, {\n              at: member,\n              modifier: member.accessibility\n            });\n          }\n\n          if (member.declare) {\n            this.raise(TSErrors.IndexSignatureHasDeclare, {\n              at: member\n            });\n          }\n\n          if (member.override) {\n            this.raise(TSErrors.IndexSignatureHasOverride, {\n              at: member\n            });\n          }\n\n          return;\n        }\n\n        if (!this.state.inAbstractClass && member.abstract) {\n          this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n            at: member\n          });\n        }\n\n        if (member.override) {\n          if (!state.hadSuperClass) {\n            this.raise(TSErrors.OverrideNotInSubClass, {\n              at: member\n            });\n          }\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassMemberWithIsStatic\", this).call(this, classBody, member, state, isStatic);\n      }\n    }, {\n      key: \"parsePostMemberNameModifiers\",\n      value: function parsePostMemberNameModifiers(methodOrProp) {\n        var optional = this.eat(17);\n        if (optional) methodOrProp.optional = true;\n\n        if (methodOrProp.readonly && this.match(10)) {\n          this.raise(TSErrors.ClassMethodHasReadonly, {\n            at: methodOrProp\n          });\n        }\n\n        if (methodOrProp.declare && this.match(10)) {\n          this.raise(TSErrors.ClassMethodHasDeclare, {\n            at: methodOrProp\n          });\n        }\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        var decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n        return decl || (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        if (this.tsIsDeclarationStart()) return true;\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n        var _this44 = this;\n\n        if (!this.state.maybeInArrowParameters || !this.match(17)) {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseConditional\", this).call(this, expr, startPos, startLoc, refExpressionErrors);\n        }\n\n        var result = this.tryParse(function () {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseConditional\", _this44).call(_this44, expr, startPos, startLoc);\n        });\n\n        if (!result.node) {\n          if (result.error) {\n            (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"setOptionalParametersError\", this).call(this, refExpressionErrors, result.error);\n          }\n\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(17)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(14)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        var _this45 = this;\n\n        if (!this.state.isAmbientContext && this.isContextual(121)) {\n          return this.tsInAmbientContext(function () {\n            return _this45.parseExportDeclaration(node);\n          });\n        }\n\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var isDeclare = this.eatContextual(121);\n\n        if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration())) {\n          throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n            at: this.state.startLoc\n          });\n        }\n\n        var isIdentifier = tokenIsIdentifier(this.state.type);\n        var declaration = isIdentifier && this.tsTryParseExportDeclaration() || (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExportDeclaration\", this).call(this, node);\n        if (!declaration) return null;\n\n        if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n          node.exportKind = \"type\";\n        }\n\n        if (isDeclare) {\n          this.resetStartLocation(declaration, startPos, startLoc);\n          declaration.declare = true;\n        }\n\n        return declaration;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        if ((!isStatement || optionalId) && this.isContextual(110)) {\n          return;\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n        var typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));\n        if (typeParameters) node.typeParameters = typeParameters;\n      }\n    }, {\n      key: \"parseClassPropertyAnnotation\",\n      value: function parseClassPropertyAnnotation(node) {\n        if (!node.optional && this.eat(35)) {\n          node.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        this.parseClassPropertyAnnotation(node);\n\n        if (this.state.isAmbientContext && this.match(29)) {\n          this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n            at: this.state.startLoc\n          });\n        }\n\n        if (node.abstract && this.match(29)) {\n          var key = node.key;\n          this.raise(TSErrors.AbstractPropertyHasInitializer, {\n            at: this.state.startLoc,\n            propertyName: key.type === \"Identifier\" && !node.computed ? key.name : \"[\".concat(this.input.slice(key.start, key.end), \"]\")\n          });\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (node.abstract) {\n          this.raise(TSErrors.PrivateElementHasAbstract, {\n            at: node\n          });\n        }\n\n        if (node.accessibility) {\n          this.raise(TSErrors.PrivateElementHasAccessibility, {\n            at: node,\n            modifier: node.accessibility\n          });\n        }\n\n        this.parseClassPropertyAnnotation(node);\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        var typeParameters = this.tsTryParseTypeParameters();\n\n        if (typeParameters && isConstructor) {\n          this.raise(TSErrors.ConstructorHasTypeParameters, {\n            at: typeParameters\n          });\n        }\n\n        var _method$declare = method.declare,\n            declare = _method$declare === void 0 ? false : _method$declare,\n            kind = method.kind;\n\n        if (declare && (kind === \"get\" || kind === \"set\")) {\n          this.raise(TSErrors.DeclareAccessor, {\n            at: method,\n            kind: kind\n          });\n        }\n\n        if (typeParameters) method.typeParameters = typeParameters;\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) method.typeParameters = typeParameters;\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"declareClassPrivateMethodInScope\",\n      value: function declareClassPrivateMethodInScope(node, kind) {\n        if (node.type === \"TSDeclareMethod\") return;\n        if (node.type === \"MethodDefinition\" && !node.value.body) return;\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"declareClassPrivateMethodInScope\", this).call(this, node, kind);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && (this.match(47) || this.match(51))) {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n\n        if (this.eatContextual(110)) {\n          node.implements = this.tsParseHeritageClause(\"implements\");\n        }\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop) {\n        var _get8;\n\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) prop.typeParameters = typeParameters;\n\n        for (var _len10 = arguments.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n          args[_key10 - 1] = arguments[_key10];\n        }\n\n        (_get8 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseObjPropValue\", this)).call.apply(_get8, [this, prop].concat(args));\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) node.typeParameters = typeParameters;\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n          decl.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n\n        if (type) {\n          decl.id.typeAnnotation = type;\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(14)) {\n          node.returnType = this.tsParseTypeAnnotation();\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign() {\n        var _this46 = this;\n\n        for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n          args[_key11] = arguments[_key11];\n        }\n\n        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n        var state;\n        var jsx;\n        var typeCast;\n\n        if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            var _get9;\n\n            return (_get9 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeAssign\", _this46)).call.apply(_get9, [_this46].concat(args));\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n          var currentContext = context[context.length - 1];\n\n          if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n            context.pop();\n          }\n        }\n\n        if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n          var _get10;\n\n          return (_get10 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeAssign\", this)).call.apply(_get10, [this].concat(args));\n        }\n\n        var typeParameters;\n        state = state || this.state.clone();\n        var arrow = this.tryParse(function (abort) {\n          var _get11;\n\n          var _expr$extra, _typeParameters, _expr$typeParameters$;\n\n          typeParameters = _this46.tsParseTypeParameters();\n\n          var expr = (_get11 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeAssign\", _this46)).call.apply(_get11, [_this46].concat(args));\n\n          if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n            abort();\n          }\n\n          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n            _this46.resetStartLocationFromNode(expr, typeParameters);\n          }\n\n          expr.typeParameters = typeParameters;\n\n          if (_this46.hasPlugin(\"jsx\") && expr.typeParameters.params.length === 1 && !((_expr$typeParameters$ = expr.typeParameters.extra) != null && _expr$typeParameters$.trailingComma)) {\n            var parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) ;\n          }\n\n          return expr;\n        }, state);\n\n        if (!arrow.error && !arrow.aborted) {\n          if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n          return arrow.node;\n        }\n\n        if (!jsx) {\n          assert(!this.hasPlugin(\"jsx\"));\n          typeCast = this.tryParse(function () {\n            var _get12;\n\n            return (_get12 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeAssign\", _this46)).call.apply(_get12, [_this46].concat(args));\n          }, state);\n          if (!typeCast.error) return typeCast.node;\n        }\n\n        if ((_jsx2 = jsx) != null && _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n          return arrow.node;\n        }\n\n        if ((_typeCast = typeCast) != null && _typeCast.node) {\n          this.state = typeCast.failState;\n          return typeCast.node;\n        }\n\n        if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n        throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n      }\n    }, {\n      key: \"reportReservedArrowTypeParam\",\n      value: function reportReservedArrowTypeParam(node) {\n        var _node$extra;\n\n        if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n          this.raise(TSErrors.ReservedArrowTypeParam, {\n            at: node\n          });\n        }\n      }\n    }, {\n      key: \"parseMaybeUnary\",\n      value: function parseMaybeUnary(refExpressionErrors) {\n        if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n          return this.tsParseTypeAssertion();\n        } else {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeUnary\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this47 = this;\n\n        if (this.match(14)) {\n          var result = this.tryParse(function (abort) {\n            var returnType = _this47.tsParseTypeOrTypePredicateAnnotation(14);\n\n            if (_this47.canInsertSemicolon() || !_this47.match(19)) abort();\n            return returnType;\n          });\n          if (result.aborted) return;\n\n          if (!result.thrown) {\n            if (result.error) this.state = result.failState;\n            node.returnType = result.node;\n          }\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(17)) {\n          if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n            this.raise(TSErrors.PatternIsOptional, {\n              at: param\n            });\n          }\n\n          param.optional = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) param.typeAnnotation = type;\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        switch (node.type) {\n          case \"TSTypeCastExpression\":\n            return this.isAssignable(node.expression, isBinding);\n\n          case \"TSParameterProperty\":\n            return true;\n\n          default:\n            return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isAssignable\", this).call(this, node, isBinding);\n        }\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        switch (node.type) {\n          case \"ParenthesizedExpression\":\n            this.toAssignableParenthesizedExpression(node, isLHS);\n            break;\n\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n            if (isLHS) {\n              this.expressionScope.recordArrowParemeterBindingError(TSErrors.UnexpectedTypeCastInParameter, {\n                at: node\n              });\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                at: node\n              });\n            }\n\n            this.toAssignable(node.expression, isLHS);\n            break;\n\n          case \"AssignmentExpression\":\n            if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n              node.left = this.typeCastToParameter(node.left);\n            }\n\n          default:\n            (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"toAssignableParenthesizedExpression\",\n      value: function toAssignableParenthesizedExpression(node, isLHS) {\n        switch (node.expression.type) {\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n          case \"ParenthesizedExpression\":\n            this.toAssignable(node.expression, isLHS);\n            break;\n\n          default:\n            (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"checkToRestConversion\",\n      value: function checkToRestConversion(node, allowPattern) {\n        switch (node.type) {\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n          case \"TSNonNullExpression\":\n            this.checkToRestConversion(node.expression, false);\n            break;\n\n          default:\n            (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"checkToRestConversion\", this).call(this, node, allowPattern);\n        }\n      }\n    }, {\n      key: \"isValidLVal\",\n      value: function isValidLVal(type, isUnparenthesizedInAssign, binding) {\n        return getOwn$1({\n          TSTypeCastExpression: true,\n          TSParameterProperty: \"parameter\",\n          TSNonNullExpression: \"expression\",\n          TSAsExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n          TSTypeAssertion: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true]\n        }, type) || (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isValidLVal\", this).call(this, type, isUnparenthesizedInAssign, binding);\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        switch (this.state.type) {\n          case 78:\n            return this.parseIdentifier(true);\n\n          default:\n            return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseBindingAtom\", this).call(this);\n        }\n      }\n    }, {\n      key: \"parseMaybeDecoratorArguments\",\n      value: function parseMaybeDecoratorArguments(expr) {\n        if (this.match(47) || this.match(51)) {\n          var typeArguments = this.tsParseTypeArgumentsInExpression();\n\n          if (this.match(10)) {\n            var call = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n            call.typeParameters = typeArguments;\n            return call;\n          }\n\n          this.unexpected(null, 10);\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n      }\n    }, {\n      key: \"checkCommaAfterRest\",\n      value: function checkCommaAfterRest(close) {\n        if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n          this.next();\n          return false;\n        } else {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"checkCommaAfterRest\", this).call(this, close);\n        }\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.match(47) || (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(35) || this.match(14) || (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault() {\n        var _get13;\n\n        for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n          args[_key12] = arguments[_key12];\n        }\n\n        var node = (_get13 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeDefault\", this)).call.apply(_get13, [this].concat(args));\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(TSErrors.TypeAnnotationAfterAssign, {\n            at: node.typeAnnotation\n          });\n        }\n\n        return node;\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inType) {\n          if (code === 62) {\n            return this.finishOp(48, 1);\n          }\n\n          if (code === 60) {\n            return this.finishOp(47, 1);\n          }\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"getTokenFromCode\", this).call(this, code);\n      }\n    }, {\n      key: \"reScan_lt_gt\",\n      value: function reScan_lt_gt() {\n        var type = this.state.type;\n\n        if (type === 47) {\n          this.state.pos -= 1;\n          this.readToken_lt();\n        } else if (type === 48) {\n          this.state.pos -= 1;\n          this.readToken_gt();\n        }\n      }\n    }, {\n      key: \"reScan_lt\",\n      value: function reScan_lt() {\n        var type = this.state.type;\n\n        if (type === 51) {\n          this.state.pos -= 2;\n          this.finishOp(47, 1);\n          return 47;\n        }\n\n        return type;\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n\n          if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n            exprList[i] = this.typeCastToParameter(expr);\n          }\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"toAssignableList\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow(params) {\n        var _this48 = this;\n\n        if (this.match(14)) {\n          return params.every(function (expr) {\n            return _this48.isAssignable(expr, true);\n          });\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"shouldParseArrow\", this).call(this, params);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(14) || (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"canHaveLeadingDecorator\",\n      value: function canHaveLeadingDecorator() {\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"canHaveLeadingDecorator\", this).call(this) || this.isAbstractClass();\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var _this49 = this;\n\n        if (this.match(47) || this.match(51)) {\n          var typeArguments = this.tsTryParseAndCatch(function () {\n            return _this49.tsParseTypeArgumentsInExpression();\n          });\n          if (typeArguments) node.typeParameters = typeArguments;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"jsxParseOpeningElementAfterName\", this).call(this, node);\n      }\n    }, {\n      key: \"getGetterSetterExpectedParamCount\",\n      value: function getGetterSetterExpectedParamCount(method) {\n        var baseCount = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"getGetterSetterExpectedParamCount\", this).call(this, method);\n        var params = this.getObjectOrClassMethodParams(method);\n        var firstParam = params[0];\n        var hasContextParam = firstParam && this.isThisParam(firstParam);\n        return hasContextParam ? baseCount + 1 : baseCount;\n      }\n    }, {\n      key: \"parseCatchClauseParam\",\n      value: function parseCatchClauseParam() {\n        var param = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseCatchClauseParam\", this).call(this);\n        var type = this.tsTryParseTypeAnnotation();\n\n        if (type) {\n          param.typeAnnotation = type;\n          this.resetEndLocation(param);\n        }\n\n        return param;\n      }\n    }, {\n      key: \"tsInAmbientContext\",\n      value: function tsInAmbientContext(cb) {\n        var oldIsAmbientContext = this.state.isAmbientContext;\n        this.state.isAmbientContext = true;\n\n        try {\n          return cb();\n        } finally {\n          this.state.isAmbientContext = oldIsAmbientContext;\n        }\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node) {\n        var oldInAbstractClass = this.state.inAbstractClass;\n        this.state.inAbstractClass = !!node.abstract;\n\n        try {\n          var _get14;\n\n          for (var _len13 = arguments.length, args = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {\n            args[_key13 - 1] = arguments[_key13];\n          }\n\n          return (_get14 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClass\", this)).call.apply(_get14, [this, node].concat(args));\n        } finally {\n          this.state.inAbstractClass = oldInAbstractClass;\n        }\n      }\n    }, {\n      key: \"tsParseAbstractDeclaration\",\n      value: function tsParseAbstractDeclaration(node) {\n        if (this.match(80)) {\n          node.abstract = true;\n          return this.parseClass(node, true, false);\n        } else if (this.isContextual(125)) {\n          if (!this.hasFollowingLineBreak()) {\n            node.abstract = true;\n            this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n              at: node\n            });\n            return this.tsParseInterfaceDeclaration(node);\n          }\n        } else {\n          this.unexpected(null, 80);\n        }\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod() {\n        var _get15;\n\n        for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n          args[_key14] = arguments[_key14];\n        }\n\n        var method = (_get15 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMethod\", this)).call.apply(_get15, [this].concat(args));\n\n        if (method.abstract) {\n          var hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n          if (hasBody) {\n            var key = method.key;\n            this.raise(TSErrors.AbstractMethodHasImplementation, {\n              at: method,\n              methodName: key.type === \"Identifier\" && !method.computed ? key.name : \"[\".concat(this.input.slice(key.start, key.end), \"]\")\n            });\n          }\n        }\n\n        return method;\n      }\n    }, {\n      key: \"tsParseTypeParameterName\",\n      value: function tsParseTypeParameterName() {\n        var typeName = this.parseIdentifier();\n        return typeName.name;\n      }\n    }, {\n      key: \"shouldParseAsAmbientContext\",\n      value: function shouldParseAsAmbientContext() {\n        return !!this.getPluginOption(\"typescript\", \"dts\");\n      }\n    }, {\n      key: \"parse\",\n      value: function parse() {\n        if (this.shouldParseAsAmbientContext()) {\n          this.state.isAmbientContext = true;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parse\", this).call(this);\n      }\n    }, {\n      key: \"getExpression\",\n      value: function getExpression() {\n        if (this.shouldParseAsAmbientContext()) {\n          this.state.isAmbientContext = true;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"getExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseExportSpecifier\",\n      value: function parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n        if (!isString && isMaybeTypeOnly) {\n          this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n          return this.finishNode(node, \"ExportSpecifier\");\n        }\n\n        node.exportKind = \"value\";\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExportSpecifier\", this).call(this, node, isString, isInTypeExport, isMaybeTypeOnly);\n      }\n    }, {\n      key: \"parseImportSpecifier\",\n      value: function parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n        if (!importedIsString && isMaybeTypeOnly) {\n          this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n          return this.finishNode(specifier, \"ImportSpecifier\");\n        }\n\n        specifier.importKind = \"value\";\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseImportSpecifier\", this).call(this, specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n      }\n    }, {\n      key: \"parseTypeOnlyImportExportSpecifier\",\n      value: function parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n        var leftOfAsKey = isImport ? \"imported\" : \"local\";\n        var rightOfAsKey = isImport ? \"local\" : \"exported\";\n        var leftOfAs = node[leftOfAsKey];\n        var rightOfAs;\n        var hasTypeSpecifier = false;\n        var canParseAsKeyword = true;\n        var loc = leftOfAs.loc.start;\n\n        if (this.isContextual(93)) {\n          var firstAs = this.parseIdentifier();\n\n          if (this.isContextual(93)) {\n            var secondAs = this.parseIdentifier();\n\n            if (tokenIsKeywordOrIdentifier(this.state.type)) {\n              hasTypeSpecifier = true;\n              leftOfAs = firstAs;\n              rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n              canParseAsKeyword = false;\n            } else {\n              rightOfAs = secondAs;\n              canParseAsKeyword = false;\n            }\n          } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            canParseAsKeyword = false;\n            rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          } else {\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n\n          if (isImport) {\n            leftOfAs = this.parseIdentifier(true);\n\n            if (!this.isContextual(93)) {\n              this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);\n            }\n          } else {\n            leftOfAs = this.parseModuleExportName();\n          }\n        }\n\n        if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n          this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n            at: loc\n          });\n        }\n\n        node[leftOfAsKey] = leftOfAs;\n        node[rightOfAsKey] = rightOfAs;\n        var kindKey = isImport ? \"importKind\" : \"exportKind\";\n        node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n        if (canParseAsKeyword && this.eatContextual(93)) {\n          node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n        }\n\n        if (!node[rightOfAsKey]) {\n          node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n        }\n\n        if (isImport) {\n          this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n        }\n      }\n    }]);\n    return _class4;\n  }(superClass);\n};\n\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  var computed = expression.computed,\n      property = expression.property;\n\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nvar PlaceholderErrors = ParseErrorEnum(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2.default)([\"placeholders\"])))(function (_) {\n  return {\n    ClassNameIsRequired: _(\"A class name is required.\"),\n    UnexpectedSpace: _(\"Unexpected space in placeholder.\")\n  };\n});\n\nvar placeholders = function placeholders(superClass) {\n  return /*#__PURE__*/function (_superClass5) {\n    (0, _inherits2.default)(_class5, _superClass5);\n\n    var _super14 = _createSuper(_class5);\n\n    function _class5() {\n      (0, _classCallCheck2.default)(this, _class5);\n      return _super14.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class5, [{\n      key: \"parsePlaceholder\",\n      value: function parsePlaceholder(expectedNode) {\n        if (this.match(140)) {\n          var node = this.startNode();\n          this.next();\n          this.assertNoSpace();\n          node.name = (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseIdentifier\", this).call(this, true);\n          this.assertNoSpace();\n          this.expect(140);\n          return this.finishPlaceholder(node, expectedNode);\n        }\n      }\n    }, {\n      key: \"finishPlaceholder\",\n      value: function finishPlaceholder(node, expectedNode) {\n        var isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n        node.expectedNode = expectedNode;\n        return isFinished ? node : this.finishNode(node, \"Placeholder\");\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n          return this.finishOp(140, 2);\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"getTokenFromCode\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parsePlaceholder(\"Expression\") || (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseIdentifier\",\n      value: function parseIdentifier() {\n        return this.parsePlaceholder(\"Identifier\") || (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseIdentifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word) {\n        if (word !== undefined) (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"checkReservedWord\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        return this.parsePlaceholder(\"Pattern\") || (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseBindingAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"isValidLVal\",\n      value: function isValidLVal(type) {\n        var _get16;\n\n        for (var _len15 = arguments.length, rest = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {\n          rest[_key15 - 1] = arguments[_key15];\n        }\n\n        return type === \"Placeholder\" || (_get16 = (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"isValidLVal\", this)).call.apply(_get16, [this, type].concat(rest));\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n          node.expectedNode = \"Pattern\";\n        } else {\n          (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"toAssignable\", this).apply(this, arguments);\n        }\n      }\n    }, {\n      key: \"isLet\",\n      value: function isLet(context) {\n        if ((0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"isLet\", this).call(this, context)) {\n          return true;\n        }\n\n        if (!this.isContextual(99)) {\n          return false;\n        }\n\n        if (context) return false;\n        var nextToken = this.lookahead();\n\n        if (nextToken.type === 140) {\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"verifyBreakContinue\",\n      value: function verifyBreakContinue(node) {\n        if (node.label && node.label.type === \"Placeholder\") return;\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"verifyBreakContinue\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n          return (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseExpressionStatement\", this).apply(this, arguments);\n        }\n\n        if (this.match(14)) {\n          var stmt = node;\n          stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n          this.next();\n          stmt.body = this.parseStatement(\"label\");\n          return this.finishNode(stmt, \"LabeledStatement\");\n        }\n\n        this.semicolon();\n        node.name = expr.name;\n        return this.finishPlaceholder(node, \"Statement\");\n      }\n    }, {\n      key: \"parseBlock\",\n      value: function parseBlock() {\n        return this.parsePlaceholder(\"BlockStatement\") || (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseBlock\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseFunctionId\",\n      value: function parseFunctionId() {\n        return this.parsePlaceholder(\"Identifier\") || (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseFunctionId\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node, isStatement, optionalId) {\n        var type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n        this.next();\n        this.takeDecorators(node);\n        var oldStrict = this.state.strict;\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n\n        if (placeholder) {\n          if (this.match(81) || this.match(140) || this.match(5)) {\n            node.id = placeholder;\n          } else if (optionalId || !isStatement) {\n            node.id = null;\n            node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n            return this.finishNode(node, type);\n          } else {\n            throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n              at: this.state.startLoc\n            });\n          }\n        } else {\n          this.parseClassId(node, isStatement, optionalId);\n        }\n\n        this.parseClassSuper(node);\n        node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseExport\", this).apply(this, arguments);\n\n        if (!this.isContextual(97) && !this.match(12)) {\n          node.specifiers = [];\n          node.source = null;\n          node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        }\n\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = placeholder;\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseExport\", this).call(this, node);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(65)) {\n          var next = this.nextTokenStart();\n\n          if (this.isUnparsedContextual(next, \"from\")) {\n            if (this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(next + 4))) {\n              return true;\n            }\n          }\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"maybeParseExportDefaultSpecifier\",\n      value: function maybeParseExportDefaultSpecifier(node) {\n        if (node.specifiers && node.specifiers.length > 0) {\n          return true;\n        }\n\n        return (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"maybeParseExportDefaultSpecifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkExport\",\n      value: function checkExport(node) {\n        var specifiers = node.specifiers;\n\n        if (specifiers != null && specifiers.length) {\n          node.specifiers = specifiers.filter(function (node) {\n            return node.exported.type === \"Placeholder\";\n          });\n        }\n\n        (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"checkExport\", this).call(this, node);\n        node.specifiers = specifiers;\n      }\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseImport\", this).apply(this, arguments);\n        node.specifiers = [];\n\n        if (!this.isContextual(97) && !this.match(12)) {\n          node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n          this.semicolon();\n          return this.finishNode(node, \"ImportDeclaration\");\n        }\n\n        var specifier = this.startNodeAtNode(placeholder);\n        specifier.local = placeholder;\n        this.finishNode(specifier, \"ImportDefaultSpecifier\");\n        node.specifiers.push(specifier);\n\n        if (this.eat(12)) {\n          var hasStarImport = this.maybeParseStarImportSpecifier(node);\n          if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n        }\n\n        this.expectContextual(97);\n        node.source = this.parseImportSource();\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n    }, {\n      key: \"parseImportSource\",\n      value: function parseImportSource() {\n        return this.parsePlaceholder(\"StringLiteral\") || (0, _get17.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseImportSource\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"assertNoSpace\",\n      value: function assertNoSpace() {\n        if (this.state.start > this.state.lastTokEndLoc.index) {\n          this.raise(PlaceholderErrors.UnexpectedSpace, {\n            at: this.state.lastTokEndLoc\n          });\n        }\n      }\n    }]);\n    return _class5;\n  }(superClass);\n};\n\nvar v8intrinsic = function v8intrinsic(superClass) {\n  return /*#__PURE__*/function (_superClass6) {\n    (0, _inherits2.default)(_class6, _superClass6);\n\n    var _super15 = _createSuper(_class6);\n\n    function _class6() {\n      (0, _classCallCheck2.default)(this, _class6);\n      return _super15.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class6, [{\n      key: \"parseV8Intrinsic\",\n      value: function parseV8Intrinsic() {\n        if (this.match(54)) {\n          var v8IntrinsicStartLoc = this.state.startLoc;\n          var node = this.startNode();\n          this.next();\n\n          if (tokenIsIdentifier(this.state.type)) {\n            var name = this.parseIdentifierName(this.state.start);\n            var identifier = this.createIdentifier(node, name);\n            identifier.type = \"V8IntrinsicIdentifier\";\n\n            if (this.match(10)) {\n              return identifier;\n            }\n          }\n\n          this.unexpected(v8IntrinsicStartLoc);\n        }\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parseV8Intrinsic() || (0, _get17.default)((0, _getPrototypeOf2.default)(_class6.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }]);\n    return _class6;\n  }(superClass);\n};\n\nfunction hasPlugin(plugins, expectedConfig) {\n  var _ref93 = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig,\n      _ref94 = (0, _slicedToArray2.default)(_ref93, 2),\n      expectedName = _ref94[0],\n      expectedOptions = _ref94[1];\n\n  var expectedKeys = Object.keys(expectedOptions);\n  var expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(function (p) {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      var _p = (0, _slicedToArray2.default)(p, 2),\n          pluginName = _p[0],\n          pluginOptions = _p[1];\n\n      if (pluginName !== expectedName) {\n        return false;\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(expectedKeys),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var key = _step7.value;\n\n          if (pluginOptions[key] !== expectedOptions[key]) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return true;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  var plugin = plugins.find(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nvar PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nvar TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nvar RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    var decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    var proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      var proposalList = PIPELINE_PROPOSALS.map(function (p) {\n        return \"\\\"\".concat(p, \"\\\"\");\n      }).join(\", \");\n      throw new Error(\"\\\"pipelineOperator\\\" requires \\\"proposal\\\" option whose value must be one of: \".concat(proposalList, \".\"));\n    }\n\n    var tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      var topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        var tokenList = TOPIC_TOKENS.map(function (t) {\n          return \"\\\"\".concat(t, \"\\\"\");\n        }).join(\", \");\n        throw new Error(\"\\\"pipelineOperator\\\" in \\\"proposal\\\": \\\"hack\\\" mode also requires a \\\"topicToken\\\" option whose value must be one of: \".concat(tokenList, \".\"));\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      var moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    var error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nvar mixinPlugins = {\n  estree: estree,\n  jsx: jsx,\n  flow: flow,\n  typescript: typescript,\n  v8intrinsic: v8intrinsic,\n  placeholders: placeholders\n};\nvar mixinPluginNames = Object.keys(mixinPlugins);\nvar defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var _i4 = 0, _Object$keys3 = Object.keys(defaultOptions); _i4 < _Object$keys3.length; _i4++) {\n    var key = _Object$keys3[_i4];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar getOwn = function getOwn(object, key) {\n  return Object.hasOwnProperty.call(object, key) && object[key];\n};\n\nvar unwrapParenthesizedExpression = function unwrapParenthesizedExpression(node) {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nvar LValParser = /*#__PURE__*/function (_NodeUtils) {\n  (0, _inherits2.default)(LValParser, _NodeUtils);\n\n  var _super16 = _createSuper(LValParser);\n\n  function LValParser() {\n    (0, _classCallCheck2.default)(this, LValParser);\n    return _super16.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(LValParser, [{\n    key: \"toAssignable\",\n    value: function toAssignable(node) {\n      var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _node$extra, _node$extra3;\n\n      var parenthesized = undefined;\n\n      if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n        parenthesized = unwrapParenthesizedExpression(node);\n\n        if (isLHS) {\n          if (parenthesized.type === \"Identifier\") {\n            this.expressionScope.recordArrowParemeterBindingError(Errors.InvalidParenthesizedAssignment, {\n              at: node\n            });\n          } else if (parenthesized.type !== \"MemberExpression\") {\n            this.raise(Errors.InvalidParenthesizedAssignment, {\n              at: node\n            });\n          }\n        } else {\n          this.raise(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        }\n      }\n\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"RestElement\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (var i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n            var _node$extra2;\n\n            var prop = node.properties[i];\n            var isLast = i === last;\n            this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n            if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n              this.raise(Errors.RestTrailingComma, {\n                at: node.extra.trailingCommaLoc\n              });\n            }\n          }\n\n          break;\n\n        case \"ObjectProperty\":\n          {\n            var key = node.key,\n                value = node.value;\n\n            if (this.isPrivateName(key)) {\n              this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n            }\n\n            this.toAssignable(value, isLHS);\n            break;\n          }\n\n        case \"SpreadElement\":\n          {\n            throw new Error(\"Internal @babel/parser error (this is a bug, please report it).\" + \" SpreadElement should be converted by .toAssignable's caller.\");\n          }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator !== \"=\") {\n            this.raise(Errors.MissingEqInAssignment, {\n              at: node.left.loc.end\n            });\n          }\n\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          this.toAssignable(node.left, isLHS);\n          break;\n\n        case \"ParenthesizedExpression\":\n          this.toAssignable(parenthesized, isLHS);\n          break;\n      }\n    }\n  }, {\n    key: \"toAssignableObjectExpressionProp\",\n    value: function toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n      if (prop.type === \"ObjectMethod\") {\n        this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {\n          at: prop.key\n        });\n      } else if (prop.type === \"SpreadElement\") {\n        prop.type = \"RestElement\";\n        var arg = prop.argument;\n        this.checkToRestConversion(arg, false);\n        this.toAssignable(arg, isLHS);\n\n        if (!isLast) {\n          this.raise(Errors.RestTrailingComma, {\n            at: prop\n          });\n        }\n      } else {\n        this.toAssignable(prop, isLHS);\n      }\n    }\n  }, {\n    key: \"toAssignableList\",\n    value: function toAssignableList(exprList, trailingCommaLoc, isLHS) {\n      var end = exprList.length - 1;\n\n      for (var i = 0; i <= end; i++) {\n        var elt = exprList[i];\n        if (!elt) continue;\n\n        if (elt.type === \"SpreadElement\") {\n          elt.type = \"RestElement\";\n          var arg = elt.argument;\n          this.checkToRestConversion(arg, true);\n          this.toAssignable(arg, isLHS);\n        } else {\n          this.toAssignable(elt, isLHS);\n        }\n\n        if (elt.type === \"RestElement\") {\n          if (i < end) {\n            this.raise(Errors.RestTrailingComma, {\n              at: elt\n            });\n          } else if (trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, {\n              at: trailingCommaLoc\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"isAssignable\",\n    value: function isAssignable(node, isBinding) {\n      var _this50 = this;\n\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"RestElement\":\n          return true;\n\n        case \"ObjectExpression\":\n          {\n            var last = node.properties.length - 1;\n            return node.properties.every(function (prop, i) {\n              return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && _this50.isAssignable(prop);\n            });\n          }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(function (element) {\n            return element === null || _this50.isAssignable(element);\n          });\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"toReferencedList\",\n    value: function toReferencedList(exprList, isParenthesizedExpr) {\n      return exprList;\n    }\n  }, {\n    key: \"toReferencedListDeep\",\n    value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n      this.toReferencedList(exprList, isParenthesizedExpr);\n\n      var _iterator8 = _createForOfIteratorHelper(exprList),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var expr = _step8.value;\n\n          if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n            this.toReferencedListDeep(expr.elements);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"parseSpread\",\n    value: function parseSpread(refExpressionErrors, refNeedsArrowPos) {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n      return this.finishNode(node, \"SpreadElement\");\n    }\n  }, {\n    key: \"parseRestBinding\",\n    value: function parseRestBinding() {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseBindingAtom();\n      return this.finishNode(node, \"RestElement\");\n    }\n  }, {\n    key: \"parseBindingAtom\",\n    value: function parseBindingAtom() {\n      switch (this.state.type) {\n        case 0:\n          {\n            var node = this.startNode();\n            this.next();\n            node.elements = this.parseBindingList(3, 93, true);\n            return this.finishNode(node, \"ArrayPattern\");\n          }\n\n        case 5:\n          return this.parseObjectLike(8, true);\n      }\n\n      return this.parseIdentifier();\n    }\n  }, {\n    key: \"parseBindingList\",\n    value: function parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n        }\n\n        if (allowEmpty && this.match(12)) {\n          elts.push(null);\n        } else if (this.eat(close)) {\n          break;\n        } else if (this.match(21)) {\n          elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n\n          if (!this.checkCommaAfterRest(closeCharCode)) {\n            this.expect(close);\n            break;\n          }\n        } else {\n          var decorators = [];\n\n          if (this.match(26) && this.hasPlugin(\"decorators\")) {\n            this.raise(Errors.UnsupportedParameterDecorator, {\n              at: this.state.startLoc\n            });\n          }\n\n          while (this.match(26)) {\n            decorators.push(this.parseDecorator());\n          }\n\n          elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n        }\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseBindingRestProperty\",\n    value: function parseBindingRestProperty(prop) {\n      this.next();\n      prop.argument = this.parseIdentifier();\n      this.checkCommaAfterRest(125);\n      return this.finishNode(prop, \"RestElement\");\n    }\n  }, {\n    key: \"parseBindingProperty\",\n    value: function parseBindingProperty() {\n      var prop = this.startNode();\n      var _this$state3 = this.state,\n          type = _this$state3.type,\n          startPos = _this$state3.start,\n          startLoc = _this$state3.startLoc;\n\n      if (type === 21) {\n        return this.parseBindingRestProperty(prop);\n      } else if (type === 134) {\n        this.expectPlugin(\"destructuringPrivate\", startLoc);\n        this.classScope.usePrivateName(this.state.value, startLoc);\n        prop.key = this.parsePrivateName();\n      } else {\n        this.parsePropertyName(prop);\n      }\n\n      prop.method = false;\n      this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n      return prop;\n    }\n  }, {\n    key: \"parseAssignableListItem\",\n    value: function parseAssignableListItem(allowModifiers, decorators) {\n      var left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseAssignableListItemTypes\",\n    value: function parseAssignableListItemTypes(param) {\n      return param;\n    }\n  }, {\n    key: \"parseMaybeDefault\",\n    value: function parseMaybeDefault(startPos, startLoc, left) {\n      var _startLoc, _startPos, _left;\n\n      startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n      startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n      left = (_left = left) != null ? _left : this.parseBindingAtom();\n      if (!this.eat(29)) return left;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.left = left;\n      node.right = this.parseMaybeAssignAllowIn();\n      return this.finishNode(node, \"AssignmentPattern\");\n    }\n  }, {\n    key: \"isValidLVal\",\n    value: function isValidLVal(type, isUnparenthesizedInAssign, binding) {\n      return getOwn({\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\"\n      }, type);\n    }\n  }, {\n    key: \"checkLVal\",\n    value: function checkLVal(expression, _ref95) {\n      var ancestor = _ref95.in,\n          _ref95$binding = _ref95.binding,\n          binding = _ref95$binding === void 0 ? BIND_NONE : _ref95$binding,\n          _ref95$checkClashes = _ref95.checkClashes,\n          checkClashes = _ref95$checkClashes === void 0 ? false : _ref95$checkClashes,\n          _ref95$strictModeChan = _ref95.strictModeChanged,\n          strictModeChanged = _ref95$strictModeChan === void 0 ? false : _ref95$strictModeChan,\n          _ref95$allowingSloppy = _ref95.allowingSloppyLetBinding,\n          allowingSloppyLetBinding = _ref95$allowingSloppy === void 0 ? !(binding & BIND_SCOPE_LEXICAL) : _ref95$allowingSloppy,\n          _ref95$hasParenthesiz = _ref95.hasParenthesizedAncestor,\n          hasParenthesizedAncestor = _ref95$hasParenthesiz === void 0 ? false : _ref95$hasParenthesiz;\n\n      var _expression$extra;\n\n      var type = expression.type;\n      if (this.isObjectMethod(expression)) return;\n\n      if (type === \"MemberExpression\") {\n        if (binding !== BIND_NONE) {\n          this.raise(Errors.InvalidPropertyBindingPattern, {\n            at: expression\n          });\n        }\n\n        return;\n      }\n\n      if (expression.type === \"Identifier\") {\n        this.checkIdentifier(expression, binding, strictModeChanged, allowingSloppyLetBinding);\n        var name = expression.name;\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(Errors.ParamDupe, {\n              at: expression\n            });\n          } else {\n            checkClashes.add(name);\n          }\n        }\n\n        return;\n      }\n\n      var validity = this.isValidLVal(expression.type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === \"AssignmentExpression\", binding);\n      if (validity === true) return;\n\n      if (validity === false) {\n        var ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n        this.raise(ParseErrorClass, {\n          at: expression,\n          ancestor: ancestor.type === \"UpdateExpression\" ? {\n            type: \"UpdateExpression\",\n            prefix: ancestor.prefix\n          } : {\n            type: ancestor.type\n          }\n        });\n        return;\n      }\n\n      var _ref96 = Array.isArray(validity) ? validity : [validity, type === \"ParenthesizedExpression\"],\n          _ref97 = (0, _slicedToArray2.default)(_ref96, 2),\n          key = _ref97[0],\n          isParenthesizedExpression = _ref97[1];\n\n      var nextAncestor = expression.type === \"ArrayPattern\" || expression.type === \"ObjectPattern\" || expression.type === \"ParenthesizedExpression\" ? expression : ancestor;\n\n      var _iterator9 = _createForOfIteratorHelper([].concat(expression[key])),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var child = _step9.value;\n\n          if (child) {\n            this.checkLVal(child, {\n              in: nextAncestor,\n              binding: binding,\n              checkClashes: checkClashes,\n              allowingSloppyLetBinding: allowingSloppyLetBinding,\n              strictModeChanged: strictModeChanged,\n              hasParenthesizedAncestor: isParenthesizedExpression\n            });\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"checkIdentifier\",\n    value: function checkIdentifier(at, bindingType) {\n      var strictModeChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var allowLetBinding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !(bindingType & BIND_SCOPE_LEXICAL);\n\n      if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n        if (bindingType === BIND_NONE) {\n          this.raise(Errors.StrictEvalArguments, {\n            at: at,\n            referenceName: at.name\n          });\n        } else {\n          this.raise(Errors.StrictEvalArgumentsBinding, {\n            at: at,\n            bindingName: at.name\n          });\n        }\n      }\n\n      if (!allowLetBinding && at.name === \"let\") {\n        this.raise(Errors.LetInLexicalBinding, {\n          at: at\n        });\n      }\n\n      if (!(bindingType & BIND_NONE)) {\n        this.declareNameFromIdentifier(at, bindingType);\n      }\n    }\n  }, {\n    key: \"declareNameFromIdentifier\",\n    value: function declareNameFromIdentifier(identifier, binding) {\n      this.scope.declareName(identifier.name, binding, identifier.loc.start);\n    }\n  }, {\n    key: \"checkToRestConversion\",\n    value: function checkToRestConversion(node, allowPattern) {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.checkToRestConversion(node.expression, allowPattern);\n          break;\n\n        case \"Identifier\":\n        case \"MemberExpression\":\n          break;\n\n        case \"ArrayExpression\":\n        case \"ObjectExpression\":\n          if (allowPattern) break;\n\n        default:\n          this.raise(Errors.InvalidRestAssignmentPattern, {\n            at: node\n          });\n      }\n    }\n  }, {\n    key: \"checkCommaAfterRest\",\n    value: function checkCommaAfterRest(close) {\n      if (!this.match(12)) {\n        return false;\n      }\n\n      this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {\n        at: this.state.startLoc\n      });\n      return true;\n    }\n  }]);\n  return LValParser;\n}(NodeUtils);\n\nvar ExpressionParser = /*#__PURE__*/function (_LValParser) {\n  (0, _inherits2.default)(ExpressionParser, _LValParser);\n\n  var _super17 = _createSuper(ExpressionParser);\n\n  function ExpressionParser() {\n    (0, _classCallCheck2.default)(this, ExpressionParser);\n    return _super17.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(ExpressionParser, [{\n    key: \"checkProto\",\n    value: function checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n      if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n        return;\n      }\n\n      var key = prop.key;\n      var name = key.type === \"Identifier\" ? key.name : key.value;\n\n      if (name === \"__proto__\") {\n        if (isRecord) {\n          this.raise(Errors.RecordNoProto, {\n            at: key\n          });\n          return;\n        }\n\n        if (protoRef.used) {\n          if (refExpressionErrors) {\n            if (refExpressionErrors.doubleProtoLoc === null) {\n              refExpressionErrors.doubleProtoLoc = key.loc.start;\n            }\n          } else {\n            this.raise(Errors.DuplicateProto, {\n              at: key\n            });\n          }\n        }\n\n        protoRef.used = true;\n      }\n    }\n  }, {\n    key: \"shouldExitDescending\",\n    value: function shouldExitDescending(expr, potentialArrowAt) {\n      return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n    }\n  }, {\n    key: \"getExpression\",\n    value: function getExpression() {\n      this.enterInitialScopes();\n      this.nextToken();\n      var expr = this.parseExpression();\n\n      if (!this.match(135)) {\n        this.unexpected();\n      }\n\n      this.finalizeRemainingComments();\n      expr.comments = this.state.comments;\n      expr.errors = this.state.errors;\n\n      if (this.options.tokens) {\n        expr.tokens = this.tokens;\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExpression\",\n    value: function parseExpression(disallowIn, refExpressionErrors) {\n      var _this51 = this;\n\n      if (disallowIn) {\n        return this.disallowInAnd(function () {\n          return _this51.parseExpressionBase(refExpressionErrors);\n        });\n      }\n\n      return this.allowInAnd(function () {\n        return _this51.parseExpressionBase(refExpressionErrors);\n      });\n    }\n  }, {\n    key: \"parseExpressionBase\",\n    value: function parseExpressionBase(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseMaybeAssign(refExpressionErrors);\n\n      if (this.match(12)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.expressions = [expr];\n\n        while (this.eat(12)) {\n          node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n        }\n\n        this.toReferencedList(node.expressions);\n        return this.finishNode(node, \"SequenceExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseMaybeAssignDisallowIn\",\n    value: function parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n      var _this52 = this;\n\n      return this.disallowInAnd(function () {\n        return _this52.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      });\n    }\n  }, {\n    key: \"parseMaybeAssignAllowIn\",\n    value: function parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n      var _this53 = this;\n\n      return this.allowInAnd(function () {\n        return _this53.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      });\n    }\n  }, {\n    key: \"setOptionalParametersError\",\n    value: function setOptionalParametersError(refExpressionErrors, resultError) {\n      var _resultError$loc;\n\n      refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n    }\n  }, {\n    key: \"parseMaybeAssign\",\n    value: function parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      if (this.isContextual(105)) {\n        if (this.prodParam.hasYield) {\n          var _left2 = this.parseYield();\n\n          if (afterLeftParse) {\n            _left2 = afterLeftParse.call(this, _left2, startPos, startLoc);\n          }\n\n          return _left2;\n        }\n      }\n\n      var ownExpressionErrors;\n\n      if (refExpressionErrors) {\n        ownExpressionErrors = false;\n      } else {\n        refExpressionErrors = new ExpressionErrors();\n        ownExpressionErrors = true;\n      }\n\n      var type = this.state.type;\n\n      if (type === 10 || tokenIsIdentifier(type)) {\n        this.state.potentialArrowAt = this.state.start;\n      }\n\n      var left = this.parseMaybeConditional(refExpressionErrors);\n\n      if (afterLeftParse) {\n        left = afterLeftParse.call(this, left, startPos, startLoc);\n      }\n\n      if (tokenIsAssignment(this.state.type)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var operator = this.state.value;\n        node.operator = operator;\n\n        if (this.match(29)) {\n          this.toAssignable(left, true);\n          node.left = left;\n\n          if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startPos) {\n            refExpressionErrors.doubleProtoLoc = null;\n          }\n\n          if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startPos) {\n            refExpressionErrors.shorthandAssignLoc = null;\n          }\n\n          if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startPos) {\n            this.checkDestructuringPrivate(refExpressionErrors);\n            refExpressionErrors.privateKeyLoc = null;\n          }\n        } else {\n          node.left = left;\n        }\n\n        this.next();\n        node.right = this.parseMaybeAssign();\n        this.checkLVal(left, {\n          in: this.finishNode(node, \"AssignmentExpression\")\n        });\n        return node;\n      } else if (ownExpressionErrors) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseMaybeConditional\",\n    value: function parseMaybeConditional(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprOps(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n  }, {\n    key: \"parseConditional\",\n    value: function parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n      if (this.eat(17)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.test = expr;\n        node.consequent = this.parseMaybeAssignAllowIn();\n        this.expect(14);\n        node.alternate = this.parseMaybeAssign();\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseMaybeUnaryOrPrivate\",\n    value: function parseMaybeUnaryOrPrivate(refExpressionErrors) {\n      return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n    }\n  }, {\n    key: \"parseExprOps\",\n    value: function parseExprOps(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseExprOp(expr, startPos, startLoc, -1);\n    }\n  }, {\n    key: \"parseExprOp\",\n    value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n      if (this.isPrivateName(left)) {\n        var value = this.getPrivateNameSV(left);\n\n        if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n          this.raise(Errors.PrivateInExpectedIn, {\n            at: left,\n            identifierName: value\n          });\n        }\n\n        this.classScope.usePrivateName(value, left.loc.start);\n      }\n\n      var op = this.state.type;\n\n      if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n        var prec = tokenOperatorPrecedence(op);\n\n        if (prec > minPrec) {\n          if (op === 39) {\n            this.expectPlugin(\"pipelineOperator\");\n\n            if (this.state.inFSharpPipelineDirectBody) {\n              return left;\n            }\n\n            this.checkPipelineAtInfixOperator(left, leftStartLoc);\n          }\n\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.left = left;\n          node.operator = this.state.value;\n          var logical = op === 41 || op === 42;\n          var coalesce = op === 40;\n\n          if (coalesce) {\n            prec = tokenOperatorPrecedence(42);\n          }\n\n          this.next();\n\n          if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n            proposal: \"minimal\"\n          }])) {\n            if (this.state.type === 96 && this.prodParam.hasAwait) {\n              throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n                at: this.state.startLoc\n              });\n            }\n          }\n\n          node.right = this.parseExprOpRightExpr(op, prec);\n          this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n          var nextOp = this.state.type;\n\n          if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n            throw this.raise(Errors.MixingCoalesceWithLogical, {\n              at: this.state.startLoc\n            });\n          }\n\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n        }\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseExprOpRightExpr\",\n    value: function parseExprOpRightExpr(op, prec) {\n      var _this54 = this;\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      switch (op) {\n        case 39:\n          switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n            case \"hack\":\n              return this.withTopicBindingContext(function () {\n                return _this54.parseHackPipeBody();\n              });\n\n            case \"smart\":\n              return this.withTopicBindingContext(function () {\n                if (_this54.prodParam.hasYield && _this54.isContextual(105)) {\n                  throw _this54.raise(Errors.PipeBodyIsTighter, {\n                    at: _this54.state.startLoc\n                  });\n                }\n\n                return _this54.parseSmartPipelineBodyInStyle(_this54.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n              });\n\n            case \"fsharp\":\n              return this.withSoloAwaitPermittingContext(function () {\n                return _this54.parseFSharpPipelineBody(prec);\n              });\n          }\n\n        default:\n          return this.parseExprOpBaseRightExpr(op, prec);\n      }\n    }\n  }, {\n    key: \"parseExprOpBaseRightExpr\",\n    value: function parseExprOpBaseRightExpr(op, prec) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n    }\n  }, {\n    key: \"parseHackPipeBody\",\n    value: function parseHackPipeBody() {\n      var _body$extra;\n\n      var startLoc = this.state.startLoc;\n      var body = this.parseMaybeAssign();\n      var requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n\n      if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n        this.raise(Errors.PipeUnparenthesizedBody, {\n          at: startLoc,\n          type: body.type\n        });\n      }\n\n      if (!this.topicReferenceWasUsedInCurrentContext()) {\n        this.raise(Errors.PipeTopicUnused, {\n          at: startLoc\n        });\n      }\n\n      return body;\n    }\n  }, {\n    key: \"checkExponentialAfterUnary\",\n    value: function checkExponentialAfterUnary(node) {\n      if (this.match(57)) {\n        this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n          at: node.argument\n        });\n      }\n    }\n  }, {\n    key: \"parseMaybeUnary\",\n    value: function parseMaybeUnary(refExpressionErrors, sawUnary) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var isAwait = this.isContextual(96);\n\n      if (isAwait && this.isAwaitAllowed()) {\n        this.next();\n\n        var _expr = this.parseAwait(startPos, startLoc);\n\n        if (!sawUnary) this.checkExponentialAfterUnary(_expr);\n        return _expr;\n      }\n\n      var update = this.match(34);\n      var node = this.startNode();\n\n      if (tokenIsPrefix(this.state.type)) {\n        node.operator = this.state.value;\n        node.prefix = true;\n\n        if (this.match(72)) {\n          this.expectPlugin(\"throwExpressions\");\n        }\n\n        var isDelete = this.match(89);\n        this.next();\n        node.argument = this.parseMaybeUnary(null, true);\n        this.checkExpressionErrors(refExpressionErrors, true);\n\n        if (this.state.strict && isDelete) {\n          var arg = node.argument;\n\n          if (arg.type === \"Identifier\") {\n            this.raise(Errors.StrictDelete, {\n              at: node\n            });\n          } else if (this.hasPropertyAsPrivateName(arg)) {\n            this.raise(Errors.DeletePrivateField, {\n              at: node\n            });\n          }\n        }\n\n        if (!update) {\n          if (!sawUnary) this.checkExponentialAfterUnary(node);\n          return this.finishNode(node, \"UnaryExpression\");\n        }\n      }\n\n      var expr = this.parseUpdate(node, update, refExpressionErrors);\n\n      if (isAwait) {\n        var type = this.state.type;\n\n        var _startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n\n        if (_startsExpr && !this.isAmbiguousAwait()) {\n          this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {\n            at: startLoc\n          });\n          return this.parseAwait(startPos, startLoc);\n        }\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseUpdate\",\n    value: function parseUpdate(node, update, refExpressionErrors) {\n      if (update) {\n        this.checkLVal(node.argument, {\n          in: this.finishNode(node, \"UpdateExpression\")\n        });\n        return node;\n      }\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseExprSubscripts(refExpressionErrors);\n      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n      while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n        var _node10 = this.startNodeAt(startPos, startLoc);\n\n        _node10.operator = this.state.value;\n        _node10.prefix = false;\n        _node10.argument = expr;\n        this.next();\n        this.checkLVal(expr, {\n          in: expr = this.finishNode(_node10, \"UpdateExpression\")\n        });\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExprSubscripts\",\n    value: function parseExprSubscripts(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprAtom(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseSubscripts(expr, startPos, startLoc);\n    }\n  }, {\n    key: \"parseSubscripts\",\n    value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n      var state = {\n        optionalChainMember: false,\n        maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n        stop: false\n      };\n\n      do {\n        base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n        state.maybeAsyncArrow = false;\n      } while (!state.stop);\n\n      return base;\n    }\n  }, {\n    key: \"parseSubscript\",\n    value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n      var type = this.state.type;\n\n      if (!noCalls && type === 15) {\n        return this.parseBind(base, startPos, startLoc, noCalls, state);\n      } else if (tokenIsTemplate(type)) {\n        return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n      }\n\n      var optional = false;\n\n      if (type === 18) {\n        if (noCalls && this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n\n        state.optionalChainMember = optional = true;\n        this.next();\n      }\n\n      if (!noCalls && this.match(10)) {\n        return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n      } else {\n        var computed = this.eat(0);\n\n        if (computed || optional || this.eat(16)) {\n          return this.parseMember(base, startPos, startLoc, state, computed, optional);\n        } else {\n          state.stop = true;\n          return base;\n        }\n      }\n    }\n  }, {\n    key: \"parseMember\",\n    value: function parseMember(base, startPos, startLoc, state, computed, optional) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.computed = computed;\n\n      if (computed) {\n        node.property = this.parseExpression();\n        this.expect(3);\n      } else if (this.match(134)) {\n        if (base.type === \"Super\") {\n          this.raise(Errors.SuperPrivateField, {\n            at: startLoc\n          });\n        }\n\n        this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n        node.property = this.parsePrivateName();\n      } else {\n        node.property = this.parseIdentifier(true);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    }\n  }, {\n    key: \"parseBind\",\n    value: function parseBind(base, startPos, startLoc, noCalls, state) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      this.next();\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    }\n  }, {\n    key: \"parseCoverCallAndAsyncArrowHead\",\n    value: function parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var refExpressionErrors = null;\n      this.state.maybeInArrowParameters = true;\n      this.next();\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      var maybeAsyncArrow = state.maybeAsyncArrow,\n          optionalChainMember = state.optionalChainMember;\n\n      if (maybeAsyncArrow) {\n        this.expressionScope.enter(newAsyncArrowScope());\n        refExpressionErrors = new ExpressionErrors();\n      }\n\n      if (optionalChainMember) {\n        node.optional = optional;\n      }\n\n      if (optional) {\n        node.arguments = this.parseCallExpressionArguments(11);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n      }\n\n      this.finishCallExpression(node, optionalChainMember);\n\n      if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n        this.checkDestructuringPrivate(refExpressionErrors);\n        this.expressionScope.validateAsPattern();\n        this.expressionScope.exit();\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n      } else {\n        if (maybeAsyncArrow) {\n          this.checkExpressionErrors(refExpressionErrors, true);\n          this.expressionScope.exit();\n        }\n\n        this.toReferencedArguments(node);\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    }\n  }, {\n    key: \"toReferencedArguments\",\n    value: function toReferencedArguments(node, isParenthesizedExpr) {\n      this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n    }\n  }, {\n    key: \"parseTaggedTemplateExpression\",\n    value: function parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate(true);\n\n      if (state.optionalChainMember) {\n        this.raise(Errors.OptionalChainingNoTemplate, {\n          at: startLoc\n        });\n      }\n\n      return this.finishNode(node, \"TaggedTemplateExpression\");\n    }\n  }, {\n    key: \"atPossibleAsyncArrow\",\n    value: function atPossibleAsyncArrow(base) {\n      return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n    }\n  }, {\n    key: \"finishCallExpression\",\n    value: function finishCallExpression(node, optional) {\n      if (node.callee.type === \"Import\") {\n        if (node.arguments.length === 2) {\n          {\n            if (!this.hasPlugin(\"moduleAttributes\")) {\n              this.expectPlugin(\"importAssertions\");\n            }\n          }\n        }\n\n        if (node.arguments.length === 0 || node.arguments.length > 2) {\n          this.raise(Errors.ImportCallArity, {\n            at: node,\n            maxArgumentCount: this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? 2 : 1\n          });\n        } else {\n          var _iterator10 = _createForOfIteratorHelper(node.arguments),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var arg = _step10.value;\n\n              if (arg.type === \"SpreadElement\") {\n                this.raise(Errors.ImportCallSpreadArgument, {\n                  at: arg\n                });\n              }\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        }\n      }\n\n      return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n    }\n  }, {\n    key: \"parseCallExpressionArguments\",\n    value: function parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n      var elts = [];\n      var first = true;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n\n          if (this.match(close)) {\n            if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n              this.raise(Errors.ImportCallArgumentTrailingComma, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n\n            if (nodeForExtra) {\n              this.addTrailingCommaExtraToNode(nodeForExtra);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n      }\n\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return elts;\n    }\n  }, {\n    key: \"shouldParseAsyncArrow\",\n    value: function shouldParseAsyncArrow() {\n      return this.match(19) && !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseAsyncArrowFromCallExpression\",\n    value: function parseAsyncArrowFromCallExpression(node, call) {\n      var _call$extra;\n\n      this.resetPreviousNodeTrailingComments(call);\n      this.expect(19);\n      this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n\n      if (call.innerComments) {\n        setInnerComments(node, call.innerComments);\n      }\n\n      if (call.callee.trailingComments) {\n        setInnerComments(node, call.callee.trailingComments);\n      }\n\n      return node;\n    }\n  }, {\n    key: \"parseNoCallExpr\",\n    value: function parseNoCallExpr() {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    }\n  }, {\n    key: \"parseExprAtom\",\n    value: function parseExprAtom(refExpressionErrors) {\n      var node;\n      var type = this.state.type;\n\n      switch (type) {\n        case 79:\n          return this.parseSuper();\n\n        case 83:\n          node = this.startNode();\n          this.next();\n\n          if (this.match(16)) {\n            return this.parseImportMetaProperty(node);\n          }\n\n          if (!this.match(10)) {\n            this.raise(Errors.UnsupportedImport, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          return this.finishNode(node, \"Import\");\n\n        case 78:\n          node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"ThisExpression\");\n\n        case 90:\n          {\n            return this.parseDo(this.startNode(), false);\n          }\n\n        case 56:\n        case 31:\n          {\n            this.readRegexp();\n            return this.parseRegExpLiteral(this.state.value);\n          }\n\n        case 130:\n          return this.parseNumericLiteral(this.state.value);\n\n        case 131:\n          return this.parseBigIntLiteral(this.state.value);\n\n        case 132:\n          return this.parseDecimalLiteral(this.state.value);\n\n        case 129:\n          return this.parseStringLiteral(this.state.value);\n\n        case 84:\n          return this.parseNullLiteral();\n\n        case 85:\n          return this.parseBooleanLiteral(true);\n\n        case 86:\n          return this.parseBooleanLiteral(false);\n\n        case 10:\n          {\n            var canBeArrow = this.state.potentialArrowAt === this.state.start;\n            return this.parseParenAndDistinguishExpression(canBeArrow);\n          }\n\n        case 2:\n        case 1:\n          {\n            return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n          }\n\n        case 0:\n          {\n            return this.parseArrayLike(3, true, false, refExpressionErrors);\n          }\n\n        case 6:\n        case 7:\n          {\n            return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n          }\n\n        case 5:\n          {\n            return this.parseObjectLike(8, false, false, refExpressionErrors);\n          }\n\n        case 68:\n          return this.parseFunctionOrFunctionSent();\n\n        case 26:\n          this.parseDecorators();\n\n        case 80:\n          node = this.startNode();\n          this.takeDecorators(node);\n          return this.parseClass(node, false);\n\n        case 77:\n          return this.parseNewOrNewTarget();\n\n        case 25:\n        case 24:\n          return this.parseTemplate(false);\n\n        case 15:\n          {\n            node = this.startNode();\n            this.next();\n            node.object = null;\n            var callee = node.callee = this.parseNoCallExpr();\n\n            if (callee.type === \"MemberExpression\") {\n              return this.finishNode(node, \"BindExpression\");\n            } else {\n              throw this.raise(Errors.UnsupportedBind, {\n                at: callee\n              });\n            }\n          }\n\n        case 134:\n          {\n            this.raise(Errors.PrivateInExpectedIn, {\n              at: this.state.startLoc,\n              identifierName: this.state.value\n            });\n            return this.parsePrivateName();\n          }\n\n        case 33:\n          {\n            return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n          }\n\n        case 32:\n          {\n            return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n          }\n\n        case 37:\n        case 38:\n          {\n            return this.parseTopicReference(\"hack\");\n          }\n\n        case 44:\n        case 54:\n        case 27:\n          {\n            var pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n            if (pipeProposal) {\n              return this.parseTopicReference(pipeProposal);\n            } else {\n              throw this.unexpected();\n            }\n          }\n\n        case 47:\n          {\n            var lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              break;\n            } else {\n              throw this.unexpected();\n            }\n          }\n\n        default:\n          if (tokenIsIdentifier(type)) {\n            if (this.isContextual(123) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n              return this.parseModuleExpression();\n            }\n\n            var _canBeArrow = this.state.potentialArrowAt === this.state.start;\n\n            var containsEsc = this.state.containsEsc;\n            var id = this.parseIdentifier();\n\n            if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n              var _type = this.state.type;\n\n              if (_type === 68) {\n                this.resetPreviousNodeTrailingComments(id);\n                this.next();\n                return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n              } else if (tokenIsIdentifier(_type)) {\n                if (this.lookaheadCharCode() === 61) {\n                  return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n                } else {\n                  return id;\n                }\n              } else if (_type === 90) {\n                this.resetPreviousNodeTrailingComments(id);\n                return this.parseDo(this.startNodeAtNode(id), true);\n              }\n            }\n\n            if (_canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n              this.next();\n              return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n            }\n\n            return id;\n          } else {\n            throw this.unexpected();\n          }\n\n      }\n    }\n  }, {\n    key: \"parseTopicReferenceThenEqualsSign\",\n    value: function parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n      var pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n      if (pipeProposal) {\n        this.state.type = topicTokenType;\n        this.state.value = topicTokenValue;\n        this.state.pos--;\n        this.state.end--;\n        this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n        return this.parseTopicReference(pipeProposal);\n      } else {\n        throw this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseTopicReference\",\n    value: function parseTopicReference(pipeProposal) {\n      var node = this.startNode();\n      var startLoc = this.state.startLoc;\n      var tokenType = this.state.type;\n      this.next();\n      return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n    }\n  }, {\n    key: \"finishTopicReference\",\n    value: function finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n      if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n        var nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(pipeProposal === \"smart\" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {\n            at: startLoc\n          });\n        }\n\n        this.registerTopicReference();\n        return this.finishNode(node, nodeType);\n      } else {\n        throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n          at: startLoc,\n          token: tokenLabelName(tokenType)\n        });\n      }\n    }\n  }, {\n    key: \"testTopicReferenceConfiguration\",\n    value: function testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n      switch (pipeProposal) {\n        case \"hack\":\n          {\n            return this.hasPlugin([\"pipelineOperator\", {\n              topicToken: tokenLabelName(tokenType)\n            }]);\n          }\n\n        case \"smart\":\n          return tokenType === 27;\n\n        default:\n          throw this.raise(Errors.PipeTopicRequiresHackPipes, {\n            at: startLoc\n          });\n      }\n    }\n  }, {\n    key: \"parseAsyncArrowUnaryFunction\",\n    value: function parseAsyncArrowUnaryFunction(node) {\n      this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n      var params = [this.parseIdentifier()];\n      this.prodParam.exit();\n\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(Errors.LineTerminatorBeforeArrow, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.expect(19);\n      this.parseArrowExpression(node, params, true);\n      return node;\n    }\n  }, {\n    key: \"parseDo\",\n    value: function parseDo(node, isAsync) {\n      this.expectPlugin(\"doExpressions\");\n\n      if (isAsync) {\n        this.expectPlugin(\"asyncDoExpressions\");\n      }\n\n      node.async = isAsync;\n      this.next();\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      if (isAsync) {\n        this.prodParam.enter(PARAM_AWAIT);\n        node.body = this.parseBlock();\n        this.prodParam.exit();\n      } else {\n        node.body = this.parseBlock();\n      }\n\n      this.state.labels = oldLabels;\n      return this.finishNode(node, \"DoExpression\");\n    }\n  }, {\n    key: \"parseSuper\",\n    value: function parseSuper() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(Errors.SuperNotAllowed, {\n          at: node\n        });\n      } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(Errors.UnexpectedSuper, {\n          at: node\n        });\n      }\n\n      if (!this.match(10) && !this.match(0) && !this.match(16)) {\n        this.raise(Errors.UnsupportedSuper, {\n          at: node\n        });\n      }\n\n      return this.finishNode(node, \"Super\");\n    }\n  }, {\n    key: \"parsePrivateName\",\n    value: function parsePrivateName() {\n      var node = this.startNode();\n      var id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));\n      var name = this.state.value;\n      this.next();\n      node.id = this.createIdentifier(id, name);\n      return this.finishNode(node, \"PrivateName\");\n    }\n  }, {\n    key: \"parseFunctionOrFunctionSent\",\n    value: function parseFunctionOrFunctionSent() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.prodParam.hasYield && this.match(16)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n        this.next();\n\n        if (this.match(102)) {\n          this.expectPlugin(\"functionSent\");\n        } else if (!this.hasPlugin(\"functionSent\")) {\n          this.unexpected();\n        }\n\n        return this.parseMetaProperty(node, meta, \"sent\");\n      }\n\n      return this.parseFunction(node);\n    }\n  }, {\n    key: \"parseMetaProperty\",\n    value: function parseMetaProperty(node, meta, propertyName) {\n      node.meta = meta;\n      var containsEsc = this.state.containsEsc;\n      node.property = this.parseIdentifier(true);\n\n      if (node.property.name !== propertyName || containsEsc) {\n        this.raise(Errors.UnsupportedMetaProperty, {\n          at: node.property,\n          target: meta.name,\n          onlyValidPropertyName: propertyName\n        });\n      }\n\n      return this.finishNode(node, \"MetaProperty\");\n    }\n  }, {\n    key: \"parseImportMetaProperty\",\n    value: function parseImportMetaProperty(node) {\n      var id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n      this.next();\n\n      if (this.isContextual(100)) {\n        if (!this.inModule) {\n          this.raise(Errors.ImportMetaOutsideModule, {\n            at: id\n          });\n        }\n\n        this.sawUnambiguousESM = true;\n      }\n\n      return this.parseMetaProperty(node, id, \"meta\");\n    }\n  }, {\n    key: \"parseLiteralAtNode\",\n    value: function parseLiteralAtNode(value, type, node) {\n      this.addExtra(node, \"rawValue\", value);\n      this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n      node.value = value;\n      this.next();\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseLiteral\",\n    value: function parseLiteral(value, type) {\n      var node = this.startNode();\n      return this.parseLiteralAtNode(value, type, node);\n    }\n  }, {\n    key: \"parseStringLiteral\",\n    value: function parseStringLiteral(value) {\n      return this.parseLiteral(value, \"StringLiteral\");\n    }\n  }, {\n    key: \"parseNumericLiteral\",\n    value: function parseNumericLiteral(value) {\n      return this.parseLiteral(value, \"NumericLiteral\");\n    }\n  }, {\n    key: \"parseBigIntLiteral\",\n    value: function parseBigIntLiteral(value) {\n      return this.parseLiteral(value, \"BigIntLiteral\");\n    }\n  }, {\n    key: \"parseDecimalLiteral\",\n    value: function parseDecimalLiteral(value) {\n      return this.parseLiteral(value, \"DecimalLiteral\");\n    }\n  }, {\n    key: \"parseRegExpLiteral\",\n    value: function parseRegExpLiteral(value) {\n      var node = this.parseLiteral(value.value, \"RegExpLiteral\");\n      node.pattern = value.pattern;\n      node.flags = value.flags;\n      return node;\n    }\n  }, {\n    key: \"parseBooleanLiteral\",\n    value: function parseBooleanLiteral(value) {\n      var node = this.startNode();\n      node.value = value;\n      this.next();\n      return this.finishNode(node, \"BooleanLiteral\");\n    }\n  }, {\n    key: \"parseNullLiteral\",\n    value: function parseNullLiteral() {\n      var node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"NullLiteral\");\n    }\n  }, {\n    key: \"parseParenAndDistinguishExpression\",\n    value: function parseParenAndDistinguishExpression(canBeArrow) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var val;\n      this.next();\n      this.expressionScope.enter(newArrowHeadScope());\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.maybeInArrowParameters = true;\n      this.state.inFSharpPipelineDirectBody = false;\n      var innerStartPos = this.state.start;\n      var innerStartLoc = this.state.startLoc;\n      var exprList = [];\n      var refExpressionErrors = new ExpressionErrors();\n      var first = true;\n      var spreadStartLoc;\n      var optionalCommaStartLoc;\n\n      while (!this.match(11)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n\n          if (this.match(11)) {\n            optionalCommaStartLoc = this.state.startLoc;\n            break;\n          }\n        }\n\n        if (this.match(21)) {\n          var spreadNodeStartPos = this.state.start;\n          var spreadNodeStartLoc = this.state.startLoc;\n          spreadStartLoc = this.state.startLoc;\n          exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n\n          if (!this.checkCommaAfterRest(41)) {\n            break;\n          }\n        } else {\n          exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n        }\n      }\n\n      var innerEndLoc = this.state.lastTokEndLoc;\n      this.expect(11);\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var arrowNode = this.startNodeAt(startPos, startLoc);\n\n      if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n        this.checkDestructuringPrivate(refExpressionErrors);\n        this.expressionScope.validateAsPattern();\n        this.expressionScope.exit();\n        this.parseArrowExpression(arrowNode, exprList, false);\n        return arrowNode;\n      }\n\n      this.expressionScope.exit();\n\n      if (!exprList.length) {\n        this.unexpected(this.state.lastTokStartLoc);\n      }\n\n      if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n      if (spreadStartLoc) this.unexpected(spreadStartLoc);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      this.toReferencedListDeep(exprList, true);\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNode(val, \"SequenceExpression\");\n        this.resetEndLocation(val, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n\n      return this.wrapParenthesis(startPos, startLoc, val);\n    }\n  }, {\n    key: \"wrapParenthesis\",\n    value: function wrapParenthesis(startPos, startLoc, expression) {\n      if (!this.options.createParenthesizedExpressions) {\n        this.addExtra(expression, \"parenthesized\", true);\n        this.addExtra(expression, \"parenStart\", startPos);\n        this.takeSurroundingComments(expression, startPos, this.state.lastTokEndLoc.index);\n        return expression;\n      }\n\n      var parenExpression = this.startNodeAt(startPos, startLoc);\n      parenExpression.expression = expression;\n      this.finishNode(parenExpression, \"ParenthesizedExpression\");\n      return parenExpression;\n    }\n  }, {\n    key: \"shouldParseArrow\",\n    value: function shouldParseArrow(params) {\n      return !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseArrow\",\n    value: function parseArrow(node) {\n      if (this.eat(19)) {\n        return node;\n      }\n    }\n  }, {\n    key: \"parseParenItem\",\n    value: function parseParenItem(node, startPos, startLoc) {\n      return node;\n    }\n  }, {\n    key: \"parseNewOrNewTarget\",\n    value: function parseNewOrNewTarget() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.match(16)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n        this.next();\n        var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n        if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n          this.raise(Errors.UnexpectedNewTarget, {\n            at: metaProp\n          });\n        }\n\n        return metaProp;\n      }\n\n      return this.parseNew(node);\n    }\n  }, {\n    key: \"parseNew\",\n    value: function parseNew(node) {\n      this.parseNewCallee(node);\n\n      if (this.eat(10)) {\n        var args = this.parseExprList(11);\n        this.toReferencedList(args);\n        node.arguments = args;\n      } else {\n        node.arguments = [];\n      }\n\n      return this.finishNode(node, \"NewExpression\");\n    }\n  }, {\n    key: \"parseNewCallee\",\n    value: function parseNewCallee(node) {\n      node.callee = this.parseNoCallExpr();\n\n      if (node.callee.type === \"Import\") {\n        this.raise(Errors.ImportCallNotNewExpression, {\n          at: node.callee\n        });\n      } else if (this.isOptionalChain(node.callee)) {\n        this.raise(Errors.OptionalChainingNoNew, {\n          at: this.state.lastTokEndLoc\n        });\n      } else if (this.eat(18)) {\n        this.raise(Errors.OptionalChainingNoNew, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }, {\n    key: \"parseTemplateElement\",\n    value: function parseTemplateElement(isTagged) {\n      var _this$state4 = this.state,\n          start = _this$state4.start,\n          startLoc = _this$state4.startLoc,\n          end = _this$state4.end,\n          value = _this$state4.value;\n      var elemStart = start + 1;\n      var elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));\n\n      if (value === null) {\n        if (!isTagged) {\n          this.raise(Errors.InvalidEscapeSequenceTemplate, {\n            at: createPositionWithColumnOffset(startLoc, 2)\n          });\n        }\n      }\n\n      var isTail = this.match(24);\n      var endOffset = isTail ? -1 : -2;\n      var elemEnd = end + endOffset;\n      elem.value = {\n        raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: value === null ? null : value.slice(1, endOffset)\n      };\n      elem.tail = isTail;\n      this.next();\n      this.finishNode(elem, \"TemplateElement\");\n      this.resetEndLocation(elem, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n      return elem;\n    }\n  }, {\n    key: \"parseTemplate\",\n    value: function parseTemplate(isTagged) {\n      var node = this.startNode();\n      node.expressions = [];\n      var curElt = this.parseTemplateElement(isTagged);\n      node.quasis = [curElt];\n\n      while (!curElt.tail) {\n        node.expressions.push(this.parseTemplateSubstitution());\n        this.readTemplateContinuation();\n        node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n      }\n\n      return this.finishNode(node, \"TemplateLiteral\");\n    }\n  }, {\n    key: \"parseTemplateSubstitution\",\n    value: function parseTemplateSubstitution() {\n      return this.parseExpression();\n    }\n  }, {\n    key: \"parseObjectLike\",\n    value: function parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n      if (isRecord) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var propHash = Object.create(null);\n      var first = true;\n      var node = this.startNode();\n      node.properties = [];\n      this.next();\n\n      while (!this.match(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n\n          if (this.match(close)) {\n            this.addTrailingCommaExtraToNode(node);\n            break;\n          }\n        }\n\n        var prop = void 0;\n\n        if (isPattern) {\n          prop = this.parseBindingProperty();\n        } else {\n          prop = this.parsePropertyDefinition(refExpressionErrors);\n          this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n        }\n\n        if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n          this.raise(Errors.InvalidRecordProperty, {\n            at: prop\n          });\n        }\n\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n\n        node.properties.push(prop);\n      }\n\n      this.next();\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var type = \"ObjectExpression\";\n\n      if (isPattern) {\n        type = \"ObjectPattern\";\n      } else if (isRecord) {\n        type = \"RecordExpression\";\n      }\n\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"addTrailingCommaExtraToNode\",\n    value: function addTrailingCommaExtraToNode(node) {\n      this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n      this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n    }\n  }, {\n    key: \"maybeAsyncOrAccessorProp\",\n    value: function maybeAsyncOrAccessorProp(prop) {\n      return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n    }\n  }, {\n    key: \"parsePropertyDefinition\",\n    value: function parsePropertyDefinition(refExpressionErrors) {\n      var decorators = [];\n\n      if (this.match(26)) {\n        if (this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedPropertyDecorator, {\n            at: this.state.startLoc\n          });\n        }\n\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n      }\n\n      var prop = this.startNode();\n      var isAsync = false;\n      var isAccessor = false;\n      var startPos;\n      var startLoc;\n\n      if (this.match(21)) {\n        if (decorators.length) this.unexpected();\n        return this.parseSpread();\n      }\n\n      if (decorators.length) {\n        prop.decorators = decorators;\n        decorators = [];\n      }\n\n      prop.method = false;\n\n      if (refExpressionErrors) {\n        startPos = this.state.start;\n        startLoc = this.state.startLoc;\n      }\n\n      var isGenerator = this.eat(55);\n      this.parsePropertyNamePrefixOperator(prop);\n      var containsEsc = this.state.containsEsc;\n      var key = this.parsePropertyName(prop, refExpressionErrors);\n\n      if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n        var keyName = key.name;\n\n        if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n          isAsync = true;\n          this.resetPreviousNodeTrailingComments(key);\n          isGenerator = this.eat(55);\n          this.parsePropertyName(prop);\n        }\n\n        if (keyName === \"get\" || keyName === \"set\") {\n          isAccessor = true;\n          this.resetPreviousNodeTrailingComments(key);\n          prop.kind = keyName;\n\n          if (this.match(55)) {\n            isGenerator = true;\n            this.raise(Errors.AccessorIsGenerator, {\n              at: this.state.curPosition(),\n              kind: keyName\n            });\n            this.next();\n          }\n\n          this.parsePropertyName(prop);\n        }\n      }\n\n      this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n      return prop;\n    }\n  }, {\n    key: \"getGetterSetterExpectedParamCount\",\n    value: function getGetterSetterExpectedParamCount(method) {\n      return method.kind === \"get\" ? 0 : 1;\n    }\n  }, {\n    key: \"getObjectOrClassMethodParams\",\n    value: function getObjectOrClassMethodParams(method) {\n      return method.params;\n    }\n  }, {\n    key: \"checkGetterSetterParams\",\n    value: function checkGetterSetterParams(method) {\n      var _params;\n\n      var paramCount = this.getGetterSetterExpectedParamCount(method);\n      var params = this.getObjectOrClassMethodParams(method);\n\n      if (params.length !== paramCount) {\n        this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n          at: method\n        });\n      }\n\n      if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n        this.raise(Errors.BadSetterRestParameter, {\n          at: method\n        });\n      }\n    }\n  }, {\n    key: \"parseObjectMethod\",\n    value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n      if (isAccessor) {\n        this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n        this.checkGetterSetterParams(prop);\n        return prop;\n      }\n\n      if (isAsync || isGenerator || this.match(10)) {\n        if (isPattern) this.unexpected();\n        prop.kind = \"method\";\n        prop.method = true;\n        return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n      }\n    }\n  }, {\n    key: \"parseObjectProperty\",\n    value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n      prop.shorthand = false;\n\n      if (this.eat(14)) {\n        prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n\n      if (!prop.computed && prop.key.type === \"Identifier\") {\n        this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n        if (isPattern) {\n          prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n        } else if (this.match(29)) {\n          var shorthandAssignLoc = this.state.startLoc;\n\n          if (refExpressionErrors != null) {\n            if (refExpressionErrors.shorthandAssignLoc === null) {\n              refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n            }\n          } else {\n            this.raise(Errors.InvalidCoverInitializedName, {\n              at: shorthandAssignLoc\n            });\n          }\n\n          prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n        } else {\n          prop.value = cloneIdentifier(prop.key);\n        }\n\n        prop.shorthand = true;\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n    }\n  }, {\n    key: \"parseObjPropValue\",\n    value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n      if (!node) this.unexpected();\n      return node;\n    }\n  }, {\n    key: \"parsePropertyName\",\n    value: function parsePropertyName(prop, refExpressionErrors) {\n      if (this.eat(0)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssignAllowIn();\n        this.expect(3);\n      } else {\n        var _this$state5 = this.state,\n            type = _this$state5.type,\n            value = _this$state5.value;\n        var key;\n\n        if (tokenIsKeywordOrIdentifier(type)) {\n          key = this.parseIdentifier(true);\n        } else {\n          switch (type) {\n            case 130:\n              key = this.parseNumericLiteral(value);\n              break;\n\n            case 129:\n              key = this.parseStringLiteral(value);\n              break;\n\n            case 131:\n              key = this.parseBigIntLiteral(value);\n              break;\n\n            case 132:\n              key = this.parseDecimalLiteral(value);\n              break;\n\n            case 134:\n              {\n                var privateKeyLoc = this.state.startLoc;\n\n                if (refExpressionErrors != null) {\n                  if (refExpressionErrors.privateKeyLoc === null) {\n                    refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                  }\n                } else {\n                  this.raise(Errors.UnexpectedPrivateField, {\n                    at: privateKeyLoc\n                  });\n                }\n\n                key = this.parsePrivateName();\n                break;\n              }\n\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        prop.key = key;\n\n        if (type !== 134) {\n          prop.computed = false;\n        }\n      }\n\n      return prop.key;\n    }\n  }, {\n    key: \"initFunction\",\n    value: function initFunction(node, isAsync) {\n      node.id = null;\n      node.generator = false;\n      node.async = !!isAsync;\n    }\n  }, {\n    key: \"parseMethod\",\n    value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n      var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      this.initFunction(node, isAsync);\n      node.generator = !!isGenerator;\n      var allowModifiers = isConstructor;\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n      this.parseFunctionParams(node, allowModifiers);\n      this.parseFunctionBodyAndFinish(node, type, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      return node;\n    }\n  }, {\n    key: \"parseArrayLike\",\n    value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n      if (isTuple) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n    }\n  }, {\n    key: \"parseArrowExpression\",\n    value: function parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      var flags = functionFlags(isAsync, false);\n\n      if (!this.match(5) && this.prodParam.hasIn) {\n        flags |= PARAM_IN;\n      }\n\n      this.prodParam.enter(flags);\n      this.initFunction(node, isAsync);\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n      if (params) {\n        this.state.maybeInArrowParameters = true;\n        this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      }\n\n      this.state.maybeInArrowParameters = false;\n      this.parseFunctionBody(node, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return this.finishNode(node, \"ArrowFunctionExpression\");\n    }\n  }, {\n    key: \"setArrowFunctionParameters\",\n    value: function setArrowFunctionParameters(node, params, trailingCommaLoc) {\n      this.toAssignableList(params, trailingCommaLoc, false);\n      node.params = params;\n    }\n  }, {\n    key: \"parseFunctionBodyAndFinish\",\n    value: function parseFunctionBodyAndFinish(node, type) {\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.parseFunctionBody(node, false, isMethod);\n      this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseFunctionBody\",\n    value: function parseFunctionBody(node, allowExpression) {\n      var _this55 = this;\n\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isExpression = allowExpression && !this.match(5);\n      this.expressionScope.enter(newExpressionScope());\n\n      if (isExpression) {\n        node.body = this.parseMaybeAssign();\n        this.checkParams(node, false, allowExpression, false);\n      } else {\n        var oldStrict = this.state.strict;\n        var oldLabels = this.state.labels;\n        this.state.labels = [];\n        this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n        node.body = this.parseBlock(true, false, function (hasStrictModeDirective) {\n          var nonSimple = !_this55.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            _this55.raise(Errors.IllegalLanguageModeDirective, {\n              at: (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node\n            });\n          }\n\n          var strictModeChanged = !oldStrict && _this55.state.strict;\n\n          _this55.checkParams(node, !_this55.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n          if (_this55.state.strict && node.id) {\n            _this55.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        });\n        this.prodParam.exit();\n        this.state.labels = oldLabels;\n      }\n\n      this.expressionScope.exit();\n    }\n  }, {\n    key: \"isSimpleParameter\",\n    value: function isSimpleParameter(node) {\n      return node.type === \"Identifier\";\n    }\n  }, {\n    key: \"isSimpleParamList\",\n    value: function isSimpleParamList(params) {\n      for (var i = 0, len = params.length; i < len; i++) {\n        if (!this.isSimpleParameter(params[i])) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkParams\",\n    value: function checkParams(node, allowDuplicates, isArrowFunction) {\n      var strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var checkClashes = !allowDuplicates && new Set();\n      var formalParameters = {\n        type: \"FormalParameters\"\n      };\n\n      var _iterator11 = _createForOfIteratorHelper(node.params),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var param = _step11.value;\n          this.checkLVal(param, {\n            in: formalParameters,\n            binding: BIND_VAR,\n            checkClashes: checkClashes,\n            strictModeChanged: strictModeChanged\n          });\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    }\n  }, {\n    key: \"parseExprList\",\n    value: function parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n\n          if (this.match(close)) {\n            if (nodeForExtra) {\n              this.addTrailingCommaExtraToNode(nodeForExtra);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseExprListItem\",\n    value: function parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n      var elt;\n\n      if (this.match(12)) {\n        if (!allowEmpty) {\n          this.raise(Errors.UnexpectedToken, {\n            at: this.state.curPosition(),\n            unexpected: \",\"\n          });\n        }\n\n        elt = null;\n      } else if (this.match(21)) {\n        var spreadNodeStartPos = this.state.start;\n        var spreadNodeStartLoc = this.state.startLoc;\n        elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n      } else if (this.match(17)) {\n        this.expectPlugin(\"partialApplication\");\n\n        if (!allowPlaceholder) {\n          this.raise(Errors.UnexpectedArgumentPlaceholder, {\n            at: this.state.startLoc\n          });\n        }\n\n        var node = this.startNode();\n        this.next();\n        elt = this.finishNode(node, \"ArgumentPlaceholder\");\n      } else {\n        elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseIdentifier\",\n    value: function parseIdentifier(liberal) {\n      var node = this.startNode();\n      var name = this.parseIdentifierName(node.start, liberal);\n      return this.createIdentifier(node, name);\n    }\n  }, {\n    key: \"createIdentifier\",\n    value: function createIdentifier(node, name) {\n      node.name = name;\n      node.loc.identifierName = name;\n      return this.finishNode(node, \"Identifier\");\n    }\n  }, {\n    key: \"parseIdentifierName\",\n    value: function parseIdentifierName(pos, liberal) {\n      var name;\n      var _this$state6 = this.state,\n          startLoc = _this$state6.startLoc,\n          type = _this$state6.type;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        name = this.state.value;\n      } else {\n        throw this.unexpected();\n      }\n\n      var tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n      if (liberal) {\n        if (tokenIsKeyword) {\n          this.replaceToken(128);\n        }\n      } else {\n        this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n      }\n\n      this.next();\n      return name;\n    }\n  }, {\n    key: \"checkReservedWord\",\n    value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n      if (word.length > 10) {\n        return;\n      }\n\n      if (!canBeReservedWord(word)) {\n        return;\n      }\n\n      if (word === \"yield\") {\n        if (this.prodParam.hasYield) {\n          this.raise(Errors.YieldBindingIdentifier, {\n            at: startLoc\n          });\n          return;\n        }\n      } else if (word === \"await\") {\n        if (this.prodParam.hasAwait) {\n          this.raise(Errors.AwaitBindingIdentifier, {\n            at: startLoc\n          });\n          return;\n        }\n\n        if (this.scope.inStaticBlock) {\n          this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n            at: startLoc\n          });\n          return;\n        }\n\n        this.expressionScope.recordAsyncArrowParametersError({\n          at: startLoc\n        });\n      } else if (word === \"arguments\") {\n        if (this.scope.inClassAndNotInNonArrowFunction) {\n          this.raise(Errors.ArgumentsInClass, {\n            at: startLoc\n          });\n          return;\n        }\n      }\n\n      if (checkKeywords && isKeyword(word)) {\n        this.raise(Errors.UnexpectedKeyword, {\n          at: startLoc,\n          keyword: word\n        });\n        return;\n      }\n\n      var reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n      if (reservedTest(word, this.inModule)) {\n        this.raise(Errors.UnexpectedReservedWord, {\n          at: startLoc,\n          reservedWord: word\n        });\n      }\n    }\n  }, {\n    key: \"isAwaitAllowed\",\n    value: function isAwaitAllowed() {\n      if (this.prodParam.hasAwait) return true;\n\n      if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseAwait\",\n    value: function parseAwait(startPos, startLoc) {\n      var node = this.startNodeAt(startPos, startLoc);\n      this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {\n        at: node\n      });\n\n      if (this.eat(55)) {\n        this.raise(Errors.ObsoleteAwaitStar, {\n          at: node\n        });\n      }\n\n      if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n        if (this.isAmbiguousAwait()) {\n          this.ambiguousScriptDifferentAst = true;\n        } else {\n          this.sawUnambiguousESM = true;\n        }\n      }\n\n      if (!this.state.soloAwait) {\n        node.argument = this.parseMaybeUnary(null, true);\n      }\n\n      return this.finishNode(node, \"AwaitExpression\");\n    }\n  }, {\n    key: \"isAmbiguousAwait\",\n    value: function isAmbiguousAwait() {\n      if (this.hasPrecedingLineBreak()) return true;\n      var type = this.state.type;\n      return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 133 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n    }\n  }, {\n    key: \"parseYield\",\n    value: function parseYield() {\n      var node = this.startNode();\n      this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {\n        at: node\n      });\n      this.next();\n      var delegating = false;\n      var argument = null;\n\n      if (!this.hasPrecedingLineBreak()) {\n        delegating = this.eat(55);\n\n        switch (this.state.type) {\n          case 13:\n          case 135:\n          case 8:\n          case 11:\n          case 3:\n          case 9:\n          case 14:\n          case 12:\n            if (!delegating) break;\n\n          default:\n            argument = this.parseMaybeAssign();\n        }\n      }\n\n      node.delegate = delegating;\n      node.argument = argument;\n      return this.finishNode(node, \"YieldExpression\");\n    }\n  }, {\n    key: \"checkPipelineAtInfixOperator\",\n    value: function checkPipelineAtInfixOperator(left, leftStartLoc) {\n      if (this.hasPlugin([\"pipelineOperator\", {\n        proposal: \"smart\"\n      }])) {\n        if (left.type === \"SequenceExpression\") {\n          this.raise(Errors.PipelineHeadSequenceExpression, {\n            at: leftStartLoc\n          });\n        }\n      }\n    }\n  }, {\n    key: \"parseSmartPipelineBodyInStyle\",\n    value: function parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n      var bodyNode = this.startNodeAt(startPos, startLoc);\n\n      if (this.isSimpleReference(childExpr)) {\n        bodyNode.callee = childExpr;\n        return this.finishNode(bodyNode, \"PipelineBareFunction\");\n      } else {\n        this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n        bodyNode.expression = childExpr;\n        return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n      }\n    }\n  }, {\n    key: \"isSimpleReference\",\n    value: function isSimpleReference(expression) {\n      switch (expression.type) {\n        case \"MemberExpression\":\n          return !expression.computed && this.isSimpleReference(expression.object);\n\n        case \"Identifier\":\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"checkSmartPipeTopicBodyEarlyErrors\",\n    value: function checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n      if (this.match(19)) {\n        throw this.raise(Errors.PipelineBodyNoArrow, {\n          at: this.state.startLoc\n        });\n      }\n\n      if (!this.topicReferenceWasUsedInCurrentContext()) {\n        this.raise(Errors.PipelineTopicUnused, {\n          at: startLoc\n        });\n      }\n    }\n  }, {\n    key: \"withTopicBindingContext\",\n    value: function withTopicBindingContext(callback) {\n      var outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 1,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    }\n  }, {\n    key: \"withSmartMixTopicForbiddingContext\",\n    value: function withSmartMixTopicForbiddingContext(callback) {\n      if (this.hasPlugin([\"pipelineOperator\", {\n        proposal: \"smart\"\n      }])) {\n        var outerContextTopicState = this.state.topicContext;\n        this.state.topicContext = {\n          maxNumOfResolvableTopics: 0,\n          maxTopicIndex: null\n        };\n\n        try {\n          return callback();\n        } finally {\n          this.state.topicContext = outerContextTopicState;\n        }\n      } else {\n        return callback();\n      }\n    }\n  }, {\n    key: \"withSoloAwaitPermittingContext\",\n    value: function withSoloAwaitPermittingContext(callback) {\n      var outerContextSoloAwaitState = this.state.soloAwait;\n      this.state.soloAwait = true;\n\n      try {\n        return callback();\n      } finally {\n        this.state.soloAwait = outerContextSoloAwaitState;\n      }\n    }\n  }, {\n    key: \"allowInAnd\",\n    value: function allowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToSet = PARAM_IN & ~flags;\n\n      if (prodParamToSet) {\n        this.prodParam.enter(flags | PARAM_IN);\n\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n\n      return callback();\n    }\n  }, {\n    key: \"disallowInAnd\",\n    value: function disallowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToClear = PARAM_IN & flags;\n\n      if (prodParamToClear) {\n        this.prodParam.enter(flags & ~PARAM_IN);\n\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n\n      return callback();\n    }\n  }, {\n    key: \"registerTopicReference\",\n    value: function registerTopicReference() {\n      this.state.topicContext.maxTopicIndex = 0;\n    }\n  }, {\n    key: \"topicReferenceIsAllowedInCurrentContext\",\n    value: function topicReferenceIsAllowedInCurrentContext() {\n      return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n    }\n  }, {\n    key: \"topicReferenceWasUsedInCurrentContext\",\n    value: function topicReferenceWasUsedInCurrentContext() {\n      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n    }\n  }, {\n    key: \"parseFSharpPipelineBody\",\n    value: function parseFSharpPipelineBody(prec) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      this.state.potentialArrowAt = this.state.start;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = true;\n      var ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return ret;\n    }\n  }, {\n    key: \"parseModuleExpression\",\n    value: function parseModuleExpression() {\n      this.expectPlugin(\"moduleBlocks\");\n      var node = this.startNode();\n      this.next();\n      this.eat(5);\n      var revertScopes = this.initializeScopes(true);\n      this.enterInitialScopes();\n      var program = this.startNode();\n\n      try {\n        node.body = this.parseProgram(program, 8, \"module\");\n      } finally {\n        revertScopes();\n      }\n\n      this.eat(8);\n      return this.finishNode(node, \"ModuleExpression\");\n    }\n  }, {\n    key: \"parsePropertyNamePrefixOperator\",\n    value: function parsePropertyNamePrefixOperator(prop) {}\n  }]);\n  return ExpressionParser;\n}(LValParser);\n\nvar loopLabel = {\n  kind: \"loop\"\n},\n    switchLabel = {\n  kind: \"switch\"\n};\nvar FUNC_NO_FLAGS = 0,\n    FUNC_STATEMENT = 1,\n    FUNC_HANGING_STATEMENT = 2,\n    FUNC_NULLABLE_ID = 4;\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\nvar keywordRelationalOperator = new RegExp(\"in(?:stanceof)?\", \"y\");\n\nfunction babel7CompatTokens(tokens, input) {\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    var type = token.type;\n\n    if (typeof type === \"number\") {\n      {\n        if (type === 134) {\n          var loc = token.loc,\n              start = token.start,\n              value = token.value,\n              end = token.end;\n          var hashEndPos = start + 1;\n          var hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(128),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          var _loc = token.loc,\n              _start = token.start,\n              _value = token.value,\n              _end = token.end;\n          var backquoteEnd = _start + 1;\n          var backquoteEndLoc = createPositionWithColumnOffset(_loc.start, 1);\n          var startToken = void 0;\n\n          if (input.charCodeAt(_start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: _start,\n              end: backquoteEnd,\n              startLoc: _loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: _start,\n              end: backquoteEnd,\n              startLoc: _loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n\n          var templateValue = void 0,\n              templateElementEnd = void 0,\n              templateElementEndLoc = void 0,\n              endToken = void 0;\n\n          if (type === 24) {\n            templateElementEnd = _end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(_loc.end, -1);\n            templateValue = _value === null ? null : _value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: _end,\n              startLoc: templateElementEndLoc,\n              endLoc: _loc.end\n            });\n          } else {\n            templateElementEnd = _end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(_loc.end, -2);\n            templateValue = _value === null ? null : _value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: _end,\n              startLoc: templateElementEndLoc,\n              endLoc: _loc.end\n            });\n          }\n\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nvar StatementParser = /*#__PURE__*/function (_ExpressionParser) {\n  (0, _inherits2.default)(StatementParser, _ExpressionParser);\n\n  var _super18 = _createSuper(StatementParser);\n\n  function StatementParser() {\n    (0, _classCallCheck2.default)(this, StatementParser);\n    return _super18.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(StatementParser, [{\n    key: \"parseTopLevel\",\n    value: function parseTopLevel(file, program) {\n      file.program = this.parseProgram(program);\n      file.comments = this.state.comments;\n\n      if (this.options.tokens) {\n        file.tokens = babel7CompatTokens(this.tokens, this.input);\n      }\n\n      return this.finishNode(file, \"File\");\n    }\n  }, {\n    key: \"parseProgram\",\n    value: function parseProgram(program) {\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 135;\n      var sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n      program.sourceType = sourceType;\n      program.interpreter = this.parseInterpreterDirective();\n      this.parseBlockBody(program, true, true, end);\n\n      if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n        for (var _i5 = 0, _Array$from2 = Array.from(this.scope.undefinedExports); _i5 < _Array$from2.length; _i5++) {\n          var _Array$from2$_i = (0, _slicedToArray2.default)(_Array$from2[_i5], 2),\n              localName = _Array$from2$_i[0],\n              at = _Array$from2$_i[1];\n\n          this.raise(Errors.ModuleExportUndefined, {\n            at: at,\n            localName: localName\n          });\n        }\n      }\n\n      return this.finishNode(program, \"Program\");\n    }\n  }, {\n    key: \"stmtToDirective\",\n    value: function stmtToDirective(stmt) {\n      var directive = stmt;\n      directive.type = \"Directive\";\n      directive.value = directive.expression;\n      delete directive.expression;\n      var directiveLiteral = directive.value;\n      var expressionValue = directiveLiteral.value;\n      var raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n      var val = directiveLiteral.value = raw.slice(1, -1);\n      this.addExtra(directiveLiteral, \"raw\", raw);\n      this.addExtra(directiveLiteral, \"rawValue\", val);\n      this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n      directiveLiteral.type = \"DirectiveLiteral\";\n      return directive;\n    }\n  }, {\n    key: \"parseInterpreterDirective\",\n    value: function parseInterpreterDirective() {\n      if (!this.match(28)) {\n        return null;\n      }\n\n      var node = this.startNode();\n      node.value = this.state.value;\n      this.next();\n      return this.finishNode(node, \"InterpreterDirective\");\n    }\n  }, {\n    key: \"isLet\",\n    value: function isLet(context) {\n      if (!this.isContextual(99)) {\n        return false;\n      }\n\n      return this.isLetKeyword(context);\n    }\n  }, {\n    key: \"isLetKeyword\",\n    value: function isLetKeyword(context) {\n      var next = this.nextTokenStart();\n      var nextCh = this.codePointAtPos(next);\n\n      if (nextCh === 92 || nextCh === 91) {\n        return true;\n      }\n\n      if (context) return false;\n      if (nextCh === 123) return true;\n\n      if (isIdentifierStart(nextCh)) {\n        keywordRelationalOperator.lastIndex = next;\n\n        if (keywordRelationalOperator.test(this.input)) {\n          var endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n          if (!isIdentifierChar(endCh) && endCh !== 92) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseStatement\",\n    value: function parseStatement(context, topLevel) {\n      if (this.match(26)) {\n        this.parseDecorators(true);\n      }\n\n      return this.parseStatementContent(context, topLevel);\n    }\n  }, {\n    key: \"parseStatementContent\",\n    value: function parseStatementContent(context, topLevel) {\n      var starttype = this.state.type;\n      var node = this.startNode();\n      var kind;\n\n      if (this.isLet(context)) {\n        starttype = 74;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case 60:\n          return this.parseBreakContinueStatement(node, true);\n\n        case 63:\n          return this.parseBreakContinueStatement(node, false);\n\n        case 64:\n          return this.parseDebuggerStatement(node);\n\n        case 90:\n          return this.parseDoStatement(node);\n\n        case 91:\n          return this.parseForStatement(node);\n\n        case 68:\n          if (this.lookaheadCharCode() === 46) break;\n\n          if (context) {\n            if (this.state.strict) {\n              this.raise(Errors.StrictFunction, {\n                at: this.state.startLoc\n              });\n            } else if (context !== \"if\" && context !== \"label\") {\n              this.raise(Errors.SloppyFunction, {\n                at: this.state.startLoc\n              });\n            }\n          }\n\n          return this.parseFunctionStatement(node, false, !context);\n\n        case 80:\n          if (context) this.unexpected();\n          return this.parseClass(node, true);\n\n        case 69:\n          return this.parseIfStatement(node);\n\n        case 70:\n          return this.parseReturnStatement(node);\n\n        case 71:\n          return this.parseSwitchStatement(node);\n\n        case 72:\n          return this.parseThrowStatement(node);\n\n        case 73:\n          return this.parseTryStatement(node);\n\n        case 75:\n        case 74:\n          kind = kind || this.state.value;\n\n          if (context && kind !== \"var\") {\n            this.raise(Errors.UnexpectedLexicalDeclaration, {\n              at: this.state.startLoc\n            });\n          }\n\n          return this.parseVarStatement(node, kind);\n\n        case 92:\n          return this.parseWhileStatement(node);\n\n        case 76:\n          return this.parseWithStatement(node);\n\n        case 5:\n          return this.parseBlock();\n\n        case 13:\n          return this.parseEmptyStatement(node);\n\n        case 83:\n          {\n            var nextTokenCharCode = this.lookaheadCharCode();\n\n            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n          }\n\n        case 82:\n          {\n            if (!this.options.allowImportExportEverywhere && !topLevel) {\n              this.raise(Errors.UnexpectedImportExport, {\n                at: this.state.startLoc\n              });\n            }\n\n            this.next();\n            var result;\n\n            if (starttype === 83) {\n              result = this.parseImport(node);\n\n              if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n                this.sawUnambiguousESM = true;\n              }\n            } else {\n              result = this.parseExport(node);\n\n              if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n                this.sawUnambiguousESM = true;\n              }\n            }\n\n            this.assertModuleNodeAllowed(node);\n            return result;\n          }\n\n        default:\n          {\n            if (this.isAsyncFunction()) {\n              if (context) {\n                this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n                  at: this.state.startLoc\n                });\n              }\n\n              this.next();\n              return this.parseFunctionStatement(node, true, !context);\n            }\n          }\n      }\n\n      var maybeName = this.state.value;\n      var expr = this.parseExpression();\n\n      if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n        return this.parseLabeledStatement(node, maybeName, expr, context);\n      } else {\n        return this.parseExpressionStatement(node, expr);\n      }\n    }\n  }, {\n    key: \"assertModuleNodeAllowed\",\n    value: function assertModuleNodeAllowed(node) {\n      if (!this.options.allowImportExportEverywhere && !this.inModule) {\n        this.raise(Errors.ImportOutsideModule, {\n          at: node\n        });\n      }\n    }\n  }, {\n    key: \"takeDecorators\",\n    value: function takeDecorators(node) {\n      var decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (decorators.length) {\n        node.decorators = decorators;\n        this.resetStartLocationFromNode(node, decorators[0]);\n        this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n      }\n    }\n  }, {\n    key: \"canHaveLeadingDecorator\",\n    value: function canHaveLeadingDecorator() {\n      return this.match(80);\n    }\n  }, {\n    key: \"parseDecorators\",\n    value: function parseDecorators(allowExport) {\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      while (this.match(26)) {\n        var decorator = this.parseDecorator();\n        currentContextDecorators.push(decorator);\n      }\n\n      if (this.match(82)) {\n        if (!allowExport) {\n          this.unexpected();\n        }\n\n        if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(Errors.DecoratorExportClass, {\n            at: this.state.startLoc\n          });\n        }\n      } else if (!this.canHaveLeadingDecorator()) {\n        throw this.raise(Errors.UnexpectedLeadingDecorator, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }, {\n    key: \"parseDecorator\",\n    value: function parseDecorator() {\n      this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n      var node = this.startNode();\n      this.next();\n\n      if (this.hasPlugin(\"decorators\")) {\n        this.state.decoratorStack.push([]);\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var expr;\n\n        if (this.match(10)) {\n          var _startPos2 = this.state.start;\n          var _startLoc2 = this.state.startLoc;\n          this.next();\n          expr = this.parseExpression();\n          this.expect(11);\n          expr = this.wrapParenthesis(_startPos2, _startLoc2, expr);\n        } else {\n          expr = this.parseIdentifier(false);\n\n          while (this.eat(16)) {\n            var _node11 = this.startNodeAt(startPos, startLoc);\n\n            _node11.object = expr;\n            _node11.property = this.parseIdentifier(true);\n            _node11.computed = false;\n            expr = this.finishNode(_node11, \"MemberExpression\");\n          }\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        this.state.decoratorStack.pop();\n      } else {\n        node.expression = this.parseExprSubscripts();\n      }\n\n      return this.finishNode(node, \"Decorator\");\n    }\n  }, {\n    key: \"parseMaybeDecoratorArguments\",\n    value: function parseMaybeDecoratorArguments(expr) {\n      if (this.eat(10)) {\n        var node = this.startNodeAtNode(expr);\n        node.callee = expr;\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        this.toReferencedList(node.arguments);\n        return this.finishNode(node, \"CallExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseBreakContinueStatement\",\n    value: function parseBreakContinueStatement(node, isBreak) {\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.label = null;\n      } else {\n        node.label = this.parseIdentifier();\n        this.semicolon();\n      }\n\n      this.verifyBreakContinue(node, isBreak);\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n    }\n  }, {\n    key: \"verifyBreakContinue\",\n    value: function verifyBreakContinue(node, isBreak) {\n      var i;\n\n      for (i = 0; i < this.state.labels.length; ++i) {\n        var lab = this.state.labels[i];\n\n        if (node.label == null || lab.name === node.label.name) {\n          if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n          if (node.label && isBreak) break;\n        }\n      }\n\n      if (i === this.state.labels.length) {\n        var type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n        this.raise(Errors.IllegalBreakContinue, {\n          at: node,\n          type: type\n        });\n      }\n    }\n  }, {\n    key: \"parseDebuggerStatement\",\n    value: function parseDebuggerStatement(node) {\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\");\n    }\n  }, {\n    key: \"parseHeaderExpression\",\n    value: function parseHeaderExpression() {\n      this.expect(10);\n      var val = this.parseExpression();\n      this.expect(11);\n      return val;\n    }\n  }, {\n    key: \"parseDoStatement\",\n    value: function parseDoStatement(node) {\n      var _this56 = this;\n\n      this.next();\n      this.state.labels.push(loopLabel);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this56.parseStatement(\"do\");\n      });\n      this.state.labels.pop();\n      this.expect(92);\n      node.test = this.parseHeaderExpression();\n      this.eat(13);\n      return this.finishNode(node, \"DoWhileStatement\");\n    }\n  }, {\n    key: \"parseForStatement\",\n    value: function parseForStatement(node) {\n      this.next();\n      this.state.labels.push(loopLabel);\n      var awaitAt = null;\n\n      if (this.isAwaitAllowed() && this.eatContextual(96)) {\n        awaitAt = this.state.lastTokStartLoc;\n      }\n\n      this.scope.enter(SCOPE_OTHER);\n      this.expect(10);\n\n      if (this.match(13)) {\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, null);\n      }\n\n      var startsWithLet = this.isContextual(99);\n      var isLet = startsWithLet && this.isLetKeyword();\n\n      if (this.match(74) || this.match(75) || isLet) {\n        var _init = this.startNode();\n\n        var kind = isLet ? \"let\" : this.state.value;\n        this.next();\n        this.parseVar(_init, true, kind);\n        this.finishNode(_init, \"VariableDeclaration\");\n\n        if ((this.match(58) || this.isContextual(101)) && _init.declarations.length === 1) {\n          return this.parseForIn(node, _init, awaitAt);\n        }\n\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, _init);\n      }\n\n      var startsWithAsync = this.isContextual(95);\n      var refExpressionErrors = new ExpressionErrors();\n      var init = this.parseExpression(true, refExpressionErrors);\n      var isForOf = this.isContextual(101);\n\n      if (isForOf) {\n        if (startsWithLet) {\n          this.raise(Errors.ForOfLet, {\n            at: init\n          });\n        }\n\n        if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n          this.raise(Errors.ForOfAsync, {\n            at: init\n          });\n        }\n      }\n\n      if (isForOf || this.match(58)) {\n        this.checkDestructuringPrivate(refExpressionErrors);\n        this.toAssignable(init, true);\n        var type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n        this.checkLVal(init, {\n          in: {\n            type: type\n          }\n        });\n        return this.parseForIn(node, init, awaitAt);\n      } else {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n  }, {\n    key: \"parseFunctionStatement\",\n    value: function parseFunctionStatement(node, isAsync, declarationPosition) {\n      this.next();\n      return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n    }\n  }, {\n    key: \"parseIfStatement\",\n    value: function parseIfStatement(node) {\n      this.next();\n      node.test = this.parseHeaderExpression();\n      node.consequent = this.parseStatement(\"if\");\n      node.alternate = this.eat(66) ? this.parseStatement(\"if\") : null;\n      return this.finishNode(node, \"IfStatement\");\n    }\n  }, {\n    key: \"parseReturnStatement\",\n    value: function parseReturnStatement(node) {\n      if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n        this.raise(Errors.IllegalReturn, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.argument = null;\n      } else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"ReturnStatement\");\n    }\n  }, {\n    key: \"parseSwitchStatement\",\n    value: function parseSwitchStatement(node) {\n      this.next();\n      node.discriminant = this.parseHeaderExpression();\n      var cases = node.cases = [];\n      this.expect(5);\n      this.state.labels.push(switchLabel);\n      this.scope.enter(SCOPE_OTHER);\n      var cur;\n\n      for (var sawDefault; !this.match(8);) {\n        if (this.match(61) || this.match(65)) {\n          var isCase = this.match(61);\n          if (cur) this.finishNode(cur, \"SwitchCase\");\n          cases.push(cur = this.startNode());\n          cur.consequent = [];\n          this.next();\n\n          if (isCase) {\n            cur.test = this.parseExpression();\n          } else {\n            if (sawDefault) {\n              this.raise(Errors.MultipleDefaultsInSwitch, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n\n            sawDefault = true;\n            cur.test = null;\n          }\n\n          this.expect(14);\n        } else {\n          if (cur) {\n            cur.consequent.push(this.parseStatement(null));\n          } else {\n            this.unexpected();\n          }\n        }\n      }\n\n      this.scope.exit();\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      this.next();\n      this.state.labels.pop();\n      return this.finishNode(node, \"SwitchStatement\");\n    }\n  }, {\n    key: \"parseThrowStatement\",\n    value: function parseThrowStatement(node) {\n      this.next();\n\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(Errors.NewlineAfterThrow, {\n          at: this.state.lastTokEndLoc\n        });\n      }\n\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\");\n    }\n  }, {\n    key: \"parseCatchClauseParam\",\n    value: function parseCatchClauseParam() {\n      var param = this.parseBindingAtom();\n      var simple = param.type === \"Identifier\";\n      this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLVal(param, {\n        in: {\n          type: \"CatchClause\"\n        },\n        binding: BIND_LEXICAL,\n        allowingSloppyLetBinding: true\n      });\n      return param;\n    }\n  }, {\n    key: \"parseTryStatement\",\n    value: function parseTryStatement(node) {\n      var _this57 = this;\n\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n\n      if (this.match(62)) {\n        var clause = this.startNode();\n        this.next();\n\n        if (this.match(10)) {\n          this.expect(10);\n          clause.param = this.parseCatchClauseParam();\n          this.expect(11);\n        } else {\n          clause.param = null;\n          this.scope.enter(SCOPE_OTHER);\n        }\n\n        clause.body = this.withSmartMixTopicForbiddingContext(function () {\n          return _this57.parseBlock(false, false);\n        });\n        this.scope.exit();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n\n      node.finalizer = this.eat(67) ? this.parseBlock() : null;\n\n      if (!node.handler && !node.finalizer) {\n        this.raise(Errors.NoCatchOrFinally, {\n          at: node\n        });\n      }\n\n      return this.finishNode(node, \"TryStatement\");\n    }\n  }, {\n    key: \"parseVarStatement\",\n    value: function parseVarStatement(node, kind) {\n      var allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.next();\n      this.parseVar(node, false, kind, allowMissingInitializer);\n      this.semicolon();\n      return this.finishNode(node, \"VariableDeclaration\");\n    }\n  }, {\n    key: \"parseWhileStatement\",\n    value: function parseWhileStatement(node) {\n      var _this58 = this;\n\n      this.next();\n      node.test = this.parseHeaderExpression();\n      this.state.labels.push(loopLabel);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this58.parseStatement(\"while\");\n      });\n      this.state.labels.pop();\n      return this.finishNode(node, \"WhileStatement\");\n    }\n  }, {\n    key: \"parseWithStatement\",\n    value: function parseWithStatement(node) {\n      var _this59 = this;\n\n      if (this.state.strict) {\n        this.raise(Errors.StrictWith, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.next();\n      node.object = this.parseHeaderExpression();\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this59.parseStatement(\"with\");\n      });\n      return this.finishNode(node, \"WithStatement\");\n    }\n  }, {\n    key: \"parseEmptyStatement\",\n    value: function parseEmptyStatement(node) {\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\");\n    }\n  }, {\n    key: \"parseLabeledStatement\",\n    value: function parseLabeledStatement(node, maybeName, expr, context) {\n      var _iterator12 = _createForOfIteratorHelper(this.state.labels),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var _label = _step12.value;\n\n          if (_label.name === maybeName) {\n            this.raise(Errors.LabelRedeclaration, {\n              at: expr,\n              labelName: maybeName\n            });\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      var kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n\n      for (var i = this.state.labels.length - 1; i >= 0; i--) {\n        var label = this.state.labels[i];\n\n        if (label.statementStart === node.start) {\n          label.statementStart = this.state.start;\n          label.kind = kind;\n        } else {\n          break;\n        }\n      }\n\n      this.state.labels.push({\n        name: maybeName,\n        kind: kind,\n        statementStart: this.state.start\n      });\n      node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n      this.state.labels.pop();\n      node.label = expr;\n      return this.finishNode(node, \"LabeledStatement\");\n    }\n  }, {\n    key: \"parseExpressionStatement\",\n    value: function parseExpressionStatement(node, expr) {\n      node.expression = expr;\n      this.semicolon();\n      return this.finishNode(node, \"ExpressionStatement\");\n    }\n  }, {\n    key: \"parseBlock\",\n    value: function parseBlock() {\n      var allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n      var node = this.startNode();\n\n      if (allowDirectives) {\n        this.state.strictErrors.clear();\n      }\n\n      this.expect(5);\n\n      if (createNewLexicalScope) {\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n      if (createNewLexicalScope) {\n        this.scope.exit();\n      }\n\n      return this.finishNode(node, \"BlockStatement\");\n    }\n  }, {\n    key: \"isValidDirective\",\n    value: function isValidDirective(stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n    }\n  }, {\n    key: \"parseBlockBody\",\n    value: function parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n      var body = node.body = [];\n      var directives = node.directives = [];\n      this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n    }\n  }, {\n    key: \"parseBlockOrModuleBlockBody\",\n    value: function parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n      var oldStrict = this.state.strict;\n      var hasStrictModeDirective = false;\n      var parsedNonDirective = false;\n\n      while (!this.match(end)) {\n        var stmt = this.parseStatement(null, topLevel);\n\n        if (directives && !parsedNonDirective) {\n          if (this.isValidDirective(stmt)) {\n            var directive = this.stmtToDirective(stmt);\n            directives.push(directive);\n\n            if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n              hasStrictModeDirective = true;\n              this.setStrict(true);\n            }\n\n            continue;\n          }\n\n          parsedNonDirective = true;\n          this.state.strictErrors.clear();\n        }\n\n        body.push(stmt);\n      }\n\n      if (afterBlockParse) {\n        afterBlockParse.call(this, hasStrictModeDirective);\n      }\n\n      if (!oldStrict) {\n        this.setStrict(false);\n      }\n\n      this.next();\n    }\n  }, {\n    key: \"parseFor\",\n    value: function parseFor(node, init) {\n      var _this60 = this;\n\n      node.init = init;\n      this.semicolon(false);\n      node.test = this.match(13) ? null : this.parseExpression();\n      this.semicolon(false);\n      node.update = this.match(11) ? null : this.parseExpression();\n      this.expect(11);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this60.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, \"ForStatement\");\n    }\n  }, {\n    key: \"parseForIn\",\n    value: function parseForIn(node, init, awaitAt) {\n      var _this61 = this;\n\n      var isForIn = this.match(58);\n      this.next();\n\n      if (isForIn) {\n        if (awaitAt !== null) this.unexpected(awaitAt);\n      } else {\n        node.await = awaitAt !== null;\n      }\n\n      if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n        this.raise(Errors.ForInOfLoopInitializer, {\n          at: init,\n          type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n        });\n      }\n\n      if (init.type === \"AssignmentPattern\") {\n        this.raise(Errors.InvalidLhs, {\n          at: init,\n          ancestor: {\n            type: \"ForStatement\"\n          }\n        });\n      }\n\n      node.left = init;\n      node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n      this.expect(11);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this61.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n    }\n  }, {\n    key: \"parseVar\",\n    value: function parseVar(node, isFor, kind) {\n      var allowMissingInitializer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var declarations = node.declarations = [];\n      node.kind = kind;\n\n      for (;;) {\n        var decl = this.startNode();\n        this.parseVarId(decl, kind);\n        decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n\n        if (decl.init === null && !allowMissingInitializer) {\n          if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n            this.raise(Errors.DeclarationMissingInitializer, {\n              at: this.state.lastTokEndLoc,\n              kind: \"destructuring\"\n            });\n          } else if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n            this.raise(Errors.DeclarationMissingInitializer, {\n              at: this.state.lastTokEndLoc,\n              kind: \"const\"\n            });\n          }\n        }\n\n        declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n        if (!this.eat(12)) break;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"parseVarId\",\n    value: function parseVarId(decl, kind) {\n      decl.id = this.parseBindingAtom();\n      this.checkLVal(decl.id, {\n        in: {\n          type: \"VariableDeclarator\"\n        },\n        binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL\n      });\n    }\n  }, {\n    key: \"parseFunction\",\n    value: function parseFunction(node) {\n      var _this62 = this;\n\n      var statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n      var isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isStatement = statement & FUNC_STATEMENT;\n      var isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n      var requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n      this.initFunction(node, isAsync);\n\n      if (this.match(55) && isHangingStatement) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.generator = this.eat(55);\n\n      if (isStatement) {\n        node.id = this.parseFunctionId(requireId);\n      }\n\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = false;\n      this.scope.enter(SCOPE_FUNCTION);\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n      if (!isStatement) {\n        node.id = this.parseFunctionId();\n      }\n\n      this.parseFunctionParams(node, false);\n      this.withSmartMixTopicForbiddingContext(function () {\n        _this62.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n      });\n      this.prodParam.exit();\n      this.scope.exit();\n\n      if (isStatement && !isHangingStatement) {\n        this.registerFunctionStatementId(node);\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    }\n  }, {\n    key: \"parseFunctionId\",\n    value: function parseFunctionId(requireId) {\n      return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n    }\n  }, {\n    key: \"parseFunctionParams\",\n    value: function parseFunctionParams(node, allowModifiers) {\n      this.expect(10);\n      this.expressionScope.enter(newParameterDeclarationScope());\n      node.params = this.parseBindingList(11, 41, false, allowModifiers);\n      this.expressionScope.exit();\n    }\n  }, {\n    key: \"registerFunctionStatementId\",\n    value: function registerFunctionStatementId(node) {\n      if (!node.id) return;\n      this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n    }\n  }, {\n    key: \"parseClass\",\n    value: function parseClass(node, isStatement, optionalId) {\n      this.next();\n      this.takeDecorators(node);\n      var oldStrict = this.state.strict;\n      this.state.strict = true;\n      this.parseClassId(node, isStatement, optionalId);\n      this.parseClassSuper(node);\n      node.body = this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n    }\n  }, {\n    key: \"isClassProperty\",\n    value: function isClassProperty() {\n      return this.match(29) || this.match(13) || this.match(8);\n    }\n  }, {\n    key: \"isClassMethod\",\n    value: function isClassMethod() {\n      return this.match(10);\n    }\n  }, {\n    key: \"isNonstaticConstructor\",\n    value: function isNonstaticConstructor(method) {\n      return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n    }\n  }, {\n    key: \"parseClassBody\",\n    value: function parseClassBody(hadSuperClass, oldStrict) {\n      var _this63 = this;\n\n      this.classScope.enter();\n      var state = {\n        hadConstructor: false,\n        hadSuperClass: hadSuperClass\n      };\n      var decorators = [];\n      var classBody = this.startNode();\n      classBody.body = [];\n      this.expect(5);\n      this.withSmartMixTopicForbiddingContext(function () {\n        while (!_this63.match(8)) {\n          if (_this63.eat(13)) {\n            if (decorators.length > 0) {\n              throw _this63.raise(Errors.DecoratorSemicolon, {\n                at: _this63.state.lastTokEndLoc\n              });\n            }\n\n            continue;\n          }\n\n          if (_this63.match(26)) {\n            decorators.push(_this63.parseDecorator());\n            continue;\n          }\n\n          var member = _this63.startNode();\n\n          if (decorators.length) {\n            member.decorators = decorators;\n\n            _this63.resetStartLocationFromNode(member, decorators[0]);\n\n            decorators = [];\n          }\n\n          _this63.parseClassMember(classBody, member, state);\n\n          if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n            _this63.raise(Errors.DecoratorConstructor, {\n              at: member\n            });\n          }\n        }\n      });\n      this.state.strict = oldStrict;\n      this.next();\n\n      if (decorators.length) {\n        throw this.raise(Errors.TrailingDecorator, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.classScope.exit();\n      return this.finishNode(classBody, \"ClassBody\");\n    }\n  }, {\n    key: \"parseClassMemberFromModifier\",\n    value: function parseClassMemberFromModifier(classBody, member) {\n      var key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        var method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false, false);\n        return true;\n      } else if (this.isClassProperty()) {\n        var prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return true;\n      }\n\n      this.resetPreviousNodeTrailingComments(key);\n      return false;\n    }\n  }, {\n    key: \"parseClassMember\",\n    value: function parseClassMember(classBody, member, state) {\n      var isStatic = this.isContextual(104);\n\n      if (isStatic) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n\n        if (this.eat(5)) {\n          this.parseClassStaticBlock(classBody, member);\n          return;\n        }\n      }\n\n      this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n  }, {\n    key: \"parseClassMemberWithIsStatic\",\n    value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n      var publicMethod = member;\n      var privateMethod = member;\n      var publicProp = member;\n      var privateProp = member;\n      var accessorProp = member;\n      var method = publicMethod;\n      var publicMember = publicMethod;\n      member.static = isStatic;\n      this.parsePropertyNamePrefixOperator(member);\n\n      if (this.eat(55)) {\n        method.kind = \"method\";\n        var isPrivateName = this.match(134);\n        this.parseClassElementName(method);\n\n        if (isPrivateName) {\n          this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n          return;\n        }\n\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsGenerator, {\n            at: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n        return;\n      }\n\n      var isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n      var isPrivate = this.match(134);\n      var key = this.parseClassElementName(member);\n      var maybeQuestionTokenStartLoc = this.state.startLoc;\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isClassMethod()) {\n        method.kind = \"method\";\n\n        if (isPrivate) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n          return;\n        }\n\n        var isConstructor = this.isNonstaticConstructor(publicMethod);\n        var allowsDirectSuper = false;\n\n        if (isConstructor) {\n          publicMethod.kind = \"constructor\";\n\n          if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n            this.raise(Errors.DuplicateConstructor, {\n              at: key\n            });\n          }\n\n          if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n            this.raise(Errors.OverrideOnConstructor, {\n              at: key\n            });\n          }\n\n          state.hadConstructor = true;\n          allowsDirectSuper = state.hadSuperClass;\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n      } else if (this.isClassProperty()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n        this.resetPreviousNodeTrailingComments(key);\n        var isGenerator = this.eat(55);\n\n        if (publicMember.optional) {\n          this.unexpected(maybeQuestionTokenStartLoc);\n        }\n\n        method.kind = \"method\";\n\n        var _isPrivate = this.match(134);\n\n        this.parseClassElementName(method);\n        this.parsePostMemberNameModifiers(publicMember);\n\n        if (_isPrivate) {\n          this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(Errors.ConstructorIsAsync, {\n              at: publicMethod.key\n            });\n          }\n\n          this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n        }\n      } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n        this.resetPreviousNodeTrailingComments(key);\n        method.kind = key.name;\n\n        var _isPrivate2 = this.match(134);\n\n        this.parseClassElementName(publicMethod);\n\n        if (_isPrivate2) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(Errors.ConstructorIsAccessor, {\n              at: publicMethod.key\n            });\n          }\n\n          this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n        }\n\n        this.checkGetterSetterParams(publicMethod);\n      } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n        this.expectPlugin(\"decoratorAutoAccessors\");\n        this.resetPreviousNodeTrailingComments(key);\n\n        var _isPrivate3 = this.match(134);\n\n        this.parseClassElementName(publicProp);\n        this.pushClassAccessorProperty(classBody, accessorProp, _isPrivate3);\n      } else if (this.isLineTerminator()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else {\n        this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseClassElementName\",\n    value: function parseClassElementName(member) {\n      var _this$state7 = this.state,\n          type = _this$state7.type,\n          value = _this$state7.value;\n\n      if ((type === 128 || type === 129) && member.static && value === \"prototype\") {\n        this.raise(Errors.StaticPrototype, {\n          at: this.state.startLoc\n        });\n      }\n\n      if (type === 134) {\n        if (value === \"constructor\") {\n          this.raise(Errors.ConstructorClassPrivateField, {\n            at: this.state.startLoc\n          });\n        }\n\n        var key = this.parsePrivateName();\n        member.key = key;\n        return key;\n      }\n\n      return this.parsePropertyName(member);\n    }\n  }, {\n    key: \"parseClassStaticBlock\",\n    value: function parseClassStaticBlock(classBody, member) {\n      var _member$decorators;\n\n      this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(PARAM);\n      var body = member.body = [];\n      this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.labels = oldLabels;\n      classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n      if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n        this.raise(Errors.DecoratorStaticBlock, {\n          at: member\n        });\n      }\n    }\n  }, {\n    key: \"pushClassProperty\",\n    value: function pushClassProperty(classBody, prop) {\n      if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n        this.raise(Errors.ConstructorClassField, {\n          at: prop.key\n        });\n      }\n\n      classBody.body.push(this.parseClassProperty(prop));\n    }\n  }, {\n    key: \"pushClassPrivateProperty\",\n    value: function pushClassPrivateProperty(classBody, prop) {\n      var node = this.parseClassPrivateProperty(prop);\n      classBody.body.push(node);\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }, {\n    key: \"pushClassAccessorProperty\",\n    value: function pushClassAccessorProperty(classBody, prop, isPrivate) {\n      if (!isPrivate && !prop.computed) {\n        var key = prop.key;\n\n        if (key.name === \"constructor\" || key.value === \"constructor\") {\n          this.raise(Errors.ConstructorClassField, {\n            at: key\n          });\n        }\n      }\n\n      var node = this.parseClassAccessorProperty(prop);\n      classBody.body.push(node);\n\n      if (isPrivate) {\n        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n      }\n    }\n  }, {\n    key: \"pushClassMethod\",\n    value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n    }\n  }, {\n    key: \"pushClassPrivateMethod\",\n    value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      var node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n      classBody.body.push(node);\n      var kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n      this.declareClassPrivateMethodInScope(node, kind);\n    }\n  }, {\n    key: \"declareClassPrivateMethodInScope\",\n    value: function declareClassPrivateMethodInScope(node, kind) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n    }\n  }, {\n    key: \"parsePostMemberNameModifiers\",\n    value: function parsePostMemberNameModifiers(methodOrProp) {}\n  }, {\n    key: \"parseClassPrivateProperty\",\n    value: function parseClassPrivateProperty(node) {\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassPrivateProperty\");\n    }\n  }, {\n    key: \"parseClassProperty\",\n    value: function parseClassProperty(node) {\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassProperty\");\n    }\n  }, {\n    key: \"parseClassAccessorProperty\",\n    value: function parseClassAccessorProperty(node) {\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassAccessorProperty\");\n    }\n  }, {\n    key: \"parseInitializer\",\n    value: function parseInitializer(node) {\n      this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n      this.expressionScope.enter(newExpressionScope());\n      this.prodParam.enter(PARAM);\n      node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n      this.expressionScope.exit();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n  }, {\n    key: \"parseClassId\",\n    value: function parseClassId(node, isStatement, optionalId) {\n      var bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n\n        if (isStatement) {\n          this.declareNameFromIdentifier(node.id, bindingType);\n        }\n      } else {\n        if (optionalId || !isStatement) {\n          node.id = null;\n        } else {\n          throw this.raise(Errors.MissingClassName, {\n            at: this.state.startLoc\n          });\n        }\n      }\n    }\n  }, {\n    key: \"parseClassSuper\",\n    value: function parseClassSuper(node) {\n      node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n    }\n  }, {\n    key: \"parseExport\",\n    value: function parseExport(node) {\n      var hasDefault = this.maybeParseExportDefaultSpecifier(node);\n      var parseAfterDefault = !hasDefault || this.eat(12);\n      var hasStar = parseAfterDefault && this.eatExportStar(node);\n      var hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n      var parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n      var isFromRequired = hasDefault || hasStar;\n\n      if (hasStar && !hasNamespace) {\n        if (hasDefault) this.unexpected();\n        this.parseExportFrom(node, true);\n        return this.finishNode(node, \"ExportAllDeclaration\");\n      }\n\n      var hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n      if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n        throw this.unexpected(null, 5);\n      }\n\n      var hasDeclaration;\n\n      if (isFromRequired || hasSpecifiers) {\n        hasDeclaration = false;\n        this.parseExportFrom(node, isFromRequired);\n      } else {\n        hasDeclaration = this.maybeParseExportDeclaration(node);\n      }\n\n      if (isFromRequired || hasSpecifiers || hasDeclaration) {\n        this.checkExport(node, true, false, !!node.source);\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      if (this.eat(65)) {\n        node.declaration = this.parseExportDefaultExpression();\n        this.checkExport(node, true, true);\n        return this.finishNode(node, \"ExportDefaultDeclaration\");\n      }\n\n      throw this.unexpected(null, 5);\n    }\n  }, {\n    key: \"eatExportStar\",\n    value: function eatExportStar(node) {\n      return this.eat(55);\n    }\n  }, {\n    key: \"maybeParseExportDefaultSpecifier\",\n    value: function maybeParseExportDefaultSpecifier(node) {\n      if (this.isExportDefaultSpecifier()) {\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = this.parseIdentifier(true);\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamespaceSpecifier\",\n    value: function maybeParseExportNamespaceSpecifier(node) {\n      if (this.isContextual(93)) {\n        if (!node.specifiers) node.specifiers = [];\n        var specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n        this.next();\n        specifier.exported = this.parseModuleExportName();\n        node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamedSpecifiers\",\n    value: function maybeParseExportNamedSpecifiers(node) {\n      if (this.match(5)) {\n        var _node$specifiers;\n\n        if (!node.specifiers) node.specifiers = [];\n        var isTypeExport = node.exportKind === \"type\";\n\n        (_node$specifiers = node.specifiers).push.apply(_node$specifiers, (0, _toConsumableArray2.default)(this.parseExportSpecifiers(isTypeExport)));\n\n        node.source = null;\n        node.declaration = null;\n\n        if (this.hasPlugin(\"importAssertions\")) {\n          node.assertions = [];\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportDeclaration\",\n    value: function maybeParseExportDeclaration(node) {\n      if (this.shouldParseExportDeclaration()) {\n        node.specifiers = [];\n        node.source = null;\n\n        if (this.hasPlugin(\"importAssertions\")) {\n          node.assertions = [];\n        }\n\n        node.declaration = this.parseExportDeclaration(node);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isAsyncFunction\",\n    value: function isAsyncFunction() {\n      if (!this.isContextual(95)) return false;\n      var next = this.nextTokenStart();\n      return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n    }\n  }, {\n    key: \"parseExportDefaultExpression\",\n    value: function parseExportDefaultExpression() {\n      var expr = this.startNode();\n      var isAsync = this.isAsyncFunction();\n\n      if (this.match(68) || isAsync) {\n        this.next();\n\n        if (isAsync) {\n          this.next();\n        }\n\n        return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n      }\n\n      if (this.match(80)) {\n        return this.parseClass(expr, true, true);\n      }\n\n      if (this.match(26)) {\n        if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n\n        this.parseDecorators(false);\n        return this.parseClass(expr, true, true);\n      }\n\n      if (this.match(75) || this.match(74) || this.isLet()) {\n        throw this.raise(Errors.UnsupportedDefaultExport, {\n          at: this.state.startLoc\n        });\n      }\n\n      var res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }, {\n    key: \"parseExportDeclaration\",\n    value: function parseExportDeclaration(node) {\n      return this.parseStatement(null);\n    }\n  }, {\n    key: \"isExportDefaultSpecifier\",\n    value: function isExportDefaultSpecifier() {\n      var type = this.state.type;\n\n      if (tokenIsIdentifier(type)) {\n        if (type === 95 && !this.state.containsEsc || type === 99) {\n          return false;\n        }\n\n        if ((type === 126 || type === 125) && !this.state.containsEsc) {\n          var _this$lookahead = this.lookahead(),\n              nextType = _this$lookahead.type;\n\n          if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n            this.expectOnePlugin([\"flow\", \"typescript\"]);\n            return false;\n          }\n        }\n      } else if (!this.match(65)) {\n        return false;\n      }\n\n      var next = this.nextTokenStart();\n      var hasFrom = this.isUnparsedContextual(next, \"from\");\n\n      if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n        return true;\n      }\n\n      if (this.match(65) && hasFrom) {\n        var nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n        return nextAfterFrom === 34 || nextAfterFrom === 39;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseExportFrom\",\n    value: function parseExportFrom(node, expect) {\n      if (this.eatContextual(97)) {\n        node.source = this.parseImportSource();\n        this.checkExport(node);\n        var assertions = this.maybeParseImportAssertions();\n\n        if (assertions) {\n          node.assertions = assertions;\n        }\n      } else if (expect) {\n        this.unexpected();\n      }\n\n      this.semicolon();\n    }\n  }, {\n    key: \"shouldParseExportDeclaration\",\n    value: function shouldParseExportDeclaration() {\n      var type = this.state.type;\n\n      if (type === 26) {\n        this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n        if (this.hasPlugin(\"decorators\")) {\n          if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n            throw this.raise(Errors.DecoratorBeforeExport, {\n              at: this.state.startLoc\n            });\n          }\n\n          return true;\n        }\n      }\n\n      return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n    }\n  }, {\n    key: \"checkExport\",\n    value: function checkExport(node, checkNames, isDefault, isFrom) {\n      if (checkNames) {\n        if (isDefault) {\n          this.checkDuplicateExports(node, \"default\");\n\n          if (this.hasPlugin(\"exportDefaultFrom\")) {\n            var _declaration$extra;\n\n            var declaration = node.declaration;\n\n            if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n              this.raise(Errors.ExportDefaultFromAsIdentifier, {\n                at: declaration\n              });\n            }\n          }\n        } else if (node.specifiers && node.specifiers.length) {\n          var _iterator13 = _createForOfIteratorHelper(node.specifiers),\n              _step13;\n\n          try {\n            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n              var specifier = _step13.value;\n              var exported = specifier.exported;\n              var exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n              this.checkDuplicateExports(specifier, exportName);\n\n              if (!isFrom && specifier.local) {\n                var local = specifier.local;\n\n                if (local.type !== \"Identifier\") {\n                  this.raise(Errors.ExportBindingIsString, {\n                    at: specifier,\n                    localName: local.value,\n                    exportName: exportName\n                  });\n                } else {\n                  this.checkReservedWord(local.name, local.loc.start, true, false);\n                  this.scope.checkLocalExport(local);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator13.e(err);\n          } finally {\n            _iterator13.f();\n          }\n        } else if (node.declaration) {\n          if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n            var id = node.declaration.id;\n            if (!id) throw new Error(\"Assertion failure\");\n            this.checkDuplicateExports(node, id.name);\n          } else if (node.declaration.type === \"VariableDeclaration\") {\n            var _iterator14 = _createForOfIteratorHelper(node.declaration.declarations),\n                _step14;\n\n            try {\n              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n                var _declaration = _step14.value;\n                this.checkDeclaration(_declaration.id);\n              }\n            } catch (err) {\n              _iterator14.e(err);\n            } finally {\n              _iterator14.f();\n            }\n          }\n        }\n      }\n\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (currentContextDecorators.length) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n    }\n  }, {\n    key: \"checkDeclaration\",\n    value: function checkDeclaration(node) {\n      if (node.type === \"Identifier\") {\n        this.checkDuplicateExports(node, node.name);\n      } else if (node.type === \"ObjectPattern\") {\n        var _iterator15 = _createForOfIteratorHelper(node.properties),\n            _step15;\n\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var prop = _step15.value;\n            this.checkDeclaration(prop);\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      } else if (node.type === \"ArrayPattern\") {\n        var _iterator16 = _createForOfIteratorHelper(node.elements),\n            _step16;\n\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var elem = _step16.value;\n\n            if (elem) {\n              this.checkDeclaration(elem);\n            }\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      } else if (node.type === \"ObjectProperty\") {\n        this.checkDeclaration(node.value);\n      } else if (node.type === \"RestElement\") {\n        this.checkDeclaration(node.argument);\n      } else if (node.type === \"AssignmentPattern\") {\n        this.checkDeclaration(node.left);\n      }\n    }\n  }, {\n    key: \"checkDuplicateExports\",\n    value: function checkDuplicateExports(node, exportName) {\n      if (this.exportedIdentifiers.has(exportName)) {\n        if (exportName === \"default\") {\n          this.raise(Errors.DuplicateDefaultExport, {\n            at: node\n          });\n        } else {\n          this.raise(Errors.DuplicateExport, {\n            at: node,\n            exportName: exportName\n          });\n        }\n      }\n\n      this.exportedIdentifiers.add(exportName);\n    }\n  }, {\n    key: \"parseExportSpecifiers\",\n    value: function parseExportSpecifiers(isInTypeExport) {\n      var nodes = [];\n      var first = true;\n      this.expect(5);\n\n      while (!this.eat(8)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n          if (this.eat(8)) break;\n        }\n\n        var isMaybeTypeOnly = this.isContextual(126);\n        var isString = this.match(129);\n        var node = this.startNode();\n        node.local = this.parseModuleExportName();\n        nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n      }\n\n      return nodes;\n    }\n  }, {\n    key: \"parseExportSpecifier\",\n    value: function parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n      if (this.eatContextual(93)) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(node.local);\n      } else if (!node.exported) {\n        node.exported = cloneIdentifier(node.local);\n      }\n\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n  }, {\n    key: \"parseModuleExportName\",\n    value: function parseModuleExportName() {\n      if (this.match(129)) {\n        var result = this.parseStringLiteral(this.state.value);\n        var surrogate = result.value.match(loneSurrogate);\n\n        if (surrogate) {\n          this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n            at: result,\n            surrogateCharCode: surrogate[0].charCodeAt(0)\n          });\n        }\n\n        return result;\n      }\n\n      return this.parseIdentifier(true);\n    }\n  }, {\n    key: \"parseImport\",\n    value: function parseImport(node) {\n      node.specifiers = [];\n\n      if (!this.match(129)) {\n        var hasDefault = this.maybeParseDefaultImportSpecifier(node);\n        var parseNext = !hasDefault || this.eat(12);\n        var hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n        if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n        this.expectContextual(97);\n      }\n\n      node.source = this.parseImportSource();\n      var assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      } else {\n        var attributes = this.maybeParseModuleAttributes();\n\n        if (attributes) {\n          node.attributes = attributes;\n        }\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n  }, {\n    key: \"parseImportSource\",\n    value: function parseImportSource() {\n      if (!this.match(129)) this.unexpected();\n      return this.parseExprAtom();\n    }\n  }, {\n    key: \"shouldParseDefaultImport\",\n    value: function shouldParseDefaultImport(node) {\n      return tokenIsIdentifier(this.state.type);\n    }\n  }, {\n    key: \"parseImportSpecifierLocal\",\n    value: function parseImportSpecifierLocal(node, specifier, type) {\n      specifier.local = this.parseIdentifier();\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n  }, {\n    key: \"finishImportSpecifier\",\n    value: function finishImportSpecifier(specifier, type) {\n      this.checkLVal(specifier.local, {\n        in: specifier,\n        binding: BIND_LEXICAL\n      });\n      return this.finishNode(specifier, type);\n    }\n  }, {\n    key: \"parseAssertEntries\",\n    value: function parseAssertEntries() {\n      var attrs = [];\n      var attrNames = new Set();\n\n      do {\n        if (this.match(8)) {\n          break;\n        }\n\n        var node = this.startNode();\n        var keyName = this.state.value;\n\n        if (attrNames.has(keyName)) {\n          this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n            at: this.state.startLoc,\n            key: keyName\n          });\n        }\n\n        attrNames.add(keyName);\n\n        if (this.match(129)) {\n          node.key = this.parseStringLiteral(keyName);\n        } else {\n          node.key = this.parseIdentifier(true);\n        }\n\n        this.expect(14);\n\n        if (!this.match(129)) {\n          throw this.raise(Errors.ModuleAttributeInvalidValue, {\n            at: this.state.startLoc\n          });\n        }\n\n        node.value = this.parseStringLiteral(this.state.value);\n        this.finishNode(node, \"ImportAttribute\");\n        attrs.push(node);\n      } while (this.eat(12));\n\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseModuleAttributes\",\n    value: function maybeParseModuleAttributes() {\n      if (this.match(76) && !this.hasPrecedingLineBreak()) {\n        this.expectPlugin(\"moduleAttributes\");\n        this.next();\n      } else {\n        if (this.hasPlugin(\"moduleAttributes\")) return [];\n        return null;\n      }\n\n      var attrs = [];\n      var attributes = new Set();\n\n      do {\n        var node = this.startNode();\n        node.key = this.parseIdentifier(true);\n\n        if (node.key.name !== \"type\") {\n          this.raise(Errors.ModuleAttributeDifferentFromType, {\n            at: node.key\n          });\n        }\n\n        if (attributes.has(node.key.name)) {\n          this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n            at: node.key,\n            key: node.key.name\n          });\n        }\n\n        attributes.add(node.key.name);\n        this.expect(14);\n\n        if (!this.match(129)) {\n          throw this.raise(Errors.ModuleAttributeInvalidValue, {\n            at: this.state.startLoc\n          });\n        }\n\n        node.value = this.parseStringLiteral(this.state.value);\n        this.finishNode(node, \"ImportAttribute\");\n        attrs.push(node);\n      } while (this.eat(12));\n\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseImportAssertions\",\n    value: function maybeParseImportAssertions() {\n      if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n        this.expectPlugin(\"importAssertions\");\n        this.next();\n      } else {\n        if (this.hasPlugin(\"importAssertions\")) return [];\n        return null;\n      }\n\n      this.eat(5);\n      var attrs = this.parseAssertEntries();\n      this.eat(8);\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseDefaultImportSpecifier\",\n    value: function maybeParseDefaultImportSpecifier(node) {\n      if (this.shouldParseDefaultImport(node)) {\n        this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseStarImportSpecifier\",\n    value: function maybeParseStarImportSpecifier(node) {\n      if (this.match(55)) {\n        var specifier = this.startNode();\n        this.next();\n        this.expectContextual(93);\n        this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseNamedImportSpecifiers\",\n    value: function parseNamedImportSpecifiers(node) {\n      var first = true;\n      this.expect(5);\n\n      while (!this.eat(8)) {\n        if (first) {\n          first = false;\n        } else {\n          if (this.eat(14)) {\n            throw this.raise(Errors.DestructureNamedImport, {\n              at: this.state.startLoc\n            });\n          }\n\n          this.expect(12);\n          if (this.eat(8)) break;\n        }\n\n        var specifier = this.startNode();\n        var importedIsString = this.match(129);\n        var isMaybeTypeOnly = this.isContextual(126);\n        specifier.imported = this.parseModuleExportName();\n        var importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n        node.specifiers.push(importSpecifier);\n      }\n    }\n  }, {\n    key: \"parseImportSpecifier\",\n    value: function parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        var imported = specifier.imported;\n\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, {\n            at: specifier,\n            importName: imported.value\n          });\n        }\n\n        this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n\n        if (!specifier.local) {\n          specifier.local = cloneIdentifier(imported);\n        }\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n  }, {\n    key: \"isThisParam\",\n    value: function isThisParam(param) {\n      return param.type === \"Identifier\" && param.name === \"this\";\n    }\n  }]);\n  return StatementParser;\n}(ExpressionParser);\n\nvar Parser = /*#__PURE__*/function (_StatementParser) {\n  (0, _inherits2.default)(Parser, _StatementParser);\n\n  var _super19 = _createSuper(Parser);\n\n  function Parser(options, input) {\n    var _this64;\n\n    (0, _classCallCheck2.default)(this, Parser);\n    options = getOptions(options);\n    _this64 = _super19.call(this, options, input);\n    _this64.options = options;\n\n    _this64.initializeScopes();\n\n    _this64.plugins = pluginsMap(_this64.options.plugins);\n    _this64.filename = options.sourceFilename;\n    return _this64;\n  }\n\n  (0, _createClass2.default)(Parser, [{\n    key: \"getScopeHandler\",\n    value: function getScopeHandler() {\n      return ScopeHandler;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      this.enterInitialScopes();\n      var file = this.startNode();\n      var program = this.startNode();\n      this.nextToken();\n      file.errors = null;\n      this.parseTopLevel(file, program);\n      file.errors = this.state.errors;\n      return file;\n    }\n  }]);\n  return Parser;\n}(StatementParser);\n\nfunction pluginsMap(plugins) {\n  var pluginMap = new Map();\n\n  var _iterator17 = _createForOfIteratorHelper(plugins),\n      _step17;\n\n  try {\n    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n      var plugin = _step17.value;\n\n      var _ref98 = Array.isArray(plugin) ? plugin : [plugin, {}],\n          _ref99 = (0, _slicedToArray2.default)(_ref98, 2),\n          name = _ref99[0],\n          options = _ref99[1];\n\n      if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n    }\n  } catch (err) {\n    _iterator17.e(err);\n  } finally {\n    _iterator17.f();\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      var parser = getParser(options, input);\n      var ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  var parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  var tokenTypes = {};\n\n  for (var _i6 = 0, _Object$keys4 = Object.keys(internalTokenTypes); _i6 < _Object$keys4.length; _i6++) {\n    var typeName = _Object$keys4[_i6];\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nvar tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  var cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nvar parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  var pluginList = mixinPluginNames.filter(function (name) {\n    return hasPlugin(pluginsFromOptions, name);\n  });\n  var key = pluginList.join(\"/\");\n  var cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    var _iterator18 = _createForOfIteratorHelper(pluginList),\n        _step18;\n\n    try {\n      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n        var plugin = _step18.value;\n        cls = mixinPlugins[plugin](cls);\n      }\n    } catch (err) {\n      _iterator18.e(err);\n    } finally {\n      _iterator18.f();\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babylon7/lib/index.js\n");

/***/ })

}]);